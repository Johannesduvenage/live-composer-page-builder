/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/src/editor/backend/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/src/editor/backend/codegeneration.js":
/*!*************************************************!*\
  !*** ./js/src/editor/backend/codegeneration.js ***!
  \*************************************************/
/*! exports provided: generateSectionCode, editableContentCodeGeneration, codeGenerationInitJS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateSectionCode", function() { return generateSectionCode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editableContentCodeGeneration", function() { return editableContentCodeGeneration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "codeGenerationInitJS", function() { return codeGenerationInitJS; });
/*********************************
 *
 * = CODE GENERATION =
 *
 * - dslc_save_composer ( Save the Page Changes )
 * - dslc_save_draft_composer ( Save the changes as draft, not publish )
 * - dslc_generate_code ( Generates Page's LC data )
 * - generateSectionCode ( Generate LC data for a specific row/section )
 * - dslca_gen_content_for_search ( Generate Readable Content For Search )
 *
 ***********************************/

/**
 * CODE GENERATION - Save Page Changes
 */

var _this = undefined;

function dslc_save_composer() {
  if (window.dslcDebug) console.log('dslc_save_composer');
  /**
   * Before saving code via ajax
   * refresh the page source in a hidden #dslca-code
   */

  window.dslc_generate_code(); // Generate content for search

  dslca_gen_content_for_search(); // Vars

  var composerCode = jQuery('#dslca-code').val(),
      contentForSearch = jQuery('#dslca-content-for-search').val(),
      postID = jQuery('.dslca-container').data('post-id'); // Apply class to body to know saving is in progress

  jQuery('body').addClass('dslca-saving-in-progress'); // Replace the check in publish button with a loading animation

  jQuery('.dslca-save-composer .dslca-icon').removeClass('dslc-icon-ok').addClass('dslc-icon-spin dslc-icon-spinner'); // Ajax call to save the new content

  jQuery.ajax({
    method: 'POST',
    type: 'POST',
    url: DSLCAjax.ajaxurl,
    data: {
      action: 'dslc-ajax-save-composer',
      dslc: 'active',
      dslc_post_id: postID,
      dslc_code: composerCode,
      dslc_content_for_search: contentForSearch
    },
    timeout: 30000
  }).done(function (response) {
    // On success hide the publish button
    if (response.status == 'success') {
      jQuery('.dslca-save-composer').fadeOut(250);
      jQuery('.dslca-save-draft-composer').fadeOut(250); // Create new cache version after it's saved.

      jQuery('body').append('<iframe class="lbmn-cache-iframe" id="lbmn-cache-iframe-' + postID + '" src="' + DSLCSiteData.siteurl + '/?p=' + postID + '" ></iframe>');
      jQuery('.lbmn-cache-iframe').each(function (index, el) {
        jQuery(el).load(function () {
          jQuery(el).remove(); // Cache built at this point. Remove iframe.
        });
      }); // On fail show an alert message
    } else {
      alert('Something went wrong, please try to save again. Are you sure to make any changes? Error Code: ' + response.status);
    }
  }).fail(function (response) {
    if (response.statusText == 'timeout') {
      alert('The request timed out after 30 seconds. Server do not respond in time. Please try again.');
    } else {
      alert('Something went wrong. Please try again. Error Code: ' + response.statusText);
    }
  }).always(function (reseponse) {
    // Replace the loading animation with a check icon
    jQuery('.dslca-save-composer .dslca-icon').removeClass('dslc-icon-spin dslc-icon-spinner').addClass('dslc-icon-ok'); // Remove the class previously added so we know saving is finished

    jQuery('body').removeClass('dslca-saving-in-progress');
  });
}
/**
 * CODE GENERATION - Save Draft
 */


function dslc_save_draft_composer() {
  if (window.dslcDebug) console.log('dslc_save_draft_composer'); // Vars

  var composerCode = jQuery('#dslca-code').val(),
      postID = jQuery('.dslca-container').data('post-id'); // Apply class to body to know saving is in progress

  jQuery('body').addClass('dslca-saving-in-progress'); // Replace the check in publish button with a loading animation

  jQuery('.dslca-save-draft-composer .dslca-icon').removeClass('dslc-icon-ok').addClass('dslc-icon-spin dslc-icon-spinner'); // Ajax call to save the new content

  jQuery.post(DSLCAjax.ajaxurl, {
    action: 'dslc-ajax-save-draft-composer',
    dslc: 'active',
    dslc_post_id: postID,
    dslc_code: composerCode
  }, function (response) {
    // Replace the loading animation with a check icon
    jQuery('.dslca-save-draft-composer .dslca-icon').removeClass('dslc-icon-spin dslc-icon-spinner').addClass('dslc-icon-save'); // On success hide the publish button

    if (response.status == 'success') {
      jQuery('.dslca-save-draft-composer').fadeOut(250); // On fail show an alert message
    } else {
      alert('Something went wrong, please try to save again.');
    } // Remove the class previously added so we know saving is finished


    jQuery('body').removeClass('dslca-saving-in-progress');
  });
}
/**
 * CODE GENERATION - Generate LC Data
 * @param section is not required. If no parameter provided function generates
 */


window.dslc_generate_code = function () {
  if (window.dslcDebug) console.log('dslc_generate_code'); // Vars

  var moduleCode = '',
      module_size,
      composerCode = '',
      pageCodeInJson = '',
      maxPerRow = 12,
      maxPerRowA = 12,
      currPerRow = 0,
      currPerRowA = 0,
      modulesAreaSize,
      modulesArea,
      modulesAreaLastState,
      modulesAreaFirstState,
      modulesSection,
      modulesSectionAtts = '',
      modulesSectionJson;
  /**
   * Go through module areas (empty or not empty)
   * TODO: Optimize code to go though the section/area needed only,
   * not the whole page.
   */

  jQuery('#dslc-main .dslc-modules-area', LiveComposer.Builder.PreviewAreaDocument).each(function () {
    if (jQuery('.dslc-module-front', this).length) {
      jQuery(this).removeClass('dslc-modules-area-empty').addClass('dslc-modules-area-not-empty');
      jQuery('.dslca-no-content', this).hide();
    } else {
      jQuery(this).removeClass('dslc-modules-area-not-empty').addClass('dslc-modules-area-empty');
      jQuery('.dslca-no-content:not(:visible)', this).show().css({
        '-webkit-animation-name': 'dslcBounceIn',
        '-moz-animation-name': 'dslcBounceIn',
        'animation-name': 'dslcBounceIn',
        'animation-duration': '0.6s',
        '-webkit-animation-duration': '0.6s',
        padding: 0
      }).animate({
        padding: '35px 0'
      }, 300);
    }
  });
  /**
   * Go through each row (empty or not empty)
   */

  jQuery('#dslc-main .dslc-modules-section', LiveComposer.Builder.PreviewAreaDocument).each(function () {
    modulesSection = jQuery(this);
    modulesSectionJson = generateSectionCode(modulesSection); // Update JSON in hidden text area with updated code.

    modulesSection.find('.dslca-section-code').val(modulesSectionJson); // Add row code into the the whole page code.

    pageCodeInJson = pageCodeInJson + modulesSectionJson + ','; // Close row ( section ) shortcode
    // composerCode = composerCode + '[/dslc_modules_section] ';
  }); // Remove the last comma in the code.

  pageCodeInJson = pageCodeInJson.slice(0, -1); // pageCodeInJson = pageCodeInJson;

  pageCodeInJson = '[' + pageCodeInJson + ']'; // Apply the new code values to the setting containers

  jQuery('#dslca-code').val(pageCodeInJson);
  jQuery('#dslca-export-code').val(pageCodeInJson);
};
/**
 * CODE GENERATION - Generate LC Data for Section
 *
 * @param  {jQuery Object} theModulesSection jQuery element for the section to process
 * @return {String}                   			JSON code for the section
 */
// ex. dslc_generate_section_code


var generateSectionCode = function generateSectionCode(theModulesSection) {
  if (window.dslcDebug) console.log('generateSectionCode'); // Vars

  var moduleCode = '',
      module_size,
      composerCode = '',
      pageCodeInJson = '',
      maxPerRow = 12,
      maxPerRowA = 12,
      currPerRow = 0,
      currPerRowA = 0,
      modulesAreaSize,
      modulesArea,
      modulesAreaLastState,
      modulesAreaFirstState,
      modulesSection,
      modulesSectionAtts = '',
      modulesSectionJsonString = '',
      modulesSectionJson;
  modulesSection = theModulesSection; // Update dslc-modules-section-(not)empty classes

  if (jQuery('.dslc-modules-area', modulesSection).length) {
    modulesSection.removeClass('dslc-modules-section-empty').addClass('dslc-modules-section-not-empty');
  } else {
    modulesSection.removeClass('dslc-modules-section-not-empty').addClass('dslc-modules-section-empty');
  } // Remove last and first classes from module areas and modules


  jQuery('.dslc-modules-area.dslc-last-col, .dslc-modules-area.dslc-first-col', _this).removeClass('dslc-last-col dslc-first-col');
  jQuery('.dslc-module-front.dslc-last-col, .dslc-module-front.dslc-first-col', _this).removeClass('dslc-last-col dslc-first-col'); // Vars

  currPerRowA = 0; // Get current JSON.

  modulesSectionJsonString = modulesSection.find('.dslca-section-code').val();
  modulesSectionJson = JSON.parse(modulesSectionJsonString); // Generate attributes for the row shortcode

  modulesSectionAtts = '';
  jQuery('.dslca-modules-section-settings input', modulesSection).each(function () {
    var currentInput = jQuery(this);
    var currentAttrKey = currentInput.data('id');
    var currentAttrVal = currentInput.val(); // Update hidden text fields with row attributes.

    modulesSectionAtts = modulesSectionAtts + currentAttrKey + '="' + currentAttrVal + '" '; // Update JSON object.

    modulesSectionJson[currentAttrKey] = currentAttrVal;
  }); // Delete attribute 'give_new_id'.
  // It supposed to be used only once and by this time it was already applied.

  if (undefined !== modulesSectionJson['give_new_id']) {
    delete modulesSectionJson['give_new_id'];
  } // Prepare place for module areas.


  modulesSectionJson['content'] = []; // Open the module section ( row ) shortcode
  // composerCode = composerCode + '[dslc_modules_section ' + modulesSectionAtts + '] ';

  /**
   * Go through each column of current row
   */

  jQuery('.dslc-modules-area', modulesSection).each(function () {
    // Reset width counter for modules
    currPerRow = 0; // Vars

    modulesArea = jQuery(this);
    modulesAreaSize = parseInt(modulesArea.data('size'));
    modulesAreaLastState = 'no';
    modulesAreaFirstState = 'no'; // Increment area column counter

    currPerRowA += modulesAreaSize;
    jQuery(this).removeClass('dslc-first-col');
    jQuery(this).removeClass('dslc-last-col'); // If area column counter same as maximum

    if (currPerRowA == maxPerRowA) {
      // Apply classes to current and next column
      jQuery(this).addClass('dslc-last-col').next('.dslc-modules-area').addClass('dslc-first-col'); // Reset area column counter

      currPerRowA = 0; // Set shortcode's "last" attribute to "yes"

      modulesAreaLastState = 'yes'; // If area column counter bigger than maximum
    } else if (currPerRowA > maxPerRowA) {
      // Apply classes to current and previous column
      jQuery(this).removeClass('dslc-last-col').addClass('dslc-first-col'); // Set area column counter to the size of the current area

      currPerRowA = modulesAreaSize; // Set shortcode's "first" attribute to yes

      modulesAreaFirstState = 'yes';
    } // If area column counter same as current area size


    if (currPerRowA == modulesAreaSize) {
      // Set shortcode's "first" attribute to yes
      modulesAreaFirstState = 'yes'; // Apply classes to current and previous column

      jQuery(this).removeClass('dslc-last-col').addClass('dslc-first-col');
    } // Open the modules area ( area ) shortcode
    // composerCode = composerCode + '[dslc_modules_area last="' + modulesAreaLastState + '" first="' + modulesAreaFirstState + '" size="' + modulesAreaSize + '"] ';


    var moduleAreaJSON = '{"element_type":"module_area","last":"' + modulesAreaLastState + '","first":"' + modulesAreaFirstState + '","size":"' + modulesAreaSize + '"}'; // pageCodeInJson = pageCodeInJson +  moduleAreaJSON + ',';

    moduleAreaJSON = JSON.parse(moduleAreaJSON); // Delete attribute 'give_new_id'.
    // It supposed to be used only once and by this time it was already applied.

    if (undefined !== moduleAreaJSON['give_new_id']) {
      delete moduleAreaJSON['give_new_id'];
    }

    moduleAreaJSON.content = [];
    /**
     * Go through each module of current area
     */

    jQuery('.dslc-module-front', modulesArea).each(function () {
      var dslc_module = jQuery(this); // Vars

      module_size = parseInt(dslc_module[0].getAttribute('data-dslc-module-size'));
      var moduleLastState = 'no';
      var moduleFirstState = 'no';
      jQuery(this).removeClass('dslc-first-col');
      jQuery(this).removeClass('dslc-last-col'); // Increment modules column counter

      currPerRow += module_size; // If modules column counter same as maximum

      if (currPerRow == maxPerRow) {
        // Add classes to current and next module
        jQuery(this).addClass('dslc-last-col');
        jQuery(this).next('.dslc-module-front').addClass('dslc-first-col'); // Reset modules column counter

        currPerRow = 0; // Set shortcode's "last" state to "yes"

        moduleLastState = 'yes'; // Set shorcode's "first" state to "yes"

        moduleFirstState = 'yes'; // If modules column counter bigger than maximum
      } else if (currPerRow > maxPerRow) {
        // Add classes to current and previous module
        jQuery(this).removeClass('dslc-last-col').addClass('dslc-first-col'); // Set modules column counter to the size of current module

        currPerRow = module_size; // Set shortcode's "first" state to "yes"

        moduleFirstState = 'yes';
      } // If modules column counter same as current module size


      if (currPerRow == module_size) {
        // Set shortcode's "first" attribute to yes
        moduleFirstState = 'yes'; // Apply classes to current and previous column

        jQuery(this).removeClass('dslc-last-col').addClass('dslc-first-col');
      }

      try {
        // Get module's LC data
        moduleCode = dslc_module[0].querySelector('.dslca-module-code').value;
      } catch (err) {
        console.info('No DSLC code found in module: ' + dslc_module[0].getAttribute('id'));
      }

      if ('' !== moduleCode) {
        // Add the module shortcode containing the data
        // composerCode = composerCode + '[dslc_module last="' + moduleLastState + '"]' + moduleCode + '[/dslc_module] ';
        var moduleCodeJSON = JSON.parse(moduleCode); // Add idicator for the last module in the row.

        moduleCodeJSON.last = moduleLastState; // RAW CODE CLEANUP: Clean the module code from keys with empty values.

        jQuery.each(moduleCodeJSON, function (index, el) {
          if (false === el || '' === el) {
            delete moduleCodeJSON[index];
          }

          if ('content' === index) {
            moduleCodeJSON[index] = el.replace(/\\'/g, "'");
          }

          if ('give_new_id' === index) {
            delete moduleCodeJSON[index];
          }
        }); // Put optimized code back into the hidden textarea.

        dslc_module[0].querySelector('.dslca-module-code').value = JSON.stringify(moduleCodeJSON); // Add the module JSON as array item

        moduleAreaJSON['content'].push(moduleCodeJSON);
      } // Fix bug with modules duplication if broken module saved.


      moduleCode = '';
    });
    modulesSectionJson['content'].push(moduleAreaJSON); // Close area shortcode
    // composerCode = composerCode + '[/dslc_modules_area] ';
  });
  var generatedCode = JSON.stringify(modulesSectionJson);
  return generatedCode;
};
/**
 * CODE GENERATION - Document Ready
 */

var setEventListeners = function setEventListeners() {
  /**
   * Hook - Save Page
   */
  jQuery(document).on('click', '.dslca-save-composer-hook', function (e) {
    e.preventDefault();
    console.log("dslca-save-composer-hook"); // If some saving action not already in progress

    if (!jQuery('body').hasClass('dslca-module-saving-in-progress') && !jQuery('body').hasClass('dslca-saving-in-progress')) {
      // Call the function to save
      dslc_save_composer();
    }
  });
  /**
   * Hook - Save Draft
   */

  jQuery(document).on('click', '.dslca-save-draft-composer-hook', function (e) {
    e.preventDefault(); // If some saving action not already in progress

    if (!jQuery('body').hasClass('dslca-module-saving-in-progress') && !jQuery('body').hasClass('dslca-saving-in-progress')) {
      // Call the function to save
      dslc_save_draft_composer();
    }
  });
};
/**
* Other - Generate Readable Content For Search
*/


function dslca_gen_content_for_search() {
  if (window.dslcDebug) console.log('dslca_gen_content_for_search'); // Vars

  var holder = document.getElementById('dslca-content-for-search');

  if (null === holder) {
    return;
  }

  var prevContent = holder.value;
  var content = ''; // Go through each content element

  var elements = LiveComposer.Builder.PreviewAreaWindow.document.querySelectorAll('#dslc-main .dslc-module-front [data-exportable-content]');

  if (undefined !== elements) {
    Array.prototype.forEach.call(elements, function (el, i) {
      // el - current DOM element, i – counter
      var extracted_html_code;

      if (el.getAttribute('data-exportable-content') !== '') {
        var wrapper_tag = el.getAttribute('data-exportable-content');
        extracted_html_code = '<' + wrapper_tag + '>' + el.innerHTML + '</' + wrapper_tag + '>';
      } else {
        extracted_html_code = el.innerHTML;
      }

      if (extracted_html_code !== null) {
        content += extracted_html_code.replace(/\s+/g, ' ').trim() + '\n';
      }
    });
  } // Set the value of the content field


  holder.value = content; // Used to show the publish button for pages made before this feature

  if (prevContent !== content) {
    window.dslc_show_publish_button();
  }
}
/**
 * Other - Generate code of editable content
 */


var editableContentCodeGeneration = function editableContentCodeGeneration(dslcField) {
  if (window.dslcDebug) console.log('editableContentCodeGeneration'); // In some rare cases we have the next error:
  // TypeError: undefined is not an object (evaluating 'dslcField.html().trim()...')

  if (undefined === dslcField) {
    return false;
  }

  var dslcModule, dslcContent, dslcFieldID;
  dslcModule = dslcField.closest('.dslc-module-front');
  dslcContent = dslcField.html().trim().replace(/<textarea/g, '<lctextarea').replace(/<\/textarea/g, '</lctextarea');
  dslcFieldID = dslcField.data('id');
  jQuery('.dslca-module-option-front[data-id="' + dslcFieldID + '"]', dslcModule).val(dslcContent);
};
var codeGenerationInitJS = function codeGenerationInitJS() {
  setEventListeners();
};

/***/ }),

/***/ "./js/src/editor/backend/dragndrop.js":
/*!********************************************!*\
  !*** ./js/src/editor/backend/dragndrop.js ***!
  \********************************************/
/*! exports provided: dragAndDropInit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dragAndDropInit", function() { return dragAndDropInit; });
/* harmony import */ var _module_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./module.js */ "./js/src/editor/backend/module.js");
/* harmony import */ var sortablejs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sortablejs */ "./node_modules/sortablejs/modular/sortable.esm.js");
/**
 * UI - General - Initiate Drag and Drop Functonality
 */


var dragAndDropInit = function dragAndDropInit() {
  if (window.dslcDebug) console.log('dslc_drag_and_drop');
  var modulesSection, modulesArea, moduleID, moduleOutput; // Drag and Drop for module icons from the list of modules

  var modules_list = jQuery('.dslca-modules .dslca-section-scroller-content'); // Groups that can hold modules
  // jQuery(modules_list).each(function (i,e) {

  if (modules_list.length == 0) {
    modules_list = [document.createElement('div')];
  }

  var modules_list_sortable = sortablejs__WEBPACK_IMPORTED_MODULE_1__["default"].create(modules_list[0], {
    sort: false,
    // do not allow sorting inside the list of modules
    group: {
      name: 'modules',
      pull: 'clone',
      put: false
    },
    animation: 150,
    handle: '.dslca-module',
    draggable: '.dslca-module',
    // ghostClass: 'dslca-module-placeholder',
    chosenClass: 'dslca-module-dragging',
    scroll: true,
    // or HTMLElement
    scrollSensitivity: 150,
    // px, how near the mouse must be to an edge to start scrolling.
    scrollSpeed: 15,
    // px
    setData: function setData(dataTransfer, dragEl) {
      //dragEl – contains html of the draggable element like:
      //<div class="dslca-module dslca-scroller-item dslca-origin dslca-origin-General" data-id="DSLC_Button" data-origin="General" draggable="false" style="">
      // dataTransfer.setData('Text', dragEl.textContent);
      dataTransfer.setData(LiveComposer.Utils.msieversion() !== false ? 'Text' : 'text/html', dragEl.innerHTML);
    },
    // dragging started
    onStart: function onStart(
    /**Event*/
    evt) {
      evt.oldIndex; // element index within parent
      // jQuery( '.dslc-modules-area' ).sortable( "refreshPositions" );

      jQuery('body').removeClass('dslca-new-module-drag-not-in-progress').addClass('dslca-new-module-drag-in-progress');
      jQuery('body', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-new-module-drag-not-in-progress').addClass('dslca-new-module-drag-in-progress');
      jQuery('#dslc-header').addClass('dslca-header-low-z-index');
    },
    // dragging ended
    onEnd: function onEnd(
    /**Event*/
    evt) {
      evt.oldIndex; // element's old index within parent

      evt.newIndex; // element's new index within parent

      var itemEl = evt.item; // dragged HTML

      evt.preventDefault(); // evt.stopPropagation();
      //return false;
      // Prevent drop into modules listing

      if (jQuery(itemEl).closest('.dslca-section-scroller-content').length > 0) return false;
      jQuery('.dslca-options-hovered', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-options-hovered'); // Vars

      modulesArea = jQuery(itemEl.parentNode); //jQuery(this);

      moduleID = itemEl.dataset.id; // get value of data-id attr.

      window.dslc_generate_code();

      if (moduleID == 'DSLC_M_A' || jQuery('body').hasClass('dslca-module-drop-in-progress') || modulesArea.closest('#dslc-header').length || modulesArea.closest('#dslc-footer').length) {// nothing
      } else {
        jQuery('body').addClass('dslca-module-drop-in-progress'); // Add padding to modules area

        /*
        if ( modulesArea.hasClass('dslc-modules-area-not-empty') )
        	modulesArea.animate({ paddingBottom : 50 }, 150);
        */
        // TODO: Optimize expensive ajax call in this function!
        // Load Output

        Object(_module_js__WEBPACK_IMPORTED_MODULE_0__["moduleOutputDefault"])(moduleID, function (response) {
          // Append Content
          moduleOutput = response.output; // Remove extra padding from area
          // modulesArea.css({ paddingBottom : 0 });
          // Add output
          // TODO: optimize jQuery in the string below

          var dslcJustAdded = LiveComposer.Builder.Helpers.insertModule(moduleOutput, jQuery('.dslca-module', modulesArea));
          setTimeout(function () {
            LiveComposer.Builder.PreviewAreaWindow.dslc_masonry();
            jQuery('body').removeClass('dslca-module-drop-in-progress');
          }, 700); // "Show" no content text // Not used anymore?
          // jQuery('.dslca-no-content-primary', modulesArea ).css({ opacity : 1 });
          // "Show" modules area management

          jQuery('.dslca-modules-area-manage', modulesArea).css({
            visibility: 'visible'
          }); // Generete

          LiveComposer.Builder.PreviewAreaWindow.dslc_carousel();
          LiveComposer.Builder.PreviewAreaWindow.dslc_tabs();
          LiveComposer.Builder.PreviewAreaWindow.dslc_init_accordion();
          window.dslc_generate_code(); // Show publish

          window.dslc_show_publish_button(); // LiveComposer.Builder.UI.initInlineEditors();
        }); // Loading animation
        // Show loader – Not used anymore.
        // jQuery('.dslca-module-loading', modulesArea).show();
        // Change module icon to the spinning loader.

        jQuery(itemEl).find('.dslca-icon').attr('class', '').attr('class', 'dslca-icon dslc-icon-refresh dslc-icon-spin'); // Hide no content text // Not used anymore?
        // jQuery('.dslca-no-content-primary', modulesArea).css({ opacity : 0 });
        // Hide modules area management

        jQuery('.dslca-modules-area-manage', modulesArea).css({
          visibility: 'hidden'
        }); // Animate loading

        /*
        var randomLoadingTime = Math.floor(Math.random() * (100 - 50 + 1) + 50) * 100;
        jQuery('.dslca-module-loading-inner', modulesArea).css({ width : 0 }).animate({
        	width : '100%'
        }, randomLoadingTime, 'linear' );
        */
      }

      LiveComposer.Builder.UI.stopScroller();
      jQuery('body').removeClass('dslca-new-module-drag-in-progress').addClass('dslca-new-module-drag-not-in-progress');
      jQuery('body', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-new-module-drag-in-progress').addClass('dslca-new-module-drag-not-in-progress');
      jQuery('#dslc-header').removeClass('dslca-header-low-z-index');
    },
    // Element is dropped into the list from another list
    onAdd: function onAdd(
    /**Event*/
    evt) {
      var itemEl = evt.item; // dragged HTMLElement

      evt.from; // previous list
      // + indexes from onEnd
      // evt.preventDefault();
    },
    // Changed sorting within list
    onUpdate: function onUpdate(
    /**Event*/
    evt) {
      var itemEl = evt.item; // dragged HTMLElement
      // + indexes from onEnd

      window.dslc_show_publish_button(); // evt.preventDefault();
    },
    // Called by any change to the list (add / update / remove)
    onSort: function onSort(
    /**Event*/
    evt) {
      // same properties as onUpdate
      evt.preventDefault(); // evt.stopPropagation(); return false;
    },
    // Element is removed from the list into another list
    onRemove: function onRemove(
    /**Event*/
    evt) {// same properties as onUpdate
    },
    // Attempt to drag a filtered element
    onFilter: function onFilter(
    /**Event*/
    evt) {
      var itemEl = evt.item; // HTMLElement receiving the `mousedown|tapstart` event.
    },
    // Event when you move an item in the list or between lists
    onMove: function onMove(
    /**Event*/
    evt) {
      // Example: http://jsbin.com/tuyafe/1/edit?js,output
      evt.dragged; // dragged HTMLElement

      evt.draggedRect; // TextRectangle {left, top, right и bottom}

      evt.related; // HTMLElement on which have guided

      evt.relatedRect; // TextRectangle
      // return false; — for cancel

      jQuery(evt.to).addClass('dslca-options-hovered');
    }
  });
};

/***/ }),

/***/ "./js/src/editor/backend/events.js":
/*!*****************************************!*\
  !*** ./js/src/editor/backend/events.js ***!
  \*****************************************/
/*! exports provided: eventsInit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eventsInit", function() { return eventsInit; });
/**
 * The place to do all the events bindings.
 */
var eventsInit = function eventsInit() {
  console.log("eventsInit:"); // Parent page events.

  document.addEventListener('click', function (event) {
    console.log("PARENT event.target:");
    console.log(event.target);

    if (event.target.matches('[data-event="modal-wysiwyg-cancel"]')) {
      // Create a new "Modal Cancel" event
      var modalWysiwygCancel = new CustomEvent('modalWysiwygCancel', {
        detail: event.target
      });
      document.dispatchEvent(modalWysiwygCancel);
    }

    if (event.target.matches('[data-event="modal-wysiwyg-confirm"]')) {
      // Create a new "Modal Cancel" event
      var modalWysiwygConfirm = new CustomEvent('modalWysiwygConfirm', {
        detail: event.target
      });
      document.dispatchEvent(modalWysiwygConfirm);
    }
  }, false); // Preview iframe events.

  LiveComposer.Builder.PreviewAreaWindow.document.addEventListener('click', function (event) {
    event.preventDefault();
    console.log("iFRAME event.target:");
    console.log(event.target);

    if (event.target.matches('[data-event="module-edit"]')) {
      // Create a new "Open Module Editing" event
      var moduleEdit = new CustomEvent('moduleEdit', {
        detail: event.target
      });
      document.dispatchEvent(moduleEdit);
    }

    if (event.target.matches('[data-event="module-duplicate"]')) {
      // Create a new "Duplicate Module" event
      var moduleDuplicate = new CustomEvent('moduleDuplicate', {
        detail: event.target
      });
      document.dispatchEvent(moduleDuplicate);
    }

    if (event.target.matches('[data-event="module-delete"]')) {
      // Create a new "Delete Module" event
      var moduleDelete = new CustomEvent('moduleDelete', {
        detail: event.target
      });
      document.dispatchEvent(moduleDelete);
    }

    if (event.target.matches('.dslca-change-width-module-options [data-size]')) {
      // Create a new "Change Module Width" event
      var moduleChangeWidth = new CustomEvent('moduleChangeWidth', {
        detail: event.target
      });
      document.dispatchEvent(moduleChangeWidth);
    }

    if (event.target.matches('[data-event="wysiwyg-edit"]')) {
      // Create a new "Module WYSIWYG Editing" event
      var wysiwygEdit = new CustomEvent('wysiwygEdit', {
        detail: event.target
      });
      document.dispatchEvent(wysiwygEdit);
    }
  }, false);
};

/***/ }),

/***/ "./js/src/editor/backend/index.js":
/*!****************************************!*\
  !*** ./js/src/editor/backend/index.js ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _templates_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./templates.js */ "./js/src/editor/backend/templates.js");
/* harmony import */ var _uigeneral_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./uigeneral.js */ "./js/src/editor/backend/uigeneral.js");
/* harmony import */ var _sectionscontainer_class_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sectionscontainer.class.js */ "./js/src/editor/backend/sectionscontainer.class.js");
/* harmony import */ var _settings_panel_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./settings.panel.js */ "./js/src/editor/backend/settings.panel.js");
/* harmony import */ var _sections_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sections.js */ "./js/src/editor/backend/sections.js");
/* harmony import */ var _dragndrop_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dragndrop.js */ "./js/src/editor/backend/dragndrop.js");
/* harmony import */ var _codegeneration_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./codegeneration.js */ "./js/src/editor/backend/codegeneration.js");
/* harmony import */ var _scroller_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./scroller.js */ "./js/src/editor/backend/scroller.js");
/* harmony import */ var _utils_class_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.class.js */ "./js/src/editor/backend/utils.class.js");
/* harmony import */ var _modalwindow_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modalwindow.js */ "./js/src/editor/backend/modalwindow.js");
/* harmony import */ var _module_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./module.js */ "./js/src/editor/backend/module.js");
/* harmony import */ var _presets_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./presets.js */ "./js/src/editor/backend/presets.js");
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./events.js */ "./js/src/editor/backend/events.js");
/**
 * Main builder file
 */













var dslcDebug = false; // dslcDebug = true;
// Global Plugin Object

window.LiveComposer = {
  Builder: {
    Elements: {},
    UI: {},
    Actions: {},
    Flags: {},
    PreviewFrame: {},
    Helpers: {}
  },
  Production: {},
  Utils: {}
};

(function () {
  LiveComposer.Builder.Flags = {
    windowScroller: false,
    panelOpened: false,
    // Settings panel opened
    uiHidden: false,
    // ex composer-hidden
    modalOpen: false,
    // Used to prevent multiple code generation when
    // cancelling row edits
    generate_code_after_row_changed: true
  };
  LiveComposer.Builder.Actions = {
    postponed_actions_queue: {},
    add_postponed_action: function add_postponed_action(action_name) {
      if (action_name === undefined) {
        return;
      }

      if (isNaN(this.postponed_actions_queue[action_name])) {
        this.postponed_actions_queue[action_name] = 0;
      }

      this.postponed_actions_queue[action_name] += 1;
    },
    release_postponed_actions: function release_postponed_actions() {
      var self = this;
      jQuery.each(this.postponed_actions_queue, function (index, value) {
        if (1 < value) {
          self.postponed_actions_queue[index] -= 1;
        } else if (1 == value) {
          window[index](); // Run function with action name

          self.postponed_actions_queue[index] -= 1;
        }
      });
    },
    // LiveComposer.Builder.Actions.optionsChanged() - if calling from parent.
    // parent.LiveComposer.Builder.Actions.optionsChanged() - if calling from iframe.
    optionsChanged: function optionsChanged() {
      window.dslc_show_publish_button();
    }
    /**
     * Inserts module fixing inline scripts bug
     *
     * @param {string} moduleHTML
     * @param {string} afterObject after what module should be inserted
     *
     * @return {DOM} inserted object
     */

  };

  LiveComposer.Builder.Helpers.insertModule = function (moduleHTML, afterObject) {
    var newModule = jQuery(moduleHTML),
        afterObject = jQuery(afterObject);
    var scripts = [];
    newModule.find('script').each(function () {
      scripts.push(this.innerHTML);
      this.parentNode.removeChild(this);
    }); // Insert 'updated' module output after module we are editing.
    // && Delete 'old' instance of the module we are editing.

    afterObject.after(newModule).remove();
    scripts.forEach(function (item) {
      var script = LiveComposer.Builder.PreviewAreaDocument[0].createElement('script');
      script.innerHTML = item;
      script.type = 'text/javascript';
      LiveComposer.Builder.PreviewAreaDocument[0].getElementById(newModule[0].id).appendChild(script);
    });
    scripts = null;
    afterObject = null;
    return newModule;
  };
})();
/** Wait till tinyMCE loaded */


window.previewAreaTinyMCELoaded = function (windowObj) {
  console.log("window.previewAreaTinyMCELoaded!");
  LiveComposer.Builder.PreviewAreaWindow = windowObj;
  LiveComposer.Builder.PreviewAreaDocument = jQuery(windowObj.document); // Disable WP admin bar in editing mode

  jQuery('#wpadminbar', LiveComposer.Builder.PreviewAreaDocument).remove(); // LiveComposer.Builder.UI.initInlineEditors();

  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_1__["fixContenteditable"])();
  Object(_templates_js__WEBPACK_IMPORTED_MODULE_13__["templatesPanelInit"])();
  Object(_settings_panel_js__WEBPACK_IMPORTED_MODULE_3__["settingsPanelInit"])();
  Object(_sections_js__WEBPACK_IMPORTED_MODULE_4__["sectionsInit"])();
  var mainDraggable = LiveComposer.Builder.PreviewAreaDocument.find("#dslc-main").eq(0)[0];
  new _sectionscontainer_class_js__WEBPACK_IMPORTED_MODULE_2__["CSectionsContainer"](mainDraggable);
  jQuery(document).trigger('editorFrameLoaded');
  Object(_dragndrop_js__WEBPACK_IMPORTED_MODULE_5__["dragAndDropInit"])();
  Object(_codegeneration_js__WEBPACK_IMPORTED_MODULE_6__["codeGenerationInitJS"])();
  window.dslc_generate_code(); // Catch keypress events (from both parent and iframe) to add keyboard support

  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_1__["keypressEvents"])();
  Object(_scroller_js__WEBPACK_IMPORTED_MODULE_7__["initPreviewAreaScroller"])();
  Object(_modalwindow_js__WEBPACK_IMPORTED_MODULE_9__["modalwindowInitJS"])();
  Object(_module_js__WEBPACK_IMPORTED_MODULE_10__["moduleInitJS"])();
  Object(_utils_class_js__WEBPACK_IMPORTED_MODULE_8__["untilsInitJs"])();
  Object(_presets_js__WEBPACK_IMPORTED_MODULE_11__["presetsInit"])();
  Object(_events_js__WEBPACK_IMPORTED_MODULE_12__["eventsInit"])();
}; // Disable the prompt ( are you sure ) on refresh


window.onbeforeunload = function () {
  return;
};

/***/ }),

/***/ "./js/src/editor/backend/modalwindow.class.js":
/*!****************************************************!*\
  !*** ./js/src/editor/backend/modalwindow.class.js ***!
  \****************************************************/
/*! exports provided: CModalWindow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CModalWindow", function() { return CModalWindow; });
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Modal Window Class file
 */

/**
 * Shows modal window
 *
 * @param {object} params
 * @params.title         {string} - modal window title
 * @params.content       {string}- modal window description
 * @params.confirm       {function} - modal window confirm action
 * @params.cancel        {function} - modal window cancel action
 * @params.cancel_title  {string} - modal window cancel title
 * @params.confirm_title {string} - modal window confirm title
 * @params.ok_title {string} - modal window OK title
 */
var CModalWindow = function CModalWindow(params) {
  if (_typeof(params) != 'object' || LiveComposer.Builder.Flags.modalOpen === true) return false;
  var self = this; // Show Modal Window

  var modalWindowWrap = '<div class="dslca-prompt-modal dslca-prompt-modal-active">' + '<div class="dslca-prompt-modal-content"><div class="dslca-prompt-modal-msg">' + '<span class="dslca-prompt-modal-title">' + params.title + '</span>' + '<span class="dslca-prompt-modal-descr">' + params.content + '</span></div>';
  var modalWindowActions = '';

  if (params.confirm || params.cancel) {
    modalWindowActions = '<div class="dslca-prompt-modal-actions">' + '<a href="#" class="dslca-prompt-modal-confirm-hook"><span class="dslc-icon dslc-icon-ok">' + '</span>' + (params.confirm_title ? params.confirm_title : 'Confirm') + '</a><span class="dslca-prompt-modal-cancel-hook"><span class="dslc-icon dslc-icon-remove">' + '</span>' + (params.cancel_title ? params.cancel_title : 'Cancel') + '</span></div>';
  } else {
    modalWindowActions = '<div class="dslca-prompt-modal-actions">' + '<a href="#" class="dslca-prompt-modal-confirm-hook"><span class="dslc-icon dslc-icon-ok">' + '</span>' + (params.ok_title ? params.ok_title : 'OK') + '</a></div>';
  }

  modalWindowWrap += modalWindowActions + '</div>';
  modalWindowWrap = jQuery(modalWindowWrap);
  if (typeof params.confirm != 'function') params.confirm = function () {};
  if (typeof params.cancel != 'function') params.cancel = function () {}; // Confirm handler (function)

  modalWindowWrap.find('.dslca-prompt-modal-confirm-hook').click(function (e) {
    e.stopPropagation();
    modalWindowWrap.find('.dslca-prompt-modal-content').animate({
      top: '55%'
    }, 400);
    modalWindowWrap.animate({
      opacity: 0
    }, 400, function () {
      params.confirm();
      LiveComposer.Builder.Flags.modalOpen = false;
      jQuery(this).remove(); // – moved here as it prevent some JS to get value on time
    });
    return false;
  }); // Cancel handler (function)

  modalWindowWrap.find('.dslca-prompt-modal-cancel-hook').click(function (e) {
    e.stopPropagation();
    modalWindowWrap.find('.dslca-prompt-modal-content').animate({
      top: '55%'
    }, 400);
    modalWindowWrap.animate({
      opacity: 0
    }, 400, function () {
      jQuery(this).remove();
      LiveComposer.Builder.Flags.modalOpen = false;
      params.cancel();
    });
    return false;
  });
  modalWindowWrap.hide();
  jQuery("body").append(modalWindowWrap);
  modalWindowWrap.css({
    opacity: 0
  }).show().animate({
    opacity: 1
  }, 400); // Animate modal

  modalWindowWrap.find('.dslca-prompt-modal-content').css({
    top: '55%'
  }).animate({
    top: '50%'
  }, 400);
  LiveComposer.Builder.Flags.modalOpen = true;
};

/***/ }),

/***/ "./js/src/editor/backend/modalwindow.js":
/*!**********************************************!*\
  !*** ./js/src/editor/backend/modalwindow.js ***!
  \**********************************************/
/*! exports provided: hideModal, confirmClose, modalwindowInitJS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hideModal", function() { return hideModal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "confirmClose", function() { return confirmClose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modalwindowInitJS", function() { return modalwindowInitJS; });
/* harmony import */ var _codegeneration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codegeneration.js */ "./js/src/editor/backend/codegeneration.js");
/*********************************
 *
 * = UI - MODAL =
 * Note: Used for the templates save/export/import and icons
 *
 * - dslc_show_modal ( Show Modal )
 * - dslc_hide_modal ( Hide Modal )
 *
 ***********************************/

/**
 * MODAL - Show
 *
 * @param {Object} hook - Button that was clicked to open modal
 * @param {string} modal - CSS address of the modal, like '.modal-icons'
 */

function dslc_show_modal(hook, modal) {
  if (typeof dslcDebug !== 'undefined' && dslcDebug) console.log('dslc_show_modal');

  if (jQuery('.dslca-modal:visible').length) {
    // If a modal already visibile hide it
    hideModal('', jQuery('.dslca-modal:visible'));
  } // Vars


  var modal = jQuery(modal); // Calc popup height

  var containerHeight = jQuery('.dslca-container').height();
  modal.outerHide({
    clbk: function clbk() {
      hideModal('', jQuery('.dslca-modal:visible'));
    }
  }); // Vars ( Calc Offset )

  var position = jQuery(hook).position(),
      diff = modal.outerWidth() / 2 - hook.outerWidth() / 2,
      offset = position.left - diff; // Show Modal

  modal.css({
    left: offset
  });
  jQuery(".dslca-prompt-modal-custom").insertAfter(modal);

  if (jQuery(".dslca-prompt-modal-custom").length > 0) {
    jQuery(".dslca-prompt-modal-custom").fadeIn();
  }

  modal.addClass('dslca-modal-open').show(); // Animate Modal
  // modal.css({
  // '-webkit-animation-name' : 'dslcBounceIn',
  // '-moz-animation-name' : 'dslcBounceIn',
  // 'animation-name' : 'dslcBounceIn',
  // 'animation-duration' : '0.6s',
  // '-webkit-animation-duration' : '0.6s'
  // }).fadeIn(600);
}
/**
 * MODAL - Hide
 */
// ex. dslc_hide_modal


var hideModal = function hideModal(hook, modal) {
  if (typeof dslcDebug !== 'undefined' && dslcDebug) console.log('hideModal'); // Vars

  var modal = jQuery(modal); // Hide ( with animation )

  modal.outerHide('destroy');
  modal.hide();

  if (jQuery(".dslca-prompt-modal-custom").length > 0) {
    jQuery(".dslca-prompt-modal-custom").fadeOut();
  }

  modal.removeClass('dslca-modal-open');
  /*
  modal.css({
  	'-webkit-animation-name' : 'dslcBounceOut',
  	'-moz-animation-name' : 'dslcBounceOut',
  	'animation-name' : 'dslcBounceOut',
  	'animation-duration' : '0.6s',
  	'-webkit-animation-duration' : '0.6s'
  }).fadeOut(600);
  */
}; // Hide if clicked outside of modal

/*jQuery(document).mouseup(function (e) {
		var container = jQuery(".dslca-modal-open");

		if (!container.is(e.target) // if the target of the click isn't the container...
		&& container.has(e.target).length === 0) // ... nor a descendant of the container
		{
		container.hide();
		}
});*/

/**
 * MODAL - Document Ready
 */

jQuery(document).ready(function ($) {
  /**
   * Hook - Show Modal
   */
  jQuery(document).on('click', '.dslca-open-modal-hook', function (e) {
    e.preventDefault();
    var modal = jQuery(this).data('modal');
    dslc_show_modal(jQuery(this), modal);
  });
  /**
   * Hook - Hide Modal
   */

  jQuery(document).on('click', '.dslca-close-modal-hook', function (e) {
    e.preventDefault();

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      var modal = jQuery(this).data('modal');
      hideModal(jQuery(this), modal);
    }
  });
});
/*********************************
 *
 * 5) = UI - PROMPT MODAL =
 *
 * - dslc_js_confirm
 * - dslc_js_confirm_close
 *
 ***********************************/

function dslc_js_confirm(dslcID, dslcContent, dslcTarget) {
  if (typeof dslcDebug !== 'undefined' && dslcDebug) console.log('dslc_js_confirm'); // Add "active" class

  jQuery('.dslca-prompt-modal').addClass('dslca-prompt-modal-active'); // Add the ID of current event

  jQuery('.dslca-prompt-modal').data('id', dslcID);
  jQuery('.dslca-prompt-modal').data('target', dslcTarget); // Add modal content

  jQuery('.dslca-prompt-modal-msg').html(dslcContent); // Show modal

  jQuery('.dslca-prompt-modal').css({
    opacity: 0
  }).show().animate({
    opacity: 1
  }, 400); // Animate modal

  jQuery('.dslca-prompt-modal-content').css({
    top: '55%'
  }).animate({
    top: '50%'
  }, 400);
} // ex. dslc_js_confirm_close


var confirmClose = function confirmClose() {
  if (typeof dslcDebug !== 'undefined' && dslcDebug) console.log('dslc_js_confirm_close'); // Remove "active" class

  jQuery('.dslca-prompt-modal').removeClass('dslca-prompt-modal-active'); // Hide modal

  jQuery('.dslca-prompt-modal').animate({
    opacity: 0
  }, 400, function () {
    jQuery(this).hide();
    jQuery('.dslca-prompt-modal-cancel-hook').show();
    jQuery('.dslca-prompt-modal-confirm-hook').html('<span class="dslc-icon dslc-icon-ok"></span>' + DSLCString.str_confirm);
  });
  jQuery('.dslca-prompt-modal-content').animate({
    top: '55%'
  }, 400);
};
/**
 * Hook - Confirm on Enter, Cancel on Esc
 */

window.dslc_modal_keypress_events = function dslc_modal_keypress_events(e) {
  // Enter ( confirm )
  if (e.which == 13) {
    if (jQuery('.dslca-prompt-modal-active').length) {
      jQuery('.dslca-prompt-modal-confirm-hook').trigger('click');
    } // Escape ( cancel )

  } else if (e.which == 27) {
    if (jQuery('.dslca-prompt-modal-active').length) {
      jQuery('.dslca-prompt-modal-cancel-hook').trigger('click');
    }
  }
};
/**
 * UI - PROMPT MODAL - Document Ready
 */


jQuery(document).ready(function ($) {
  jQuery(document).on('click', '.dslca-prompt-modal-cancel-hook', function (e) {
    e.preventDefault();
    var dslcAction = jQuery('.dslca-prompt-modal').data('id');
    var dslcTarget = jQuery('.dslca-prompt-modal').data('target');

    if (dslcAction == 'edit_in_progress') {
      /// MOVED
      dslc_module_options_cancel_changes(function () {
        dslcTarget.trigger('click');
      });
    } else if (dslcAction == 'delete_module') {}

    confirmClose();
    jQuery('.dslca-prompt-modal').data('id', '');
  });
  jQuery(document).on('click', '.dslca-prompt-modal-confirm-hook', function (e) {
    e.preventDefault();
    var dslcAction = jQuery('.dslca-prompt-modal').data('id');
    var dslcTarget = jQuery('.dslca-prompt-modal').data('target');
    var closeAtEnd = true;

    if (dslcAction == 'edit_in_progress') {
      /// MOVED
      dslc_module_options_confirm_changes(function () {
        dslcTarget.trigger('click');
      });
    } else if (dslcAction == 'disable_lc') {
      window.location = dslcTarget;
    } else if ('delete_module' === dslcAction) {
      /// MOVED
      var module = dslcTarget.closest('.dslc-module-front');
      dslc_module_delete(module);
    } else if ('delete_modules_area' === dslcAction) {
      var modulesArea = dslcTarget.closest('.dslc-modules-area');
      var parentSectionContainer = modulesArea.closest('.dslc-modules-section-inner');
      dslc_modules_area_delete(modulesArea);
    } else if (dslcAction == 'delete_modules_section') {
      /// MOVED
      dslc_row_delete(dslcTarget.closest('.dslc-modules-section'));
    } else if (dslcAction == 'export_modules_section') {} else if (dslcAction == 'import_modules_section') {
      /// MOVED
      dslc_row_import(jQuery('.dslca-prompt-modal textarea').val());
      jQuery('.dslca-prompt-modal-confirm-hook span').css({
        opacity: 0
      });
      jQuery('.dslca-prompt-modal-confirm-hook .dslca-loading').show();
      closeAtEnd = false;
    }

    if (closeAtEnd) {
      confirmClose();
    }

    jQuery('.dslca-prompt-modal').data('id', '');
  });
});
/**
 * DON'T MOVE THE FUNCTION BELLOW OUT OF THIS FILE!
 * Hide element when click on another element on the page
 */

jQuery.fn.outerHide = function (params) {
  var $ = jQuery;
  params = params ? params : {};
  var self = this;

  if ('destroy' == params) {
    jQuery(document).unbind('click.outer_hide');
    return false;
  }

  jQuery(document).bind('click.outer_hide', function (e) {
    if (jQuery(e.target).closest(self).length == 0 && e.target != self && $.inArray(jQuery(e.target)[0], jQuery(params.clickObj)) == -1 && jQuery(self).css('display') != 'none') {
      if (params.clbk) {
        params.clbk();
      } else {
        jQuery(self).hide();
      }
    }
  });
};
/**
 * Cancel changes in standard WP Editor (TinyMCE) WYSIWYG
 */


document.addEventListener('modalWysiwygCancel', function (customEvent) {
  jQuery('.dslca-wp-editor').hide();
  jQuery('.dslca-wysiwyg-active', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-wysiwyg-active');
});
/**
 * Confirm changes in standard WP Editor (TinyMCE) WYSIWYG
 */

document.addEventListener('modalWysiwygConfirm', function (customEvent) {
  console.log("modalWysiwygConfirm!");
  var module = jQuery('.dslca-wysiwyg-active', LiveComposer.Builder.PreviewAreaDocument).closest('.dslc-module-front');
  console.log("module:");
  console.log(module);
  console.log("tinymce:");
  console.log(tinymce);

  if (typeof tinymce != "undefined") {
    if (jQuery('#wp-dslcawpeditor-wrap').hasClass('tmce-active')) {
      var editor = tinymce.get('dslcawpeditor');
      var content = editor.getContent();
    } else {
      var content = jQuery('#dslcawpeditor').val();
    }

    console.log("content:");
    console.log(content);
    jQuery('.dslca-wp-editor').hide();
    jQuery('.dslca-wysiwyg-active', LiveComposer.Builder.PreviewAreaDocument).html(content);

    if (module.hasClass('dslc-module-handle-like-accordion')) {
      jQuery('.dslca-wysiwyg-active', LiveComposer.Builder.PreviewAreaDocument).siblings('.dslca-editable-content').html(content); // jQuery('.dslca-wysiwyg-active', LiveComposer.Builder.PreviewAreaDocument ).siblings('.dslca-accordion-plain-content').val( content );

      var dslcAccordion = module.find('.dslc-accordion');
      LiveComposer.Builder.PreviewAreaWindow.dslc_accordion_generate_code(dslcAccordion);
    } else if (module.hasClass('dslc-module-handle-like-tabs')) {
      jQuery('.dslca-wysiwyg-active', LiveComposer.Builder.PreviewAreaDocument).siblings('.dslca-editable-content').html(content); // jQuery('.dslca-wysiwyg-active', LiveComposer.Builder.PreviewAreaDocument ).siblings('.dslca-tab-plain-content').val( content );

      var dslcTabs = module.find('.dslc-tabs');
      LiveComposer.Builder.PreviewAreaWindow.dslc_tabs_generate_code(dslcTabs);
    }

    Object(_codegeneration_js__WEBPACK_IMPORTED_MODULE_0__["editableContentCodeGeneration"])(jQuery('.dslca-wysiwyg-active', LiveComposer.Builder.PreviewAreaDocument));
    jQuery('.dslca-wysiwyg-active', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-wysiwyg-active');
  } else {
    console.info('Live Composer: TinyMCE is undefined.');
  }
});
var modalwindowInitJS = function modalwindowInitJS() {};

/***/ }),

/***/ "./js/src/editor/backend/module.js":
/*!*****************************************!*\
  !*** ./js/src/editor/backend/module.js ***!
  \*****************************************/
/*! exports provided: getNewModuleId, moduleOutputDefault, moduleOutputAltered, moduleInitJS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNewModuleId", function() { return getNewModuleId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moduleOutputDefault", function() { return moduleOutputDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moduleOutputAltered", function() { return moduleOutputAltered; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moduleInitJS", function() { return moduleInitJS; });
/* harmony import */ var _modalwindow_class_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modalwindow.class.js */ "./js/src/editor/backend/modalwindow.class.js");
/* harmony import */ var _uigeneral_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./uigeneral.js */ "./js/src/editor/backend/uigeneral.js");
/* harmony import */ var animejs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! animejs */ "./node_modules/animejs/lib/anime.es.js");
/* harmony import */ var _codegeneration_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./codegeneration.js */ "./js/src/editor/backend/codegeneration.js");
/**
 *  Builder module functions & hooks
 *
 *   = MODULES =
 *
 * - dslc_module_delete ( Deletes a module )
 * - moduleDuplicate ( Copies a module )
 * - dslc_module_width_set ( Sets a width to module )
 * - dslc_module_options_show ( Show module options )
 * - dslc_module_options_section_filter ( Filter options section )
 * - dslc_module_options_hideshow_tabs ( Hide show tabs based on option choices )
 * - dslc_module_options_confirm_changes ( Confirm changes )
 * - dslc_module_options_cancel_changes ( Cancel changes )
 * - dslc_module_options_tooltip ( Helper tooltips for options )
 * - dslc_module_options_font ( Actions for font option type )
 * - dslc_module_options_icon ( Actions for icon font option type )
 * - dslc_module_options_icon_returnid (Fill icon option type with selected icon ID/name)
 * - dslc_module_options_text_align ( Actions for text align option type )
 * - dslc_module_options_checkbox ( Actions for checkbox option type )
 * - dslc_module_options_box_shadow ( Actions for box shadow option type )
 * - dslc_modules_options_box_shadow_color ( Initiate colorpicker for box shadow)
 * - dslc_module_options_text_shadow ( Actions for text shadow option type )
 * - dslc_modules_options_text_shadow_color ( Initiate colorpicker for text shadow)
 * - dslc_module_options_color ( Actions for color option type )
 * - dslc_module_output_default ( Get module output with default settings )
 * - dslc_module_output_altered ( Get module output when settings altered )
 *
 */





var actionAvail = function actionAvail() {
  if (LiveComposer.Builder.Flags.panelOpened) {
    LiveComposer.Builder.UI.shakePanelConfirmButton();
    return false;
  }

  return true;
};
/**
 * Hook - Duplicate Module
 */


document.addEventListener('moduleDuplicate', function (customEvent) {
  var elClicked = customEvent.detail; // customEvent.detail - is element being clicked passed as additional data in the event.
  // Check if action can be fired

  if (!actionAvail()) return false;

  if (!elClicked.classList.contains('dslca-action-disabled')) {
    moduleDuplicate(elClicked.closest('.dslc-module-front'));
  }
});
/**
 * Hook - Module Delete
 */

document.addEventListener('moduleDelete', function (customEvent) {
  var elClicked = customEvent.detail; // customEvent.detail - is element being clicked passed as additional data in the event.
  // Check if action can be fired

  if (!actionAvail()) return false;
  var self = this;

  if (!elClicked.classList.contains('dslca-action-disabled')) {
    Object(_modalwindow_class_js__WEBPACK_IMPORTED_MODULE_0__["CModalWindow"])({
      title: DSLCString.str_del_module_title,
      content: DSLCString.str_del_module_descr,
      confirm: function confirm() {
        var module = elClicked.closest('.dslc-module-front');
        dslc_module_delete(module);
      }
    });
  }
});
/**
 * Hook - Edit Module On Click ( Display Options Panel )
 */

document.addEventListener('moduleEdit', function (customEvent) {
  var elClicked = customEvent.detail; // customEvent.detail - is element being clicked passed as additional data in the event.

  var currentModuleEl = elClicked.closest('.dslc-module-front');
  var currentModuleId = currentModuleEl.dataset.module;
  var elEditing = LiveComposer.Builder.PreviewAreaWindow.document.querySelector('.dslca-module-being-edited');
  var row_edited = jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).length; /// If settings panel opened - do not proceed.

  if (LiveComposer.Builder.Flags.uiHidden || null !== elEditing && elEditing.length > 0 || row_edited > 0) {
    if (elEditing != currentModuleEl) {
      LiveComposer.Builder.UI.shakePanelConfirmButton();
    }

    return false;
  }

  unmarkModulesBeingEdited(); // Add the "being edited" class to current module

  currentModuleEl.classList.add('dslca-module-being-edited'); // Call the function to display options

  dslc_module_options_show(currentModuleId); // Cover up other modules with semi transp cover

  LiveComposer.Builder.PreviewAreaWindow.document.body.classList.add('module-editing-in-progress');
});
/**
 * Hook - Edit Module On Click ( Display Options Panel ) - Fixed: https://github.com/live-composer/live-composer-page-builder/issues/895
 */

var adjustZindex = function adjustZindex() {
  LiveComposer.Builder.PreviewAreaDocument.on({
    mouseenter: function mouseenter() {
      jQuery('.dslca-modules-section-manage', LiveComposer.Builder.PreviewAreaDocument).css("z-index", "99998");
    },
    mouseleave: function mouseleave() {
      jQuery('.dslca-modules-section-manage', LiveComposer.Builder.PreviewAreaDocument).css("z-index", "999999");
    }
  }, '.dslca-change-width-module-hook, .dslc-module-front .dslca-module-manage');
};
/**
 * Hook - Set Module Width
 */


document.addEventListener('moduleChangeWidth', function (customEvent) {
  var elClicked = customEvent.detail; // customEvent.detail - is element being clicked passed as additional data in the event.

  var currentModuleEl = elClicked.closest('.dslc-module-front');

  if (!elClicked.classList.contains('dslca-action-disabled')) {
    var oldSize = currentModuleEl.dataset.dslcModuleSize;
    var newSize = elClicked.dataset.size; // Start expensive function only if the value changed.

    if (Number(oldSize) !== Number(newSize)) {
      dslc_module_width_set(currentModuleEl, newSize);
    }
  }
});
/**
 * Hook - Show code for altering module's defaults
 */

/*
FIXIT
LiveComposer.Builder.PreviewAreaDocument.on( 'click', '.dslca-module-get-defaults-hook', function(){

	// Vars
	var module = jQuery(this).closest('.dslc-module-front');
	var code = dslc_dm_get_defaults( module );

	// Generate modal's text
	var message = '<span class="dslca-prompt-modal-title">Module Defaults</span>'
		+ '<span class="dslca-prompt-modal-descr">The code bellow is used to alter the defaults.</span>'
		+ '<textarea></textarea><br><br>';

	// Hide modal's cancel button
	jQuery('.dslca-prompt-modal-cancel-hook').hide();

	// Show confirm button and change it to "OK"
	jQuery('.dslca-prompt-modal-confirm-hook').html('<span class="dslc-icon dslc-icon-ok"></span>OK');

	// Show the modal prompt
	dslc_js_confirm( 'dev_mode_get_default', message, module );
}); */

/**
 * Hook - Refresh Module
 * We have 'refresh' icon on blog posts grid and other post-based modules.
 * It's visible only when there are no posts to render.
 */

/*
FIXIT
LiveComposer.Builder.PreviewAreaDocument.on( 'click', '.dslca-refresh-module-hook', function(e){

	jQuery(this).css({
		'-webkit-animation-name' : 'dslcRotate',
		'-moz-animation-name' : 'dslcRotate',
		'animation-name' : 'dslcRotate',
		'animation-duration' : '0.6s',
		'-webkit-animation-duration' : '0.6s',
		'animation-iteration-count' : 'infinite',
		'-webkit-animation-iteration-count' : 'infinite'
	});
	jQuery(this).closest('.dslc-module-front').addClass('dslca-module-being-edited');
	moduleOutputAltered( function() {

		jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-module-being-edited');
	});
}); */

/**
 * Show WYSIWYG
 */

document.addEventListener('wysiwygEdit', function (customEvent) {
  var elClicked = customEvent.detail; // customEvent.detail - is element being clicked passed as additional data in the event.

  var currentModuleEl = elClicked.closest('.dslc-module-front'); // const editableEl = elClicked.querySelector('.dslca-editable-content');

  var idToEdit = elClicked.dataset.idToEdit;
  console.log("idToEdit:");
  console.log(idToEdit); // data-id-to-edit=

  var editableEl = currentModuleEl.querySelector('[data-edit-id="' + idToEdit + '"]');
  var content = editableEl.value;
  console.log("editableEl:");
  console.log(editableEl);
  console.log("content:");
  console.log(content); // var module = editable.closest('.dslc-module-front');

  console.log("currentModuleEl:");
  console.log(currentModuleEl);

  if (content.trim().length) {
    // Extract Content for current tab/accordion:

    /* if ( currentModuleEl.classList.contains('dslc-module-handle-like-accordion') || currentModuleEl.classList.contains('dslc-module-handle-like-tabs') ) {
    	const full_content_arr = content.split('(dslc_sep)');
    	if ( full_content_arr.length ) {
    		content = full_content_arr[idToEdit].trim();
    	}
    } */
    content = content.replace(/<lctextarea/g, '<textarea').replace(/<\/lctextarea/g, '</textarea');
  } // Restore shortcodes presentation.


  if (content.includes('%')) {
    content = content.replace(/%\(\(%/g, '[');
    content = content.replace(/%\)\)%/g, ']');
    content = content.replace(/%\(%/g, '[');
    content = content.replace(/%\)%/g, ']');
    content = content.replace(/%\{%/g, '[');
    content = content.replace(/%\}%/g, ']');
  } // Fill TinyMCE editor with extracted above content.


  if (typeof tinymce != 'undefined') {
    var editor = tinymce.get('dslcawpeditor');

    if (document.getElementById('wp-dslcawpeditor-wrap').classList.contains('tmce-active')) {
      editor.setContent(content, {
        format: 'html'
      });
    } else {
      document.getElementById('dslcawpeditor').value = content;
    }
    /* if ( ! currentModuleEl.classList.contains('dslca-module-being-edited') ) {
    	currentModuleEl.querySelector('.dslca-module-edit-hook').trigger('click');
    } */


    jQuery('.dslca-wp-editor').show();
    console.log("🛑editableEl:");
    console.log(editableEl);
    editableEl.classList.add('dslca-wysiwyg-active');
    jQuery('#dslcawpeditor_ifr, #dslcawpeditor').css({
      height: jQuery('.dslca-wp-editor').height() - 300
    });
  } else {
    console.info('Live Composer: TinyMCE is undefined.');
  }
}); // Editable Contents.

var editableContentTextEvents = function editableContentTextEvents() {
  // Preview iframe events.

  /* LiveComposer.Builder.PreviewAreaWindow.document.addEventListener('blur', function (event) {
  	// event.preventDefault();
  	console.log( "TYPE blur - event.target:" ); console.log( event.target );
  		if ( event.target.matches( '[data-event="module-edit"]' ) ) {
  		}
  });
  */

  /* 	LiveComposer.Builder.PreviewAreaWindow.document.addEventListener('keyup', function (event) {
  		// event.preventDefault();
  		console.log( "TYPE keyup - event.target:" ); console.log( event.target );
  
  		if ( event.target.matches( '[data-event="module-edit"]' ) ) {
  
  		}
  	});
   */
  LiveComposer.Builder.PreviewAreaDocument.on('blur', '.dslca-editable-content', function () {
    if (!LiveComposer.Builder.Flags.uiHidden && jQuery(this).data('type') == 'simple') {
      Object(_codegeneration_js__WEBPACK_IMPORTED_MODULE_3__["editableContentCodeGeneration"])(jQuery(this));
    }
  }).on('paste', '.dslca-editable-content:not(.inline-editor)', function () {
    if (!LiveComposer.Builder.Flags.uiHidden && jQuery(this).data('type') == 'simple') {
      var dslcRealInput = jQuery(this);
      setTimeout(function () {
        if (dslcRealInput.data('type') == 'simple') {
          dslcRealInput.html(dslcRealInput.text());
        }

        Object(_codegeneration_js__WEBPACK_IMPORTED_MODULE_3__["editableContentCodeGeneration"])(dslcRealInput);
      }, 100);
    }
  }).on('focus', '.dslca-editable-content', function () {
    if (jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).length > 0 && !jQuery(this).closest('.dslc-module-front').hasClass('dslca-module-being-edited')) {
      jQuery(this).trigger('blur');
    }
  }).on('keyup', '.dslca-editable-content', function () {
    if (jQuery(this).data('type') == 'simple') {
      jQuery(this).closest('.dslc-module-front').addClass('dslca-module-change-made');
    }
  });
};
/**
 * MODULES - Delete a Module
 */


function dslc_module_delete(module) {
  if (window.dslcDebug) console.log('dslc_delete_module');
  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_1__["showSection"])('.dslca-modules');
  Object(animejs__WEBPACK_IMPORTED_MODULE_2__["default"])({
    targets: module,
    easing: 'easeOutExpo',
    scale: 0,
    opacity: 0,
    duration: 350,
    delay: 0,
    endDelay: 0,
    complete: function complete(anim) {
      // Remove module, regenerate code, show publish button
      module.parentNode.removeChild(module);
      window.dslc_generate_code();
      window.dslc_show_publish_button();
    }
  });
}

var unmarkModulesBeingEdited = function unmarkModulesBeingEdited() {
  // Remove being edited class if some module is being edited.
  var elEditing = LiveComposer.Builder.PreviewAreaWindow.document.querySelector('.dslca-module-being-edited');

  if (null !== elEditing) {
    elEditing.classList.remove('dslca-module-being-edited');
  }
};
/**
 * Modules - Copy a Module
 */


function moduleDuplicate(module) {
  if (window.dslcDebug) console.log('dslc_copy_module');
  unmarkModulesBeingEdited(); // Duplicate the module and append it to the same area

  var module_new = module.cloneNode(true);
  jQuery(module_new).appendTo(module.closest('.dslc-modules-area')).css({
    '-webkit-animation-name': 'none',
    '-moz-animation-name': 'none',
    'animation-name': 'none',
    'animation-duration': '0',
    '-webkit-animation-duration': '0',
    opacity: 0,
    top: -50
  }).addClass('dslca-module-being-edited'); // Generate new ID for the new module and change it in HTML/CSS of the module.

  getNewModuleId(module_new); // Module fully cloned. Finish the process.
  // Need to call this function to update last column class for the modules.

  window.dslc_generate_code(); // Fade in the module

  Object(animejs__WEBPACK_IMPORTED_MODULE_2__["default"])({
    targets: module_new,
    easing: 'easeOutExpo',
    // scale: 0,
    top: 0,
    opacity: 1,
    duration: 400,
    delay: 0,
    endDelay: 0,
    complete: function complete(anim) {
      module_new.classList.remove('dslca-module-being-edited');
    }
  });
  window.dslc_show_publish_button();
}
/**
 * Generate new ID for the module provided
 *
 * Search/Replace old module ID with new one in HTML/CSS of the module.
 *
 * @param DOM module Module that needs ID updated (new ID).
 * @return void
 */


var getNewModuleId = function getNewModuleId(module) {
  // Vars
  var dslc_module_id = LiveComposer.Utils.get_unique_id(); // Generate new module ID.

  var dslc_module_id_original = module.getAttribute('id'); // Original Module ID.
  // Update module ID in data attribute

  module.setAttribute('data-module-id', dslc_module_id); // Update module ID in id attribute of element

  module.setAttribute('id', 'dslc-module-' + dslc_module_id);
  /**
   * Search/Replace module id in the inline CSS
   */

  var inline_css_el = module.getElementsByTagName('style')[0];
  var inline_css_code = inline_css_el.textContent; // Update id attribute for <style> element with new value

  inline_css_el.setAttribute('id', '#css-for-dslc-module-' + dslc_module_id); // Search/Replace all occurrences of module ID in inline CSS

  inline_css_code = inline_css_code.split(dslc_module_id_original).join('dslc-module-' + dslc_module_id); // Put CSS code back into <style> element

  inline_css_el.textContent = inline_css_code; // Update module ID in raw base64 code (dslc_code) of the module

  LiveComposer.Utils.update_module_property_raw(module, 'module_instance_id', dslc_module_id);
};
/**
 * MODULES - Set Width
 */

function dslc_module_width_set(moduleEl, new_width) {
  if (window.dslcDebug) console.log('dslc_module_width_set'); // Generate new column class

  var newClass = 'dslc-' + new_width + '-col'; // Add new column class and change size "data"

  jQuery(moduleEl).removeClass('dslc-1-col dslc-2-col dslc-3-col dslc-4-col dslc-5-col dslc-6-col dslc-7-col dslc-8-col dslc-9-col dslc-10-col dslc-11-col dslc-12-col').addClass(newClass).data('dslc-module-size', new_width); //.addClass('dslca-module-being-edited'); – Deprecated
  // Change module size in element attribute

  moduleEl.setAttribute('data-dslc-module-size', new_width); // Update module size in raw base64 code (dslc_code) of the module

  LiveComposer.Utils.update_module_property_raw(moduleEl, 'dslc_m_size', new_width);
  LiveComposer.Builder.PreviewAreaWindow.dslc_masonry();
  window.dslc_generate_code();
  window.dslc_show_publish_button();
}
/**
 * MODULES - Show module options
 */


function dslc_module_options_show(moduleID) {
  if (window.dslcDebug) console.log('dslc_module_options_show');

  if (undefined === moduleID) {
    console.warn('No module ID defined in dslc_module_options_show function.');
  } // Vars


  var dslcModule = jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument),
      dslcModuleOptions = jQuery('.dslca-module-options-front textarea', dslcModule),
      dslcDefaultSection = jQuery('.dslca-header').data('default-section'),
      pseudoPanel = jQuery(jQuery('#pseudo-panel').html());
  jQuery("#wpwrap").append(pseudoPanel); // Settings array for the Ajax call

  var dslcSettings = {};
  dslcSettings['action'] = 'dslc-ajax-display-module-options';
  dslcSettings['dslc'] = 'active';
  dslcSettings['dslc_module_id'] = moduleID;
  dslcSettings['dslc_post_id'] = jQuery('.dslca-container').data('data-post-id');
  dslcSettings.dslc_url_vars = LiveComposer.Utils.get_page_params(); // Go through each option to fill dslcSettings array
  // with current module setting values

  dslcModuleOptions.each(function () {
    // Vars
    var dslcOption = jQuery(this),
        dslcOptionID = dslcOption.data('id'),
        dslcOptionValue = dslcOption.val();

    if (dslcOptionValue.includes('%')) {
      // Restore shortcodes.
      dslcOptionValue = dslcOptionValue.replace(/%\(\(%/g, '[');
      dslcOptionValue = dslcOptionValue.replace(/%\)\)%/g, ']');
      dslcOptionValue = dslcOptionValue.replace(/%\(%/g, '[');
      dslcOptionValue = dslcOptionValue.replace(/%\)%/g, ']');
      dslcOptionValue = dslcOptionValue.replace(/%\{%/g, '[');
      dslcOptionValue = dslcOptionValue.replace(/%\}%/g, ']');
    } // Add option ID and value to the settings array


    dslcSettings[dslcOptionID] = dslcOptionValue;
  }); // Hide the save/cancel actions for text editor and show notification

  jQuery('.dslca-wp-editor-actions').hide();
  jQuery('.dslca-wp-editor-notification').show(); // Hide the publish button

  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_1__["hidePublishButton"])(); // LiveComposer.Builder.UI.initInlineEditors();
  // Set up backup

  var moduleBackup = jQuery('.dslca-module-options-front', dslcModule).children().clone();
  LiveComposer.Builder.moduleBackup = moduleBackup;
  LiveComposer.Builder.Flags.panelOpened = true; // Show pseudo settings panel

  pseudoPanel.show();
  pseudoPanel.addClass('show'); // AJAX call to get options HTML

  jQuery.post(DSLCAjax.ajaxurl, dslcSettings, function (response) {
    // Hide pseudo panel
    pseudoPanel.remove(); // Show edit section

    Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_1__["showSection"])('.dslca-module-edit'); // Add the options

    if (!jQuery('body').hasClass('rtl')) {
      jQuery('.dslca-module-edit-options-inner').html(response.output);
    } else {
      jQuery('.dslca-module-edit-options-inner').html(response.output);
    }

    jQuery('.dslca-module-edit-options-tabs').html(response.output_tabs);
    var sectionsUsed = []; // – Array with tab ids to show for current module.

    /**
     * Go through each option and check its tab property.
     * Fill sectionsUsed array with ids of the tabs to display.
     * We don't want to display tabs with no options inside.
     */

    jQuery('.dslca-module-edit-options-inner .dslca-module-edit-option').each(function () {
      var currentOptionSection = jQuery(this).data('section'); // Check if this section is in the list of tabs to show.

      if (sectionsUsed.indexOf(currentOptionSection) == -1) {
        sectionsUsed.push(currentOptionSection);
      }
    });
    var tabs_total = sectionsUsed.length;

    for (var i = 0; i < tabs_total; i++) {
      // Show the tabs used by the current module.
      jQuery('.dslca-header .dslca-options-filter-hook[data-section="' + sectionsUsed[i] + '"]').show();
    } // Show the filter hooks
    // jQuery('.dslca-header .dslca-options-filter-hook').show();
    // Trigger click on first filter hook


    if (jQuery('.dslca-module-edit-option[data-section="' + dslcDefaultSection + '"]').length) {
      jQuery('.dslca-header .dslca-options-filter-hook[data-section="' + dslcDefaultSection + '"]').show();
      jQuery('.dslca-header .dslca-options-filter-hook[data-section="' + dslcDefaultSection + '"]').trigger('click');
    } else {
      jQuery('.dslca-header .dslca-options-filter-hook:first').hide();
      jQuery('.dslca-header .dslca-options-filter-hook:first').next('.dslca-options-filter-hook').trigger('click');
    } // Show the save/cancel actions


    jQuery('.dslca-module-edit-actions').show(); // Show the save/cancel actions for text editor and hide notification

    jQuery('.dslca-wp-editor-notification').hide();
    jQuery('.dslca-wp-editor-actions').show(); // Hide the section hooks

    jQuery('.dslca-header .dslca-go-to-section-hook').hide(); // Hide the row save/cancel actions

    jQuery('.dslca-row-edit-actions').hide();
    LiveComposer.Builder.UI.loadOptionsDeps();
  });
}
/**
 * MODULES - Module output default settings
 */


var moduleOutputDefault = function moduleOutputDefault(dslc_module_id, callback) {
  if (window.dslcDebug) console.log('moduleOutputDefault');
  jQuery.post(DSLCAjax.ajaxurl, {
    action: 'dslc-ajax-add-module',
    dslc: 'active',
    dslc_module_id: dslc_module_id,
    // ex. DSLC_Button
    dslc_post_id: jQuery('.dslca-container').data('post-id'),
    dslc_url_vars: LiveComposer.Utils.get_page_params(),
    dslc_new_module: true
  }, function (response) {
    callback(response);
  });
};
/**
 * MODULES - Redraw module output when settings altered
 */

var moduleOutputAltered = function moduleOutputAltered(callback) {
  if (window.dslcDebug) console.log('moduleOutputAltered');
  callback = typeof callback !== 'undefined' ? callback : false;
  var dslcModule = jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument),
      dslc_module_id = dslcModule.data('module'),
      dslcModuleOptions = jQuery('.dslca-module-options-front textarea', dslcModule),
      dslcModuleInstanceID = dslcModule.data('module-id');
  /**
   * Generate code
   */

  var dslcSettings = {};
  dslcSettings['action'] = 'dslc-ajax-add-module';
  dslcSettings['dslc'] = 'active';
  dslcSettings['dslc_module_id'] = dslc_module_id;
  dslcSettings['dslc_module_instance_id'] = dslcModuleInstanceID;
  dslcSettings['dslc_post_id'] = jQuery('.dslca-container').data('post-id');
  if (dslcModule.hasClass('dslca-preload-preset')) dslcSettings['dslc_preload_preset'] = 'enabled';else dslcSettings['dslc_preload_preset'] = 'disabled';
  dslcModule.removeClass('dslca-preload-preset');
  dslcModuleOptions.each(function () {
    var dslcOption = jQuery(this);
    var dslcOptionID = dslcOption.data('id');
    var dslcOptionValue = dslcOption.val();
    dslcSettings[dslcOptionID] = dslcOptionValue;
  });
  dslcSettings.dslc_url_vars = LiveComposer.Utils.get_page_params();
  /**
   * Call AJAX for preview
   */

  jQuery.post(DSLCAjax.ajaxurl, dslcSettings, function (response) {
    var newModule = LiveComposer.Builder.Helpers.insertModule(response.output, dslcModule);
    newModule.addClass('dslca-module-being-edited');
    response = null;
    newModule = null; // TODO: Add new postponed action to run after all done
    // window.dslc_show_publish_button();

    LiveComposer.Builder.PreviewAreaWindow.dslc_carousel();
    LiveComposer.Builder.PreviewAreaWindow.dslc_masonry();
    LiveComposer.Builder.PreviewAreaWindow.dslc_tabs();
    LiveComposer.Builder.PreviewAreaWindow.dslc_init_accordion();
    /**
     * Create Custom Event/Hook
     *
     * Third-party developers should use it like this:
     * window.addEventListener('moduleOutputAltered', function (e) {
     * 	....
     * }, false);
     */

    var event = new Event('moduleOutputAltered'); // Dispatch the event.

    LiveComposer.Builder.PreviewAreaWindow.dispatchEvent(event);

    if (callback) {
      callback(response);
    }
  });
};
/**
 * MODULES - Reload a specific module
 */

function dslc_module_output_reload(dslcModule, callback) {
  if (window.dslcDebug) console.log('dslc_module_output_reload');
  callback = typeof callback !== 'undefined' ? callback : false;
  var dslc_module_id = dslcModule.data('module'),
      dslcModuleOptions = jQuery('.dslca-module-options-front textarea', dslcModule),
      dslcModuleInstanceID = dslcModule.data('module-id');
  /**
   * Generate code
   */

  var dslcSettings = {};
  dslcSettings['action'] = 'dslc-ajax-add-module';
  dslcSettings['dslc'] = 'active';
  dslcSettings['dslc_module_id'] = dslc_module_id;
  dslcSettings['dslc_module_instance_id'] = dslcModuleInstanceID;
  dslcSettings['dslc_post_id'] = jQuery('.dslca-container').data('post-id');
  dslcSettings['dslc_preload_preset'] = 'enabled';
  dslcModule.removeClass('dslca-preload-preset');
  dslcModuleOptions.each(function () {
    var dslcOption = jQuery(this);
    var dslcOptionID = dslcOption.data('id');
    var dslcOptionValue = dslcOption.val();
    dslcSettings[dslcOptionID] = dslcOptionValue;
  });
  /**
   * Loader
   */

  dslcModule.append('<div class="dslca-module-reloading"><span class="dslca-icon dslc-icon-spin dslc-icon-refresh"></span></div>');
  /**
   * Call AJAX for preview
   */

  jQuery.post(DSLCAjax.ajaxurl, dslcSettings, function (response) {
    dslcModule.after(response.output).next().addClass('dslca-module-being-edited');
    dslcModule.remove();
    window.dslc_generate_code();
    window.dslc_show_publish_button();
    LiveComposer.Builder.PreviewAreaWindow.dslc_carousel();
    LiveComposer.Builder.PreviewAreaWindow.dslc_masonry();
    LiveComposer.Builder.PreviewAreaWindow.dslc_tabs();
    LiveComposer.Builder.PreviewAreaWindow.dslc_init_accordion();

    if (callback) {
      callback(response);
    }

    jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-module-being-edited');
  });
}
/**
 * Other - Get Alter Module Defaults Code
 */


function dslc_dm_get_defaults(module) {
  if (window.dslcDebug) console.log('dslc_dm_get_defaults'); // The module code value

  var optionsCode = module.find('.dslca-module-code').val(); // Ajax call to get the plain PHP code

  jQuery.post(DSLCAjax.ajaxurl, {
    action: 'dslc-ajax-dm-module-defaults',
    dslc: 'active',
    dslc_modules_options: optionsCode
  }, function (response) {
    // Apply the plain PHP code to the textarea
    jQuery('.dslca-prompt-modal textarea').val(response.output);
  });
}
/**
 * Deprecated Functions and Fallbacks
 */


function dslc_copy_module(module) {
  moduleDuplicate(module);
}

function dslc_display_module_options(moduleID) {
  dslc_module_options_show(moduleID);
}

function dslc_preview_change(callback) {
  moduleOutputAltered(callback);
}

function dslc_reload_module(moduleID, callback) {
  dslc_module_output_reload(moduleID, callback);
}

var moduleInitJS = function moduleInitJS() {
  adjustZindex();
  editableContentTextEvents();
  console.log('module.js > moduleInitJS');
};

/***/ }),

/***/ "./js/src/editor/backend/modulearea.class.js":
/*!***************************************************!*\
  !*** ./js/src/editor/backend/modulearea.class.js ***!
  \***************************************************/
/*! exports provided: ModuleArea */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuleArea", function() { return ModuleArea; });
/* harmony import */ var sortablejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sortablejs */ "./node_modules/sortablejs/modular/sortable.esm.js");
/**
 * DSLC_ModuleArea class
 */



var ModuleArea = function ModuleArea(elem) {
  var self = this;
  this.section = jQuery(elem).closest('.dslc-modules-section');
  this.elem = elem;
  /** Set observer to change elems class */

  this.observer = new mqMutationObserver(elem, function () {
    var classList = self.elem.classList;

    if (elem.querySelectorAll('.dslc-module-front').length == 0) {
      classList.add('dslc-modules-area-empty');
      classList.remove('dslc-modules-area-not-empty');
    } else {
      classList.remove('dslc-modules-area-empty');
      classList.add('dslc-modules-area-not-empty');
    }
  }, {
    childList: true
  });
  /**
   * Make MODULES inside the Modules Area draggable/sortable
   */

  this.sortable = sortablejs__WEBPACK_IMPORTED_MODULE_0__["default"].create(elem, {
    group: 'modules',
    animation: 350,
    handle: '.dslca-move-module-hook',
    draggable: '.dslc-module-front',
    ghostClass: 'dslca-module-ghost',
    chosenClass: 'dslca-module-dragging',
    scroll: true,
    // or HTMLElement
    scrollSensitivity: 150,
    // px, how near the mouse must be to an edge to start scrolling.
    scrollSpeed: 15,
    // px
    setData: function setData(dataTransfer, dragEl) {
      dataTransfer.setData(LiveComposer.Utils.msieversion() !== false ? 'Text' : 'text/html', dragEl.innerHTML);
    },
    // dragging started
    onStart: function onStart(evt) {
      evt.oldIndex; // element index within parent

      jQuery('body').removeClass('dslca-drag-not-in-progress').addClass('dslca-drag-in-progress');
      jQuery('body', LiveComposer.Builder.PreviewAreaWindow.document).removeClass('dslca-drag-not-in-progress').addClass('dslca-drag-in-progress');
    },
    // dragging ended
    onEnd: function onEnd(evt) {
      evt.oldIndex; // element's old index within parent

      evt.newIndex; // element's new index within parent

      evt.preventDefault();
      window.dslc_generate_code();
      LiveComposer.Builder.UI.stopScroller();
      jQuery('body').removeClass('dslca-drag-in-progress').addClass('dslca-drag-not-in-progress');
      jQuery('body', LiveComposer.Builder.PreviewAreaWindow.document).removeClass('dslca-drag-in-progress').addClass('dslca-drag-not-in-progress');
    },
    // Element is dropped into the list from another list
    onAdd: function onAdd(evt) {
      var itemEl = evt.item; // dragged HTMLElement

      evt.from; // previous list
      // If container/column/modules area droped.

      if (jQuery(itemEl).data('id') == 'DSLC_M_A') {
        dslc_modules_area_add(jQuery(self.section).find('.dslc-modules-section-wrapper .dslc-modules-section-inner'));
        itemEl.remove();
      } // + indexes from onEnd
      // evt.preventDefault();
      // evt.stopPropagation(); return false;

    },
    // Changed sorting within list
    onUpdate: function onUpdate(evt) {
      var itemEl = evt.item; // dragged HTMLElement
      // + indexes from onEnd
      // evt.preventDefault();
      // evt.stopPropagation(); return false;

      window.dslc_show_publish_button();
    },
    // Called by any change to the list (add / update / remove)
    onSort: function onSort(evt) {// same properties as onUpdate
      // evt.preventDefault();
      // evt.stopPropagation(); return false;
    },
    // Element is removed from the list into another list
    onRemove: function onRemove(evt) {// same properties as onUpdate
    },
    // Attempt to drag a filtered element
    onFilter: function onFilter(evt) {
      var itemEl = evt.item; // HTMLElement receiving the `mousedown|tapstart` event.
    },
    // Event when you move an item in the list or between lists
    onMove: function onMove(evt) {
      // Example: http://jsbin.com/tuyafe/1/edit?js,output
      evt.dragged; // dragged HTMLElement

      evt.draggedRect; // TextRectangle {left, top, right и bottom}

      evt.related; // HTMLElement on which have guided

      evt.relatedRect; // TextRectangle
      // return false; — for cancel
      // Add here the function to update underlying class

      if (jQuery('.dslc-modules-area-empty').find('.dslc-module-front').length > 0) {
        jQuery(this).removeClass('dslc-modules-area-empty').addClass('dslc-modules-area-not-empty');
        jQuery('.dslca-no-content:not(:visible)', this).show().css({
          '-webkit-animation-name': 'dslcBounceIn',
          '-moz-animation-name': 'dslcBounceIn',
          'animation-name': 'dslcBounceIn',
          'animation-duration': '0.6s',
          '-webkit-animation-duration': '0.6s',
          padding: 0
        }).animate({
          padding: '35px 0'
        }, 300, function () {});
      }
    }
  }); // Mark module area as initialized

  jQuery(elem).attr('data-jsinit', 'initialized');
  /** Sort option setter */

  jQuery(document).on('LC.sortableOff', function () {
    self.sortable && self.sortable.option && self.sortable.option('disabled', true);
  });
  jQuery(document).on('LC.sortableOn', function () {
    self.sortable && self.sortable.option && self.sortable.option('disabled', false);
  });
};

/***/ }),

/***/ "./js/src/editor/backend/modulearea.js":
/*!*********************************************!*\
  !*** ./js/src/editor/backend/modulearea.js ***!
  \*********************************************/
/*! exports provided: moduleareasInitJS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moduleareasInitJS", function() { return moduleareasInitJS; });
/* harmony import */ var _dragndrop_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dragndrop.js */ "./js/src/editor/backend/dragndrop.js");
/* harmony import */ var _sections_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sections.js */ "./js/src/editor/backend/sections.js");
/* harmony import */ var _modulearea_class_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modulearea.class.js */ "./js/src/editor/backend/modulearea.class.js");
/* harmony import */ var _modalwindow_class_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modalwindow.class.js */ "./js/src/editor/backend/modalwindow.class.js");
/* harmony import */ var _uigeneral_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./uigeneral.js */ "./js/src/editor/backend/uigeneral.js");
/* harmony import */ var _module_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./module.js */ "./js/src/editor/backend/module.js");
/**
 * Functions powering Module Areas functionality
 *
 * = AREAS ( MODULE AREAS ) =
 *
 * - Actions/Events (Duplicate, Change Width, Delete, ...)
 * - dslc_modules_area_add ( Adds a new modules area )
 * - dslc_modules_area_delete ( Deletes modules area )
 * - dslc_modules_area_width_set ( Sets specific width to the modules area )
 * - dslc_copy_modules_area ( Copies modules area )
 *
 */






/**
 * Module Area Actions (Duplicate, Change Width, Delete, ...)
 *
 * Attach these actions once the editing iFrame loaded.
 */

;
jQuery(document).on('editorFrameLoaded', function () {
  function init_sortables() {
    var el = jQuery('.dslc-modules-area', LiveComposer.Builder.PreviewAreaDocument); // Groups that can hold modules

    jQuery(el).each(function (i, e) {
      new _modulearea_class_js__WEBPACK_IMPORTED_MODULE_2__["ModuleArea"](e);
    });
  }

  var actionAvail = function actionAvail() {
    if (LiveComposer.Builder.Flags.panelOpened) {
      LiveComposer.Builder.UI.shakePanelConfirmButton();
      return false;
    }

    return true;
  };
  /**
   * Action - Automatically Add a Row if Empty
   */


  if (!jQuery('#dslc-main .dslc-modules-section', LiveComposer.Builder.PreviewAreaDocument).length && !jQuery('#dslca-tut-page', LiveComposer.Builder.PreviewAreaDocument).length) {
    Object(_sections_js__WEBPACK_IMPORTED_MODULE_1__["addSection"])(init_sortables());
  } else {
    init_sortables();
  }
  /**
   * Hook - Copy Module Area
   */


  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-copy-modules-area-hook', function (e) {
    e.preventDefault(); // Check if action can be fired

    if (!actionAvail()) return false;

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      var modulesArea = jQuery(this).closest('.dslc-modules-area');
      dslc_copy_modules_area(modulesArea);
    }
  });
  /**
   * Hook - Delete Module Area
   */

  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-delete-modules-area-hook', function (e) {
    e.preventDefault(); // Check if action can be fired

    if (!actionAvail()) return false;

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      // Check if current modules area is empty.
      var modulesAreaEmpty = jQuery(this).closest('.dslc-modules-area').hasClass('dslc-modules-area-empty');

      if (!modulesAreaEmpty) {
        var self = jQuery(this);
        Object(_modalwindow_class_js__WEBPACK_IMPORTED_MODULE_3__["CModalWindow"])({
          title: DSLCString.str_del_area_title,
          content: DSLCString.str_del_area_descr,
          confirm: function confirm() {
            var modulesArea = self.closest('.dslc-modules-area');
            dslc_modules_area_delete(modulesArea);
          }
        }); // Show confirmation modal only if the module area isn't empty.

        /*dslc_js_confirm( 'delete_modules_area', '<span class="dslca-prompt-modal-title">' + DSLCString.str_del_area_title +
        	'</span><span class="dslca-prompt-modal-descr">' + DSLCString.str_del_area_descr + '</span>', jQuery(this) );*/
      } else {
        var modulesArea = jQuery(this).closest('.dslc-modules-area'); // Delete module area without asking anything.

        dslc_delete_modules_area(modulesArea);
      }
    }
  });
  /**
   * Hook - Set Width of the Module Area
   */

  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-change-width-modules-area-options span', function () {
    // Check if action can be fired
    if (!actionAvail()) return false;

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      var moduleAreaJQ = jQuery(this).closest('.dslc-modules-area');
      var oldSize = moduleAreaJQ.data('size');
      var newSize = jQuery(this).data('size'); // Start expensive function only if the value changed.

      if (Number(oldSize) !== Number(newSize)) {
        dslc_modules_area_width_set(moduleAreaJQ, newSize);
      }
    }
  });
  /**
   * Action - Show/Hide Width Options Popup for the Module Area
   */

  /* LiveComposer.Builder.PreviewAreaDocument.on( 'click', '.dslca-change-width-modules-area-hook', function(e){
  		e.preventDefault();
  		// Check if action can be fired
  	if ( ! actionAvail() ) return false;
  		if ( ! jQuery(this).hasClass('dslca-action-disabled') ) {
  			// Is visible
  		if ( jQuery('.dslca-change-width-modules-area-options:visible', this).length ) {
  				// Hide
  			jQuery('.dslca-change-width-modules-area-options', this).hide();
  			// Is hidden
  		} else {
  				// Show
  			jQuery('.dslca-change-width-modules-area-options', this).show();
  		}
  	}
  }); */

  /* 
  	LiveComposer.Builder.PreviewAreaDocument.on( 'mouseleave', '.dslca-change-width-modules-area-options', function(e){
  
  		// Hide width seleciton panel.
  		jQuery(this).hide();
  	});
   */

  /**
   * Hook - Add Modules Area
   * TODO: Where we use it? Delete maybe?
   */

  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-add-modules-area-hook', function (e) {
    e.preventDefault(); // Check if action can be fired

    if (!actionAvail()) return false;
    dslc_modules_area_add(jQuery(this).closest('.dslc-modules-section').find('.dslc-modules-section-inner'));
  });
});
/**
 * AREAS - Add New
 */

function dslc_modules_area_add(row) {
  if (window.dslcDebug) console.log('dslc_add_modules_area'); // Add class to body so we know it's in progress
  // jQuery('body', LiveComposer.Builder.PreviewAreaDocument).addClass('dslca-anim-in-progress');

  var output = '<div class="dslc-modules-area dslc-modules-area-dnd dslc-col dslc-12-col dslc-modules-area-empty " data-size="12">' + '<div class="dslca-modules-area-manage"> <div class="dslca-modules-area-manage-inner">' + '<span class="dslca-manage-action dslca-copy-modules-area-hook" title="Duplicate" ><span class="dslca-icon dslc-icon-copy">' + '</span></span> <span class="dslca-manage-action dslca-move-modules-area-hook" title="Drag to move" >' + '<span class="dslca-icon dslc-icon-move"></span></span>' + '<span class="dslca-manage-action dslca-change-width-modules-area-hook" title="Change width" >' + '<span class="dslca-icon dslc-icon-columns"></span> <div class="dslca-change-width-modules-area-options">' + '<span>Container Width</span><span data-size="1">1/12</span><span data-size="2">2/12</span>' + '<span data-size="3">3/12</span><span data-size="4">4/12</span> <span data-size="5">5/12</span><span data-size="6">6/12</span>' + '<span data-size="7">7/12</span><span data-size="8">8/12</span> <span data-size="9">9/12</span><span data-size="10">10/12</span>' + '<span data-size="11">11/12</span><span data-size="12">12/12</span> </div> </span>' + '<span class="dslca-manage-action dslca-delete-modules-area-hook" title="Delete" ><span class="dslca-icon dslc-icon-remove"></span></span> </div> </div>' + '</div>'; // Append new area and animate

  jQuery(output).appendTo(row).css({
    height: 0
  }).animate({
    height: 99
  }, 300, function () {
    jQuery(this).css({
      height: 'auto'
    });
  }).addClass('dslca-init-animation'); // Re-initialize all the empty areas on the page

  var emptyModuleAreas = jQuery('.dslc-modules-area-empty', LiveComposer.Builder.PreviewAreaDocument);
  jQuery(emptyModuleAreas).each(function (i, e) {
    new _modulearea_class_js__WEBPACK_IMPORTED_MODULE_2__["ModuleArea"](e);
  }); // Call other functions

  Object(_dragndrop_js__WEBPACK_IMPORTED_MODULE_0__["dragAndDropInit"])();
  window.dslc_generate_code();
  window.dslc_show_publish_button(); // Remove class from body so we know it's done
  // jQuery('body', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-anim-in-progress');
}
/**
 * AREAS - Delete
 */


function dslc_modules_area_delete(area) {
  if (window.dslcDebug) console.log('dslc_delete_modules_area'); // Vars

  var modulesSection = area.closest('.dslc-modules-section').find('.dslc-modules-section-inner'),
      dslcDeleteSectionToo = false; // Add a class to the area so we know it's being deleted

  area.addClass('dslca-modules-area-being-deleted'); // If it's the last area in the row delete section as well

  if (modulesSection.find('.dslc-modules-area').length < 2) {
    dslcDeleteSectionToo = true;
  } // If a module in the area is being edited


  if (area.find('.dslca-module-being-edited').length) {
    // Hide the filter hooks
    jQuery('.dslca-header .dslca-options-filter-hook', LiveComposer.Builder.PreviewAreaDocument).hide(); // Hide the save/cancel actions

    jQuery('.dslca-module-edit-actions', LiveComposer.Builder.PreviewAreaDocument).hide(); // Show the section hooks

    jQuery('.dslca-header .dslca-go-to-section-hook', LiveComposer.Builder.PreviewAreaDocument).show(); // Show the modules listing

    Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_4__["showSection"])('.dslca-modules');
  } // Set a timeout so we handle deletion after animation ends


  setTimeout(function () {
    // Delete section if no more module areas inside.
    if (dslcDeleteSectionToo) {
      var parentSectionContainer = area.closest('.dslc-modules-section-inner'); // dslc_modules_area_add( modulesSection );
      // Don't delete latest module area in the latest section on the page

      if (2 <= area.closest('#dslc-main').find('.dslc-modules-section').length) {
        dslc_row_delete(area.closest('.dslc-modules-section'));
      } else {
        // Remove the area
        area.remove(); // Create new empty area in current module section

        dslc_modules_area_add(modulesSection);
      }
    } // Remove the area


    area.remove(); // Call other functions

    window.dslc_generate_code();
    window.dslc_show_publish_button();
  }, 900); // Animation

  area.css({
    '-webkit-animation-name': 'dslcBounceOut',
    '-moz-animation-name': 'dslcBounceOut',
    'animation-name': 'dslcBounceOut',
    'animation-duration': '0.6s',
    '-webkit-animation-duration': '0.6s',
    'overflow': 'hidden'
  }).animate({
    opacity: 0
  }, 600).animate({
    height: 0,
    marginBottom: 0
  }, 300, function () {
    area.remove();
    window.dslc_generate_code();
    window.dslc_show_publish_button();
  });
}
/**
 * AREAS - Copy
 */


function dslc_modules_area_copy(area) {
  if (window.dslcDebug) console.log('dslc_copy_modules_area'); // Vars

  var dslc_moduleID,
      modulesSection = area.closest('.dslc-modules-section').find('.dslc-modules-section-inner'); // Copy the area and append to the row

  var dslc_modulesAreaCloned = area.clone().appendTo(modulesSection);
  new _modulearea_class_js__WEBPACK_IMPORTED_MODULE_2__["ModuleArea"](dslc_modulesAreaCloned[0]); // Trigger mouseleave ( so the actions that show on hover go away )

  dslc_modulesAreaCloned.find('.dslca-modules-area-manage').trigger('mouseleave'); // Apply correct data size and get rid of animations

  dslc_modulesAreaCloned.data('size', area.data('size')).find('.dslc-module-front').css({
    '-webkit-animation-name': 'none',
    '-moz-animation-name': 'none',
    'animation-name': 'none',
    'animation-duration': '0',
    '-webkit-animation-duration': '0',
    opacity: 0 // Go through each module in the area

  }).each(function () {
    var dslc_module = jQuery(this); //Generate new ID for the new module and change it in HTML/CSS of the module.

    Object(_module_js__WEBPACK_IMPORTED_MODULE_5__["getNewModuleId"])(dslc_module[0]); // Remove "dslca-module-being-edited" class form any element

    jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-module-being-edited'); // Need to call this function to update last column class for the modules.

    window.dslc_generate_code(); // Show back new created module

    dslc_module.animate({
      opacity: 1
    }, 300);
  }); // Call other functions

  Object(_dragndrop_js__WEBPACK_IMPORTED_MODULE_0__["dragAndDropInit"])();
  window.dslc_show_publish_button(); // Need to call this function to update last column class for the module areas.

  window.dslc_generate_code();
}
/**
 * AREAS - Set Width
 */


function dslc_modules_area_width_set(area, newWidth) {
  if (window.dslcDebug) console.log('dslc_modules_area_width_set'); // Generate new class based on width

  var newClass = 'dslc-' + newWidth + '-col'; // Remove width classes, add new width class and set the data-size attr

  area.removeClass('dslc-1-col dslc-2-col dslc-3-col dslc-4-col dslc-5-col dslc-6-col dslc-7-col dslc-8-col dslc-9-col dslc-10-col dslc-11-col dslc-12-col').addClass(newClass).data('size', newWidth); // Call other functions

  LiveComposer.Builder.PreviewAreaWindow.dslc_masonry();

  if (LiveComposer.Builder.Flags.panelOpened) {
    return false;
  }

  window.dslc_generate_code();
  window.dslc_show_publish_button();
}
/**
 * Check Module Areas initialization
 *
 * @return void
 */


var moduleareasInitJS = function moduleareasInitJS() {
  // Select all the module areas form the main section of the page
  jQuery('#dslc-main .dslc-modules-area', LiveComposer.Builder.PreviewAreaDocument).each(function () {
    // Check if all the module areas have data attribute 'jsinit' set to 'initialized'?
    if (jQuery(this).data('jsinit') !== 'initialized') {
      // Initialize all the module areas without 'jsinit' attribute!
      new _modulearea_class_js__WEBPACK_IMPORTED_MODULE_2__["ModuleArea"](this);
    }
  });
};
/**
 * Deprecated Functions and Fallbacks
 */

function dslc_add_modules_area(row) {
  dslc_modules_area_add(row);
}

function dslc_delete_modules_area(area) {
  dslc_modules_area_delete(area);
}

function dslc_copy_modules_area(area) {
  dslc_modules_area_copy(area);
}

/***/ }),

/***/ "./js/src/editor/backend/presets.js":
/*!******************************************!*\
  !*** ./js/src/editor/backend/presets.js ***!
  \******************************************/
/*! exports provided: updatePreset, presetsInit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updatePreset", function() { return updatePreset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "presetsInit", function() { return presetsInit; });
/*********************************
*
* = MODULE PRESETS =
*
* - dslc_update_preset ( Update Styling Preset )
*
***********************************/

/**
 * Module Presets - Update
 */

var updatePreset = function updatePreset() {
  if (window.dslcDebug) console.log('updatePreset'); // Vars

  var module = jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument),
      presetName = module.find('.dslca-module-option-front[data-id="css_load_preset"]').val(),
      presetCode = module.find('.dslca-module-code').val(),
      moduleID = module.data('module'); // If preset value not "none"

  if ('none' !== presetName && '' !== presetName) {
    // AJAX Call to Save Preset
    jQuery.post(DSLCAjax.ajaxurl, {
      action: 'dslc-ajax-save-preset',
      dslc_preset_name: presetName,
      dslc_preset_code: presetCode,
      dslc_module_id: moduleID
    }, function (response) {
      if (response.preset_setting == 'enabled') {
        // Reload all modules with the same preset
        jQuery('.dslc-module-front:not(#' + module.attr('id') + ')[data-module="' + module.data('module') + '"][data-dslc-preset="' + module.data('dslc-preset') + '"]', LiveComposer.Builder.PreviewAreaDocument).each(function () {
          dslc_module_output_reload(jQuery(this));
        });
      }
    });
  }
};
/**
 * Module Presets - Document Ready
 */

jQuery(document).ready(function ($) {
  /**
   * Action - Save preset
   */
  jQuery(document).on('keypress', '.dslca-module-edit-field[name="css_save_preset"]', function (e) {
    // Enter Key Pressed
    if (e.which == 13) {
      // Vars
      var presetName = jQuery(this).val(),
          presetID = presetName.toLowerCase().replace(/\s/g, '-'); // Add class to body that a new preset is added

      jQuery('body').addClass('dslca-new-preset-added'); // Append the new preset to the "Load Preset" option and trigger change

      jQuery('.dslca-module-edit-field[name="css_load_preset"]').append('<option value="' + presetID + '">' + presetID + '</option>').val(presetID).trigger('change'); // Erase value from the "Save Preset" option

      jQuery(this).val('');
      jQuery('.dslc-delete-preset').removeClass('dslc-delete-preset-hide');
    }
  });
  /**
   * Action - Preset value changed
   */

  jQuery(document).on('change', '.dslca-module-edit-field[name="css_load_preset"]', function (e) {
    jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).addClass('dslca-preload-preset');
  });
  /**
   * Action - Delete Preset
   */

  jQuery(document).on('click', '.dslc-delete-preset', function (e) {
    // Vars
    var module = jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument),
        presetName = module.find('.dslca-module-option-front[data-id="css_load_preset"]').val(),
        moduleID = module.data('module'); // If preset value not "none"

    if ('none' !== presetName && '' !== presetName) {
      // AJAX Call to Save Preset
      jQuery.post(DSLCAjax.ajaxurl, {
        action: 'dslc-ajax-delete-preset',
        dslc_preset_name: presetName,
        dslc_module_id: moduleID
      }, function (response) {
        dslc_module_options_show(moduleID);
      });
    }
  });
});
var presetsInit = function presetsInit() {};

/***/ }),

/***/ "./js/src/editor/backend/scroller.js":
/*!*******************************************!*\
  !*** ./js/src/editor/backend/scroller.js ***!
  \*******************************************/
/*! exports provided: initPreviewAreaScroller */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initPreviewAreaScroller", function() { return initPreviewAreaScroller; });
/*********************************
 *
 * = UI - SCROLLER =
 *
 ***********************************/

/**
 * SCROLLER - Document Ready
 */
jQuery(document).ready(function ($) {
  var scrollerPlugin = function scrollerPlugin(container) {
    /**
     * Scroll list of modules with a mouse wheel.
     */
    var deltaKoef = .75;
    var increment = 500;
    var scrollinc = 100;
    var scroller = jQuery('.dslca-section-scroller', container);
    var scrollInner = jQuery('.dslca-section-scroller-inner', container)[0];
    scroller.on('wheel', function (event) {
      scroll_to(event.originalEvent.deltaY || event.originalEvent.deltaX);
      return false;
    });
    /**
     * Scroll to delta
     *
     * @param  {int} delta
     */

    function scroll_to(delta) {
      if (delta < 0) {
        delta = -scrollinc;
      } else {
        delta = scrollinc;
      }

      delta = delta * deltaKoef;
      var listWidth = scroller.find('.dslca-section-scroller-content').width();
      var contentWidth = scroller.width();
      if (listWidth <= contentWidth) return false;
      var scrollMax = listWidth - contentWidth + 10;
      delta = parseInt(scrollInner.style.left || 0) - delta;
      delta = delta >= 0 ? 0 : delta;
      delta = delta <= -scrollMax ? -scrollMax : delta;
      scrollInner.style.left = delta + 'px';
    }
    /**
     * Hook - Scroller Prev
     */


    jQuery('.dslca-section-scroller-prev', container).click(function (e) {
      e.preventDefault();
      scroll_to(-increment);
    });
    /**
     * Hook - Scroller Next
     */

    jQuery('.dslca-section-scroller-next', container).click(function (e) {
      e.preventDefault();
      scroll_to(increment);
    });
    jQuery(window).load(function () {
      // Initiate scroller on window resize
      jQuery(window).resize(function () {
        scroll_to(0);
      });
    });
  };

  scrollerPlugin(jQuery('.dslca-section.dslca-modules'));
  scrollerPlugin(jQuery('.dslca-section.dslca-templates-load'));
});
/** Scroll preview area when mouse are on some distant of edge */

var initPreviewAreaScroller = function initPreviewAreaScroller() {
  var pxInTik = 5;
  var timerTik = 6;
  LiveComposer.Builder.Flags.windowScroller = false;
  /** Stop scroll if within areas */

  jQuery(LiveComposer.Builder.PreviewAreaDocument).on('dragleave', '.lc-scroll-top-area, .lc-scroll-bottom-area', function (e) {
    LiveComposer.Builder.UI.stopScroller();
  });
  /** Scroll bottom */

  jQuery(LiveComposer.Builder.PreviewAreaDocument).on('dragenter dragover', '.lc-scroll-bottom-area', function (e) {
    if (LiveComposer.Builder.Flags.windowScroller !== false) return false;
    LiveComposer.Utils.publish('LC.sortableOff', {});
    LiveComposer.Builder.Flags.windowScroller = setInterval(function () {
      LiveComposer.Builder.PreviewAreaWindow.scrollBy(0, pxInTik);
    }, timerTik);
  });
  /** Scroll top */

  jQuery(LiveComposer.Builder.PreviewAreaDocument).on('dragenter', '.lc-scroll-top-area', function (e) {
    if (LiveComposer.Builder.Flags.windowScroller !== false) return false;
    LiveComposer.Utils.publish('LC.sortableOff', {});
    LiveComposer.Builder.Flags.windowScroller = setInterval(function () {
      LiveComposer.Builder.PreviewAreaWindow.scrollBy(0, -pxInTik);
    }, timerTik);
  });
  /** Stop scroll if click or drag ended */

  jQuery(LiveComposer.Builder.PreviewAreaDocument).on('dragend mouseup', 'body', function (e) {
    LiveComposer.Builder.Flags.windowScroller && LiveComposer.Builder.UI.stopScroller();
  });
};
/** Window Y-scroller */

jQuery(document).ready(function ($) {
  initPreviewAreaScroller();
  /**
   * Stops scroller function
   */

  LiveComposer.Builder.UI.stopScroller = function () {
    LiveComposer.Utils.publish('LC.sortableOn', {});
    clearInterval(LiveComposer.Builder.Flags.windowScroller);
    LiveComposer.Builder.Flags.windowScroller = false;
  };

  jQuery("#scroller-stopper").on('dragover', function () {
    LiveComposer.Builder.UI.stopScroller();
  });
});

/***/ }),

/***/ "./js/src/editor/backend/section.class.js":
/*!************************************************!*\
  !*** ./js/src/editor/backend/section.class.js ***!
  \************************************************/
/*! exports provided: Section */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Section", function() { return Section; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Builder section class
 */
var Section =
/*#__PURE__*/
function () {
  function Section(elem) {
    _classCallCheck(this, Section);

    this.sortable;
    this.sortableContainer = jQuery(elem).find('.dslc-modules-section-wrapper .dslc-modules-section-inner').eq(0)[0];
    this.initSortable(elem);
    this.initDropable(elem);
    this.reactToSortableOnOff(); // Mark section as initialized

    jQuery(elem).attr('data-jsinit', 'initialized');
  }

  _createClass(Section, [{
    key: "initDropable",
    value: function initDropable(elem) {
      jQuery(elem).droppable({
        drop: function drop(event, ui) {
          var modulesSection = jQuery(this).find('.dslc-modules-section-inner');
          var moduleID = ui.draggable.data('id');

          if (moduleID == 'DSLC_M_A') {
            dslc_modules_area_add(modulesSection);
          }
        }
      });
    }
  }, {
    key: "initSortable",
    value: function initSortable(elem) {
      this.sortable = jQuery(this.sortableContainer).sortable({
        connectWith: '.dslc-modules-section-inner',
        items: ".dslc-modules-area-dnd",
        handle: '.dslca-move-modules-area-hook:not(".dslca-action-disabled")',
        placeholder: 'dslca-modules-area-placeholder',
        cursorAt: {
          top: 0,
          left: 0
        },
        tolerance: 'intersect',
        scroll: true,
        scrollSensitivity: 100,
        scrollSpeed: 15,
        sort: function sort() {
          jQuery(this).removeClass("ui-state-default");
        },
        over: function over(e, ui) {
          var dslcSection = ui.placeholder.closest('.dslc-modules-section');
          jQuery(dslcSection).removeClass('dslc-modules-section-empty').addClass('dslc-modules-section-not-empty');
          dslcSection.siblings('.dslc-modules-section').each(function () {
            if (jQuery('.dslc-modules-area:not(.ui-sortable-helper)', jQuery(this)).length) {
              jQuery(this).removeClass('dslc-modules-section-empty').addClass('dslc-modules-section-not-empty');
            } else {
              jQuery(this).removeClass('dslc-modules-section-not-empty').addClass('dslc-modules-section-empty');
            }
          });
        },
        remove: function remove() {
          jQuery(self.elem).find('.dslc-modules-area').length == 0 && dslc_modules_area_add(jQuery(sortableContainer));
        },
        update: function update(e, ui) {
          window.dslc_generate_code();
          window.dslc_show_publish_button();
        },
        start: function start(e, ui) {
          // Placeholder
          ui.placeholder.html('<span class="dslca-placeholder-help-text"><span class="dslca-placeholder-help-text-inner">' + DSLCString.str_area_helper_text + '</span></span>');

          if (!jQuery(ui.item).hasClass('dslc-12-col')) {
            ui.placeholder.width(ui.item.width() - 10);
          } else {
            ui.placeholder.width(ui.item.width()).css({
              margin: 0
            });
          } // Add drag in progress class


          jQuery('body').removeClass('dslca-drag-not-in-progress').addClass('dslca-drag-in-progress dslca-modules-area-drag-in-progress'); // Refresh positions

          jQuery('.dslc-modules-section-inner').sortable("refreshPositions");
        },
        stop: function stop(e, ui) {
          LiveComposer.Builder.UI.stopScroller();
          jQuery('body').removeClass('dslca-drag-in-progress dslca-modules-area-drag-in-progress').addClass('dslca-drag-not-in-progress');
          jQuery('.dslca-anim-opacity-drop').removeClass('dslca-anim-opacity-drop');
        },
        change: function change(e, ui) {}
      });
    }
  }, {
    key: "reactToSortableOnOff",
    value: function reactToSortableOnOff() {
      self = this.sortable;
      /** Sort option setter */

      jQuery(document).on('LC.sortableOff', function () {
        if (undefined !== self.sortable("instance")) {
          self.sortable('option', 'disabled', true);
        }
      });
      jQuery(document).on('LC.sortableOn', function () {
        if (undefined !== self.sortable("instance")) {
          self.sortable('option', 'disabled', false);
        }
      });
    }
  }]);

  return Section;
}();

/***/ }),

/***/ "./js/src/editor/backend/sections.js":
/*!*******************************************!*\
  !*** ./js/src/editor/backend/sections.js ***!
  \*******************************************/
/*! exports provided: addSection, sectionsInitJS, sectionsInit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addSection", function() { return addSection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sectionsInitJS", function() { return sectionsInitJS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sectionsInit", function() { return sectionsInit; });
/* harmony import */ var _section_class_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./section.class.js */ "./js/src/editor/backend/section.class.js");
/* harmony import */ var _dragndrop_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dragndrop.js */ "./js/src/editor/backend/dragndrop.js");
/* harmony import */ var _modulearea_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modulearea.js */ "./js/src/editor/backend/modulearea.js");
/* harmony import */ var _modulearea_class_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modulearea.class.js */ "./js/src/editor/backend/modulearea.class.js");
/* harmony import */ var _modalwindow_class_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modalwindow.class.js */ "./js/src/editor/backend/modalwindow.class.js");
/* harmony import */ var _uigeneral_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./uigeneral.js */ "./js/src/editor/backend/uigeneral.js");
/* harmony import */ var _module_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./module.js */ "./js/src/editor/backend/module.js");
/* harmony import */ var _codegeneration_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./codegeneration.js */ "./js/src/editor/backend/codegeneration.js");
/* harmony import */ var _modalwindow_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modalwindow.js */ "./js/src/editor/backend/modalwindow.js");
/*********************************
 *
 * = ROWS =
 *
 * - dslc_row_add ( Add New )
 * - dslc_row_delete ( Delete )
 * - dslc_row_edit ( Edit )
 * - dslc_row_edit_slider_init ( Edit - Initiate Slider )
 * - dslc_row_edit_cancel ( Edit - Cancel Changes )
 * - dslc_row_edit_confirm ( Edit - Confirm Changes )
 * - dslc_row_copy ( Copy )
 * - dslc_row_import ( Import )
 *
 ***********************************/










var sectionsEventsInit = function sectionsEventsInit() {
  var $ = jQuery;

  var actionAvail = function actionAvail() {
    if (LiveComposer.Builder.Flags.panelOpened) {
      LiveComposer.Builder.UI.shakePanelConfirmButton();
      return false;
    }

    return true;
  };

  jQuery(".dslc-modules-section", LiveComposer.Builder.PreviewAreaDocument).each(function () {
    console.log("each section 🎷");
    new _section_class_js__WEBPACK_IMPORTED_MODULE_0__["Section"](this);
  });
  /**
   * Hook - Delete Row
   */

  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-delete-modules-section-hook', function (e) {
    // Check if action can be fired
    if (!actionAvail()) return false;
    e.preventDefault();
    var self = this;

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      Object(_modalwindow_class_js__WEBPACK_IMPORTED_MODULE_4__["CModalWindow"])({
        title: DSLCString.str_del_row_title,
        content: DSLCString.str_del_row_descr,
        confirm: function confirm() {
          dslc_row_delete(jQuery(self).closest('.dslc-modules-section'));
        }
      });
      /*	dslc_js_confirm( 'delete_modules_section', '<span class="dslca-prompt-modal-title">' + DSLCString.str_del_row_title +
      		'</span><span class="dslca-prompt-modal-descr">' + DSLCString.str_del_row_descr + '</span>', jQuery(this) );*/
    }
  });
  /**
   * Hook - Import Row
   */

  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-import-modules-section-hook', function (e) {
    e.preventDefault(); // Check if action can be fired

    if (!actionAvail()) return false;

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      Object(_modalwindow_class_js__WEBPACK_IMPORTED_MODULE_4__["CModalWindow"])({
        title: DSLCString.str_import_row_title,
        content: DSLCString.str_import_row_descr + '<br><br><textarea></textarea>',
        confirm: function confirm() {
          dslc_row_import(jQuery('.dslca-prompt-modal textarea').val());
          jQuery('.dslca-prompt-modal-confirm-hook span').css({
            opacity: 0
          });
          jQuery('.dslca-prompt-modal-confirm-hook .dslca-loading').show();
        },
        confirm_title: DSLCString.str_import
      });
      /*jQuery('.dslca-prompt-modal-confirm-hook').html('<span class="dslc-icon dslc-icon-ok"></span><span>' + DSLCString.str_import +
      	'</span><div class="dslca-loading followingBallsGWrap"><div class="followingBallsG_1 followingBallsG"></div>'+
      	'<div class="followingBallsG_2 followingBallsG"></div><div class="followingBallsG_3 followingBallsG"></div><div class="followingBallsG_4 followingBallsG"></div></div>');
      	dslc_js_confirm( 'import_modules_section', '<span class="dslca-prompt-modal-title">' + DSLCString.str_import_row_title +
      	'</span><span class="dslca-prompt-modal-descr">' + DSLCString.str_import_row_descr + ' <br><br><textarea></textarea></span>', jQuery(this) );*/
    }
  });
  /**
   * Hook - Export Row
   */

  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-export-modules-section-hook', function (e) {
    e.preventDefault(); // Check if action can be fired

    if (!actionAvail()) return false;

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      jQuery('.dslca-prompt-modal-cancel-hook').hide();
      jQuery('.dslca-prompt-modal-confirm-hook').html('<span class="dslc-icon dslc-icon-ok"></span>' + DSLCString.str_ok);
      console.log("CModalWindow>>>>>>>>>>>>");
      Object(_modalwindow_class_js__WEBPACK_IMPORTED_MODULE_4__["CModalWindow"])({
        title: DSLCString.str_export_row_title,
        content: DSLCString.str_export_row_descr + '<br><br><textarea>' + '[' + Object(_codegeneration_js__WEBPACK_IMPORTED_MODULE_7__["generateSectionCode"])(jQuery(this).closest('.dslc-modules-section')) + ']' + '</textarea></span>'
      }); // dslc_js_confirm( 'export_modules_section', '<span class="dslca-prompt-modal-title">' + DSLCString.str_export_row_title +
      // 	'</span><span class="dslca-prompt-modal-descr">' + DSLCString.str_export_row_descr + ' <br><br><textarea></textarea></span>', jQuery(this) );
      // jQuery('.dslca-prompt-modal textarea').val( dslc_generate_section_code( jQuery(this).closest('.dslc-modules-section') ) );
    }
  });
  /**
   * Hook - Copy Row
   */

  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-copy-modules-section-hook', function () {
    // Check if action can be fired
    if (!actionAvail()) return false;

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      dslc_row_copy(jQuery(this).closest('.dslc-modules-section'));
    }
  });
  /**
   * Hook - Add Row
   */

  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-add-modules-section-hook', function (e) {
    e.preventDefault(); // Check if action can be fired

    if (!actionAvail()) return false;
    var button = jQuery(this);

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      // Add a loading animation
      button.find('.dslca-icon').removeClass('dslc-icon-align-justify').addClass('dslc-icon-spinner dslc-icon-spin'); // Add a row

      addSection(function () {
        button.find('.dslca-icon').removeClass('dslc-icon-spinner dslc-icon-spin').addClass('dslc-icon-align-justify');
      });
    }
  });
  /**
   * Hook - Edit Row
   */

  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-edit-modules-section-hook', function () {
    // Check if action can be fired
    if (!actionAvail()) return false;
    var self = this;
    var module_edited = jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).length;
    var row_edited = jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).length; /// If settings panel opened - finish func

    if (LiveComposer.Builder.Flags.uiHidden || module_edited > 0 || row_edited > 0) return false; // If not disabled ( disabling used for tutorial )

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      // Trigger the function to edit
      dslc_row_edit(jQuery(this).closest('.dslc-modules-section'));
    }

    jQuery('body', LiveComposer.Builder.PreviewAreaDocument).addClass('section-editing-in-progress');
  });
};
/**
 * Row - Add New
 */


var addSection = function addSection(callback) {
  if (window.dslcDebug) console.log('dslc_row_add');
  callback = typeof callback !== 'undefined' ? callback : false;
  var defer = jQuery.Deferred();
  var browserCacheTmp = sessionStorage;
  var newRow = jQuery();
  var cachedAjaxRequest = browserCacheTmp.getItem('cache-dslc-ajax-add-modules-section'); // If option 'lc_section_padding_vertical' was update.

  if (null !== cachedAjaxRequest) {
    var current_value, cache_curent_value;
    current_value = DSLCMainOptions.section_padding_vertical;
    cache_curent_value = jQuery(cachedAjaxRequest).find('input[data-id="padding"]').val();

    if (current_value !== cache_curent_value) {
      browserCacheTmp.removeItem('cache-dslc-ajax-add-modules-section');
      cachedAjaxRequest = null;
    }
  } // If no cache for current Ajax request.


  if (null === cachedAjaxRequest) {
    // AJAX Request
    jQuery.post(DSLCAjax.ajaxurl, {
      action: 'dslc-ajax-add-modules-section',
      dslc: 'active'
    }, function (response) {
      // newRow = jQuery(response.output);
      browserCacheTmp.setItem('cache-dslc-ajax-add-modules-section', response.output);
      newRow = dslc_row_after_add(response.output);

      if (callback) {
        callback();
      }

      return defer;
    });
  } else {
    // There is cached version of AJAX request.
    // newRow = jQuery(cachedAjaxRequest);
    newRow = dslc_row_after_add(cachedAjaxRequest);

    if (callback) {
      callback();
    }

    return defer;
  }
};
/**
 * Finish new row creation process.
 *
 * @param  {String} newRowHTML HTML code of the new row.
 * @return {jQuery}            New ROW jQuery object.
 */

function dslc_row_after_add(newRowHTML) {
  var newRow = jQuery(newRowHTML); // Append new row

  newRow.appendTo(LiveComposer.Builder.PreviewAreaDocument.find("#dslc-main")); // Call other functions

  Object(_dragndrop_js__WEBPACK_IMPORTED_MODULE_1__["dragAndDropInit"])();
  window.dslc_generate_code();
  window.dslc_show_publish_button();
  new _section_class_js__WEBPACK_IMPORTED_MODULE_0__["Section"](newRow);
  new _modulearea_class_js__WEBPACK_IMPORTED_MODULE_3__["ModuleArea"](newRow.find('.dslc-modules-area').eq(0)[0]);
  newRow.find('.dslc-modules-area').addClass('dslc-modules-area-empty dslc-last-col');
  return newRow;
}
/**
 * Row - Delete
 */


function dslc_row_delete(row) {
  if (window.dslcDebug) console.log('dslc_row_delete'); // If the row is being edited

  if (row.find('.dslca-module-being-edited')) {
    // Hide the filter hooks
    jQuery('.dslca-header .dslca-options-filter-hook').hide(); // Hide the save/cancel actions

    jQuery('.dslca-module-edit-actions').hide(); // Show the section hooks

    jQuery('.dslca-header .dslca-go-to-section-hook').show();
    Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_5__["showSection"])('.dslca-modules');
  } // Remove row


  row.trigger('mouseleave').remove(); // Call other functions

  window.dslc_generate_code();
  window.dslc_show_publish_button();
}
/**
 * Row - Edit
 */


function dslc_row_edit(row) {
  if (window.dslcDebug) console.log('dslc_row_edit'); // Vars we will use

  var dslcModulesSectionOpts, dslcVal; // Set editing class

  jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-module-being-edited');
  jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-modules-section-being-edited').removeClass('dslca-modules-section-change-made');
  row.addClass('dslca-modules-section-being-edited'); // Hide the section hooks

  jQuery('.dslca-header .dslca-go-to-section-hook').hide(); // Show the styling/responsive tabs

  jQuery('.dslca-row-options-filter-hook[data-section="styling"], .dslca-row-options-filter-hook[data-section="responsive"]').show();
  jQuery('.dslca-row-options-filter-hook[data-section="styling"]').trigger('click'); // Hide the filter hooks

  jQuery('.dslca-header .dslca-options-filter-hook').hide(); // Hide the save/cancel actions

  jQuery('.dslca-module-edit-actions').hide(); // Show the save/cancel actions

  jQuery('.dslca-row-edit-actions').show(); // Set current values

  jQuery('.dslca-modules-section-edit-field').each(function () {
    /**
     * Temporary migration from 'wrapped' value to 'wrapper' in ROW type selector
     * TODO: delete this block in a few versions as problem do not exists on new installs
     *
     * @since ver 1.1
     */
    if ('type' === jQuery(this).data('id')) {
      if ('' === jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input[data-id="type"]', LiveComposer.Builder.PreviewAreaDocument).val() || 'wrapped' === jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input[data-id="type"]', LiveComposer.Builder.PreviewAreaDocument).val()) {
        jQuery('select[data-id="type"]').val('wrapper').change();
      }
    }

    if (jQuery(this).data('id') == 'border-top') {
      if (jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input[data-id="border"]', LiveComposer.Builder.PreviewAreaDocument).val().indexOf('top') >= 0) {
        jQuery(this).prop('checked', true);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check-empty').addClass('dslc-icon-check');
      } else {
        jQuery(this).prop('checked', false);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check').addClass('dslc-icon-check-empty');
      }
    } else if (jQuery(this).data('id') == 'border-right') {
      if (jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input[data-id="border"]', LiveComposer.Builder.PreviewAreaDocument).val().indexOf('right') >= 0) {
        jQuery(this).prop('checked', true);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check-empty').addClass('dslc-icon-check');
      } else {
        jQuery(this).prop('checked', false);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check').addClass('dslc-icon-check-empty');
      }
    } else if (jQuery(this).data('id') == 'border-bottom') {
      if (jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input[data-id="border"]', LiveComposer.Builder.PreviewAreaDocument).val().indexOf('bottom') >= 0) {
        jQuery(this).prop('checked', true);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check-empty').addClass('dslc-icon-check');
      } else {
        jQuery(this).prop('checked', false);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check').addClass('dslc-icon-check-empty');
      }
    } else if (jQuery(this).data('id') == 'border-left') {
      if (jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input[data-id="border"]', LiveComposer.Builder.PreviewAreaDocument).val().indexOf('left') >= 0) {
        jQuery(this).prop('checked', true);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check-empty').addClass('dslc-icon-check');
      } else {
        jQuery(this).prop('checked', false);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check').addClass('dslc-icon-check-empty');
      }
    } else if (jQuery(this).hasClass('dslca-modules-section-edit-field-checkbox')) {
      if (jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input[data-id="' + jQuery(this).data('id') + '"]', LiveComposer.Builder.PreviewAreaDocument).val().indexOf(jQuery(this).data('val')) >= 0) {
        jQuery(this).prop('checked', true);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check-empty').addClass('dslc-icon-check');
      } else {
        jQuery(this).prop('checked', false);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check').addClass('dslc-icon-check-empty');
      }
    } else {
      jQuery(this).val(jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input[data-id="' + jQuery(this).data('id') + '"]', LiveComposer.Builder.PreviewAreaDocument).val().trim().replace('%(%', '[').replace('%)%', ']'));

      if (jQuery(this).hasClass('dslca-modules-section-edit-field-colorpicker')) {
        var _this = jQuery(this);

        jQuery(this).closest('.dslca-modules-section-edit-option').find('.sp-preview-inner').removeClass('sp-clear-display').css({
          'background-color': _this.val()
        });
        jQuery(this).css({
          'background-color': _this.val()
        });
      }
    }
  });
  jQuery('.dslca-modules-section-edit-field-upload').each(function () {
    var dslcParent = jQuery(this).closest('.dslca-modules-section-edit-option');

    if (jQuery(this).val() && jQuery(this).val() !== 'disabled') {
      jQuery('.dslca-modules-section-edit-field-image-add-hook', dslcParent).hide();
      jQuery('.dslca-modules-section-edit-field-image-remove-hook', dslcParent).show();
    } else {
      jQuery('.dslca-modules-section-edit-field-image-remove-hook', dslcParent).hide();
      jQuery('.dslca-modules-section-edit-field-image-add-hook', dslcParent).show();
    }
  }); // Initiate numeric option sliders
  // dslc_row_edit_slider_init();
  // Show options management

  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_5__["showSection"])('.dslca-modules-section-edit');
  LiveComposer.Builder.Flags.panelOpened = true; // Hide the publish button

  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_5__["hidePublishButton"])();
}
/**
 * Row - Edit - Cancel Changes
 */


function dslc_row_edit_cancel(callback) {
  if (window.dslcDebug) console.log('dslc_row_cancel_changes');
  callback = typeof callback !== 'undefined' ? callback : false; // Time to generate code optimized {HACK}

  LiveComposer.Builder.Flags.generate_code_after_row_changed = false; // Recover original data from data-def attribute for each control

  jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input', LiveComposer.Builder.PreviewAreaDocument).each(function () {
    jQuery(this).val(jQuery(this).data('def')); // Fire change for every ROW control, so it redraw linked CSS properties

    jQuery('.dslca-modules-section-edit-field[data-id="' + jQuery(this).data('id') + '"]').val(jQuery(this).data('def')).trigger('change');
  });
  LiveComposer.Builder.Flags.generate_code_after_row_changed = true;
  window.dslc_generate_code();
  window.dslc_show_publish_button();
  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_5__["showSection"])('.dslca-modules'); // Hide the save/cancel actions

  jQuery('.dslca-row-edit-actions').hide(); // Hide the styling/responsive tabs

  jQuery('.dslca-row-options-filter-hook').hide(); // Show the section hooks

  jQuery('.dslca-header .dslca-go-to-section-hook').show(); // Show the publish button

  dslc_show_publish_button; // Remove being edited class

  jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-modules-section-being-edited dslca-modules-section-change-made');

  if (callback) {
    callback();
  }

  LiveComposer.Builder.Flags.panelOpened = false;
  jQuery("body", LiveComposer.Builder.PreviewAreaDocument).removeClass('section-editing-in-progress');
}
/**
 * Row - Edit - Confirm Changes
 */


function dslc_row_edit_confirm(callback) {
  if (window.dslcDebug) console.log('dslc_confirm_row_changes');
  callback = typeof callback !== 'undefined' ? callback : false;
  jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input', LiveComposer.Builder.PreviewAreaDocument).each(function () {
    jQuery(this).data('def', jQuery(this).val());
  });
  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_5__["showSection"])('.dslca-modules'); // Hide the save/cancel actions

  jQuery('.dslca-row-edit-actions').hide(); // Hide the styling/responsive tabs

  jQuery('.dslca-row-options-filter-hook').hide(); // Show the section hooks

  jQuery('.dslca-header .dslca-go-to-section-hook').show(); // Remove being edited class

  jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-modules-section-being-edited dslca-modules-section-change-made');
  window.dslc_generate_code(); // Show the publish button

  window.dslc_show_publish_button();

  if (callback) {
    callback();
  }

  LiveComposer.Builder.Flags.panelOpened = false;
  jQuery("body", LiveComposer.Builder.PreviewAreaDocument).removeClass('section-editing-in-progress');
}
/**
 * Row - Copy
 */


function dslc_row_copy(row) {
  if (window.dslcDebug) console.log('dslc_row_copy'); // Vars that will be used

  var dslc_module_id, dslcModulesSectionCloned, dslcModule; // Clone the row

  dslcModulesSectionCloned = row.clone().appendTo(jQuery('#dslc-main', LiveComposer.Builder.PreviewAreaDocument)); // Mark new ROW as NON initialized

  dslcModulesSectionCloned[0].removeAttribute('data-jsinit'); // Go through each area of the new row and apply correct data-size
  // Mark each module area inside as NON initialized (2)

  dslcModulesSectionCloned.find('.dslc-modules-area').each(function () {
    var dslcIndex = jQuery(this).index();
    jQuery(this).data('size', row.find('.dslc-modules-area:eq( ' + dslcIndex + ' )').data('size'));
    this.removeAttribute('data-jsinit'); // (2)
  });
  new _section_class_js__WEBPACK_IMPORTED_MODULE_0__["Section"](dslcModulesSectionCloned);
  /**
   * Re-render modules inside of the new ROW
   */
  // Remove animations and temporary hide modules inside

  dslcModulesSectionCloned.find('.dslc-module-front').css({
    '-webkit-animation-name': 'none',
    '-moz-animation-name': 'none',
    'animation-name': 'none',
    'animation-duration': '0',
    '-webkit-animation-duration': '0',
    opacity: 0 // Go through each module inside the new ROW

  }).each(function () {
    // Current module
    var dslc_module = jQuery(this); //Generate new ID for the new module and change it in HTML/CSS of the module.

    Object(_module_js__WEBPACK_IMPORTED_MODULE_6__["getNewModuleId"])(dslc_module[0]); // Check init for rows and module areas

    sectionsInitJS();
    Object(_modulearea_js__WEBPACK_IMPORTED_MODULE_2__["moduleareasInitJS"])(); // TODO: the next function contains AJAX call. It needs optimization.

    window.dslc_generate_code();
    /**
     * Re-init drag and drop from modules list into modules areas.
     * Need this function, so we can drop new modules on the cloned areas.
     */

    Object(_dragndrop_js__WEBPACK_IMPORTED_MODULE_1__["dragAndDropInit"])(); // Remove "dslca-module-being-edited" class form any element

    jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-module-being-edited'); // Show back new created module

    dslc_module.animate({
      opacity: 1
    }, 300);
    window.dslc_show_publish_button();
  }); // Generate new ID for the new section.

  dslc_section_new_id(dslcModulesSectionCloned[0]);
}
/**
 * Generate new ID for the section provided
 *
 *
 * @param DOM section that needs ID updated (new ID).
 * @return void
 */


function dslc_section_new_id(section) {
  if (window.dslcDebug) console.log('dslc_section_new_id');
  var dslc_section_id = LiveComposer.Utils.get_unique_id(); // Generate new section ID.
  // Update section ID in data attribute

  section.setAttribute('data-section-id', dslc_section_id); // Update section ID in raw base64 code (dslc_code) of the section

  LiveComposer.Utils.update_section_property_raw(section, 'section_instance_id', dslc_section_id);
}
/**
 * Row - Import
 */


function dslc_row_import(rowCode) {
  if (window.dslcDebug) console.log('dslc_row_import'); // AJAX Call

  jQuery.post(DSLCAjax.ajaxurl, {
    action: 'dslc-ajax-import-modules-section',
    dslc: 'active',
    dslc_modules_section_code: rowCode
  }, function (response) {
    // Close the import popup/modal
    Object(_modalwindow_js__WEBPACK_IMPORTED_MODULE_8__["confirmClose"])(); // Add the new section

    jQuery('#dslc-main', LiveComposer.Builder.PreviewAreaDocument).append(response.output); // Call other functions

    LiveComposer.Builder.PreviewAreaWindow.dslc_bg_video();
    LiveComposer.Builder.PreviewAreaWindow.dslc_carousel();
    LiveComposer.Builder.PreviewAreaWindow.dslc_masonry(); // Check init for rows and module areas

    sectionsInitJS();
    Object(_modulearea_js__WEBPACK_IMPORTED_MODULE_2__["moduleareasInitJS"])();
    Object(_dragndrop_js__WEBPACK_IMPORTED_MODULE_1__["dragAndDropInit"])();
    window.dslc_generate_code();
    window.dslc_show_publish_button();
  });
}
/**
 * Deprecated Functions and Fallbacks
 */


function dslc_add_modules_section() {
  addSection();
}

function dslc_delete_modules_section(row) {
  dslc_row_delete(row);
}

function dslc_edit_modules_section(row) {
  dslc_row_edit(row);
}

function dslc_copy_modules_section(row) {
  dslc_row_copy(row);
}

function dslc_import_modules_section(rowCode) {
  dslc_row_import(rowCode);
}
/**
 * Check ROWs initialization
 *
 * @return void
 */


var sectionsInitJS = function sectionsInitJS() {
  // Select all the ROWs form the main section of the page
  jQuery('#dslc-main .dslc-modules-section', LiveComposer.Builder.PreviewAreaDocument).each(function () {
    // Check if all the rows have data attribute 'jsinit' set to 'initialized'?
    if (jQuery(this).data('jsinit') !== 'initialized') {
      // Initialize all the rows without 'jsinit' attribute!
      new _section_class_js__WEBPACK_IMPORTED_MODULE_0__["Section"](this);
    }
  });
};
var sectionsInit = function sectionsInit() {
  sectionsInitJS();
  sectionsEventsInit();
  /**
   * Hook - Confirm Row Changes
   */

  jQuery(document).on('click', '.dslca-row-edit-save', function () {
    dslc_row_edit_confirm();
    jQuery(".dslca-currently-editing").removeAttr('style');
    jQuery('.dslca-row-options-filter-hook.dslca-active').removeClass('dslca-active');
    LiveComposer.Builder.PreviewAreaWindow.dslc_responsive_classes(true);
  });
  /**
   * Hook - Cancel Row Changes
   */

  jQuery(document).on('click', '.dslca-row-edit-cancel', function () {
    dslc_row_edit_cancel();
    jQuery(".dslca-currently-editing").removeAttr('style');
    jQuery('.dslca-row-options-filter-hook.dslca-active').removeClass('dslca-active');
    LiveComposer.Builder.PreviewAreaWindow.dslc_responsive_classes(true);
  });
};

/***/ }),

/***/ "./js/src/editor/backend/sectionscontainer.class.js":
/*!**********************************************************!*\
  !*** ./js/src/editor/backend/sectionscontainer.class.js ***!
  \**********************************************************/
/*! exports provided: CSectionsContainer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CSectionsContainer", function() { return CSectionsContainer; });
/**
 * Sections container class
 */


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CSectionsContainer =
/*#__PURE__*/
function () {
  function CSectionsContainer(elem) {
    _classCallCheck(this, CSectionsContainer);

    this.sortable;
    this.initSortable(elem);
    this.reactToSortableOnOff();
  }

  _createClass(CSectionsContainer, [{
    key: "initSortable",
    value: function initSortable(elem) {
      console.log("initSortable!!!!!!!!!!!!!!!!");
      this.sortable = window.jQuery(elem).sortable({
        items: ".dslc-modules-section-dnd",
        handle: '.dslca-move-modules-section-hook:not(".dslca-action-disabled")',
        placeholder: 'dslca-modules-section-placeholder',
        tolerance: 'intersect',
        cursorAt: {
          bottom: 10
        },
        axis: 'y',
        scroll: true,
        scrollSensitivity: 140,
        scrollSpeed: 5,
        sort: function sort() {
          jQuery(this).removeClass("ui-state-default");
        },
        update: function update(e, ui) {
          window.dslc_show_publish_button();
        },
        start: function start(e, ui) {
          jQuery('body').removeClass('dslca-drag-not-in-progress').addClass('dslca-drag-in-progress');
          jQuery('body', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-drag-not-in-progress').addClass('dslca-drag-in-progress');
          ui.placeholder.html('<span class="dslca-placeholder-help-text"><span class="dslca-placeholder-help-text-inner">' + DSLCString.str_row_helper_text + '</span></span>');
          jQuery('.dslc-content').sortable("refreshPositions");
        },
        stop: function stop(e, ui) {
          window.dslc_generate_code();
          LiveComposer.Builder.UI.stopScroller();
          jQuery('body', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-drag-in-progress').addClass('dslca-drag-not-in-progress');
          jQuery('body').removeClass('dslca-drag-in-progress').addClass('dslca-drag-not-in-progress');
          jQuery('.dslca-anim-opacity-drop').removeClass('dslca-anim-opacity-drop');
        }
      });
    }
  }, {
    key: "reactToSortableOnOff",
    value: function reactToSortableOnOff() {
      self = this.sortable;
      /** Sort option setter */

      jQuery(document).on('LC.sortableOff', function () {
        if (undefined !== self.sortable("instance")) {
          self.sortable('option', 'disabled', true);
        }
      });
      jQuery(document).on('LC.sortableOn', function () {
        if (undefined !== self.sortable("instance")) {
          self.sortable('option', 'disabled', false);
        }
      });
    }
  }]);

  return CSectionsContainer;
}();

/***/ }),

/***/ "./js/src/editor/backend/settings.panel.js":
/*!*************************************************!*\
  !*** ./js/src/editor/backend/settings.panel.js ***!
  \*************************************************/
/*! exports provided: settingsPanelInit, elementOptionsTabs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "settingsPanelInit", function() { return settingsPanelInit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elementOptionsTabs", function() { return elementOptionsTabs; });
/* harmony import */ var _uigeneral_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./uigeneral.js */ "./js/src/editor/backend/uigeneral.js");
/* harmony import */ var _module_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./module.js */ "./js/src/editor/backend/module.js");
/* harmony import */ var _presets_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./presets.js */ "./js/src/editor/backend/presets.js");
/* harmony import */ var _modalwindow_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modalwindow.js */ "./js/src/editor/backend/modalwindow.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Builder settings panel functions providing work with modules
 */




var dslcRegularFontsArray = window.DSLCFonts.regular;
var dslcGoogleFontsArray = window.DSLCFonts.google;
var dslcAllFontsArray = dslcRegularFontsArray.concat(dslcGoogleFontsArray); // Set current/default icons set

var dslcIconsCurrentSet = window.DSLCIcons.fontawesome;
/**
 * Modules - Document Ready
 */

jQuery(document).ready(function ($) {
  dslc_module_options_tooltip();
  dslc_module_options_font();
  dslc_module_options_icon();
  dslc_module_options_icon_returnid();
  dslc_module_options_text_align();
  dslc_module_options_checkbox();
  dslc_module_options_box_shadow();
  dslc_module_options_text_shadow();
  /* Initiate all the color picker controls on the module/section options panel. */

  var dslca_options_with_colorpicker = '';
  dslca_options_with_colorpicker += '.dslca-module-edit-field-colorpicker';
  dslca_options_with_colorpicker += ', .dslca-modules-section-edit-field-colorpicker';
  dslca_options_with_colorpicker += ', .dslca-module-edit-option-box-shadow-color';
  dslca_options_with_colorpicker += ', .dslca-module-edit-option-text-shadow-color'; // Init color picker on click only to not polute DOM with unwanted elements.
  // It will fire only once (first time) as color picker then put it's own listeners.

  jQuery(document).on('click', dslca_options_with_colorpicker, function () {
    // Call the color picker init function.
    dslc_module_options_color(this); // Make sure the color picker popup appears in the right place.

    var wrapper = jQuery(this).closest('.dslca-color-option');
    var optionsPanel = jQuery('.dslca-module-edit-options-inner');
    var colorpicker = wrapper.find('.wp-picker-holder');
    var offset = wrapper.offset();
    var offsetPopup = offset.left + 15;
    var windoWidth = window.innerWidth;
    var popupWidth = 260;

    if (windoWidth < offsetPopup + popupWidth) {
      offsetPopup = windoWidth - popupWidth;
    } // Set the right position for the color picker popup on first click.


    colorpicker.css('left', offsetPopup + 'px'); // Update position left for the color picker on options scroll.

    jQuery(optionsPanel).on('scroll', function (event) {
      offset = wrapper.offset();
      var offsetPopup = offset.left + 15;
      var windoWidth = window.innerWidth;
      var popupWidth = 260;

      if (windoWidth < offsetPopup + popupWidth) {
        offsetPopup = windoWidth - popupWidth;
      }

      colorpicker.css('left', offsetPopup + 'px');
    });
  });
  /* Initiate all the slider controls on the module options panel. */

  jQuery('.dslca-container').on('mouseenter', '.dslca-module-edit-option-slider', function () {
    // Fixed: https://github.com/live-composer/live-composer-page-builder/issues/740
    if (!jQuery(this).hasClass('dslca-module-edit-option-select')) {
      dslc_module_options_numeric(this);
    }
  });
  /* Initiate all the slider controls on the row options panel. */

  jQuery('.dslca-container').on('mouseenter', '.dslca-modules-section-edit-option-slider', function () {
    dslc_module_options_numeric(this);
  });
  /**
   * Hook - Submit
   */

  jQuery('.dslca-module-edit-form').submit(function (e) {
    e.preventDefault();
    Object(_module_js__WEBPACK_IMPORTED_MODULE_1__["moduleOutputAltered"])();
  });
  /**
   * Hook - Tab Switch
   */

  jQuery(document).on('click', '.dslca-module-edit-options-tab-hook', function (e) {
    e.preventDefault();
    elementOptionsTabs(jQuery(this));
  });
  /**
   * Hook - Option Section Switch
   */

  jQuery(document).on('click', '.dslca-options-filter-hook', function (e) {
    e.preventDefault();
    var dslcPrev = jQuery('.dslca-options-filter-hook.dslca-active').data('section');
    var currentSection = jQuery(this).data('section');
    jQuery('.dslca-options-filter-hook.dslca-active').removeClass('dslca-active');
    jQuery(this).addClass('dslca-active');
    dslc_module_options_section_filter(currentSection); // If previous was responsive reload module

    if (dslcPrev == 'responsive') {
      // Show the loader
      jQuery('.dslca-container-loader').show(); // Reset the responsive classes

      window.LiveComposer.Builder.PreviewAreaWindow.dslc_responsive_classes(); // Reload Module

      Object(_module_js__WEBPACK_IMPORTED_MODULE_1__["moduleOutputAltered"])(function () {
        // Hide the loader
        jQuery('.dslca-container-loader').hide();
      });
      /**
       * Destroy resizable preview functionality
       * when leaving Responsive view.
       */

      jQuery('#page-builder-preview-area').resizable('destroy').attr('style', '');
    }
    /**
     * Make the preview area resizable
     * when entering Responsive view.
     */


    if (currentSection == 'responsive') {
      jQuery('#page-builder-preview-area').resizable();
    }
  });
  /**
   * Hook - Confirm Changes
   */

  jQuery(document).on('click', '.dslca-module-edit-save', function (e) {
    e.preventDefault();
    dslc_module_options_confirm_changes(function () {
      // window.LiveComposer.Builder.UI.initInlineEditors({withRemove:true});
      window.LiveComposer.Builder.UI.unloadOptionsDeps();
      window.LiveComposer.Builder.Flags.panelOpened = false;
      jQuery("body", window.LiveComposer.Builder.PreviewAreaDocument).removeClass('module-editing-in-progress');
    });
    jQuery('.dslca-options-filter-hook.dslca-active').removeClass('dslca-active');
    dslc_disable_responsive_view();
  });
  /**
   * Hook - Cancel Changes
   */

  jQuery(document).on('click', '.dslca-module-edit-cancel', function (e) {
    e.preventDefault();
    dslc_module_options_cancel_changes(function () {
      // window.LiveComposer.Builder.UI.initInlineEditors({withRemove:true});
      window.LiveComposer.Builder.UI.unloadOptionsDeps();
      window.LiveComposer.Builder.Flags.panelOpened = false;
      jQuery("body", window.LiveComposer.Builder.PreviewAreaDocument).removeClass('module-editing-in-progress');
    });
    jQuery('.dslca-options-filter-hook.dslca-active').removeClass('dslca-active');
    dslc_disable_responsive_view();
  });
});
/* Editor scripts */

var settingsPanelInit = function settingsPanelInit() {
  var self = window.LiveComposer.Builder;
  window.LiveComposer.Builder.Helpers.colorpickers = [];
  /*
  	window.LiveComposer.Builder.UI.initInlineEditors = function(params){
  		params = params || {};
  
  		if ( params.withRemove == true ) {
  			try {
  				window.LiveComposer.Builder.PreviewAreaWindow.tinyMCE.remove();
  			} catch(err) {
  				console.info( 'No tinyMCE code found. Error code: 10181116.' );
  			}
  		}
  
  		window.LiveComposer.Builder.PreviewAreaWindow.tinyMCE.init({
  			selector: '.inline-editor.dslca-editable-content',
  			editor_deselector: 'mce-content-body',
  			menubar: false,
  			inline: true,
  			plugins: 'wordpress wplink lists paste',
  			paste_as_text: true, // Paste styled text as plain text only. Requires 'paste' in plugins.
  			paste_block_drop: true, // Disabled drop action for inline editor to prevent js errors in the console. http://archive.tinymce.com/wiki.php/Plugin3x:paste
  			style_formats: [
  					{title: 'Paragraph', format: 'p'},
  					{title: 'Header 1', format: 'h1'},
  					{title: 'Header 2', format: 'h2'},
  					{title: 'Header 3', format: 'h3'},
  					{title: 'Header 4', format: 'h4'},
  					{title: 'Header 5', format: 'h5'},
  					{title: 'Header 6', format: 'h6'},
  			  ],
  			toolbar: 'styleselect | bold italic blockquote | removeformat | bullist numlist '
  		});
  	}
  */

  /* Destroy instanced of sliders, color pickers and other temporary elements */

  window.LiveComposer.Builder.UI.clearUtils = function () {
    if (window.dslcDebug) console.log('window.LiveComposer.Builder.UI.clearUtils'); // Destroy all Color Pickers

    window.LiveComposer.Builder.UI.clearColorPickers(); // Delete module backups form memory.

    if (undefined !== window.LiveComposer.Builder.moduleBackup) {
      window.LiveComposer.Builder.moduleBackup.remove();
    }

    jQuery('.temp-styles-for-module', window.LiveComposer.Builder.PreviewAreaDocument).remove(); // Hide inline editor panel if on [Confirm] or [Cancel] button click.

    jQuery('.mce-tinymce', window.LiveComposer.Builder.PreviewAreaDocument).hide();
  };

  window.LiveComposer.Builder.UI.clearColorPickers = function () {
    if (Array.isArray(self.Helpers.colorpickers)) {
      self.Helpers.colorpickers.forEach(function (item) {
        // Do not delete color picker instance from row settings panel,
        // as it stays on page and not get loaded via Ajax.
        if (!jQuery(item).hasClass('dslca-modules-section-edit-field')) {
          // Destroy color picker instance.
          jQuery(item).remove();
        }
      });
      self.Helpers.colorpickers = [];
    } // Delete the color picker events.


    jQuery('body').off('click.wpcolorpicker');
  };
  /** Options dependencies */


  window.LiveComposer.Builder.Helpers.depsHandlers = [];

  window.LiveComposer.Builder.UI.loadOptionsDeps = function () {
    var self = this;
    jQuery(".dslca-module-edit-option").each(function () {
      var elem = this;
      var parsed = true;

      try {
        var dep = JSON.parse(LiveComposer.Utils.b64_to_utf8(jQuery(this).data('dep')));
      } catch (e) {
        parsed = false;
      }

      if (parsed) {
        var handler = function handler() {
          var optElem = this;
          var localDep = {};

          if ((optElem.type == 'radio' || optElem.type == 'checkbox') && dep[optElem.value] == undefined) {
            return false;
          }

          if (optElem.type == 'checkbox' && dep[optElem.value] != undefined) {
            localDep[optElem.value] = dep[optElem.value];
          } else {
            localDep = dep;
          }

          Object.keys(localDep).forEach(function (opt_val) {
            localDep[opt_val].split(',').forEach(function (item) {
              var opt_wrap = jQuery(".dslca-module-edit-option-" + item.trim()).closest('.dslca-module-edit-option');
              var checkedCheckbox = true;

              if (optElem.type == 'radio' || optElem.type == 'checkbox') {
                checkedCheckbox = jQuery(optElem).is(":checked");
              }

              var section_tab = jQuery('.dslca-module-edit-options-tab-hook.dslca-active').data('id');

              if (optElem.value == opt_val && checkedCheckbox) {
                if (opt_wrap.not(".dependent")) {
                  opt_wrap.addClass('dependent');
                }

                if (opt_wrap.hasClass('dep-hide')) {
                  opt_wrap.removeClass('dep-hide');
                  opt_wrap.addClass('dep-show');
                } else {
                  opt_wrap.addClass('dep-show');
                }

                if (section_tab == opt_wrap.data('tab')) {
                  opt_wrap.show();
                }
              } else {
                if (opt_wrap.not(".dependent")) {
                  opt_wrap.addClass('dependent');
                }

                if (opt_wrap.hasClass('dep-show')) {
                  opt_wrap.removeClass('dep-show');
                  opt_wrap.addClass('dep-hide');
                } else {
                  opt_wrap.addClass('dep-hide');
                }

                opt_wrap.hide();
              }
            });
          });
        };

        jQuery(document).on('change dslc-init-deps', '.dslca-module-edit-option *[data-id="' + jQuery(this).data('id') + '"]', handler);
        window.LiveComposer.Builder.Helpers.depsHandlers.push(handler);
      }
    });
    jQuery(".dslca-module-edit-option input, .dslca-module-edit-option select").trigger('dslc-init-deps');
  };

  window.LiveComposer.Builder.UI.unloadOptionsDeps = function () {
    window.LiveComposer.Builder.Helpers.depsHandlers.forEach(function (handler) {
      jQuery(document).unbind('change', handler);
      jQuery(document).unbind('dslc-init-deps', handler);
    });
    window.LiveComposer.Builder.Helpers.depsHandlers = [];
  };
  /**
   * Creates inline style tag when editing WYSWIG
   *
   * @param  {object} params
   *    params.rule
   *    params.elems
   *    params.module_id
   */


  window.LiveComposer.Builder.Helpers.processInlineStyleTag = function (params) {
    if (_typeof(params) != 'object') return false;
    var resp_prefix = '',
        resp_postfix = '';

    if (params.context.closest(".dslca-module-edit-option").data('tab') == 'tablet_responsive') {
      resp_prefix = '@media only screen and (max-width: 1024px) and (min-width: 768px) {';
      resp_postfix = '}';
    } else if (params.context.closest(".dslca-module-edit-option").data('tab') == 'phone_responsive') {
      resp_prefix = '@media only screen and (max-width: 767px) {';
      resp_postfix = '}';
    }

    params.styleContent = resp_prefix + params.styleContent + resp_postfix;
    var id = resp_prefix + params.rule + params.elems;
    id = id.replace(/ /gi, '');

    if (window.LiveComposer.Builder.PreviewAreaDocument[0].getElementById(id) == null) {
      var styleTag = document.createElement('style');
      styleTag.innerHTML = params.styleContent;
      styleTag.id = id;
      styleTag.className = "temp-styles-for-module";
      window.LiveComposer.Builder.PreviewAreaDocument[0].body.appendChild(styleTag);
    } else {
      window.LiveComposer.Builder.PreviewAreaDocument[0].getElementById(id).innerHTML = params.styleContent;
    }
  };

  window.LiveComposer.Builder.UI.shakePanelConfirmButton = function () {
    jQuery('.dslca-module-edit-save').addClass('lc-shake-effect active');
    setTimeout(function () {
      jQuery('.dslca-module-edit-save').removeClass('lc-shake-effect active');
    }, 1000);
  };

  onModuleOptionsChange();
  onSectionOptionsChange();
  onFileUploadOptionsChange();
};

var onModuleOptionsChange = function onModuleOptionsChange() {
  // Live Preview for Module Settings Change
  jQuery(document).on('change', '.dslca-module-edit-field', function () {
    if (window.dslcDebug) console.log('on change event for .dslca-module-edit-field');
    var dslcOptionValue = '',
        dslcOptionValueOrig = '',
        dslcOption = jQuery(this),
        dslcOptionID = dslcOption.data('id'),
        dslcOptionWrap = dslcOption.closest('.dslca-module-edit-option'),
        dslcModule = jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument),
        dslcModuleID = dslcModule.data('module'),
        dslcModuleOptions = jQuery('.dslca-module-options-front textarea', dslcModule); // Add changed class

    dslcModule.addClass('dslca-module-change-made'); // Hide/Show tabs in the module options panel.
    // Required to show/hide particular options tabs based on the current selection.
    // Active only for dropdowns and checkboxes.

    if (dslcOptionWrap.hasClass('dslca-module-edit-option-select') || dslcOptionWrap.hasClass('dslca-module-edit-option-checkbox')) {
      dslc_module_options_hideshow_tabs();
    }
    /**
     * Refresh on change = true
     *
     * Refresh module HTML from the server on every field value change
     */


    if (jQuery(this).closest('.dslca-module-edit-option').data('refresh-on-change') == 'active') {
      /**
       * Get the new value
       */
      if (dslcOptionWrap.find('.dslca-module-edit-option-checkbox-wrapper').length) {
        var dslcOptionChoices = jQuery('input[type="checkbox"]', dslcOptionWrap);
        dslcOptionChoices.each(function () {
          if (jQuery(this).prop('checked')) {
            dslcOptionValue = dslcOptionValue + jQuery(this).val() + ' ';
          }
        });
      } else if (dslcOption.hasClass('dslca-module-edit-option-radio')) {
        var dslcOptionValue = jQuery('.dslca-module-edit-field:checked', dslcOption).val();
      } else {
        var dslcOptionValue = dslcOption.val(); // Post Grid > Thumbnail: Orientation change.
        // Need to change thumbnail width to get it work as expected

        if (dslcOptionID == 'orientation' && dslcOptionValue == 'horizontal') {
          var dslcSliderEl = jQuery('.dslca-module-edit-option-thumb_width .dslca-module-edit-field');
          dslcSliderEl.val('40').trigger('change');
        } else if (dslcOptionID == 'orientation' && dslcOptionValue == 'vertical') {
          var dslcSliderEl = jQuery('.dslca-module-edit-option-thumb_width .dslca-module-edit-field');
          dslcSliderEl.val('100').trigger('change');
        }
      }
      /**
       * Change old value with new value
       */


      if (undefined !== dslcOptionValue) {
        dslcOptionValue = dslcOptionValue.trim().replace(/<textarea/g, '<lctextarea').replace(/<\/textarea/g, '</lctextarea');
      }

      jQuery('.dslca-module-options-front textarea[data-id="' + dslcOptionID + '"]', dslcModule).val(dslcOptionValue);
      jQuery('.dslca-container-loader').show();
      Object(_module_js__WEBPACK_IMPORTED_MODULE_1__["moduleOutputAltered"])(function () {
        jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).addClass('dslca-module-change-made');

        if (dslcOptionID == 'css_load_preset' && !jQuery('body').hasClass('dslca-new-preset-added')) {
          dslc_module_options_show(dslcModuleID);
          jQuery('.dslca-container-loader').hide();
        } else {
          jQuery('.dslca-container-loader').hide();
        }

        jQuery('body').removeClass('dslca-new-preset-added'); // Trigger 'LC.moduleChange' event.
        // This event can be used by 3-rd party developers to re-init
        // some of the JavaScript code on modure re-rendering.

        LiveComposer.Utils.publish('LC.moduleChange', {
          moduleId: dslcModuleID,
          optionID: dslcOptionID,
          optionVal: dslcOption.val()
        });
      });
      /**
       * Refresh on change = false
       *
       * Do not refresh from the server, but using JS
       */
    } else {
      /**
       * Live Preview
       */
      if (dslcOption.hasClass('dslca-module-edit-field-font')) {
        var dslcFontsToLoad = dslcOption.val();
        dslcFontsToLoad = dslcFontsToLoad + ':400,100,200,300,500,600,700,800,900';
        var dslcAffectOnChangeEl = dslcOption.data('affect-on-change-el');
        var dslcAffectOnChangeRule = dslcOption.data('affect-on-change-rule');
        var dslcAffectOnChangeVal = dslcOption.val();
        var dslcAffectOnChangeValOrig = dslcAffectOnChangeVal;
        var module = jQuery(".dslca-module-being-edited", LiveComposer.Builder.PreviewAreaDocument);

        if (dslcOption.val().length && dslcGoogleFontsArray.indexOf(dslcOption.val()) !== -1) {
          // Call WebFont function from the iframe
          document.getElementById('page-builder-frame').contentWindow.WebFont.load({
            google: {
              families: [dslcFontsToLoad]
            },
            active: function active(familyName, fvd) {
              if (jQuery('.dslca-font-loading').closest('.dslca-module-edit-field-font-next').length) {
                jQuery('.dslca-font-loading').removeClass('dslca-font-loading').find('.dslca-icon').removeClass('dslc-icon-spin').addClass('dslc-icon-chevron-right');
              } else {
                jQuery('.dslca-font-loading').removeClass('dslca-font-loading').find('.dslca-icon').removeClass('dslc-icon-spin').addClass('dslc-icon-chevron-left');
              }

              var elems = dslcAffectOnChangeEl.split(',');
              var styleContent = "#" + module[0].id + " " + elems.join(", #" + module[0].id + " ") + " {" + dslcAffectOnChangeRule + ": " + dslcAffectOnChangeVal + "}";
              LiveComposer.Builder.Helpers.processInlineStyleTag({
                context: dslcOption,
                rule: dslcAffectOnChangeRule,
                elems: dslcAffectOnChangeEl,
                styleContent: styleContent
              });
            },
            inactive: function inactive(familyName, fvd) {
              if (jQuery('.dslca-font-loading').closest('.dslca-module-edit-field-font-next').length) {
                jQuery('.dslca-font-loading').removeClass('dslca-font-loading').find('.dslca-icon').removeClass('dslc-icon-spin').addClass('dslc-icon-chevron-right');
              } else {
                jQuery('.dslca-font-loading').removeClass('dslca-font-loading').find('.dslca-icon').removeClass('dslc-icon-spin').addClass('dslc-icon-chevron-left');
              }
            }
          });
        } else {
          setTimeout(function () {
            if (jQuery('.dslca-font-loading.dslca-module-edit-field-font-next').length) {
              jQuery('.dslca-font-loading').removeClass('dslca-font-loading').find('.dslca-icon').removeClass('dslc-icon-spin').addClass('dslc-icon-chevron-right');
            } else {
              jQuery('.dslca-font-loading').removeClass('dslca-font-loading').find('.dslca-icon').removeClass('dslc-icon-spin').addClass('dslc-icon-chevron-left');
            }

            var elems = dslcAffectOnChangeEl.split(',');
            var styleContent = "#" + module[0].id + " " + elems.join(", #" + module[0].id + " ") + " {" + dslcAffectOnChangeRule + ": " + dslcAffectOnChangeVal + "}";
            LiveComposer.Builder.Helpers.processInlineStyleTag({
              context: dslcOption,
              rule: dslcAffectOnChangeRule,
              elems: dslcAffectOnChangeEl,
              styleContent: styleContent
            });
          }, 100);
        }
        /**
         * Checkbox
         */

      } else if (dslcOption.hasClass('dslca-module-edit-field-checkbox')) {
        var dslcOptionChoices = jQuery('input[type="checkbox"]', dslcOptionWrap);
        dslcOptionChoices.each(function () {
          /*
          @todo This function is specific to borders. Needs review.
           */
          if (jQuery(this).prop('checked')) {
            dslcOptionValue = dslcOptionValue + 'solid ';
            dslcOptionValueOrig = dslcOptionValueOrig + jQuery(this).val() + ' ';
          } else {
            dslcOptionValue = dslcOptionValue + 'none ';
          }
        }); // Here dslcOptionValue will look like: none none none solid.
      }
      /**
       * All other option types
       */


      if (!dslcOption.hasClass('dslca-module-edit-field-font') && dslcOption.data('affect-on-change-el') != null && dslcOption.data('affect-on-change-rule') != null) {
        var dslcExt = dslcOption.data('ext') || '';
        var dslcAffectOnChangeEl = dslcOption.data('affect-on-change-el');
        var dslcAffectOnChangeRule = dslcOption.data('affect-on-change-rule');
        var dslcAffectOnChangeVal = dslcOption.val();
        var dslcAffectOnChangeValOrig = dslcAffectOnChangeVal;

        if (dslcOption.hasClass('dslca-module-edit-field-checkbox')) {
          dslcAffectOnChangeVal = dslcOptionValue;
          dslcAffectOnChangeValOrig = dslcOptionValueOrig;
        }

        if (dslcOption.hasClass('dslca-module-edit-field-image')) {
          dslcAffectOnChangeVal = 'url("' + dslcAffectOnChangeVal + '")';
        }

        if (null !== dslcAffectOnChangeVal && dslcAffectOnChangeVal.length < 1 && (dslcAffectOnChangeRule == 'background-color' || dslcAffectOnChangeRule == 'background')) {
          dslcAffectOnChangeVal = 'transparent';
        }

        dslcAffectOnChangeRule.split(',').forEach(function (rule) {
          rule = rule.replace(/\s+/g, '');
          var module = jQuery(".dslca-module-being-edited", LiveComposer.Builder.PreviewAreaDocument);
          var elems = dslcAffectOnChangeEl.split(',');
          var styleContent = "#" + module[0].id + " " + elems.join(", #" + module[0].id + " ") + " {" + rule + ": " + dslcAffectOnChangeVal + dslcExt + "}";
          LiveComposer.Builder.Helpers.processInlineStyleTag({
            context: dslcOption,
            rule: rule,
            elems: dslcAffectOnChangeEl,
            styleContent: styleContent
          });
        });
      }
      /**
       * Update option
       */


      var dslcOptionToApply = ''; // Do we work with CSS control or module property?

      if (dslcOptionID.indexOf('css_') !== -1) {
        // Apply CSS property.
        dslcOptionToApply = dslcAffectOnChangeValOrig;
      } else {
        // Apply module property.
        dslcOptionToApply = dslcOption.val();
      }

      jQuery('.dslca-module-option-front[data-id="' + dslcOptionID + '"]', dslcModule).val(dslcOptionToApply); // Trigger 'LC.moduleChange' event.
      // This event can be used by 3-rd party developers to re-init
      // some of the JavaScript code on modure re-rendering.

      LiveComposer.Utils.publish('LC.moduleChange', {
        moduleId: dslcModule[0].id,
        optionID: dslcOptionID,
        optionVal: dslcAffectOnChangeValOrig || dslcOption.val()
      });
    }
  });
};

var onSectionOptionsChange = function onSectionOptionsChange() {
  // ROW styling option changes
  jQuery(document).on('change', '.dslca-modules-section-edit-field', function () {
    console.log("ROW OPTION CHANGED 🐞");
    var dslcField, dslcFieldID, dslcEl, dslcModulesSection, dslcVal, dslcValReal, dslcValExt, dslcRule, dslcSetting, dslcTargetEl, dslcImgURL;
    dslcField = jQuery(this);
    dslcFieldID = dslcField.data('id');
    dslcVal = dslcField.val();
    dslcValReal = dslcVal;
    dslcValExt = dslcVal + dslcField.data('ext');
    dslcRule = dslcField.data('css-rule');
    dslcEl = jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument); // Currently editing element

    dslcTargetEl = dslcEl;
    dslcSetting = jQuery('.dslca-modules-section-settings input[data-id="' + dslcFieldID + '"]', dslcEl);
    dslcEl.addClass('dslca-modules-section-change-made'); // If image/upload field alter the value ( use from data )

    if (dslcField.hasClass('dslca-modules-section-edit-field-upload')) {
      if (dslcVal && dslcVal.length) {
        // dslcVal = dslcField.data('dslca-img-url');
        dslcVal = jQuery('.dslca-modules-section-settings input[data-id="dslca-img-url"]', dslcEl).val();
      }
    }

    if (dslcRule == 'background-image') {
      dslcVal = 'url("' + dslcVal + '")';
      LiveComposer.Builder.PreviewAreaWindow.dslc_bg_video();
    }

    if (dslcFieldID == 'bg_image_attachment') {
      dslcEl.removeClass('dslc-init-parallax');
    }

    console.log("dslcFieldID:");
    console.log(dslcFieldID);

    if (dslcFieldID == 'border-top' || dslcFieldID == 'border-right' || dslcFieldID == 'border-bottom' || dslcFieldID == 'border-left') {
      var dslcBorderStyle = jQuery('.dslca-modules-section-settings input[data-id="border_style"]').val();
      dslcSetting = jQuery('.dslca-modules-section-settings input[data-id="border"]', dslcEl);
      dslcValReal = '';
      var dslcChecboxesWrap = dslcField.closest('.dslca-modules-section-edit-option-checkbox-wrapper');
      dslcChecboxesWrap.find('.dslca-modules-section-edit-field-checkbox').each(function () {
        if (jQuery(this).is(':checked')) {
          if (jQuery(this).data('id') == 'border-top') {
            dslcValReal += 'top ';
          } else if (jQuery(this).data('id') == 'border-right') {
            dslcValReal += 'right ';
          } else if (jQuery(this).data('id') == 'border-bottom') {
            dslcValReal += 'bottom ';
          } else if (jQuery(this).data('id') == 'border-left') {
            dslcValReal += 'left ';
          }
        }
      });

      if (dslcField.is(':checked')) {
        if (dslcField.data('id') == 'border-top') {
          dslcEl.css({
            'border-top-style': dslcBorderStyle
          });
        } else if (dslcField.data('id') == 'border-right') {
          dslcEl.css({
            'border-right-style': dslcBorderStyle
          });
        } else if (dslcField.data('id') == 'border-bottom') {
          dslcEl.css({
            'border-bottom-style': dslcBorderStyle
          });
        } else if (dslcField.data('id') == 'border-left') {
          dslcEl.css({
            'border-left-style': dslcBorderStyle
          });
        }
      } else {
        if (dslcField.data('id') == 'border-top') {
          dslcEl.css({
            'border-top-style': 'hidden'
          });
        } else if (dslcField.data('id') == 'border-right') {
          dslcEl.css({
            'border-right-style': 'hidden'
          });
        } else if (dslcField.data('id') == 'border-bottom') {
          dslcEl.css({
            'border-bottom-style': 'hidden'
          });
        } else if (dslcField.data('id') == 'border-left') {
          dslcEl.css({
            'border-left-style': 'hidden'
          });
        }
      }
    } else if (dslcField.hasClass('dslca-modules-section-edit-field-checkbox')) {
      var checkboxes = jQuery(this).closest('.dslca-modules-section-edit-option-checkbox-wrapper').find('.dslca-modules-section-edit-field-checkbox');
      var checkboxesVal = '';
      checkboxes.each(function () {
        if (jQuery(this).prop('checked')) {
          checkboxesVal += jQuery(this).data('val') + ' ';
        }
      });
      var dslcValReal = checkboxesVal;
      /* Show On */

      if (dslcField.data('id') == 'show_on') {
        if (checkboxesVal.indexOf('desktop') !== -1) {
          jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslc-hide-on-desktop');
        } else {
          jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).addClass('dslc-hide-on-desktop');
        }

        if (checkboxesVal.indexOf('tablet') !== -1) {
          jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslc-hide-on-tablet');
        } else {
          jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).addClass('dslc-hide-on-tablet');
        }

        if (checkboxesVal.indexOf('phone') !== -1) {
          jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslc-hide-on-phone');
        } else {
          jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).addClass('dslc-hide-on-phone');
        }
      }
    } else if (dslcFieldID == 'bg_image_attachment' && dslcVal == 'parallax') {
      dslcEl.addClass('dslc-init-parallax');
      LiveComposer.Builder.PreviewAreaWindow.dslc_parallax();
    } else if (dslcFieldID == 'type') {
      if (dslcVal == 'full') {
        dslcEl.addClass('dslc-full');
      } else {
        dslcEl.removeClass('dslc-full');
      }

      LiveComposer.Builder.PreviewAreaWindow.dslc_masonry();
    } else if (dslcFieldID == 'columns_spacing') {
      if (dslcVal == 'nospacing') {
        dslcEl.addClass('dslc-no-columns-spacing');
      } else {
        dslcEl.removeClass('dslc-no-columns-spacing');
      }
    } else if (dslcFieldID == 'custom_class') {} else if (dslcFieldID == 'custom_id') {} else if (dslcFieldID == 'bg_video') {
      jQuery('.dslc-bg-video video', dslcEl).remove();

      if (dslcVal && dslcVal.length) {
        var dslcVideoVal = dslcVal;
        dslcVideoVal = dslcVideoVal.replace('.webm', '');
        dslcVideoVal = dslcVideoVal.replace('.mp4', '');
        jQuery('.dslc-bg-video-inner', dslcEl).html('<video><source type="video/mp4" src="' + dslcVideoVal + '.mp4" /><source type="video/webm" src="' + dslcVideoVal + '.webm" /></video>');
        LiveComposer.Builder.PreviewAreaWindow.dslc_bg_video();
      }
    } else if (dslcFieldID == 'bg_image_thumb') {
      if (dslcValReal == 'enabled') {
        if (jQuery('#dslca-post-data-thumb').length) {
          var dslcThumbURL = "url('" + jQuery('#dslca-post-data-thumb').val() + "')";
          dslcTargetEl.css(dslcRule, dslcThumbURL);
        }
      } else if (dslcValReal == 'disabled') {
        dslcTargetEl.css(dslcRule, 'none');
      }
    } else {
      if (dslcField.data('css-element')) {
        dslcTargetEl = jQuery(dslcField.data('css-element'), dslcEl);
      }

      dslcRule = dslcRule.replace(/ /g, '').split(',');
      var dslcValToApply;

      if (null != dslcField.data('ext')) {
        dslcValToApply = dslcValExt;
      } else {
        dslcValToApply = dslcVal;
      } // Loop through rules (useful when there are multiple rules)


      for (var i = 0; i < dslcRule.length; i++) {
        dslcTargetEl.css(dslcRule[i], dslcValToApply);
      }
    } // Update hidden input with new value


    dslcSetting.val(dslcValReal);
    if (!LiveComposer.Builder.Flags.generate_code_after_row_changed) return false; // window.dslc_generate_code();
    // window.dslc_show_publish_button();
  });
};

var onFileUploadOptionsChange = function onFileUploadOptionsChange() {
  // Uploading files
  var file_frame;
  jQuery(document).on('click', '.dslca-module-edit-field-image-add-hook, .dslca-modules-section-edit-field-image-add-hook', function () {
    var hook = jQuery(this);

    if (hook.hasClass('dslca-module-edit-field-image-add-hook')) {
      var field = hook.siblings('.dslca-module-edit-field-image');
      var removeHook = hook.siblings('.dslca-module-edit-field-image-remove-hook');
    } else {
      var field = hook.siblings('.dslca-modules-section-edit-field-upload');
      var removeHook = hook.siblings('.dslca-modules-section-edit-field-image-remove-hook');
    } // Whether or not multiple files are allowed


    var multiple = false; // Create the media frame.

    file_frame = wp.media.frames.file_frame = wp.media({
      title: 'Choose Image',
      button: {
        text: 'Confirm'
      },
      multiple: multiple
    }); // When an image is selected, run a callback.

    file_frame.on('select', function () {
      var attachment = file_frame.state().get('selection').first().toJSON();
      /*
      Save image ID as value of the image input.
       */
      // field.val( attachment.id ).data( 'dslca-img-url', attachment.url ).trigger('change'); - previous version

      field.val(attachment.id);
      var dataId = hook.parent().attr("data-id");
      /*
      Save alt as value of the image input.
       */

      if (attachment.alt != '' && dataId == 'image') {
        jQuery('.dslca-module-edit-option-image_alt input[data-id="image_alt"]').val(attachment.alt);
      }
      /*
      Save alt as value of the image input.
       */


      if (attachment.title != '' && dataId == 'image') {
        jQuery('.dslca-module-edit-option-image_title input[data-id="image_title"]').val(attachment.title);
      }
      /*
      Save image URL as data attribute of input in dslca-modules-section-settings set
      We need URL in 'dslca-img-url' for live preview
       */


      jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).find('.dslca-modules-section-settings input[data-id="dslca-img-url"]').val(attachment.url);
      field.trigger('change'); // trigger change only after 'dslca-img-url' is set

      hook.hide();
      removeHook.show();
    }); // Finally, open the modal

    file_frame.open();
  });
  jQuery(document).on('click', '.dslca-module-edit-field-image-remove-hook, .dslca-modules-section-edit-field-image-remove-hook', function () {
    var hook = jQuery(this);

    if (hook.hasClass('dslca-module-edit-field-image-remove-hook')) {
      var field = hook.siblings('.dslca-module-edit-field-image');
      var addHook = hook.siblings('.dslca-module-edit-field-image-add-hook');
    } else {
      var field = hook.siblings('.dslca-modules-section-edit-field-upload');
      var addHook = hook.siblings('.dslca-modules-section-edit-field-image-add-hook');
    }

    field.val('').trigger('change'); // .dslca-modules-section-edit-field

    /*
    Delete alt and title value.
     */

    var dataId = hook.parent().attr("data-id");

    if (dataId == 'image') {
      jQuery('.dslca-module-edit-option-image_alt input').attr('value', '').trigger('change');
      jQuery('.dslca-module-edit-option-image_alt input').attr('data-val-bckp', '').trigger('change');
      jQuery('.dslca-module-edit-option-image_title input').attr('value', '').trigger('change');
      jQuery('.dslca-module-edit-option-image_title input').attr('data-val-bckp', '').trigger('change');
    }

    hook.hide();
    addHook.show();
  });
};
/**
 * MODULES SETTINGS PANEL - Filter Module Options
 */


function dslc_module_options_section_filter(sectionID) {
  if (window.dslcDebug) console.log('dslc_module_options_section_filter'); // Hide all options

  jQuery('.dslca-module-edit-option').hide(); // Show options for current section

  jQuery('.dslca-module-edit-option[data-section="' + sectionID + '"]').show(); // Recall module options tab

  elementOptionsTabs();
}
/**
 * MODULES SETTINGS PANEL - Show module options tab
 */


var elementOptionsTabs = function elementOptionsTabs(dslcTab) {
  if (window.dslcDebug) console.log('elementOptionsTabs'); // Get currently active section

  var dslcSectionID = jQuery('.dslca-options-filter-hook.dslca-active').data('section'); // If tab not supplied set to first

  dslcTab = typeof dslcTab !== 'undefined' ? dslcTab : jQuery('.dslca-module-edit-options-tab-hook[data-section="' + dslcSectionID + '"]:first'); // Get the tab ID

  var dslcTabID = dslcTab.data('id'); // Set active class on tab

  jQuery('.dslca-module-edit-options-tab-hook').removeClass('dslca-active');
  dslcTab.addClass('dslca-active'); // Show tabs container

  jQuery('.dslca-module-edit-options-tabs').show(); // Hide/Show tabs hooks

  jQuery('.dslca-module-edit-options-tab-hook').hide();
  jQuery('.dslca-module-edit-options-tab-hook[data-section="' + dslcSectionID + '"]').show();

  if (dslcTabID) {
    // Hide/Show options
    jQuery('.dslca-module-edit-option').hide();
    jQuery('.dslca-module-edit-option[data-tab="' + dslcTabID + '"]').show(); // Hide/Show Tabs

    dslc_module_options_hideshow_tabs(); // If only one tab hide the tabs container

    if (jQuery('.dslca-module-edit-options-tab-hook:visible').length < 2) {
      jQuery('.dslca-module-edit-options-tabs').hide();
    } else {
      jQuery('.dslca-module-edit-options-tabs').show();
    }
    /**
     * If responsive tab, change the width of the dslc-content div
     */


    dslc_disable_responsive_view(); // Tablet

    if (dslcTabID == DSLCString.str_res_tablet.toLowerCase() + '_responsive') {
      jQuery('body').removeClass('dslc-res-big dslc-res-smaller-monitor dslc-res-phone dslc-res-tablet');
      jQuery('body').addClass('dslc-res-tablet');
      jQuery('html').addClass('dslc-responsive-preview');
    } // Phone


    if (dslcTabID == DSLCString.str_res_phone.toLowerCase() + '_responsive') {
      jQuery('body').removeClass('dslc-res-big dslc-res-smaller-monitor dslc-res-phone dslc-res-tablet');
      jQuery('body').addClass('dslc-res-phone');
      jQuery('html').addClass('dslc-responsive-preview');
    } // If responsive reload module


    if (dslcTabID == DSLCString.str_res_tablet.toLowerCase() + '_responsive' || dslcTabID == DSLCString.str_res_phone.toLowerCase() + '_responsive') {
      // Show the loader
      jQuery('.dslca-container-loader').show(); // Reload Module

      Object(_module_js__WEBPACK_IMPORTED_MODULE_1__["moduleOutputAltered"])(function () {
        // Hide the loader
        jQuery('.dslca-container-loader').hide();
      });
    }
  } // Scroll horizontally options panel to the left (not ready)


  if (jQuery('body').hasClass('rtl')) {
    var totalWidthOption = 0;
    var totalWidthGroup = 0;
    var totalWidth = 0;
    jQuery('.dslca-module-edit-options-wrapper > .dslca-module-edit-option:visible').each(function (index) {
      if (!jQuery(this).hasClass('dslca-module-edit-option-hidden') && !jQuery(this).hasClass('dslca-module-control-group')) {
        totalWidthOption += parseInt(jQuery(this).outerWidth(), 10);
      }
    });
    jQuery('.dslca-module-edit-options-wrapper > .dslca-module-control-group:visible').each(function (index) {
      totalWidthGroup += parseInt(jQuery(this).outerWidth(), 10);
    });
    totalWidth = parseInt(totalWidthOption) + parseInt(totalWidthGroup) + 10;
    jQuery('.dslca-module-edit-options-wrapper').css({
      'width': totalWidth + 'px'
    });
  }
};
/**
 * MODULES SETTINGS PANEL - Hide show tabs based on option choices
 */

function dslc_module_options_hideshow_tabs() {
  if (window.dslcDebug) console.log('dslc_module_options_hideshow_tabs');
  var dslcSectionID = jQuery('.dslca-options-filter-hook.dslca-active').data('section');

  if (dslcSectionID == 'styling') {
    // Vars
    var dslcContainer = jQuery('.dslca-module-edit'),
        dslcHeading = true,
        dslcFilters = true,
        dslcCarArrows = true,
        dslcCarCircles = true,
        dslcPagination = true,
        dslcElThumb = true,
        dslcElTitle = true,
        dslcElExcerpt = true,
        dslcElMeta = true,
        dslcElButton = true,
        dslcElCats = true,
        dslcElCount = true,
        dslcElSeparator = true,
        dslcElTags = true,
        dslcElSocial = true,
        dslcElPosition = true,
        dslcElIcon = true,
        dslcElContent = true,
        dslcElPrice = true,
        dslcElPriceSec = true,
        dslcElAddCart = true,
        dslcElDetails = true,
        dslcElQuote = true,
        dslcElAuthorName = true,
        dslcElAuthorPos = true,
        dslcElImage = true,
        dslcElLogo = true; // Is heading selected?

    if (!jQuery('.dslca-module-edit-field[value="main_heading"]').is(':checked')) dslcHeading = false; // Are filters selected?

    if (!jQuery('.dslca-module-edit-field[value="filters"]').is(':checked')) dslcFilters = false; // Are arrows selected?

    if (!jQuery('.dslca-module-edit-field[value="arrows"]').is(':checked')) dslcCarArrows = false; // Are circles selected?

    if (!jQuery('.dslca-module-edit-field[value="circles"]').is(':checked')) dslcCarCircles = false; // Is it a carousel?

    if (jQuery('.dslca-module-edit-field[data-id="type"]').val() != 'carousel') {
      dslcCarArrows = false;
      dslcCarCircles = false;
    } // Is pagination enabled?


    if (jQuery('.dslca-module-edit-field[data-id="pagination_type"]').val() == 'disabled') {
      dslcPagination = false;
    } // Is thumb enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="thumbnail"]').is(':checked')) {
      dslcElThumb = false;
    } // Is title enabled?


    if (jQuery('.dslca-module-edit-field[data-id*="elements"][value="content"]').length && !jQuery('.dslca-module-edit-field[data-id*="elements"][value="title"]').is(':checked')) {
      dslcElTitle = false;
    } // Is excerpt enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="excerpt"]').is(':checked')) {
      dslcElExcerpt = false;
    } // Is meta enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="meta"]').is(':checked')) {
      dslcElMeta = false;
    } // Is button enabled?


    if (jQuery('.dslca-module-edit-field[data-id*="elements"][value="button"]').length && !jQuery('.dslca-module-edit-field[data-id*="elements"][value="button"]').is(':checked')) {
      dslcElButton = false;
    } // Are cats enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="categories"]').is(':checked')) {
      dslcElCats = false;
    } // Is separator enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="separator"]').is(':checked')) {
      dslcElSeparator = false;
    } // Is count enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="count"]').is(':checked')) {
      dslcElCount = false;
    } // Are tags enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="tags"]').is(':checked')) {
      dslcElTags = false;
    } // Are social link enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="social"]').is(':checked')) {
      dslcElSocial = false;
    } // Is position enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="position"]').is(':checked')) {
      dslcElPosition = false;
    } // Is icon enabled?


    if (jQuery('.dslca-module-edit-field[data-id*="elements"][value="icon"]').length && !jQuery('.dslca-module-edit-field[data-id*="elements"][value="icon"]').is(':checked')) {
      dslcElIcon = false;
    } // Is content enabled?


    if (jQuery('.dslca-module-edit-field[data-id*="elements"][value="content"]').length && !jQuery('.dslca-module-edit-field[data-id*="elements"][value="content"]').is(':checked')) {
      dslcElContent = false;
    } // Is price enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="price"]').is(':checked')) {
      dslcElPrice = false;
    } // Is price secondary enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="price_2"]').is(':checked')) {
      dslcElPriceSec = false;
    } // Is add to cart enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="addtocart"]').is(':checked')) {
      dslcElAddCart = false;
    } // Is add to cart enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="details"]').is(':checked')) {
      dslcElDetails = false;
    } // Is quote enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="quote"]').is(':checked')) {
      dslcElQuote = false;
    } // Is author name enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="author_name"]').is(':checked')) {
      dslcElAuthorName = false;
    } // Is author position enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="author_position"]').is(':checked')) {
      dslcElAuthorPos = false;
    } // Is image enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="image"]').is(':checked')) {
      dslcElImage = false;
    } // Is logo enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="logo"]').is(':checked')) {
      dslcElLogo = false;
    } // Show/Hide Heading


    if (dslcHeading) jQuery('.dslca-module-edit-options-tab-hook[data-id="heading_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="heading_styling"]').hide(); // Show/Hide Filters

    if (dslcFilters) jQuery('.dslca-module-edit-options-tab-hook[data-id="filters_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="filters_styling"]').hide(); // Show/Hide Carousel Arrows

    if (dslcCarArrows) jQuery('.dslca-module-edit-options-tab-hook[data-id="carousel_arrows_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="carousel_arrows_styling"]').hide(); // Show/Hide Carousel Circles

    if (dslcCarCircles) jQuery('.dslca-module-edit-options-tab-hook[data-id="carousel_circles_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="carousel_circles_styling"]').hide(); // Show/Hide Pagination

    if (dslcPagination) jQuery('.dslca-module-edit-options-tab-hook[data-id="pagination_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="pagination_styling"]').hide(); // Show/Hide Thumb

    if (dslcElThumb) jQuery('.dslca-module-edit-options-tab-hook[data-id="thumbnail_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="thumbnail_styling"]').hide(); // Show/Hide Title

    if (dslcElTitle) jQuery('.dslca-module-edit-options-tab-hook[data-id="title_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="title_styling"]').hide(); // Show/Hide Excerpt

    if (dslcElExcerpt) jQuery('.dslca-module-edit-options-tab-hook[data-id="excerpt_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="excerpt_styling"]').hide(); // Show/Hide Meta

    if (dslcElMeta) jQuery('.dslca-module-edit-options-tab-hook[data-id="meta_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="meta_styling"]').hide(); // Show/Hide Button

    if (dslcElButton) jQuery('.dslca-module-edit-options-tab-hook[data-id="button_styling"], .dslca-module-edit-options-tab-hook[data-id="primary_button_styling"],' + ' .dslca-module-edit-options-tab-hook[data-id="secondary_button_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="button_styling"], .dslca-module-edit-options-tab-hook[data-id="primary_button_styling"],' + ' .dslca-module-edit-options-tab-hook[data-id="secondary_button_styling"]').hide(); // Show/Hide Cats

    if (dslcElCats) jQuery('.dslca-module-edit-options-tab-hook[data-id="categories_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="categories_styling"]').hide(); // Show/Hide Separator

    if (dslcElSeparator) jQuery('.dslca-module-edit-options-tab-hook[data-id="separator_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="separator_styling"]').hide(); // Show/Hide Count

    if (dslcElCount) jQuery('.dslca-module-edit-options-tab-hook[data-id="count_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="count_styling"]').hide(); // Show/Hide Tags

    if (dslcElTags) jQuery('.dslca-module-edit-options-tab-hook[data-id="tags_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="tags_styling"]').hide(); // Show/Hide Tags

    if (dslcElPosition) jQuery('.dslca-module-edit-options-tab-hook[data-id="position_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="position_styling"]').hide(); // Show/Hide Tags

    if (dslcElSocial) jQuery('.dslca-module-edit-options-tab-hook[data-id="social_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="social_styling"]').hide(); // Show/Hide Icon

    if (dslcElIcon) jQuery('.dslca-module-edit-options-tab-hook[data-id="icon_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="icon_styling"]').hide(); // Show/Hide Content

    if (dslcElContent) jQuery('.dslca-module-edit-options-tab-hook[data-id="content_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="content_styling"]').hide(); // Show/Hide Price

    if (dslcElPrice) jQuery('.dslca-module-edit-options-tab-hook[data-id="price_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="price_styling"]').hide(); // Show/Hide Price Sec

    if (dslcElPriceSec) jQuery('.dslca-module-edit-options-tab-hook[data-id="price_secondary_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="price_secondary_styling"]').hide(); // Show/Hide Add to Cart

    if (dslcElAddCart || dslcElDetails) jQuery('.dslca-module-edit-options-tab-hook[data-id="other_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="other_styling"]').hide(); // Show/Hide Quote

    if (dslcElQuote) jQuery('.dslca-module-edit-options-tab-hook[data-id="quote_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="quote_styling"]').hide(); // Show/Hide Author Name

    if (dslcElAuthorName) jQuery('.dslca-module-edit-options-tab-hook[data-id="author_name_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="author_name_styling"]').hide(); // Show/Hide Author Position

    if (dslcElAuthorPos) jQuery('.dslca-module-edit-options-tab-hook[data-id="author_position_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="author_position_styling"]').hide(); // Show/Hide Image

    if (dslcElImage) jQuery('.dslca-module-edit-options-tab-hook[data-id="image_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="image_styling"]').hide(); // Show/Hide Quote

    if (dslcElLogo) jQuery('.dslca-module-edit-options-tab-hook[data-id="logo_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="logo_styling"]').hide();
  }
  /**
   * Check 'Enable/Disable Custom CSS' control
   */


  if (jQuery('.dslca-options-filter-hook[data-section="styling"]').hasClass('dslca-active')) {
    var dslcCustomCSS = jQuery('.dslca-module-edit-option[data-id="css_custom"]'),
        dslcCustomCSSVal = dslcCustomCSS.find('select').val();

    if (dslcCustomCSSVal == 'enabled') {
      jQuery('.dslca-module-edit-option[data-section="styling"]').css({
        visibility: 'visible'
      });
      jQuery('.dslca-module-edit-option[data-tab]').css('visibility', 'visible');
      jQuery('.dslca-module-edit-options-tabs').show();
    } else {
      jQuery('.dslca-module-edit-option[data-section="styling"]').css({
        visibility: 'hidden'
      });
      jQuery('.dslca-module-control-group.dslca-module-edit-option').css('visibility', 'hidden');
      jQuery('.dslca-module-edit-options-tabs').hide();
      dslcCustomCSS.css({
        visibility: 'visible'
      });
    }
  } else {
    jQuery('.dslca-module-edit-options-tabs').show();
  }

  if (jQuery('select.dslca-module-edit-field[data-id="css_res_t"]').val() == 'disabled') {
    jQuery('.dslca-module-edit-option[data-id*="css_res_t"]').css('visibility', 'hidden');
    jQuery('.dslca-module-edit-option[data-tab="tablet_responsive"]').css('visibility', 'hidden');
  } else {
    jQuery('.dslca-module-edit-option[data-id*="css_res_t"]').css('visibility', 'visible');
    jQuery('.dslca-module-edit-option[data-tab="tablet_responsive"]').css('visibility', 'visible');
  }

  if (jQuery('select.dslca-module-edit-field[data-id="css_res_p"]').val() == 'disabled') {
    jQuery('.dslca-module-edit-option[data-id*="css_res_p"]').css('visibility', 'hidden');
    jQuery('.dslca-module-edit-option[data-tab="phone_responsive"]').css('visibility', 'hidden');
  } else {
    jQuery('.dslca-module-edit-option[data-id*="css_res_p"]').css('visibility', 'visible');
    jQuery('.dslca-module-edit-option[data-tab="phone_responsive"]').css('visibility', 'visible');
  }

  jQuery('.dslca-module-edit-option[data-id="css_res_p"], .dslca-module-edit-option[data-id="css_res_t"]').css('visibility', 'visible');

  if (jQuery('.dslca-options-filter-hook').hasClass('dslca-active')) {
    var section_tab = jQuery('.dslca-options-filter-hook.dslca-active').data('section');

    if (jQuery('.dslca-module-edit-option[data-section="' + section_tab + '"]').hasClass('dep-show')) {
      jQuery('.dslca-module-edit-option.dep-show').show();
    }

    if (jQuery('.dslca-module-edit-option[data-section="' + section_tab + '"]').hasClass('dep-hide')) {
      jQuery('.dslca-module-edit-option.dep-hide').hide();
    }
  }

  if (jQuery('.dslca-module-edit-options-tab-hook').hasClass('dslca-active')) {
    var data_tab = jQuery('.dslca-module-edit-options-tab-hook.dslca-active').data('id');

    if (jQuery('.dslca-module-edit-option[data-tab="' + data_tab + '"]').hasClass('dependent')) {
      jQuery('.dslca-module-edit-option.dependent').hide();
      jQuery('.dslca-module-edit-option[data-tab="' + data_tab + '"].dep-show').show();
      jQuery('.dslca-module-edit-option[data-tab="' + data_tab + '"].dep-hide').hide();
    } else {
      jQuery('.dslca-module-edit-option.dependent').hide();
    }
  }
}
/**
 * MODULES SETTINGS PANEL - Confirm module options changes
 */


function dslc_module_options_confirm_changes(callback) {
  if (window.dslcDebug) console.log('dslc_module_options_confirm_changes'); // Callback

  callback = typeof callback !== 'undefined' ? callback : false; // If slider module

  if (jQuery('.dslca-module-being-edited', window.LiveComposer.Builder.PreviewAreaDocument).hasClass('dslc-module-DSLC_Sliders')) {
    jQuery('.dslca-module-being-edited', window.LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-module-being-edited'); // If not slider module
  } else {
    // Add class so we know saving is in progress
    jQuery('body').addClass('dslca-module-saving-in-progress'); // Reload module with new settings

    Object(_module_js__WEBPACK_IMPORTED_MODULE_1__["moduleOutputAltered"])(function () {
      // Update preset
      Object(_presets_js__WEBPACK_IMPORTED_MODULE_2__["updatePreset"])();
      window.dslc_generate_code();
      jQuery('.dslca-module-being-edited', window.LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-module-being-edited'); // Remove classes so we know saving finished

      jQuery('body').removeClass('dslca-module-saving-in-progress'); // Clean up options container

      jQuery('.dslca-module-edit-options-inner').html('');
      jQuery('.dslca-module-edit-options-tabs').html('');
      window.LiveComposer.Builder.UI.clearUtils(); // Callback if there's one

      if (callback) {
        callback();
      }
    });
  } // Show modules listing


  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_0__["showSection"])('.dslca-modules'); // Hide the filter hooks

  jQuery('.dslca-header .dslca-options-filter-hook').hide(); // Hide the save/cancel actions

  jQuery('.dslca-module-edit-actions').hide(); // Show the section hooks

  jQuery('.dslca-header .dslca-go-to-section-hook').show(); // window.dslc_generate_code();
  // Show the publish button

  window.dslc_show_publish_button();
}
/**
 * MODULES SETTINGS PANEL - Cancel module options changes
 */


function dslc_module_options_cancel_changes(callback) {
  if (window.dslcDebug) console.log('dslc_module_options_cancel_changes'); // Callback

  callback = typeof callback !== 'undefined' ? callback : false; // Vars

  var editedModule = jQuery('.dslca-module-being-edited', window.LiveComposer.Builder.PreviewAreaDocument); // Add backup option values

  jQuery('.dslca-module-options-front', editedModule).html('').append(window.LiveComposer.Builder.moduleBackup); // window.LiveComposer.Builder.moduleBackup = false;
  // Reload module

  Object(_module_js__WEBPACK_IMPORTED_MODULE_1__["moduleOutputAltered"])(function () {
    window.dslc_generate_code();
    jQuery('.dslca-module-being-edited', window.LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-module-being-edited'); // Clean up options container

    jQuery('.dslca-module-edit-options-inner').html('');
    jQuery('.dslca-module-edit-options-tabs').html('');
    window.LiveComposer.Builder.UI.clearUtils();

    if (callback) {
      callback();
    }
  }); // Show modules listing

  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_0__["showSection"])('.dslca-modules'); // Hide the filter hooks

  jQuery('.dslca-header .dslca-options-filter-hook').hide(); // Hide the save/cancel actions

  jQuery('.dslca-module-edit-actions').hide(); // Show the section hooks

  jQuery('.dslca-header .dslca-go-to-section-hook').show(); // Show the publish button

  window.dslc_show_publish_button();
  window.LiveComposer.Builder.UI.clearUtils();
}
/**
 * MODULES SETTINGS PANEL - Option Tooltips
 */


function dslc_module_options_tooltip() {
  // Close Tooltip
  jQuery(document).on('click', '.dslca-module-edit-field-ttip-close', function () {
    jQuery('.dslca-module-edit-field-ttip, .dslca-module-edit-field-icon-ttip').hide();
  }); // Show Tooltip

  jQuery(document).on('click', '.dslca-module-edit-field-ttip-hook', function () {
    var dslcTtip = jQuery('.dslca-module-edit-field-ttip'),
        dslcTtipInner = dslcTtip.find('.dslca-module-edit-field-ttip-inner'),
        dslcHook = jQuery(this),
        dslcTtipContent,
        dslcLabel;
    dslcLabel = dslcHook.parent();

    if (dslcLabel.parent().hasClass('dslca-modules-section-edit-option')) {
      dslcTtipContent = dslcHook.closest('.dslca-modules-section-edit-option').find('.dslca-module-edit-field-ttip-content').html();
    } else {
      dslcTtipContent = dslcHook.closest('.dslca-module-edit-option').find('.dslca-module-edit-field-ttip-content').html();
    }

    if (dslcTtip.is(':visible')) {
      jQuery('.dslca-module-edit-field-ttip').hide();
    } else {
      dslcTtipInner.html(dslcTtipContent);
      var dslcOffset = dslcHook.offset();
      var dslcTtipHeight = dslcTtip.outerHeight();
      var dslcTtipWidth = dslcTtip.outerWidth();
      var dslcTtipLeft = dslcOffset.left - dslcTtipWidth / 2 + 6;
      var dslcTtipArrLeft = '50%';

      if (dslcTtipLeft < 0) {
        dslcTtipArrLeft = dslcTtipWidth / 2 + dslcTtipLeft + 'px';
        dslcTtipLeft = 0;
      }

      jQuery('.dslca-module-edit-field-ttip').show().css({
        top: dslcOffset.top - dslcTtipHeight - 20,
        left: dslcTtipLeft
      });
      jQuery("head").append(jQuery('<style>.dslca-module-edit-field-ttip:after, .dslca-module-edit-field-ttip:before { left: ' + dslcTtipArrLeft + ' }</style>'));
    }
  }); // Show Tooltip ( Icon Options )

  jQuery(document).on('click', '.dslca-module-edit-field-icon-ttip-hook', function () {
    var dslcTtip = jQuery('.dslca-module-edit-field-icon-ttip');
    var dslcHook = jQuery(this);

    if (dslcTtip.is(':visible')) {
      jQuery('.dslca-module-edit-field-icon-ttip').hide();
    } else {
      var dslcOffset = dslcHook.offset();
      var dslcTtipHeight = dslcTtip.outerHeight();
      var dslcTtipWidth = dslcTtip.outerWidth();
      var dslcTtipLeft = dslcOffset.left - dslcTtipWidth / 2 + 6;
      var dslcTtipArrLeft = '50%';

      if (dslcTtipLeft < 0) {
        dslcTtipArrLeft = dslcTtipWidth / 2 + dslcTtipLeft + 'px';
        dslcTtipLeft = 0;
      }

      jQuery('.dslca-module-edit-field-icon-ttip').show().css({
        top: dslcOffset.top - dslcTtipHeight - 20,
        left: dslcTtipLeft
      });
      jQuery("head").append(jQuery('<style>.dslca-module-edit-field-icon-ttip:after, .dslca-module-edit-field-icon-ttip:before { left: ' + dslcTtipArrLeft + ' }</style>'));
    }
  });
}
/**
 * MODULES SETTINGS PANEL - Font option type
 */


function dslc_module_options_font() {
  // Next Font
  jQuery(document).on('click', '.dslca-module-edit-field-font-next', function (e) {
    e.preventDefault();

    if (!jQuery(this).hasClass('dslca-font-loading') && !jQuery(this).siblings('.dslca-font-loading').length) {
      var dslcOption = jQuery(this).closest('.dslca-module-edit-option-font');
      var dslcField = jQuery('.dslca-module-edit-field-font', dslcOption);
      var dslcCurrIndex = dslcAllFontsArray.indexOf(dslcField.val());
      var dslcNewIndex = dslcCurrIndex + 1;
      jQuery('.dslca-module-edit-field-font-suggest', dslcOption).text('');
      dslcField.val(dslcAllFontsArray[dslcNewIndex]).trigger('change');
      jQuery(this).addClass('dslca-font-loading').find('.dslca-icon').removeClass('dslc-icon-chevron-right').addClass('dslc-icon-refresh dslc-icon-spin');
    }
  }); // Previous Font

  jQuery(document).on('click', '.dslca-module-edit-field-font-prev', function (e) {
    e.preventDefault();

    if (!jQuery(this).hasClass('dslca-font-loading') && !jQuery(this).siblings('.dslca-font-loading').length) {
      var dslcOption = jQuery(this).closest('.dslca-module-edit-option-font');
      var dslcField = jQuery('.dslca-module-edit-field-font', dslcOption);
      var dslcCurrIndex = dslcAllFontsArray.indexOf(dslcField.val());
      var dslcNewIndex = dslcCurrIndex - 1;
      jQuery('.dslca-module-edit-field-font-suggest', dslcOption).text('');

      if (dslcNewIndex < 0) {
        dslcNewIndex = dslcAllFontsArray.length - 1;
      }

      dslcField.val(dslcAllFontsArray[dslcNewIndex]).trigger('change');
      jQuery(this).addClass('dslca-font-loading').find('.dslca-icon').removeClass('dslc-icon-chevron-left').addClass('dslc-icon-refresh dslc-icon-spin');
    }
  }); // Keyup ( left arrow, right arrow, else )

  jQuery(document).on('keyup', '.dslca-module-edit-field-font', function (e) {
    var dslcField,
        dslcOption,
        dslcVal,
        dslcMatchingFont = false,
        dslcFont;
    dslcField = jQuery(this);
    dslcOption = dslcField.closest('.dslca-module-edit-option');

    if (e.which == 38) {
      jQuery('.dslca-module-edit-field-font-prev', dslcOption).click();
    }

    if (e.which == 40) {
      jQuery('.dslca-module-edit-field-font-next', dslcOption).click();
    }

    if (e.which != 13 && e.which != 38 && e.which != 40) {
      dslcVal = dslcField.val();
      var search = [];
      var re = new RegExp('^' + dslcVal, 'i');
      var dslcFontsAmount = dslcAllFontsArray.length;
      var i = 0;

      do {
        if (re.test(dslcAllFontsArray[i])) {
          if (!dslcMatchingFont) {
            var dslcMatchingFont = dslcAllFontsArray[i];
          }
        }

        i++;
      } while (i < dslcFontsAmount);

      if (!dslcMatchingFont) {
        dslcFont = dslcVal;
        jQuery('.dslca-module-edit-field-font-suggest', dslcOption).hide();
      } else {
        dslcFont = dslcMatchingFont;
        jQuery('.dslca-module-edit-field-font-suggest', dslcOption).show();
      }

      jQuery('.dslca-module-edit-field-font-suggest', dslcOption).text(dslcFont);

      if (dslcFont.length) {
        dslcField.val(dslcFont.substring(0, dslcField.val().length));
      }
    }
  }); // Key press ( enter )

  jQuery(document).on('keypress', '.dslca-module-edit-field-font', function (e) {
    if (e.which == 13) {
      e.preventDefault();
      var dslcField, dslcOption, dslcVal, dslcMatchingFont, dslcFont;
      dslcField = jQuery(this);
      dslcOption = dslcField.closest('.dslca-module-edit-option');
      jQuery(this).val(jQuery('.dslca-module-edit-field-font-suggest', dslcOption).text()).trigger('change');
      jQuery('.dslca-module-edit-field-font-suggest', dslcOption).text('');
    }
  });
}
/*
 * MODULES SETTINGS PANEL - Change icon code based on direction (next/previous)
 */


function dslc_list_icon(object, direction) {
  var dslcOption = jQuery(object).closest('.dslca-module-edit-option-icon');
  var dslcField = jQuery('.dslca-module-edit-field-icon', dslcOption);
  var dslcCurrIndex = dslcIconsCurrentSet.indexOf(dslcField.val());

  if (direction == 'previous') {
    var dslcNewIndex = dslcCurrIndex - 1;
  } else {
    var dslcNewIndex = dslcCurrIndex + 1;
  }

  jQuery('.dslca-module-edit-field-icon-suggest', dslcOption).text('');

  if (dslcNewIndex < 0) {
    dslcNewIndex = dslcIconsCurrentSet.length - 1;
  }

  dslcField.val(dslcIconsCurrentSet[dslcNewIndex]).trigger('change');
}
/**
 * MODULES SETTINGS PANEL - Icon option type
 */


function dslc_module_options_icon() {
  // Key Up ( arrow up, arrow down, else )
  jQuery(document).on('keyup', '.dslca-module-edit-field-icon', function (e) {
    var dslcField, dslcOption, dslcVal, dslcIconsArrayGrep, dslcIcon;
    dslcField = jQuery(this);
    dslcOption = dslcField.closest('.dslca-module-edit-option'); // Key pressed: arrow up

    if (e.which == 38) {
      dslc_list_icon(dslcField, 'previous');
    } // Key pressed: arrow down


    if (e.which == 40) {
      dslc_list_icon(dslcField, 'next');
    }

    if (e.which != 13 && e.which != 38 && e.which != 40) {
      dslcVal = dslcField.val().toLowerCase();
      dslcField.val(dslcVal);
      dslcIconsArrayGrep = jQuery.grep(dslcIconsCurrentSet, function (value, i) {
        return value.indexOf(dslcVal) == 0;
      });
      dslcIcon = dslcIconsArrayGrep[0];
      jQuery('.dslca-module-edit-field-icon-suggest', dslcOption).text(dslcIcon);
    }
  }); // Key Press ( Enter )

  jQuery(document).on('keypress', '.dslca-module-edit-field-icon', function (e) {
    if (e.which == 13) {
      e.preventDefault();
      var dslcField, dslcOption, dslcVal, dslcIconsArrayGrep, dslcIcon;
      dslcField = jQuery(this);
      dslcOption = dslcField.closest('.dslca-module-edit-option');
      jQuery(this).val(jQuery('.dslca-module-edit-field-icon-suggest', dslcOption).text()).trigger('change');
      jQuery('.dslca-module-edit-field-icon-suggest', dslcOption).text('');
    }
  });
}
/**
 * MODULES SETTINGS PANEL - return options id
 */


function dslc_module_options_icon_returnid() {
  jQuery(document).on('click', '.dslca-open-modal-hook[data-modal^=".dslc-list-icons"]', function (el) {
    jQuery(this).closest('.dslca-module-edit-option-icon').find('input').addClass('icon-modal-active');
  });
  jQuery(document).on('click', '.dslca-modal-icons .icon-item', function (el) {
    // Get selected item code
    var selectedIconCode = jQuery(this).find('.icon-item_name').text();
    jQuery('input.icon-modal-active').val(selectedIconCode).change(); // Close modal window

    Object(_modalwindow_js__WEBPACK_IMPORTED_MODULE_3__["hideModal"])('', jQuery('.dslca-modal:visible'));
    jQuery('input.icon-modal-active').removeClass('icon-modal-active');
  });
}
/**
 * MODULES SETTINGS PANEL - Text align option type
 */


function dslc_module_options_text_align() {
  jQuery(document).on('click', '.dslca-module-edit-option-text-align-hook', function () {
    var newOpt = jQuery(this),
        otherOpt = jQuery(this).closest('.dslca-module-edit-option-text-align-wrapper').find('.dslca-module-edit-option-text-align-hook'),
        newVal = newOpt.data('val'),
        realOpt = jQuery(this).closest('.dslca-module-edit-option-text-align-wrapper').siblings('input.dslca-module-edit-field');
    otherOpt.removeClass('dslca-active');
    newOpt.addClass('dslca-active');
    realOpt.val(newVal).trigger('change');
  });
}
/**
 * MODULES SETTINGS PANEL - Checkbox Option Type
 */


function dslc_module_options_checkbox() {
  jQuery(document).on('click', '.dslca-module-edit-option-checkbox-hook, .dslca-modules-section-edit-option-checkbox-hook', function () {
    var checkFake = jQuery(this);
    var checkReal = checkFake.siblings('input[type="checkbox"]');

    if (checkReal.prop('checked')) {
      checkReal.prop('checked', false);
      checkFake.find('.dslca-icon').removeClass('dslc-icon-check').addClass('dslc-icon-check-empty');
    } else {
      checkReal.prop('checked', true);
      checkFake.find('.dslca-icon').removeClass('dslc-icon-check-empty').addClass('dslc-icon-check');
    }

    checkReal.change();
  });
}
/**
 * MODULES SETTINGS PANEL - Box Shadow Option Type
 */


function dslc_module_options_box_shadow() {
  if (window.dslcDebug) console.log('dslc_module_options_box_shadow');
  /**
   * Value Change
   */

  jQuery(document).on('change', '.dslca-module-edit-option-box-shadow-hor, ' + '.dslca-module-edit-option-box-shadow-ver, .dslca-module-edit-option-box-shadow-blur, .dslca-module-edit-option-box-shadow-spread,' + ' .dslca-module-edit-option-box-shadow-color, .dslca-module-edit-option-box-shadow-inset', function () {
    var boxShadowWrapper = jQuery(this).closest('.dslca-module-edit-option'),
        boxShadowInput = boxShadowWrapper.find('.dslca-module-edit-field'),
        boxShadowHor = boxShadowWrapper.find('.dslca-module-edit-option-box-shadow-hor').val(),
        boxShadowVer = boxShadowWrapper.find('.dslca-module-edit-option-box-shadow-ver').val(),
        boxShadowBlur = boxShadowWrapper.find('.dslca-module-edit-option-box-shadow-blur').val(),
        boxShadowSpread = boxShadowWrapper.find('.dslca-module-edit-option-box-shadow-spread').val(),
        boxShadowColor = boxShadowWrapper.find('.dslca-module-edit-option-box-shadow-color').val(),
        boxShadowInset = boxShadowWrapper.find('.dslca-module-edit-option-box-shadow-inset').is(':checked');

    if (boxShadowInset) {
      boxShadowInset = ' inset';
    } else {
      boxShadowInset = '';
    }

    var boxShadowVal = boxShadowHor + 'px ' + boxShadowVer + 'px ' + boxShadowBlur + 'px ' + boxShadowSpread + 'px ' + boxShadowColor + boxShadowInset;
    boxShadowInput.val(boxShadowVal).trigger('change');
  });
}
/**
 * MODULES SETTINGS PANEL - Text Shadow Option Type
 */


function dslc_module_options_text_shadow() {
  if (window.dslcDebug) console.log('dslc_module_options_text_shadow');
  /**
   * Value Change
   */

  jQuery(document).on('change', '.dslca-module-edit-option-text-shadow-hor, .dslca-module-edit-option-text-shadow-ver,' + '.dslca-module-edit-option-text-shadow-blur, .dslca-module-edit-option-text-shadow-color', function () {
    var textShadowWrapper = jQuery(this).closest('.dslca-module-edit-option'),
        textShadowInput = textShadowWrapper.find('.dslca-module-edit-field'),
        textShadowHor = textShadowWrapper.find('.dslca-module-edit-option-text-shadow-hor').val(),
        textShadowVer = textShadowWrapper.find('.dslca-module-edit-option-text-shadow-ver').val(),
        textShadowBlur = textShadowWrapper.find('.dslca-module-edit-option-text-shadow-blur').val(),
        textShadowColor = textShadowWrapper.find('.dslca-module-edit-option-text-shadow-color').val();
    var textShadowVal = textShadowHor + 'px ' + textShadowVer + 'px ' + textShadowBlur + 'px ' + textShadowColor;
    textShadowInput.val(textShadowVal).trigger('change');
  });
}
/**
 * MODULES SETTINGS PANEL - Color Option Type
 */


function dslc_module_options_color(field) {
  if (window.dslcDebug) console.log('dslc_module_options_color');
  var dslcColorField, dslcAffectOnChangeEl, dslcAffectOnChangeRule, dslcColorFieldVal, dslcModule, dslcOptionID, dslcCurrColor;
  /**
   * Color Pallete.
   *
   * Last three selected colors get stored in the local storage
   * of the browser under the key 'dslcColors-example.com'.
   *
   * Beside latest three custom colors, color palette includes
   * three predefined/fixed colors: white, black and transparent.
   */

  var dslcColorPallete = [],
      currStorage,
      index;
  var palleteCurrentDommain = 'dslcColors-' + document.domain; // Get three recent colors from the local storage.

  if (undefined !== localStorage[palleteCurrentDommain]) {
    currStorage = JSON.parse(localStorage[palleteCurrentDommain]);
    dslcColorPallete = currStorage;
  } // Set default colors if not enough custom colors. Should be six.


  if (1 > dslcColorPallete.length) {
    dslcColorPallete.push('#78b');
  }

  if (2 > dslcColorPallete.length) {
    dslcColorPallete.push('#ab0');
  }

  if (3 > dslcColorPallete.length) {
    dslcColorPallete.push('#de3');
  } // Add the next "fixed" colors to the end of the pallete.


  dslcColorPallete.push('#fff');
  dslcColorPallete.push('#000');
  dslcColorPallete.push('rgba(0,0,0,0)');
  var query = field; // For each color picker input field.

  jQuery(query).each(function () {
    // Set setting the conotrol wrapper.
    var wrapper = jQuery(this).closest('.dslca-color-option');
    var input = jQuery(this);
    dslcCurrColor = jQuery(this).val();
    /**
     * Init standard WP color pickers (Iris).
     *
     * See: http://automattic.github.io/Iris/
     * See: https://github.com/23r9i0/wp-color-picker-alpha
     */

    input.wpColorPicker({
      mode: 'hsl',
      palettes: dslcColorPallete,
      change: function change(event, ui) {
        console.log("wpColorPicker > change"); // @todo: get the code below into a separate function!
        // The option field

        dslcColorField = input;
        var color = input.wpColorPicker('color'); // The new color

        if (color == null) {
          dslcColorFieldVal = '';
        } else {
          dslcColorFieldVal = color;
        } // Change current value of option


        dslcColorField.val(dslcColorFieldVal).trigger('change'); // Change input field background.

        dslcColorField.css('background', dslcColorFieldVal); // Live change

        dslcAffectOnChangeEl = dslcColorField.data('affect-on-change-el');
        dslcAffectOnChangeRule = dslcColorField.data('affect-on-change-rule');
        console.log("dslcColorField:");
        console.log(dslcColorField);
        console.log("dslcAffectOnChangeEl:");
        console.log(dslcAffectOnChangeEl); // ROWs doesn't have 'dslcAffectOnChangeEl' defined

        if (null != dslcAffectOnChangeEl && '.dslca-modules-section-being-edited' !== dslcAffectOnChangeEl) {
          jQuery(dslcAffectOnChangeEl, window.LiveComposer.Builder.PreviewAreaDocument.find('.dslca-module-being-edited')).css(dslcAffectOnChangeRule, dslcColorFieldVal);
        } // Update option


        dslcModule = jQuery('.dslca-module-being-edited', window.LiveComposer.Builder.PreviewAreaDocument);
        dslcOptionID = dslcColorField.data('id');
        jQuery('.dslca-module-option-front[data-id="' + dslcOptionID + '"]', dslcModule).val(dslcColorFieldVal); // Add changed class

        dslcModule.addClass('dslca-module-change-made');
      }
    });
    var colorPickerPopup = wrapper.find('.wp-picker-holder .iris-picker');
    colorPickerPopup.append('<button type="button" class="dslca-colorpicker-apply">Apply</button>');
    var apply = wrapper.find('.dslca-colorpicker-apply');
    input.wpColorPicker('open'); // If [APPLY] button clicked...

    jQuery(apply).on('click', function () {
      // If new color is not one of the "fixed" colors...
      if ('#fff' !== dslcColorFieldVal && '#ffffff' !== dslcColorFieldVal && '#000' !== dslcColorFieldVal && '#000000' !== dslcColorFieldVal && 'rgba(0,0,0,0)' !== dslcColorFieldVal) {
        // Update pallete colors in the local storage.
        if (undefined === localStorage[palleteCurrentDommain]) {
          // Create new record if no local storage found.
          var newStorage = [dslcColorFieldVal];
          localStorage[palleteCurrentDommain] = JSON.stringify(newStorage);
        } else {
          // Update existing record in the local storage.
          var newStorage = JSON.parse(localStorage[palleteCurrentDommain]);

          if (newStorage.indexOf(dslcColorFieldVal) == -1) {
            // Add new color to the head of the pallete array.
            newStorage.unshift(dslcColorFieldVal);

            if (3 < newStorage.length) {
              // Remove the last color from the pallete.
              newStorage.pop();
            }
          }

          localStorage[palleteCurrentDommain] = JSON.stringify(newStorage);
        }
      }

      input.wpColorPicker('close');
    }); // Save this element to destroy on panel closed.

    window.LiveComposer.Builder.Helpers.colorpickers.push(jQuery(this));
  });
}
/**
 * MODULES SETTINGS PANEL - Numeric Option Type
 */


function dslc_module_options_numeric(fieldWrapper) {
  console.log('dslc_module_options_numeric');
  if (window.dslcDebug) console.log('dslc_module_options_numeric');
  var query = fieldWrapper; // || '.dslca-module-edit-option-slider';

  jQuery(query).each(function () {
    var controlWrapper = jQuery(this);
    /* Create an empty div to be uses by jQuery as the slider container. */

    if (0 === jQuery('.dslca-module-edit-field-slider', controlWrapper).length) {
      controlWrapper.append('<div class="dslca-module-edit-field-slider"></div>');
    }

    var workingWithModule = true;
    /* Is the control part of the module setting panel or section settings? */

    if (controlWrapper.hasClass('dslca-modules-section-edit-option')) {
      // We are working with seciton.
      workingWithModule = false;
    } else {
      // We are working with module.
      workingWithModule = true;
    }

    if (workingWithModule) {
      var sliderInput = controlWrapper.find('.dslca-module-edit-field');
    } else {
      var sliderInput = controlWrapper.find('.dslca-modules-section-edit-field');
    }
    /* Is the control part of the module setting panel or section settings? */


    if (controlWrapper.hasClass('dslca-modules-section-edit-option')) {
      // We are working with seciton.
      var sliderInput = controlWrapper.find('.dslca-modules-section-edit-field');
    } else {
      // We are working with module.
      var sliderInput = controlWrapper.find('.dslca-module-edit-field');
    }

    var sliderExt = '',
        sliderControl = controlWrapper.find('.dslca-module-edit-field-slider'),
        currentVal = parseFloat(sliderInput.val()),
        // Max value. By default max is 100.
    max = parseFloat(sliderInput.data('max')),
        // Min value. By default min is 0.
    min = parseFloat(sliderInput.data('min')),
        // Increment value. By default increment is 1.
    inc = parseFloat(sliderInput.data('increment')),
        // Backup values.
    max_orig = max,
        min_orig = min;
    /**
     * Check if value can't be negative according to module settings.
     */

    var onlypositive = false;

    if (undefined !== sliderInput.data('onlypositive') && 1 === sliderInput.data('onlypositive')) {
      onlypositive = true;
    }
    /**
     * If the current slider value gets to the max or min,
     * we set new 'wider' max/min values.
     *
     * This way slider has no fixed top or bottom limit one one hand
     * and works precise enough for both small and big values.
     */


    if (currentVal >= max) {
      max = currentVal * 2;
    }

    if (!onlypositive && currentVal <= min) {
      min = currentVal * 2;
    }

    sliderControl.slider({
      min: min,
      max: max,
      step: inc,
      value: sliderInput.val(),
      slide: function slide(event, ui) {
        console.log("slide");
        sliderInput.val(ui.value + sliderExt);
        sliderInput.trigger('change');
      },
      change: function change(event, ui) {
        console.log("change");
        /**
         * If the current slider value gets to the max or min,
         * we reset the slider (destroy/call again) so script above
         * set new bigger max/min values.
         *
         * This way slider has no top or bottom limit one one hand
         * and precise enough for both small and big values.
         */

        if (ui.value >= max || ui.value <= min) {
          sliderControl.slider("destroy");
          dslc_module_options_numeric(controlWrapper);
        }
      }
      /*
      stop: function( event, ui ) {
      },
      start: function( event, ui ) {
      }
      */

    });
    /**
     * Once the slider initiated, show it in HTML.
     * Slider control is hidden by default. We show it on hover only.
     */

    sliderControl.show();
    /* On mouse leave: Remove empty DIV and destroy the slider. */

    jQuery(controlWrapper).on('mouseleave', function () {
      if (undefined !== sliderControl.slider('instance')) {
        jQuery(sliderControl).slider('destroy');
      }

      sliderControl.remove();
    });
    if (sliderInput[0].classList.contains('slider-initiated')) return;
    sliderInput[0].classList.add("slider-initiated");
    sliderInput.on('keyup', function (e) {
      // In some rare cases we have the next error:
      // TypeError: undefined is not an object (evaluating 'a.key.match')
      if (undefined === e) {
        return false;
      } // Shift + Up/Down


      if (e.shiftKey) {
        if (e.keyCode == 38) {
          this.value = (parseInt(this.value) || 0) + 9;
          sliderInput.trigger('change');
        }

        if (e.keyCode == 40) {
          this.value = parseInt(this.value) + 0 - 9;
          sliderInput.trigger('change');
        }
      } // Backspace, "-"


      if (e.keyCode == 8 || e.keyCode == 45) {
        sliderInput.trigger('change');
      } // If number key pressed


      if (e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105) {
        sliderInput.trigger('change');
      }

      var charCode = e.which ? e.which : e.keyCode; //@todo more work here

      if ((charCode >= 48 && charCode <= 57 || charCode >= 96 && charCode <= 105) && e.keyCode != 8 && e.keyCode != 39 && e.keyCode != 37 && e.keyCode != 46) {
        return false;
      }
    }); // sliderInput.unbind('change');

    sliderInput.on('change', function (e) {
      if (onlypositive && this.value < 0) {
        this.value = 0;
      }

      var containerWrapper;

      if (workingWithModule) {
        containerWrapper = jQuery(e.target.closest('.dslca-module-edit-option-slider'));
      } else {
        containerWrapper = jQuery(e.target.closest('.dslca-modules-section-edit-option-slider'));
      }
      /**
       * Move the slider needle to reflect the value changes
       * made via direct input of via keyboard arrow keys.
       */


      var currentSliderInstance = containerWrapper.find('.dslca-module-edit-field-slider');

      if (undefined !== currentSliderInstance.slider('instance')) {
        currentSliderInstance.slider('value', this.value);
      }

      if (workingWithModule) {
        // Add changed class to the module.
        var module = jQuery('.dslca-module-being-edited', window.LiveComposer.Builder.PreviewAreaDocument);
        module.addClass('dslca-module-change-made');
      }
    });
    return false;
  }); // .each
}

function dslc_disable_responsive_view() {
  jQuery('html').removeClass('dslc-responsive-preview');
  jQuery('body').removeClass('dslc-res-big dslc-res-smaller-monitor dslc-res-phone dslc-res-tablet');
}

function dslc_filter_module_options(sectionID) {
  dslc_module_options_section_filter(sectionID);
}

function dslc_confirm_changes(callback) {
  dslc_module_options_confirm_changes(callback);
}

function dslc_cancel_changes(callback) {
  dslc_module_options_cancel_changes(callback);
}

function dslc_init_colorpicker() {
  dslc_module_options_color();
}

function dslc_init_options_slider() {
  dslc_module_options_numeric();
}

function dslc_module_edit_options_hideshow_tabs() {
  dslc_module_options_hideshow_tabs();
}

/***/ }),

/***/ "./js/src/editor/backend/templates.js":
/*!********************************************!*\
  !*** ./js/src/editor/backend/templates.js ***!
  \********************************************/
/*! exports provided: templatesPanelInit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "templatesPanelInit", function() { return templatesPanelInit; });
/* harmony import */ var _sections_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sections.js */ "./js/src/editor/backend/sections.js");
/* harmony import */ var _dragndrop_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dragndrop.js */ "./js/src/editor/backend/dragndrop.js");
/* harmony import */ var _modulearea_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modulearea.js */ "./js/src/editor/backend/modulearea.js");
/* harmony import */ var _modalwindow_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modalwindow.js */ "./js/src/editor/backend/modalwindow.js");
/*********************************
 *
 * = TEMPLATES =
 *
 * - dslc_load_template ( Load Template )
 * - dslc_import_template ( Import Template )
 * - dslc_save_template ( Save TEmplate )
 * - dslc_delete_template ( Delete Template )
 *
 ***********************************/




/**
 * TEMPLATES - Load
 */

var loadTemplateById = function loadTemplateById(template) {
  if (window.dslcDebug) console.log('dslc_load_template'); // Vars

  var dslcModule, dslcModuleID; // Template preloader

  jQuery('#wpcontent').prepend('<div class="lc-template-loader"></div>');
  var block = '<div class="lc-loader lds-css"><div class="lds-spinner"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>';
  jQuery('.lc-template-loader').prepend(block); // Ajax call to get template's HTML

  jQuery.post(DSLCAjax.ajaxurl, {
    action: 'dslc-ajax-load-template',
    dslc: 'active',
    dslc_template_id: template
  }, function (response) {
    // Apply the template's HTML
    jQuery('#dslc-main', LiveComposer.Builder.PreviewAreaDocument).html(response.output);
    jQuery('.lc-template-loader').remove(); // Call other functions

    LiveComposer.Builder.PreviewAreaWindow.dslc_carousel(); // Check init for rows and module areas

    Object(_sections_js__WEBPACK_IMPORTED_MODULE_0__["sectionsInitJS"])();
    Object(_modulearea_js__WEBPACK_IMPORTED_MODULE_2__["moduleareasInitJS"])();
    Object(_dragndrop_js__WEBPACK_IMPORTED_MODULE_1__["dragAndDropInit"])();
    window.dslc_show_publish_button();
    window.dslc_generate_code();
  });
};
/**
 * TEMPLATES - Import
 */


function dslc_template_import() {
  if (window.dslcDebug) console.log('dslc_import_template'); // Vars

  var dslcModule, dslcModuleID; // Hide the title on the button and show loading animation

  jQuery('.dslca-modal-templates-import .dslca-modal-title').css({
    opacity: 0
  });
  jQuery('.dslca-modal-templates-import .dslca-loading').show(); // Ajax call to load template's HTML

  jQuery.post(DSLCAjax.ajaxurl, {
    action: 'dslc-ajax-import-template',
    dslc: 'active',
    dslc_template_code: jQuery('#dslca-import-code').val()
  }, function (response) {
    // Apply the template's HTML
    jQuery('#dslc-main', LiveComposer.Builder.PreviewAreaDocument).html(response.output); // Hide the loading on the button and show the title

    jQuery('.dslca-modal-templates-import .dslca-loading').hide();
    jQuery('.dslca-modal-templates-import .dslca-modal-title').css({
      opacity: 1
    }); // Hide the modal

    Object(_modalwindow_js__WEBPACK_IMPORTED_MODULE_3__["hideModal"])('', '.dslca-modal-templates-import'); // Call other functions

    LiveComposer.Builder.PreviewAreaWindow.dslc_bg_video();
    Object(_dragndrop_js__WEBPACK_IMPORTED_MODULE_1__["dragAndDropInit"])();
    window.dslc_show_publish_button();
    window.dslc_generate_code();
  });
}
/**
 * TEMPLATES - SAVE
 */


function dslc_template_save() {
  if (window.dslcDebug) console.log('dslc_save_template'); // AJAX call to save the template

  jQuery.post(DSLCAjax.ajaxurl, {
    action: 'dslc-ajax-save-template',
    dslc: 'active',
    dslc_template_code: jQuery('#dslca-code').val(),
    dslc_template_title: jQuery('#dslca-save-template-title').val()
  }, function (response) {
    // Hide the modal
    Object(_modalwindow_js__WEBPACK_IMPORTED_MODULE_3__["hideModal"])('', '.dslca-modal-templates-save');
  });
}
/**
 * TEMPLATES - DELETE
 */


function dslc_template_delete(template) {
  if (window.dslcDebug) console.log('dslc_delete_template'); // AJAX call to delete template

  jQuery.post(DSLCAjax.ajaxurl, {
    action: 'dslc-ajax-delete-template',
    dslc: 'active',
    dslc_template_id: template
  }, function (response) {
    // Remove template from the template listing
    jQuery('.dslca-template[data-id="' + template + '"]').fadeOut(200, function () {
      jQuery(this).remove();
    });
  });
}
/**
 * Deprecated Functions and Fallbacks
 */


function dslc_import_template() {
  dslc_template_import();
}

function dslc_save_template() {
  dslc_template_save();
}

function dslc_delete_template(template) {
  dslc_template_delete(template);
}
/**
 * TEMPLATES - Document Ready
 */


var templatesPanelInit = function templatesPanelInit() {
  /**
   * Hook - Load Template
   */
  var templateItem = document.querySelectorAll('.dslca-template'); // Attach import function to each template item.

  templateItem.forEach(function (element) {
    element.addEventListener('click', function (event) {
      event.preventDefault();
      var importButton = event.target.closest("[data-id]");
      loadTemplateById(importButton.dataset.id);
    });
  });
  /**
   * Hook - Import Template
   */

  jQuery('.dslca-template-import-form').submit(function (e) {
    e.preventDefault();
    dslc_template_import();
  });
  /**
   * Hook - Save Template
   */

  jQuery('.dslca-template-save-form').submit(function (e) {
    e.preventDefault();
    dslc_template_save();
  });
  /**
   * Hook - Delete Template
   */

  jQuery(document).on('click', '.dslca-delete-template-hook', function (e) {
    e.stopPropagation();
    dslc_template_delete(jQuery(this).data('id'));
  });
};

/***/ }),

/***/ "./js/src/editor/backend/uigeneral.js":
/*!********************************************!*\
  !*** ./js/src/editor/backend/uigeneral.js ***!
  \********************************************/
/*! exports provided: hidePublishButton, showSection, fixContenteditable, keypressEvents */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hidePublishButton", function() { return hidePublishButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "showSection", function() { return showSection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fixContenteditable", function() { return fixContenteditable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keypressEvents", function() { return keypressEvents; });
/* harmony import */ var _settings_panel_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings.panel.js */ "./js/src/editor/backend/settings.panel.js");
/* harmony import */ var _modalwindow_class_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modalwindow.class.js */ "./js/src/editor/backend/modalwindow.class.js");
/* harmony import */ var sortablejs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sortablejs */ "./node_modules/sortablejs/modular/sortable.esm.js");
/*********************************
 *
 * = UI - GENERAL =
 *
 * - dslc_hide_composer ( Hides the composer elements )
 * - dslc_show_composer ( Shows the composer elements )
 * - dslc_show_publish_button ( Shows the publish button )
 * - dslc_show_section now showSection ( Show a specific section )
 * - dslc_generate_filters ( Generate origin filters )
 * - dslc_filter_origin ( Origin filtering for templates/modules listing )
 * - dragAndDropInit ( Initiate drag and drop functionality )
 ***********************************/



/**
 * Try to detect JS errors in WP Admin part.
 */

window.onerror = function (error, file, line, char) {
  dslca_generate_error_report(error, file, line, char);
};
/**
 * Hook - Open Error Log button
 */


jQuery(document).on('click', '.dslca-show-js-error-hook', function (e) {
  e.preventDefault();
  var errors_container = document.getElementById('dslca-js-errors-report');

  if (!jQuery('body').hasClass('dslca-saving-in-progress')) {
    Object(_modalwindow_class_js__WEBPACK_IMPORTED_MODULE_1__["CModalWindow"])({
      title: '<a href="https://livecomposerplugin.com/support/" target="_blank"><span class="dslca-icon dslc-icon-comment"></span> &nbsp; Get Support Info</a>',
      content: '<span class="dslca-error-report">' + errors_container.value + '</span>'
    });
  }
});
/**
 * UI - GENERAL - Document Ready
 */

jQuery(document).ready(function ($) {
  /**
   * Try to detect JS errors in preview area.
   */
  jQuery("#page-builder-frame")[0].contentWindow.onerror = function (error, file, line, char) {
    dslca_generate_error_report(error, file, line, char);
  }; // Put JS error log data in a hidden textarea.


  dslca_update_report_log();
  jQuery('body').addClass('dslca-enabled dslca-drag-not-in-progress');
  jQuery('.dslca-invisible-overlay').hide();
  jQuery('.dslca-section').eq(0).show();
});
/**
 * Action - "Currently Editing" scroll on click
 */

jQuery(document).on('click', '.dslca-currently-editing', function () {
  var activeElement = false,
      newOffset = false,
      outlineColor;

  if (jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).length) {
    activeElement = jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument);
    outlineColor = '#5890e5';
  } else if (jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).length) {
    activeElement = jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument);
    outlineColor = '#eabba9';
  }

  if (activeElement) {
    newOffset = activeElement.offset().top - 100;

    if (newOffset < 0) {
      newOffset = 0;
    }

    var callbacks = [];
    jQuery('html, body', LiveComposer.Builder.PreviewAreaDocument).animate({
      scrollTop: newOffset
    }, 300, function () {
      activeElement.removeAttr('style');
    });
  }
});
/**
 * Save composer code with CMD+S or Ctrl+S
 */

jQuery(window).keypress(function (e) {
  if ((e.metaKey || e.ctrlKey) && e.keyCode == 83) {
    dslc_ajax_save_composer();
    e.preventDefault();
    return false;
  }
});
/**
 * Hook - Hide Composer
 */

jQuery(document).on('click', '.dslca-hide-composer-hook', function (e) {
  e.preventDefault();
  dslc_hide_composer();
});
/**
 * Hook - Show Composer
 */

jQuery(document).on('click', '.dslca-show-composer-hook', function (e) {
  e.preventDefault();
  dslc_show_composer();
});
/**
 * Hook - Section Show - Modules Listing
 */

jQuery(document).on('click', '.dslca-go-to-modules-hook', function (e) {
  e.preventDefault();
  showSection('.dslca-modules');
});
/**
 * Hook - Section Show - Dynamic
 */

jQuery(document).on('click', '.dslca-go-to-section-hook', function (e) {
  e.preventDefault(); // Do nothing if clicked on active tab

  if (jQuery(this).hasClass('dslca-active')) {
    return;
  }

  var sectionTitle = jQuery(this).data('section');
  showSection(sectionTitle);

  if (jQuery(this).hasClass('dslca-go-to-section-modules') || jQuery(this).hasClass('dslca-go-to-section-templates')) {
    jQuery(this).addClass('dslca-active').siblings('.dslca-go-to-section-hook').removeClass('dslca-active');
  }
});
/**
 * Hook - Close Composer
 */

jQuery(document).on('click', '.dslca-close-composer-hook', function (e) {
  e.preventDefault();
  var redirect_url = jQuery(this).attr('href');

  if (!jQuery('body').hasClass('dslca-saving-in-progress') && jQuery('.dslca-save-composer').is(':visible')) {
    // Show warning if changes weren't saved.
    Object(_modalwindow_class_js__WEBPACK_IMPORTED_MODULE_1__["CModalWindow"])({
      title: DSLCString.str_exit_title,
      content: DSLCString.str_exit_descr,
      confirm: function confirm() {
        window.location = redirect_url;
      }
    });
  } else {
    window.location = redirect_url;
  }
});
/**
 * Submit Form
 */

jQuery(document).on('click', '.dslca-submit', function () {
  jQuery(this).closest('form').submit();
});
/**
 * Hook - Show Origin Filters
 */

jQuery(document).on('click', '.dslca-section-title', function (e) {
  e.stopPropagation();

  if (jQuery('.dslca-section-title-filter', this).length) {
    dslc_generate_filters(); // Open filter panel

    jQuery('.dslca-section-title-filter-options').slideToggle(300);
  }
});
/**
 * Hook - Apply Filter Origin
 */

jQuery(document).on('click', '.dslca-section-title-filter-options a', function (e) {
  e.preventDefault();
  e.stopPropagation();
  var origin = jQuery(this).data('origin');
  var section = jQuery(this).closest('.dslca-section');

  if (section.hasClass('dslca-templates-load')) {
    jQuery('.dslca-section-title-filter-curr', section).text(jQuery(this).text());
  } else {
    jQuery('.dslca-section-title-filter-curr', section).text(jQuery(this).text());
  }

  jQuery('.dslca-section-scroller-inner').css({
    left: 0
  });
  dslc_filter_origin(origin, section); // Close filter panel

  jQuery('.dslca-section-title-filter-options').slideToggle(300);
});
/**
 * UI - GENERAL - Hide Composer
 */

function dslc_hide_composer() {
  if (window.dslcDebug) console.log('dslc_hide_composer'); // Hide "hide" button and show "show" button

  jQuery('.dslca-hide-composer-hook').hide();
  jQuery('.dslca-show-composer-hook').show(); // Add class to know it's hidden

  jQuery('body').addClass('dslca-composer-hidden');
  jQuery('body', LiveComposer.Builder.PreviewAreaDocument).addClass('dslca-composer-hidden');
  LiveComposer.Builder.Flags.uiHidden = true; // Hide ( animation ) the main composer area ( at the bottom )

  jQuery('.dslca-container').css({
    bottom: jQuery('.dslca-container').outerHeight() * -1
  }); // Hide the header  part of the main composer area ( at the bottom )

  jQuery('.dslca-header').hide();
}
/**
 * UI - GENERAL - Show Composer
 */


function dslc_show_composer() {
  if (window.dslcDebug) console.log('dslc_show_composer'); // Hide the "show" button and show the "hide" button

  jQuery('.dslca-show-composer-hook').hide();
  jQuery('.dslca-hide-composer-hook').show(); // Remove the class from the body so we know it's not hidden

  jQuery('body').removeClass('dslca-composer-hidden');
  jQuery('body', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-composer-hidden');
  LiveComposer.Builder.Flags.uiHidden = false; // Show ( animate ) the main composer area ( at the bottom )

  jQuery('.dslca-container').css({
    bottom: 0
  }); // Show the header of the main composer area ( at the bottom )

  jQuery('.dslca-header').show();
}
/**
 * UI - GENERAL - Show Publish Button
 */


window.dslc_show_publish_button = function () {
  if (window.dslcDebug) console.log('dslc_show_publish_button');
  jQuery('.dslca-save-composer').show().addClass('dslca-init-animation');
  jQuery('.dslca-save-draft-composer').show().addClass('dslca-init-animation');
};

var hidePublishButton = function hidePublishButton() {
  if (window.dslcDebug) console.log('hidePublishButton');
  jQuery('.dslca-save-composer').hide();
  jQuery('.dslca-save-draft-composer').hide();
};
/**
 * UI - GENERAL - Show Section
 */

var showSection = function showSection(section) {
  if (window.dslcDebug) console.log('showSection'); // Add class to body so we know it's in progress
  // jQuery('body').addClass('dslca-anim-in-progress');
  // Get vars

  var sectionTitle = jQuery(section).data('title'),
      newColor = jQuery(section).data('bg'); // Hide ( animate ) the container

  jQuery('.dslca-container').css({
    bottom: -500
  }); // Hide all sections and show specific section

  jQuery('.dslca-section').hide();
  jQuery(section).show(); // Change "currently editing"

  if (section == '.dslca-module-edit') {
    jQuery('.dslca-currently-editing').show().find('strong').text(jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).attr('title') + ' element');
  } else if (section == '.dslca-modules-section-edit') {
    jQuery('.dslca-currently-editing').show().css('background-color', '#e5855f').find('strong').text('Row');
  } else {
    jQuery('.dslca-currently-editing').hide().find('strong').text('');
  } // Filter module option tabs


  Object(_settings_panel_js__WEBPACK_IMPORTED_MODULE_0__["elementOptionsTabs"])(); // Show ( animate ) the container
  // setTimeout( function() {

  jQuery('.dslca-container').css({
    bottom: 0
  }); // }, 300 );
  // Remove class from body so we know it's finished
  // jQuery('body').removeClass('dslca-anim-in-progress');
  // Set initial background color for the color picker fields
  // Fixes the bug with section color pickers to keep values from the previously
  // edited section.

  jQuery(section).find('input.dslca-module-edit-field-colorpicker').each(function (item) {
    jQuery(this).css('background', jQuery(this).val());
  });
};
/**
 * UI - GENERAL - Generate Origin Filters
 */

function dslc_generate_filters() {
  if (window.dslcDebug) console.log('dslc_generate_filters'); // Vars

  var el,
      filters = [],
      filtersHTML = '<a html="#" data-origin="">Show All</a>',
      els = jQuery('.dslca-section:visible .dslca-origin'); // Go through each and generate the filters

  els.each(function () {
    el = jQuery(this);

    if (jQuery.inArray(el.data('origin'), filters) == -1) {
      filters.push(el.data('origin'));
      filtersHTML += '<a href="#" data-origin="' + el.data('origin') + '">' + el.data('origin') + '</a>';
    }
  });
  jQuery('.dslca-section:visible .dslca-section-title-filter-options').html(filtersHTML).css('background', jQuery('.dslca-section:visible').data('bg'));
}
/**
 * UI - GENERAL - Origin Filter
 */


function dslc_filter_origin(origin, section) {
  if (window.dslcDebug) console.log('dslc_filter_origin');
  jQuery('.dslca-origin', section).attr('data-display-module', 'false');
  jQuery('.dslca-origin[data-origin="' + origin + '"]', section).attr('data-display-module', 'true');

  if (origin == '') {
    jQuery('.dslca-origin', section).attr('data-display-module', 'true');
    jQuery('.dslca-origin.dslca-exclude', section).attr('data-display-module', 'false');
  }
}
/**
 * Prevent drag and drop of the modules
 * into the inner content areas of the other modules
 */


var fixContenteditable = function fixContenteditable() {
  window.LiveComposer.Builder.PreviewAreaDocument.on('dragstart', '.dslca-module, .dslc-module-front, .dslc-modules-area, .dslc-modules-section', function (e) {
    jQuery('[contenteditable]', window.LiveComposer.Builder.PreviewAreaDocument).attr('contenteditable', false);
  });
  window.LiveComposer.Builder.PreviewAreaDocument.on('dragend mousedown', '.dslca-module, .dslc-module-front, .dslc-modules-area, .dslc-modules-section', function (e) {
    jQuery('[contenteditable]', window.LiveComposer.Builder.PreviewAreaDocument).attr('contenteditable', true);
  });
};
/**
 * Disable/Enable module control.
 *
 * @param  {string} control_id CSS ID of the control we are toggling
 * @return {void}
 */

function dslc_toogle_control(control_id) {
  if (control_id === undefined) control_id = false;
  if (!control_id) return;
  var control = jQuery('.dslca-module-edit-option-' + control_id);
  var control_storage = control.find('.dslca-module-edit-field'); // Get the element we are editing

  var module = jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument); // Get the element id

  var module_id = module[0].id;
  var responsive_prefix = '';

  if ('tablet_responsive' === control.data('tab')) {
    responsive_prefix = 'body.dslc-res-tablet ';
  } else if ('phone_responsive' === control.data('tab')) {
    responsive_prefix = 'body.dslc-res-phone ';
  }

  var affect_on_change_el = control_storage.data('affect-on-change-el');
  if (affect_on_change_el === undefined) return;
  var affect_on_change_elmts = affect_on_change_el.split(',');
  affect_on_change_el = ''; // Loop through elements (useful when there are multiple elements)

  for (var i = 0; i < affect_on_change_elmts.length; i++) {
    if (i > 0) {
      affect_on_change_el += ', ';
    }

    affect_on_change_el += responsive_prefix + '#' + module_id + ' ' + affect_on_change_elmts[i];
  }

  var affect_on_change_rule = control_storage.data('affect-on-change-rule').replace(/ /g, '');
  var affect_on_change_rules = affect_on_change_rule.split(',');
  var control_value;
  var control_data_ext = control_storage.data('ext');
  control.toggleClass('dslca-option-off');

  if (control.hasClass('dslca-option-off')) {
    // Disable
    control_value = dslc_get_control_value(control_id); // Temporary backup the current value as data attribute

    control_storage.data('val-bckp', control_value); // control_value = dslc_combine_value_and_extension( control_value, control_data_ext);
    // Loop through rules (useful when there are multiple rules)

    for (var i = 0; i < affect_on_change_rules.length; i++) {
      // remove css rule in element inline style
      jQuery(affect_on_change_el, LiveComposer.Builder.PreviewAreaDocument).css(affect_on_change_rules[i], ''); // remove css rule in css block

      disable_css_rule(affect_on_change_el, affect_on_change_rules[i], module_id); // PROBLEM do not work with multiply rules ex.: .dslc-text-module-content,.dslc-text-module-content p
    }

    control_storage.val('').trigger('change');
  } else {
    // Enable
    // Restore value of the data backup attribute
    control_storage.val(control_storage.data('val-bckp')).trigger('change');
    control_value = dslc_get_control_value(control_id);
    control_value = dslc_combine_value_and_extension(control_value, control_data_ext || ''); // Loop through rules (useful when there are multiple rules)

    for (var i = 0; i < affect_on_change_rules.length; i++) {
      var styleContent = affect_on_change_el + "{" + affect_on_change_rules[i] + ": " + control_value + "}";
      LiveComposer.Builder.Helpers.processInlineStyleTag({
        context: control,
        rule: affect_on_change_rules[i],
        elems: affect_on_change_el.replace(new RegExp('#' + module_id, 'gi'), '').trim(),
        styleContent: styleContent
      });
    }
  }
}

jQuery(document).ready(function ($) {
  // Option Control Toggle
  jQuery(document).on('click', '.dslca-module-edit-option .dslc-control-toggle', function (e) {
    e.preventDefault();
    var control_id = jQuery(e.target).closest('.dslca-module-edit-option').find('.dslca-module-edit-field').data('id');
    dslc_toogle_control(control_id);
  }); // Disable Toggle If the Control Focused

  jQuery(document).on('mousedown', '.dslca-module-edit-option', function (e) {
    var toggle = jQuery('.dslc-control-toggle');

    if (!toggle.is(e.target) // if the target of the click isn't the container...
    && toggle.has(e.target).length === 0) // ... nor a descendant of the container
      {
        if (jQuery(e.target).closest('.dslca-module-edit-option').hasClass('dslca-option-off')) {
          var control_id = jQuery(e.target).closest('.dslca-module-edit-option').find('.dslca-module-edit-field').data('id');
          dslc_toogle_control(control_id);
        }
      }
  });
});

function disable_css_rule(selectorCSS, ruleCSS, moduleID) {
  var cssRules;
  var target_stylsheet_ID = 'css-for-' + moduleID;
  var stylesheet = document.getElementById('page-builder-frame').contentWindow.document.getElementById(target_stylsheet_ID);
  selectorCSS = selectorCSS.replace(/\s\s+/g, ' ');

  if (stylesheet) {
    stylesheet = stylesheet.sheet;

    if (stylesheet['rules']) {
      cssRules = 'rules';
    } else if (stylesheet['cssRules']) {
      cssRules = 'cssRules';
    } else {} //no rules found... browser unknown
    // Go through each CSS rule (ex.: .content h1 {...})


    for (var R = 0; R < stylesheet[cssRules].length; R++) {
      // Is current CSS rule equal to the selectorCSS we are looking for?
      // (ex.: '.content h1' == '.content h1' )
      if (stylesheet[cssRules][R].selectorText == selectorCSS) {
        // Get CSS property we are looking for... (ex.: font-size : ...; )
        if (stylesheet[cssRules][R].style[ruleCSS]) {
          stylesheet[cssRules][R].style[ruleCSS] = '';
          break;
        }
      }
    }
  }
}

function dslc_combine_value_and_extension(value, extension) {
  if ('' === value || null === value) {
    return value;
  } // Check if value do not already include extension


  if (value.indexOf(extension) == -1) {
    value = value + extension;
  }

  return value;
}

function dslc_get_control_value(control_id) {
  var control = jQuery('.dslca-module-edit-option-' + control_id);
  var control_type = 'text';
  var control_storage = control.find('.dslca-module-edit-field');
  var value;
  /*
  	if ( control.hasClass('dslca-module-edit-option-select') ) {
  
  	} else {
  		// text based controls
  		value = control_storage.val();
  	}
  */

  value = control_storage.val();
  return value;
}
/**
 * Bind keypress events with both parent and iframe pages.
 * Function called when content inside iframe is loaded.
 *
 * @return {void}
 */


var keypressEvents = function keypressEvents() {
  jQuery([document, LiveComposer.Builder.PreviewAreaWindow.document]).unbind('keydown').bind('keydown', function (keydown_event) {
    // Modal window [ESC]/[Enter]
    window.dslc_modal_keypress_events(keydown_event); // Prevent backspace from navigating back

    dslc_disable_backspace_navigation(keydown_event); // Prompt Modal on F5

    dslc_notice_on_refresh(keydown_event); // Save Page

    dslc_save_page(keydown_event);
  });
};
/**
 * Action - Prevent backspace from navigating back
 */

function dslc_disable_backspace_navigation(event) {
  var doPrevent = false;

  if (event.keyCode === 8) {
    var d = event.srcElement || event.target;

    if (d.tagName.toUpperCase() === 'INPUT' && (d.type.toUpperCase() === 'TEXT' || d.type.toUpperCase() === 'PASSWORD' || d.type.toUpperCase() === 'NUMBER' || d.type.toUpperCase() === 'FILE') || d.tagName.toUpperCase() === 'TEXTAREA' || jQuery(d).hasClass('dslca-editable-content') || jQuery(d).hasClass('dslc-tabs-nav-hook-title') || jQuery(d).hasClass('dslc-accordion-title')) {
      doPrevent = d.readOnly || d.disabled;
    } else {
      doPrevent = true;
    }
  }

  if (doPrevent) {
    event.preventDefault();
  }
}
/**
 * Actions - Prompt Modal on F5
 *
 * 116 – F5
 * 81 + event.metaKey = CMD + R
 */


function dslc_notice_on_refresh(e) {
  if (e.which == 116 || e.which === 82 && e.metaKey) {
    if (jQuery('.dslca-save-composer-hook').offsetParent !== null || jQuery('.dslca-module-edit-save').offsetParent !== null) {
      e.preventDefault();
      Object(_modalwindow_class_js__WEBPACK_IMPORTED_MODULE_1__["CModalWindow"])({
        title: DSLCString.str_refresh_title,
        content: DSLCString.str_refresh_descr,
        confirm: function confirm() {
          window.location.reload();
        }
      });
      /*dslc_js_confirm( 'disable_lc', '<span class="dslca-prompt-modal-title">' + DSLCString.str_refresh_title +
       '</span><span class="dslca-prompt-modal-descr">' + DSLCString.str_refresh_descr + '</span>', document.URL );*/
    }
  }
}
/**
 * If Control or Command key is pressed and the S key is pressed run dslc_save_composer.
 * 83 is the key code for S.
 */


function dslc_save_page(e) {
  if (e.which == 83 && (e.metaKey || e.ctrlKey)) {
    if (jQuery('.dslca-save-composer-hook').css('display') == 'block') {
      dslc_save_composer();
      e.preventDefault();
      return false;
    }
  }
}
/**
 * Generate report about JS error and save it in a local storage.
 * @param  String error Error text
 * @param  String file  File with error
 * @param  String line  Line with error
 * @param  String char  Column with error
 * @return void
 */


function dslca_generate_error_report(error, file, line, char) {
  var title = 'JavaScript error detected in a third-party plugin';

  if (file.match("wp-content\/plugins\/live-composer-page-builder\/js") != null) {
    title = 'Live Composer returned JS error';
  }

  var error_report = '';
  error_report += '<br /><strong style="color:#E55F5F;">' + title + '</strong><br />';
  error_report += error + '<br /> File "' + file + '", line ' + line + ', char ' + char + '<br />';

  if ('undefined' !== typeof Storage) {
    localStorage.setItem('js_errors_report', error_report);
  }
}
/**
 * Put in a hidden div#dslca-js-errors-report information from local storage
 * @return void
 */


function dslca_update_report_log() {
  var errors_container = document.getElementById('dslca-js-errors-report');
  var error_report = localStorage.getItem('js_errors_report');

  if (null !== error_report) {
    errors_container.value = error_report;
    localStorage.removeItem('js_errors_report');
    document.querySelector('.dslca-show-js-error-hook').setAttribute('style', 'visibility:visible');
  }
} // ============================================================


jQuery(document).on('editorFrameLoaded', function () {
  var $ = jQuery;
  var headerFooter = jQuery('div[data-hf]', LiveComposer.Builder.PreviewAreaDocument);
  var overlay = '';
  headerFooter.each(function (index, el) {
    var linkToEdit = jQuery(el).data('editing-link');
    var hfType = jQuery(el).data('editing-type');
    var editingLabel = jQuery(el).data('editing-label');
    var editingSubLabel = jQuery(el).data('editing-sublabel');
    overlay += '<div class="dslc-hf-block-overlay"><a target="_blank" href="' + linkToEdit + '" class="dslc-hf-block-overlay-button dslca-link">' + editingLabel + '</a>';

    if (editingSubLabel !== undefined) {
      overlay += ' <span class="dslc-hf-block-overlay-text">' + editingSubLabel + '</span>';
    }

    overlay += '</div>';
    var htmlObject = document.createElement('div');
    htmlObject.innerHTML = overlay;
    el.append(htmlObject);
  });
});

/***/ }),

/***/ "./js/src/editor/backend/utils.class.js":
/*!**********************************************!*\
  !*** ./js/src/editor/backend/utils.class.js ***!
  \**********************************************/
/*! exports provided: untilsInitJs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "untilsInitJs", function() { return untilsInitJs; });
/**
 * Custom utils
 */


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Utils = {
  addslashes: function addslashes(str) {
    str = str.replace(/\\/g, '\\\\');
    str = str.replace(/\'/g, '\\\'');
    str = str.replace(/\"/g, '\\"');
    str = str.replace(/\0/g, '\\0');
    return str;
  },
  basename: function basename(path) {
    return path.split(/[\\/]/).pop();
  },

  /**
   * Check if browser is IE
   */
  msieversion: function msieversion() {
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf("MSIE ");

    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) // If Internet Explorer, return version number
      {
        return parseInt(ua.substring(msie + 5, ua.indexOf(".", msie)));
      } else // If another browser, return 0
      {
        return false;
      }
  },

  /**
   * Check if variables in array is desired types
   * @param  {array} array
   * @return {boolean}
   */
  checkParams: function checkParams(array) {
    if (!Array.isArray(array)) {
      throw 'Param is not array';
    } /// Instead of switch construction


    var types = {
      integer: function integer(param) {
        return isNaN(parseInt(param));
      },
      float: function float(param) {
        return isNaN(parseFloat(param));
      },
      string: function string(param) {
        return param != null && param != undefined && typeof param == 'string';
      },
      array: function array(param) {
        return Array.isArray(param);
      },
      object: function object(param) {
        return _typeof(param) == 'object';
      } /// Check it!

    };
    array.map(function (item) {
      if (!types[item[1]](item[0])) {
        throw 'Param ' + item[0] + ' is not ' + item[1];
      }
    });
  },

  /**
   * Converts UTF-8 to base64
   *
   * @param  {string} t utf-8
   * @return {string}   b64
   */
  utf8_to_b64: function utf8_to_b64(t) {
    return window.btoa(unescape(encodeURIComponent(t)));
  },

  /**
   * Converts base64 to UTF-8
   *
   * @param  {string} str in b64
   * @return {string}   in utf-8
   */
  b64_to_utf8: function b64_to_utf8(str) {
    return decodeURIComponent(escape(window.atob(str)));
  },

  /**
   * Get Page Params
   *
   * @return {array}
   */
  get_page_params: function get_page_params() {
    return decodeURIComponent(window.location.search.slice(1)).split('&').reduce(function _reduce(a, b) {
      b = b.split('=');
      a[b[0]] = b[1];
      return a;
    }, {});
  },
  get_unique_id: function get_unique_id() {
    return Math.random().toString(32).slice(2);
  },

  /**
   * Update module option in raw JSON code (dslc_code) of the module
   *
   * @param  {DOM element} module    Module Element
   * @param  {string} property_name  Name of the option we change
   * @param  {string} property_value Value of the option we change
   * @return {void}
   */
  update_module_property_raw: function update_module_property_raw(module, property_name, property_value) {
    // Hidden textarea element with raw base64 code of the module
    // <textarea class="dslca-module-code">YTo2On....iOjE7fQ==</textarea>
    var module_code_container = module.getElementsByClassName('dslca-module-code')[0]; // Hidden textarea element with value of this particular setting
    // <textarea data-id="property_name">property_value</textarea>

    var property_container = module.querySelector('.dslca-module-option-front[data-id="' + property_name + '"]'); // Get module raw code

    var module_code = module_code_container.value;
    module_code = JSON.parse(module_code);
    module_code[property_name] = property_value;
    module_code = JSON.stringify(module_code); // Update raw code

    module_code_container.value = module_code;
    module_code_container.innerHTML = module_code; // See comment block below
    // Change the property in hidden textarea as well

    property_container.value = property_value;
    property_container.innerHTML = property_value; // See comment block below

    /**
     * FireFox will not duplicate textarea value properly using .cloneNode(true)
     * if we don't use .innerHTML statement (Chrome works fine with .value only).
     *
     * See bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=237783
     */
  },

  /**
   * Update section option in raw JSON code (dslc_code) of the section
   *
   * @param  {DOM element} section    `section Element
   * @param  {string} property_name  Name of the option we change
   * @param  {string} property_value Value of the option we change
   * @return {void}
   */
  update_section_property_raw: function update_section_property_raw(section, property_name, property_value) {
    // Hidden textarea element with raw base64 code of the roq
    // <textarea class="dslca-section-code"></textarea>
    var section_code_container = section.getElementsByClassName('dslca-section-code')[0]; // Hidden input element with value of this particular setting
    // <input data-id="property_name">property_value</textarea>

    var property_container = section.querySelector('.dslca-modules-section-settings input[data-id="' + property_name + '"]'); // Get module raw code

    var section_code = section_code_container.value;
    section_code = JSON.parse(section_code);
    section_code[property_name] = property_value;
    section_code = JSON.stringify(section_code); // Update raw code

    section_code_container.value = section_code;
    section_code_container.innerHTML = section_code; // See comment block below
    // Change the property in hidden textarea as well

    property_container.setAttribute('value', property_value);
    property_container.setAttribute('data-def', property_value);
  },

  /**
   * Provide custom events publish.
   * Also echoes all the custom events in the preview iframe as well.
   *
   * @param  {string} eventName
   * @param  {object||string||null||numeric} eventData [description]
   */
  publish: function publish(eventName, eventData) {
    eventData = eventData ? eventData : {};
    this.checkParams([[eventName, 'string'], [eventData, 'object']]);
    jQuery(document).trigger({
      type: eventName,
      message: {
        details: eventData
      }
    });
    LiveComposer.Builder.PreviewAreaWindow.dslca_publish_event(eventName, eventData);
  }
};
var untilsInitJs = function untilsInitJs() {
  window.LiveComposer.Utils = Utils;
};

/***/ }),

/***/ "./node_modules/animejs/lib/anime.es.js":
/*!**********************************************!*\
  !*** ./node_modules/animejs/lib/anime.es.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 * anime.js v3.0.1
 * (c) 2019 Julian Garnier
 * Released under the MIT license
 * animejs.com
 */

// Defaults

var defaultInstanceSettings = {
  update: null,
  begin: null,
  loopBegin: null,
  changeBegin: null,
  change: null,
  changeComplete: null,
  loopComplete: null,
  complete: null,
  loop: 1,
  direction: 'normal',
  autoplay: true,
  timelineOffset: 0
};

var defaultTweenSettings = {
  duration: 1000,
  delay: 0,
  endDelay: 0,
  easing: 'easeOutElastic(1, .5)',
  round: 0
};

var validTransforms = ['translateX', 'translateY', 'translateZ', 'rotate', 'rotateX', 'rotateY', 'rotateZ', 'scale', 'scaleX', 'scaleY', 'scaleZ', 'skew', 'skewX', 'skewY', 'perspective'];

// Caching

var cache = {
  CSS: {},
  springs: {}
};

// Utils

function minMax(val, min, max) {
  return Math.min(Math.max(val, min), max);
}

function stringContains(str, text) {
  return str.indexOf(text) > -1;
}

function applyArguments(func, args) {
  return func.apply(null, args);
}

var is = {
  arr: function (a) { return Array.isArray(a); },
  obj: function (a) { return stringContains(Object.prototype.toString.call(a), 'Object'); },
  pth: function (a) { return is.obj(a) && a.hasOwnProperty('totalLength'); },
  svg: function (a) { return a instanceof SVGElement; },
  inp: function (a) { return a instanceof HTMLInputElement; },
  dom: function (a) { return a.nodeType || is.svg(a); },
  str: function (a) { return typeof a === 'string'; },
  fnc: function (a) { return typeof a === 'function'; },
  und: function (a) { return typeof a === 'undefined'; },
  hex: function (a) { return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a); },
  rgb: function (a) { return /^rgb/.test(a); },
  hsl: function (a) { return /^hsl/.test(a); },
  col: function (a) { return (is.hex(a) || is.rgb(a) || is.hsl(a)); },
  key: function (a) { return !defaultInstanceSettings.hasOwnProperty(a) && !defaultTweenSettings.hasOwnProperty(a) && a !== 'targets' && a !== 'keyframes'; }
};

// Easings

function parseEasingParameters(string) {
  var match = /\(([^)]+)\)/.exec(string);
  return match ? match[1].split(',').map(function (p) { return parseFloat(p); }) : [];
}

// Spring solver inspired by Webkit Copyright © 2016 Apple Inc. All rights reserved. https://webkit.org/demos/spring/spring.js

function spring(string, duration) {

  var params = parseEasingParameters(string);
  var mass = minMax(is.und(params[0]) ? 1 : params[0], .1, 100);
  var stiffness = minMax(is.und(params[1]) ? 100 : params[1], .1, 100);
  var damping = minMax(is.und(params[2]) ? 10 : params[2], .1, 100);
  var velocity =  minMax(is.und(params[3]) ? 0 : params[3], .1, 100);
  var w0 = Math.sqrt(stiffness / mass);
  var zeta = damping / (2 * Math.sqrt(stiffness * mass));
  var wd = zeta < 1 ? w0 * Math.sqrt(1 - zeta * zeta) : 0;
  var a = 1;
  var b = zeta < 1 ? (zeta * w0 + -velocity) / wd : -velocity + w0;

  function solver(t) {
    var progress = duration ? (duration * t) / 1000 : t;
    if (zeta < 1) {
      progress = Math.exp(-progress * zeta * w0) * (a * Math.cos(wd * progress) + b * Math.sin(wd * progress));
    } else {
      progress = (a + b * progress) * Math.exp(-progress * w0);
    }
    if (t === 0 || t === 1) { return t; }
    return 1 - progress;
  }

  function getDuration() {
    var cached = cache.springs[string];
    if (cached) { return cached; }
    var frame = 1/6;
    var elapsed = 0;
    var rest = 0;
    while(true) {
      elapsed += frame;
      if (solver(elapsed) === 1) {
        rest++;
        if (rest >= 16) { break; }
      } else {
        rest = 0;
      }
    }
    var duration = elapsed * frame * 1000;
    cache.springs[string] = duration;
    return duration;
  }

  return duration ? solver : getDuration;

}

// Elastic easing adapted from jQueryUI http://api.jqueryui.com/easings/

function elastic(amplitude, period) {
  if ( amplitude === void 0 ) amplitude = 1;
  if ( period === void 0 ) period = .5;

  var a = minMax(amplitude, 1, 10);
  var p = minMax(period, .1, 2);
  return function (t) {
    return (t === 0 || t === 1) ? t : 
      -a * Math.pow(2, 10 * (t - 1)) * Math.sin((((t - 1) - (p / (Math.PI * 2) * Math.asin(1 / a))) * (Math.PI * 2)) / p);
  }
}

// Basic steps easing implementation https://developer.mozilla.org/fr/docs/Web/CSS/transition-timing-function

function steps(steps) {
  if ( steps === void 0 ) steps = 10;

  return function (t) { return Math.round(t * steps) * (1 / steps); };
}

// BezierEasing https://github.com/gre/bezier-easing

var bezier = (function () {

  var kSplineTableSize = 11;
  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1 }
  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1 }
  function C(aA1)      { return 3.0 * aA1 }

  function calcBezier(aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT }
  function getSlope(aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1) }

  function binarySubdivide(aX, aA, aB, mX1, mX2) {
    var currentX, currentT, i = 0;
    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;
      if (currentX > 0.0) { aB = currentT; } else { aA = currentT; }
    } while (Math.abs(currentX) > 0.0000001 && ++i < 10);
    return currentT;
  }

  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (var i = 0; i < 4; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);
      if (currentSlope === 0.0) { return aGuessT; }
      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
  }

  function bezier(mX1, mY1, mX2, mY2) {

    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) { return; }
    var sampleValues = new Float32Array(kSplineTableSize);

    if (mX1 !== mY1 || mX2 !== mY2) {
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }

    function getTForX(aX) {

      var intervalStart = 0;
      var currentSample = 1;
      var lastSample = kSplineTableSize - 1;

      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }

      --currentSample;

      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);

      if (initialSlope >= 0.001) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }

    }

    return function (x) {
      if (mX1 === mY1 && mX2 === mY2) { return x; }
      if (x === 0 || x === 1) { return x; }
      return calcBezier(getTForX(x), mY1, mY2);
    }

  }

  return bezier;

})();

var penner = (function () {

  var names = ['Quad', 'Cubic', 'Quart', 'Quint', 'Sine', 'Expo', 'Circ', 'Back', 'Elastic'];

  // Approximated Penner equations http://matthewlein.com/ceaser/

  var curves = {
    In: [
      [0.550, 0.085, 0.680, 0.530], /* inQuad */
      [0.550, 0.055, 0.675, 0.190], /* inCubic */
      [0.895, 0.030, 0.685, 0.220], /* inQuart */
      [0.755, 0.050, 0.855, 0.060], /* inQuint */
      [0.470, 0.000, 0.745, 0.715], /* inSine */
      [0.950, 0.050, 0.795, 0.035], /* inExpo */
      [0.600, 0.040, 0.980, 0.335], /* inCirc */
      [0.600,-0.280, 0.735, 0.045], /* inBack */
      elastic /* inElastic */
    ],
    Out: [
      [0.250, 0.460, 0.450, 0.940], /* outQuad */
      [0.215, 0.610, 0.355, 1.000], /* outCubic */
      [0.165, 0.840, 0.440, 1.000], /* outQuart */
      [0.230, 1.000, 0.320, 1.000], /* outQuint */
      [0.390, 0.575, 0.565, 1.000], /* outSine */
      [0.190, 1.000, 0.220, 1.000], /* outExpo */
      [0.075, 0.820, 0.165, 1.000], /* outCirc */
      [0.175, 0.885, 0.320, 1.275], /* outBack */
      function (a, p) { return function (t) { return 1 - elastic(a, p)(1 - t); }; } /* outElastic */
    ],
    InOut: [
      [0.455, 0.030, 0.515, 0.955], /* inOutQuad */
      [0.645, 0.045, 0.355, 1.000], /* inOutCubic */
      [0.770, 0.000, 0.175, 1.000], /* inOutQuart */
      [0.860, 0.000, 0.070, 1.000], /* inOutQuint */
      [0.445, 0.050, 0.550, 0.950], /* inOutSine */
      [1.000, 0.000, 0.000, 1.000], /* inOutExpo */
      [0.785, 0.135, 0.150, 0.860], /* inOutCirc */
      [0.680,-0.550, 0.265, 1.550], /* inOutBack */
      function (a, p) { return function (t) { return t < .5 ? elastic(a, p)(t * 2) / 2 : 1 - elastic(a, p)(t * -2 + 2) / 2; }; } /* inOutElastic */
    ]
  };

  var eases = { 
    linear: [0.250, 0.250, 0.750, 0.750]
  };

  var loop = function ( coords ) {
    curves[coords].forEach(function (ease, i) {
      eases['ease'+coords+names[i]] = ease;
    });
  };

  for (var coords in curves) loop( coords );

  return eases;

})();

function parseEasings(easing, duration) {
  if (is.fnc(easing)) { return easing; }
  var name = easing.split('(')[0];
  var ease = penner[name];
  var args = parseEasingParameters(easing);
  switch (name) {
    case 'spring' : return spring(easing, duration);
    case 'cubicBezier' : return applyArguments(bezier, args);
    case 'steps' : return applyArguments(steps, args);
    default : return is.fnc(ease) ? applyArguments(ease, args) : applyArguments(bezier, ease);
  }
}

// Strings

function selectString(str) {
  try {
    var nodes = document.querySelectorAll(str);
    return nodes;
  } catch(e) {
    return;
  }
}

// Arrays

function filterArray(arr, callback) {
  var len = arr.length;
  var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
  var result = [];
  for (var i = 0; i < len; i++) {
    if (i in arr) {
      var val = arr[i];
      if (callback.call(thisArg, val, i, arr)) {
        result.push(val);
      }
    }
  }
  return result;
}

function flattenArray(arr) {
  return arr.reduce(function (a, b) { return a.concat(is.arr(b) ? flattenArray(b) : b); }, []);
}

function toArray(o) {
  if (is.arr(o)) { return o; }
  if (is.str(o)) { o = selectString(o) || o; }
  if (o instanceof NodeList || o instanceof HTMLCollection) { return [].slice.call(o); }
  return [o];
}

function arrayContains(arr, val) {
  return arr.some(function (a) { return a === val; });
}

// Objects

function cloneObject(o) {
  var clone = {};
  for (var p in o) { clone[p] = o[p]; }
  return clone;
}

function replaceObjectProps(o1, o2) {
  var o = cloneObject(o1);
  for (var p in o1) { o[p] = o2.hasOwnProperty(p) ? o2[p] : o1[p]; }
  return o;
}

function mergeObjects(o1, o2) {
  var o = cloneObject(o1);
  for (var p in o2) { o[p] = is.und(o1[p]) ? o2[p] : o1[p]; }
  return o;
}

// Colors

function rgbToRgba(rgbValue) {
  var rgb = /rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(rgbValue);
  return rgb ? ("rgba(" + (rgb[1]) + ",1)") : rgbValue;
}

function hexToRgba(hexValue) {
  var rgx = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  var hex = hexValue.replace(rgx, function (m, r, g, b) { return r + r + g + g + b + b; } );
  var rgb = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  var r = parseInt(rgb[1], 16);
  var g = parseInt(rgb[2], 16);
  var b = parseInt(rgb[3], 16);
  return ("rgba(" + r + "," + g + "," + b + ",1)");
}

function hslToRgba(hslValue) {
  var hsl = /hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(hslValue) || /hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(hslValue);
  var h = parseInt(hsl[1], 10) / 360;
  var s = parseInt(hsl[2], 10) / 100;
  var l = parseInt(hsl[3], 10) / 100;
  var a = hsl[4] || 1;
  function hue2rgb(p, q, t) {
    if (t < 0) { t += 1; }
    if (t > 1) { t -= 1; }
    if (t < 1/6) { return p + (q - p) * 6 * t; }
    if (t < 1/2) { return q; }
    if (t < 2/3) { return p + (q - p) * (2/3 - t) * 6; }
    return p;
  }
  var r, g, b;
  if (s == 0) {
    r = g = b = l;
  } else {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r = hue2rgb(p, q, h + 1/3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1/3);
  }
  return ("rgba(" + (r * 255) + "," + (g * 255) + "," + (b * 255) + "," + a + ")");
}

function colorToRgb(val) {
  if (is.rgb(val)) { return rgbToRgba(val); }
  if (is.hex(val)) { return hexToRgba(val); }
  if (is.hsl(val)) { return hslToRgba(val); }
}

// Units

function getUnit(val) {
  var split = /([\+\-]?[0-9#\.]+)(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(val);
  if (split) { return split[2]; }
}

function getTransformUnit(propName) {
  if (stringContains(propName, 'translate') || propName === 'perspective') { return 'px'; }
  if (stringContains(propName, 'rotate') || stringContains(propName, 'skew')) { return 'deg'; }
}

// Values

function getFunctionValue(val, animatable) {
  if (!is.fnc(val)) { return val; }
  return val(animatable.target, animatable.id, animatable.total);
}

function getAttribute(el, prop) {
  return el.getAttribute(prop);
}

function convertPxToUnit(el, value, unit) {
  var valueUnit = getUnit(value);
  if (arrayContains([unit, 'deg', 'rad', 'turn'], valueUnit)) { return value; }
  var cached = cache.CSS[value + unit];
  if (!is.und(cached)) { return cached; }
  var baseline = 100;
  var tempEl = document.createElement(el.tagName);
  var parentEl = (el.parentNode && (el.parentNode !== document)) ? el.parentNode : document.body;
  parentEl.appendChild(tempEl);
  tempEl.style.position = 'absolute';
  tempEl.style.width = baseline + unit;
  var factor = baseline / tempEl.offsetWidth;
  parentEl.removeChild(tempEl);
  var convertedUnit = factor * parseFloat(value);
  cache.CSS[value + unit] = convertedUnit;
  return convertedUnit;
}

function getCSSValue(el, prop, unit) {
  if (prop in el.style) {
    var uppercasePropName = prop.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
    var value = el.style[prop] || getComputedStyle(el).getPropertyValue(uppercasePropName) || '0';
    return unit ? convertPxToUnit(el, value, unit) : value;
  }
}

function getAnimationType(el, prop) {
  if (is.dom(el) && !is.inp(el) && (getAttribute(el, prop) || (is.svg(el) && el[prop]))) { return 'attribute'; }
  if (is.dom(el) && arrayContains(validTransforms, prop)) { return 'transform'; }
  if (is.dom(el) && (prop !== 'transform' && getCSSValue(el, prop))) { return 'css'; }
  if (el[prop] != null) { return 'object'; }
}

function getElementTransforms(el) {
  if (!is.dom(el)) { return; }
  var str = el.style.transform || '';
  var reg  = /(\w+)\(([^)]*)\)/g;
  var transforms = new Map();
  var m; while (m = reg.exec(str)) { transforms.set(m[1], m[2]); }
  return transforms;
}

function getTransformValue(el, propName, animatable, unit) {
  var defaultVal = stringContains(propName, 'scale') ? 1 : 0 + getTransformUnit(propName);
  var value = getElementTransforms(el).get(propName) || defaultVal;
  if (animatable) {
    animatable.transforms.list.set(propName, value);
    animatable.transforms['last'] = propName;
  }
  return unit ? convertPxToUnit(el, value, unit) : value;
}

function getOriginalTargetValue(target, propName, unit, animatable) {
  switch (getAnimationType(target, propName)) {
    case 'transform': return getTransformValue(target, propName, animatable, unit);
    case 'css': return getCSSValue(target, propName, unit);
    case 'attribute': return getAttribute(target, propName);
    default: return target[propName] || 0;
  }
}

function getRelativeValue(to, from) {
  var operator = /^(\*=|\+=|-=)/.exec(to);
  if (!operator) { return to; }
  var u = getUnit(to) || 0;
  var x = parseFloat(from);
  var y = parseFloat(to.replace(operator[0], ''));
  switch (operator[0][0]) {
    case '+': return x + y + u;
    case '-': return x - y + u;
    case '*': return x * y + u;
  }
}

function validateValue(val, unit) {
  if (is.col(val)) { return colorToRgb(val); }
  var originalUnit = getUnit(val);
  var unitLess = originalUnit ? val.substr(0, val.length - originalUnit.length) : val;
  return unit && !/\s/g.test(val) ? unitLess + unit : unitLess;
}

// getTotalLength() equivalent for circle, rect, polyline, polygon and line shapes
// adapted from https://gist.github.com/SebLambla/3e0550c496c236709744

function getDistance(p1, p2) {
  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
}

function getCircleLength(el) {
  return Math.PI * 2 * getAttribute(el, 'r');
}

function getRectLength(el) {
  return (getAttribute(el, 'width') * 2) + (getAttribute(el, 'height') * 2);
}

function getLineLength(el) {
  return getDistance(
    {x: getAttribute(el, 'x1'), y: getAttribute(el, 'y1')}, 
    {x: getAttribute(el, 'x2'), y: getAttribute(el, 'y2')}
  );
}

function getPolylineLength(el) {
  var points = el.points;
  var totalLength = 0;
  var previousPos;
  for (var i = 0 ; i < points.numberOfItems; i++) {
    var currentPos = points.getItem(i);
    if (i > 0) { totalLength += getDistance(previousPos, currentPos); }
    previousPos = currentPos;
  }
  return totalLength;
}

function getPolygonLength(el) {
  var points = el.points;
  return getPolylineLength(el) + getDistance(points.getItem(points.numberOfItems - 1), points.getItem(0));
}

// Path animation

function getTotalLength(el) {
  if (el.getTotalLength) { return el.getTotalLength(); }
  switch(el.tagName.toLowerCase()) {
    case 'circle': return getCircleLength(el);
    case 'rect': return getRectLength(el);
    case 'line': return getLineLength(el);
    case 'polyline': return getPolylineLength(el);
    case 'polygon': return getPolygonLength(el);
  }
}

function setDashoffset(el) {
  var pathLength = getTotalLength(el);
  el.setAttribute('stroke-dasharray', pathLength);
  return pathLength;
}

// Motion path

function getParentSvgEl(el) {
  var parentEl = el.parentNode;
  while (is.svg(parentEl)) {
    parentEl = parentEl.parentNode;
    if (!is.svg(parentEl.parentNode)) { break; }
  }
  return parentEl;
}

function getParentSvg(pathEl, svgData) {
  var svg = svgData || {};
  var parentSvgEl = svg.el || getParentSvgEl(pathEl);
  var rect = parentSvgEl.getBoundingClientRect();
  var viewBoxAttr = getAttribute(parentSvgEl, 'viewBox');
  var width = rect.width;
  var height = rect.height;
  var viewBox = svg.viewBox || (viewBoxAttr ? viewBoxAttr.split(' ') : [0, 0, width, height]);
  return {
    el: parentSvgEl,
    viewBox: viewBox,
    x: viewBox[0] / 1,
    y: viewBox[1] / 1,
    w: width / viewBox[2],
    h: height / viewBox[3]
  }
}

function getPath(path, percent) {
  var pathEl = is.str(path) ? selectString(path)[0] : path;
  var p = percent || 100;
  return function(property) {
    return {
      property: property,
      el: pathEl,
      svg: getParentSvg(pathEl),
      totalLength: getTotalLength(pathEl) * (p / 100)
    }
  }
}

function getPathProgress(path, progress) {
  function point(offset) {
    if ( offset === void 0 ) offset = 0;

    var l = progress + offset >= 1 ? progress + offset : 0;
    return path.el.getPointAtLength(l);
  }
  var svg = getParentSvg(path.el, path.svg);
  var p = point();
  var p0 = point(-1);
  var p1 = point(+1);
  switch (path.property) {
    case 'x': return (p.x - svg.x) * svg.w;
    case 'y': return (p.y - svg.y) * svg.h;
    case 'angle': return Math.atan2(p1.y - p0.y, p1.x - p0.x) * 180 / Math.PI;
  }
}

// Decompose value

function decomposeValue(val, unit) {
  var rgx = /-?\d*\.?\d+/g;
  var value = validateValue((is.pth(val) ? val.totalLength : val), unit) + '';
  return {
    original: value,
    numbers: value.match(rgx) ? value.match(rgx).map(Number) : [0],
    strings: (is.str(val) || unit) ? value.split(rgx) : []
  }
}

// Animatables

function parseTargets(targets) {
  var targetsArray = targets ? (flattenArray(is.arr(targets) ? targets.map(toArray) : toArray(targets))) : [];
  return filterArray(targetsArray, function (item, pos, self) { return self.indexOf(item) === pos; });
}

function getAnimatables(targets) {
  var parsed = parseTargets(targets);
  return parsed.map(function (t, i) {
    return {target: t, id: i, total: parsed.length, transforms: { list: getElementTransforms(t) } };
  });
}

// Properties

function normalizePropertyTweens(prop, tweenSettings) {
  var settings = cloneObject(tweenSettings);
  // Override duration if easing is a spring
  if (/^spring/.test(settings.easing)) { settings.duration = spring(settings.easing); }
  if (is.arr(prop)) {
    var l = prop.length;
    var isFromTo = (l === 2 && !is.obj(prop[0]));
    if (!isFromTo) {
      // Duration divided by the number of tweens
      if (!is.fnc(tweenSettings.duration)) { settings.duration = tweenSettings.duration / l; }
    } else {
      // Transform [from, to] values shorthand to a valid tween value
      prop = {value: prop};
    }
  }
  var propArray = is.arr(prop) ? prop : [prop];
  return propArray.map(function (v, i) {
    var obj = (is.obj(v) && !is.pth(v)) ? v : {value: v};
    // Default delay value should only be applied to the first tween
    if (is.und(obj.delay)) { obj.delay = !i ? tweenSettings.delay : 0; }
    // Default endDelay value should only be applied to the last tween
    if (is.und(obj.endDelay)) { obj.endDelay = i === propArray.length - 1 ? tweenSettings.endDelay : 0; }
    return obj;
  }).map(function (k) { return mergeObjects(k, settings); });
}


function flattenKeyframes(keyframes) {
  var propertyNames = filterArray(flattenArray(keyframes.map(function (key) { return Object.keys(key); })), function (p) { return is.key(p); })
  .reduce(function (a,b) { if (a.indexOf(b) < 0) { a.push(b); } return a; }, []);
  var properties = {};
  var loop = function ( i ) {
    var propName = propertyNames[i];
    properties[propName] = keyframes.map(function (key) {
      var newKey = {};
      for (var p in key) {
        if (is.key(p)) {
          if (p == propName) { newKey.value = key[p]; }
        } else {
          newKey[p] = key[p];
        }
      }
      return newKey;
    });
  };

  for (var i = 0; i < propertyNames.length; i++) loop( i );
  return properties;
}

function getProperties(tweenSettings, params) {
  var properties = [];
  var keyframes = params.keyframes;
  if (keyframes) { params = mergeObjects(flattenKeyframes(keyframes), params); }
  for (var p in params) {
    if (is.key(p)) {
      properties.push({
        name: p,
        tweens: normalizePropertyTweens(params[p], tweenSettings)
      });
    }
  }
  return properties;
}

// Tweens

function normalizeTweenValues(tween, animatable) {
  var t = {};
  for (var p in tween) {
    var value = getFunctionValue(tween[p], animatable);
    if (is.arr(value)) {
      value = value.map(function (v) { return getFunctionValue(v, animatable); });
      if (value.length === 1) { value = value[0]; }
    }
    t[p] = value;
  }
  t.duration = parseFloat(t.duration);
  t.delay = parseFloat(t.delay);
  return t;
}

function normalizeTweens(prop, animatable) {
  var previousTween;
  return prop.tweens.map(function (t) {
    var tween = normalizeTweenValues(t, animatable);
    var tweenValue = tween.value;
    var to = is.arr(tweenValue) ? tweenValue[1] : tweenValue;
    var toUnit = getUnit(to);
    var originalValue = getOriginalTargetValue(animatable.target, prop.name, toUnit, animatable);
    var previousValue = previousTween ? previousTween.to.original : originalValue;
    var from = is.arr(tweenValue) ? tweenValue[0] : previousValue;
    var fromUnit = getUnit(from) || getUnit(originalValue);
    var unit = toUnit || fromUnit;
    if (is.und(to)) { to = previousValue; }
    tween.from = decomposeValue(from, unit);
    tween.to = decomposeValue(getRelativeValue(to, from), unit);
    tween.start = previousTween ? previousTween.end : 0;
    tween.end = tween.start + tween.delay + tween.duration + tween.endDelay;
    tween.easing = parseEasings(tween.easing, tween.duration);
    tween.isPath = is.pth(tweenValue);
    tween.isColor = is.col(tween.from.original);
    if (tween.isColor) { tween.round = 1; }
    previousTween = tween;
    return tween;
  });
}

// Tween progress

var setProgressValue = {
  css: function (t, p, v) { return t.style[p] = v; },
  attribute: function (t, p, v) { return t.setAttribute(p, v); },
  object: function (t, p, v) { return t[p] = v; },
  transform: function (t, p, v, transforms, manual) {
    transforms.list.set(p, v);
    if (p === transforms.last || manual) {
      var str = '';
      transforms.list.forEach(function (value, prop) { str += prop + "(" + value + ") "; });
      t.style.transform = str;
    }
  }
};

// Set Value helper

function setTargetsValue(targets, properties) {
  var animatables = getAnimatables(targets);
  animatables.forEach(function (animatable) {
    for (var property in properties) {
      var value = getFunctionValue(properties[property], animatable);
      var target = animatable.target;
      var valueUnit = getUnit(value);
      var originalValue = getOriginalTargetValue(target, property, valueUnit, animatable);
      var unit = valueUnit || getUnit(originalValue);
      var to = getRelativeValue(validateValue(value, unit), originalValue);
      var animType = getAnimationType(target, property);
      setProgressValue[animType](target, property, to, animatable.transforms, true);
    }
  });
}

// Animations

function createAnimation(animatable, prop) {
  var animType = getAnimationType(animatable.target, prop.name);
  if (animType) {
    var tweens = normalizeTweens(prop, animatable);
    var lastTween = tweens[tweens.length - 1];
    return {
      type: animType,
      property: prop.name,
      animatable: animatable,
      tweens: tweens,
      duration: lastTween.end,
      delay: tweens[0].delay,
      endDelay: lastTween.endDelay
    }
  }
}

function getAnimations(animatables, properties) {
  return filterArray(flattenArray(animatables.map(function (animatable) {
    return properties.map(function (prop) {
      return createAnimation(animatable, prop);
    });
  })), function (a) { return !is.und(a); });
}

// Create Instance

function getInstanceTimings(animations, tweenSettings) {
  var animLength = animations.length;
  var getTlOffset = function (anim) { return anim.timelineOffset ? anim.timelineOffset : 0; };
  var timings = {};
  timings.duration = animLength ? Math.max.apply(Math, animations.map(function (anim) { return getTlOffset(anim) + anim.duration; })) : tweenSettings.duration;
  timings.delay = animLength ? Math.min.apply(Math, animations.map(function (anim) { return getTlOffset(anim) + anim.delay; })) : tweenSettings.delay;
  timings.endDelay = animLength ? timings.duration - Math.max.apply(Math, animations.map(function (anim) { return getTlOffset(anim) + anim.duration - anim.endDelay; })) : tweenSettings.endDelay;
  return timings;
}

var instanceID = 0;

function createNewInstance(params) {
  var instanceSettings = replaceObjectProps(defaultInstanceSettings, params);
  var tweenSettings = replaceObjectProps(defaultTweenSettings, params);
  var properties = getProperties(tweenSettings, params);
  var animatables = getAnimatables(params.targets);
  var animations = getAnimations(animatables, properties);
  var timings = getInstanceTimings(animations, tweenSettings);
  var id = instanceID;
  instanceID++;
  return mergeObjects(instanceSettings, {
    id: id,
    children: [],
    animatables: animatables,
    animations: animations,
    duration: timings.duration,
    delay: timings.delay,
    endDelay: timings.endDelay
  });
}

// Core

var activeInstances = [];
var pausedInstances = [];
var raf;

var engine = (function () {
  function play() { 
    raf = requestAnimationFrame(step);
  }
  function step(t) {
    var activeInstancesLength = activeInstances.length;
    if (activeInstancesLength) {
      var i = 0;
      while (i < activeInstancesLength) {
        var activeInstance = activeInstances[i];
        if (!activeInstance.paused) {
          activeInstance.tick(t);
        } else {
          var instanceIndex = activeInstances.indexOf(activeInstance);
          if (instanceIndex > -1) {
            activeInstances.splice(instanceIndex, 1);
            activeInstancesLength = activeInstances.length;
          }
        }
        i++;
      }
      play();
    } else {
      raf = cancelAnimationFrame(raf);
    }
  }
  return play;
})();

function handleVisibilityChange() {
  if (document.hidden) {
    activeInstances.forEach(function (ins) { return ins.pause(); });
    pausedInstances = activeInstances.slice(0);
    activeInstances = [];
  } else {
    pausedInstances.forEach(function (ins) { return ins.play(); });
  }
}

if (typeof document !== 'undefined') {
  document.addEventListener('visibilitychange', handleVisibilityChange);
}

// Public Instance

function anime(params) {
  if ( params === void 0 ) params = {};


  var startTime = 0, lastTime = 0, now = 0;
  var children, childrenLength = 0;
  var resolve = null;

  function makePromise(instance) {
    var promise = window.Promise && new Promise(function (_resolve) { return resolve = _resolve; });
    instance.finished = promise;
    return promise;
  }

  var instance = createNewInstance(params);
  var promise = makePromise(instance);

  function toggleInstanceDirection() {
    var direction = instance.direction;
    if (direction !== 'alternate') {
      instance.direction = direction !== 'normal' ? 'normal' : 'reverse';
    }
    instance.reversed = !instance.reversed;
    children.forEach(function (child) { return child.reversed = instance.reversed; });
  }

  function adjustTime(time) {
    return instance.reversed ? instance.duration - time : time;
  }

  function resetTime() {
    startTime = 0;
    lastTime = adjustTime(instance.currentTime) * (1 / anime.speed);
  }

  function seekCild(time, child) {
    if (child) { child.seek(time - child.timelineOffset); }
  }

  function syncInstanceChildren(time) {
    if (!instance.reversePlayback) {
      for (var i = 0; i < childrenLength; i++) { seekCild(time, children[i]); }
    } else {
      for (var i$1 = childrenLength; i$1--;) { seekCild(time, children[i$1]); }
    }
  }

  function setAnimationsProgress(insTime) {
    var i = 0;
    var animations = instance.animations;
    var animationsLength = animations.length;
    while (i < animationsLength) {
      var anim = animations[i];
      var animatable = anim.animatable;
      var tweens = anim.tweens;
      var tweenLength = tweens.length - 1;
      var tween = tweens[tweenLength];
      // Only check for keyframes if there is more than one tween
      if (tweenLength) { tween = filterArray(tweens, function (t) { return (insTime < t.end); })[0] || tween; }
      var elapsed = minMax(insTime - tween.start - tween.delay, 0, tween.duration) / tween.duration;
      var eased = isNaN(elapsed) ? 1 : tween.easing(elapsed);
      var strings = tween.to.strings;
      var round = tween.round;
      var numbers = [];
      var toNumbersLength = tween.to.numbers.length;
      var progress = (void 0);
      for (var n = 0; n < toNumbersLength; n++) {
        var value = (void 0);
        var toNumber = tween.to.numbers[n];
        var fromNumber = tween.from.numbers[n] || 0;
        if (!tween.isPath) {
          value = fromNumber + (eased * (toNumber - fromNumber));
        } else {
          value = getPathProgress(tween.value, eased * toNumber);
        }
        if (round) {
          if (!(tween.isColor && n > 2)) {
            value = Math.round(value * round) / round;
          }
        }
        numbers.push(value);
      }
      // Manual Array.reduce for better performances
      var stringsLength = strings.length;
      if (!stringsLength) {
        progress = numbers[0];
      } else {
        progress = strings[0];
        for (var s = 0; s < stringsLength; s++) {
          var a = strings[s];
          var b = strings[s + 1];
          var n$1 = numbers[s];
          if (!isNaN(n$1)) {
            if (!b) {
              progress += n$1 + ' ';
            } else {
              progress += n$1 + b;
            }
          }
        }
      }
      setProgressValue[anim.type](animatable.target, anim.property, progress, animatable.transforms);
      anim.currentValue = progress;
      i++;
    }
  }

  function setCallback(cb) {
    if (instance[cb] && !instance.passThrough) { instance[cb](instance); }
  }

  function countIteration() {
    if (instance.remaining && instance.remaining !== true) {
      instance.remaining--;
    }
  }

  function setInstanceProgress(engineTime) {
    var insDuration = instance.duration;
    var insDelay = instance.delay;
    var insEndDelay = insDuration - instance.endDelay;
    var insTime = adjustTime(engineTime);
    instance.progress = minMax((insTime / insDuration) * 100, 0, 100);
    instance.reversePlayback = insTime < instance.currentTime;
    if (children) { syncInstanceChildren(insTime); }
    if (!instance.began && instance.currentTime > 0) {
      instance.began = true;
      setCallback('begin');
      setCallback('loopBegin');
    }
    if (insTime <= insDelay && instance.currentTime !== 0) {
      setAnimationsProgress(0);
    }
    if ((insTime >= insEndDelay && instance.currentTime !== insDuration) || !insDuration) {
      setAnimationsProgress(insDuration);
    }
    if (insTime > insDelay && insTime < insEndDelay) {
      if (!instance.changeBegan) {
        instance.changeBegan = true;
        instance.changeCompleted = false;
        setCallback('changeBegin');
      }
      setCallback('change');
      setAnimationsProgress(insTime);
    } else {
      if (instance.changeBegan) {
        instance.changeCompleted = true;
        instance.changeBegan = false;
        setCallback('changeComplete');
      }
    }
    instance.currentTime = minMax(insTime, 0, insDuration);
    if (instance.began) { setCallback('update'); }
    if (engineTime >= insDuration) {
      lastTime = 0;
      countIteration();
      if (instance.remaining) {
        startTime = now;
        setCallback('loopComplete');
        setCallback('loopBegin');
        if (instance.direction === 'alternate') { toggleInstanceDirection(); }
      } else {
        instance.paused = true;
        if (!instance.completed) {
          instance.completed = true;
          setCallback('loopComplete');
          setCallback('complete');
          if (!instance.passThrough && 'Promise' in window) {
            resolve();
            promise = makePromise(instance);
          }
        }
      }
    }
  }

  instance.reset = function() {
    var direction = instance.direction;
    instance.passThrough = false;
    instance.currentTime = 0;
    instance.progress = 0;
    instance.paused = true;
    instance.began = false;
    instance.changeBegan = false;
    instance.completed = false;
    instance.changeCompleted = false;
    instance.reversePlayback = false;
    instance.reversed = direction === 'reverse';
    instance.remaining = instance.loop;
    children = instance.children;
    childrenLength = children.length;
    for (var i = childrenLength; i--;) { instance.children[i].reset(); }
    if (instance.reversed && instance.loop !== true || (direction === 'alternate' && instance.loop === 1)) { instance.remaining++; }
    setAnimationsProgress(0);
  };

  // Set Value helper

  instance.set = function(targets, properties) {
    setTargetsValue(targets, properties);
    return instance;
  };

  instance.tick = function(t) {
    now = t;
    if (!startTime) { startTime = now; }
    setInstanceProgress((now + (lastTime - startTime)) * anime.speed);
  };

  instance.seek = function(time) {
    setInstanceProgress(adjustTime(time));
  };

  instance.pause = function() {
    instance.paused = true;
    resetTime();
  };

  instance.play = function() {
    if (!instance.paused) { return; }
    if (instance.completed) { instance.reset(); }
    instance.paused = false;
    activeInstances.push(instance);
    resetTime();
    if (!raf) { engine(); }
  };

  instance.reverse = function() {
    toggleInstanceDirection();
    resetTime();
  };

  instance.restart = function() {
    instance.reset();
    instance.play();
  };

  instance.reset();

  if (instance.autoplay) { instance.play(); }

  return instance;

}

// Remove targets from animation

function removeTargetsFromAnimations(targetsArray, animations) {
  for (var a = animations.length; a--;) {
    if (arrayContains(targetsArray, animations[a].animatable.target)) {
      animations.splice(a, 1);
    }
  }
}

function removeTargets(targets) {
  var targetsArray = parseTargets(targets);
  for (var i = activeInstances.length; i--;) {
    var instance = activeInstances[i];
    var animations = instance.animations;
    var children = instance.children;
    removeTargetsFromAnimations(targetsArray, animations);
    for (var c = children.length; c--;) {
      var child = children[c];
      var childAnimations = child.animations;
      removeTargetsFromAnimations(targetsArray, childAnimations);
      if (!childAnimations.length && !child.children.length) { children.splice(c, 1); }
    }
    if (!animations.length && !children.length) { instance.pause(); }
  }
}

// Stagger helpers

function stagger(val, params) {
  if ( params === void 0 ) params = {};

  var direction = params.direction || 'normal';
  var easing = params.easing ? parseEasings(params.easing) : null;
  var grid = params.grid;
  var axis = params.axis;
  var fromIndex = params.from || 0;
  var fromFirst = fromIndex === 'first';
  var fromCenter = fromIndex === 'center';
  var fromLast = fromIndex === 'last';
  var isRange = is.arr(val);
  var val1 = isRange ? parseFloat(val[0]) : parseFloat(val);
  var val2 = isRange ? parseFloat(val[1]) : 0;
  var unit = getUnit(isRange ? val[1] : val) || 0;
  var start = params.start || 0 + (isRange ? val1 : 0);
  var values = [];
  var maxValue = 0;
  return function (el, i, t) {
    if (fromFirst) { fromIndex = 0; }
    if (fromCenter) { fromIndex = (t - 1) / 2; }
    if (fromLast) { fromIndex = t - 1; }
    if (!values.length) {
      for (var index = 0; index < t; index++) {
        if (!grid) {
          values.push(Math.abs(fromIndex - index));
        } else {
          var fromX = !fromCenter ? fromIndex%grid[0] : (grid[0]-1)/2;
          var fromY = !fromCenter ? Math.floor(fromIndex/grid[0]) : (grid[1]-1)/2;
          var toX = index%grid[0];
          var toY = Math.floor(index/grid[0]);
          var distanceX = fromX - toX;
          var distanceY = fromY - toY;
          var value = Math.sqrt(distanceX * distanceX + distanceY * distanceY);
          if (axis === 'x') { value = -distanceX; }
          if (axis === 'y') { value = -distanceY; }
          values.push(value);
        }
        maxValue = Math.max.apply(Math, values);
      }
      if (easing) { values = values.map(function (val) { return easing(val / maxValue) * maxValue; }); }
      if (direction === 'reverse') { values = values.map(function (val) { return axis ? (val < 0) ? val * -1 : -val : Math.abs(maxValue - val); }); }
    }
    var spacing = isRange ? (val2 - val1) / maxValue : val1;
    return start + (spacing * (Math.round(values[i] * 100) / 100)) + unit;
  }
}

// Timeline

function timeline(params) {
  if ( params === void 0 ) params = {};

  var tl = anime(params);
  tl.duration = 0;
  tl.add = function(instanceParams, timelineOffset) {
    var tlIndex = activeInstances.indexOf(tl);
    var children = tl.children;
    if (tlIndex > -1) { activeInstances.splice(tlIndex, 1); }
    function passThrough(ins) { ins.passThrough = true; }
    for (var i = 0; i < children.length; i++) { passThrough(children[i]); }
    var insParams = mergeObjects(instanceParams, replaceObjectProps(defaultTweenSettings, params));
    insParams.targets = insParams.targets || params.targets;
    var tlDuration = tl.duration;
    insParams.autoplay = false;
    insParams.direction = tl.direction;
    insParams.timelineOffset = is.und(timelineOffset) ? tlDuration : getRelativeValue(timelineOffset, tlDuration);
    passThrough(tl);
    tl.seek(insParams.timelineOffset);
    var ins = anime(insParams);
    passThrough(ins);
    children.push(ins);
    var timings = getInstanceTimings(children, params);
    tl.delay = timings.delay;
    tl.endDelay = timings.endDelay;
    tl.duration = timings.duration;
    tl.seek(0);
    tl.reset();
    if (tl.autoplay) { tl.play(); }
    return tl;
  };
  return tl;
}

anime.version = '3.0.1';
anime.speed = 1;
anime.running = activeInstances;
anime.remove = removeTargets;
anime.get = getOriginalTargetValue;
anime.set = setTargetsValue;
anime.convertPx = convertPxToUnit;
anime.path = getPath;
anime.setDashoffset = setDashoffset;
anime.stagger = stagger;
anime.timeline = timeline;
anime.easing = parseEasings;
anime.penner = penner;
anime.random = function (min, max) { return Math.floor(Math.random() * (max - min + 1)) + min; };

/* harmony default export */ __webpack_exports__["default"] = (anime);


/***/ }),

/***/ "./node_modules/sortablejs/modular/sortable.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/sortablejs/modular/sortable.esm.js ***!
  \*********************************************************/
/*! exports provided: default, MultiDrag, Sortable, Swap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiDrag", function() { return MultiDragPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sortable", function() { return Sortable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Swap", function() { return SwapPlugin; });
/**!
 * Sortable 1.10.0-rc2
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var version = "1.10.0-rc2";

function userAgent(pattern) {
  return !!navigator.userAgent.match(pattern);
}

var IE11OrLess =
/*@__PURE__*/
userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile)/i);
var Edge =
/*@__PURE__*/
userAgent(/Edge/i);
var FireFox =
/*@__PURE__*/
userAgent(/firefox/i);
var Safari =
/*@__PURE__*/
userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
var IOS =
/*@__PURE__*/
userAgent(/iP(ad|od|hone)/i);

var captureMode = {
  capture: false,
  passive: false
};

function on(el, event, fn) {
  el.addEventListener(event, fn, !IE11OrLess && captureMode);
}

function off(el, event, fn) {
  el.removeEventListener(event, fn, !IE11OrLess && captureMode);
}

function matches(
/**HTMLElement*/
el,
/**String*/
selector) {
  if (!selector) return;
  selector[0] === '>' && (selector = selector.substring(1));

  if (el) {
    try {
      if (el.matches) {
        return el.matches(selector);
      } else if (el.msMatchesSelector) {
        return el.msMatchesSelector(selector);
      } else if (el.webkitMatchesSelector) {
        return el.webkitMatchesSelector(selector);
      }
    } catch (_) {
      return false;
    }
  }

  return false;
}

function getParentOrHost(el) {
  return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
}

function closest(
/**HTMLElement*/
el,
/**String*/
selector,
/**HTMLElement*/
ctx, includeCTX) {
  if (el) {
    ctx = ctx || document;

    do {
      if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
        return el;
      }

      if (el === ctx) break;
      /* jshint boss:true */
    } while (el = getParentOrHost(el));
  }

  return null;
}

var R_SPACE = /\s+/g;

function toggleClass(el, name, state) {
  if (el && name) {
    if (el.classList) {
      el.classList[state ? 'add' : 'remove'](name);
    } else {
      var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
      el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
    }
  }
}

function css(el, prop, val) {
  var style = el && el.style;

  if (style) {
    if (val === void 0) {
      if (document.defaultView && document.defaultView.getComputedStyle) {
        val = document.defaultView.getComputedStyle(el, '');
      } else if (el.currentStyle) {
        val = el.currentStyle;
      }

      return prop === void 0 ? val : val[prop];
    } else {
      if (!(prop in style) && prop.indexOf('webkit') === -1) {
        prop = '-webkit-' + prop;
      }

      style[prop] = val + (typeof val === 'string' ? '' : 'px');
    }
  }
}

function matrix(el, selfOnly) {
  var appliedTransforms = '';

  do {
    var transform = css(el, 'transform');

    if (transform && transform !== 'none') {
      appliedTransforms = transform + ' ' + appliedTransforms;
    }
    /* jshint boss:true */

  } while (!selfOnly && (el = el.parentNode));

  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix;
  /*jshint -W056 */

  return matrixFn && new matrixFn(appliedTransforms);
}

function find(ctx, tagName, iterator) {
  if (ctx) {
    var list = ctx.getElementsByTagName(tagName),
        i = 0,
        n = list.length;

    if (iterator) {
      for (; i < n; i++) {
        iterator(list[i], i);
      }
    }

    return list;
  }

  return [];
}

function getWindowScrollingElement() {
  if (IE11OrLess) {
    return document.documentElement;
  } else {
    return document.scrollingElement;
  }
}
/**
 * Returns the "bounding client rect" of given element
 * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
 * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
 * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
 * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
 * @param  {[HTMLElement]} container              The parent the element will be placed in
 * @return {Object}                               The boundingClientRect of el, with specified adjustments
 */


function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
  if (!el.getBoundingClientRect && el !== window) return;
  var elRect, top, left, bottom, right, height, width;

  if (el !== window && el !== getWindowScrollingElement()) {
    elRect = el.getBoundingClientRect();
    top = elRect.top;
    left = elRect.left;
    bottom = elRect.bottom;
    right = elRect.right;
    height = elRect.height;
    width = elRect.width;
  } else {
    top = 0;
    left = 0;
    bottom = window.innerHeight;
    right = window.innerWidth;
    height = window.innerHeight;
    width = window.innerWidth;
  }

  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
    // Adjust for translate()
    container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
    // Not needed on <= IE11

    if (!IE11OrLess) {
      do {
        if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
          var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container

          top -= containerRect.top + parseInt(css(container, 'border-top-width'));
          left -= containerRect.left + parseInt(css(container, 'border-left-width'));
          bottom = top + elRect.height;
          right = left + elRect.width;
          break;
        }
        /* jshint boss:true */

      } while (container = container.parentNode);
    }
  }

  if (undoScale && el !== window) {
    // Adjust for scale()
    var elMatrix = matrix(container || el),
        scaleX = elMatrix && elMatrix.a,
        scaleY = elMatrix && elMatrix.d;

    if (elMatrix) {
      top /= scaleY;
      left /= scaleX;
      width /= scaleX;
      height /= scaleY;
      bottom = top + height;
      right = left + width;
    }
  }

  return {
    top: top,
    left: left,
    bottom: bottom,
    right: right,
    width: width,
    height: height
  };
}
/**
 * Checks if a side of an element is scrolled past a side of its parents
 * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
 * @param  {[DOMRect]}    rect         Optional rect of `el` to use
 * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
 * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
 * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
 */


function isScrolledPast(el, rect, elSide, parentSide) {
  var parent = getParentAutoScrollElement(el, true),
      elSideVal = (rect ? rect : getRect(el))[elSide];
  /* jshint boss:true */

  while (parent) {
    var parentSideVal = getRect(parent)[parentSide],
        visible = void 0;

    if (parentSide === 'top' || parentSide === 'left') {
      visible = elSideVal >= parentSideVal;
    } else {
      visible = elSideVal <= parentSideVal;
    }

    if (!visible) return parent;
    if (parent === getWindowScrollingElement()) break;
    parent = getParentAutoScrollElement(parent, false);
  }

  return false;
}
/**
 * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
 * and non-draggable elements
 * @param  {HTMLElement} el       The parent element
 * @param  {Number} childNum      The index of the child
 * @param  {Object} options       Parent Sortable's options
 * @return {HTMLElement}          The child at index childNum, or null if not found
 */


function getChild(el, childNum, options) {
  var currentChild = 0,
      i = 0,
      children = el.children;

  while (i < children.length) {
    if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && children[i] !== Sortable.dragged && closest(children[i], options.draggable, el, false)) {
      if (currentChild === childNum) {
        return children[i];
      }

      currentChild++;
    }

    i++;
  }

  return null;
}
/**
 * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
 * @param  {HTMLElement} el       Parent element
 * @param  {selector} selector    Any other elements that should be ignored
 * @return {HTMLElement}          The last child, ignoring ghostEl
 */


function lastChild(el, selector) {
  var last = el.lastElementChild;

  while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
    last = last.previousElementSibling;
  }

  return last || null;
}
/**
 * Returns the index of an element within its parent for a selected set of
 * elements
 * @param  {HTMLElement} el
 * @param  {selector} selector
 * @return {number}
 */


function index(el, selector) {
  var index = 0;

  if (!el || !el.parentNode) {
    return -1;
  }
  /* jshint boss:true */


  while (el = el.previousElementSibling) {
    if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
      index++;
    }
  }

  return index;
}
/**
 * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
 * The value is returned in real pixels.
 * @param  {HTMLElement} el
 * @return {Array}             Offsets in the format of [left, top]
 */


function getRelativeScrollOffset(el) {
  var offsetLeft = 0,
      offsetTop = 0,
      winScroller = getWindowScrollingElement();

  if (el) {
    do {
      var elMatrix = matrix(el),
          scaleX = elMatrix.a,
          scaleY = elMatrix.d;
      offsetLeft += el.scrollLeft * scaleX;
      offsetTop += el.scrollTop * scaleY;
    } while (el !== winScroller && (el = el.parentNode));
  }

  return [offsetLeft, offsetTop];
}
/**
 * Returns the index of the object within the given array
 * @param  {Array} arr   Array that may or may not hold the object
 * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
 * @return {Number}      The index of the object in the array, or -1
 */


function indexOfObject(arr, obj) {
  for (var i in arr) {
    for (var key in obj) {
      if (obj[key] === arr[i][key]) return Number(i);
    }
  }

  return -1;
}

function getParentAutoScrollElement(el, includeSelf) {
  // skip to window
  if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
  var elem = el;
  var gotSelf = false;

  do {
    // we don't need to get elem css if it isn't even overflowing in the first place (performance)
    if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
      var elemCSS = css(elem);

      if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
        if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
        if (gotSelf || includeSelf) return elem;
        gotSelf = true;
      }
    }
    /* jshint boss:true */

  } while (elem = elem.parentNode);

  return getWindowScrollingElement();
}

function extend(dst, src) {
  if (dst && src) {
    for (var key in src) {
      if (src.hasOwnProperty(key)) {
        dst[key] = src[key];
      }
    }
  }

  return dst;
}

function isRectEqual(rect1, rect2) {
  return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
}

var _throttleTimeout;

function throttle(callback, ms) {
  return function () {
    if (!_throttleTimeout) {
      var args = arguments,
          _this = this;

      if (args.length === 1) {
        callback.call(_this, args[0]);
      } else {
        callback.apply(_this, args);
      }

      _throttleTimeout = setTimeout(function () {
        _throttleTimeout = void 0;
      }, ms);
    }
  };
}

function cancelThrottle() {
  clearTimeout(_throttleTimeout);
  _throttleTimeout = void 0;
}

function scrollBy(el, x, y) {
  el.scrollLeft += x;
  el.scrollTop += y;
}

function clone(el) {
  var Polymer = window.Polymer;
  var $ = window.jQuery || window.Zepto;

  if (Polymer && Polymer.dom) {
    return Polymer.dom(el).cloneNode(true);
  } else if ($) {
    return $(el).clone(true)[0];
  } else {
    return el.cloneNode(true);
  }
}

function setRect(el, rect) {
  css(el, 'position', 'absolute');
  css(el, 'top', rect.top);
  css(el, 'left', rect.left);
  css(el, 'width', rect.width);
  css(el, 'height', rect.height);
}

function unsetRect(el) {
  css(el, 'position', '');
  css(el, 'top', '');
  css(el, 'left', '');
  css(el, 'width', '');
  css(el, 'height', '');
}

var expando = 'Sortable' + new Date().getTime();

function AnimationStateManager() {
  var animationStates = [],
      animationCallbackId;
  return {
    captureAnimationState: function captureAnimationState() {
      animationStates = [];
      if (!this.options.animation) return;
      var children = [].slice.call(this.el.children);

      for (var i in children) {
        if (css(children[i], 'display') === 'none' || children[i] === Sortable.ghost) continue;
        animationStates.push({
          target: children[i],
          rect: getRect(children[i])
        });
        var fromRect = getRect(children[i]); // If animating: compensate for current animation

        if (children[i].thisAnimationDuration) {
          var childMatrix = matrix(children[i], true);

          if (childMatrix) {
            fromRect.top -= childMatrix.f;
            fromRect.left -= childMatrix.e;
          }
        }

        children[i].fromRect = fromRect;
      }
    },
    addAnimationState: function addAnimationState(state) {
      animationStates.push(state);
    },
    removeAnimationState: function removeAnimationState(target) {
      animationStates.splice(indexOfObject(animationStates, {
        target: target
      }), 1);
    },
    animateAll: function animateAll(callback) {
      if (!this.options.animation) {
        clearTimeout(animationCallbackId);
        if (typeof callback === 'function') callback();
        return;
      }

      var animating = false,
          animationTime = 0;

      for (var i in animationStates) {
        var time = 0,
            target = animationStates[i].target,
            fromRect = target.fromRect,
            toRect = getRect(target),
            prevFromRect = target.prevFromRect,
            prevToRect = target.prevToRect,
            animatingRect = animationStates[i].rect,
            targetMatrix = matrix(target, true);

        if (targetMatrix) {
          // Compensate for current animation
          toRect.top -= targetMatrix.f;
          toRect.left -= targetMatrix.e;
        }

        target.toRect = toRect; // If element is scrolled out of view: Do not animate

        if ((isScrolledPast(target, toRect, 'bottom', 'top') || isScrolledPast(target, toRect, 'top', 'bottom') || isScrolledPast(target, toRect, 'right', 'left') || isScrolledPast(target, toRect, 'left', 'right')) && (isScrolledPast(target, animatingRect, 'bottom', 'top') || isScrolledPast(target, animatingRect, 'top', 'bottom') || isScrolledPast(target, animatingRect, 'right', 'left') || isScrolledPast(target, animatingRect, 'left', 'right')) && (isScrolledPast(target, fromRect, 'bottom', 'top') || isScrolledPast(target, fromRect, 'top', 'bottom') || isScrolledPast(target, fromRect, 'right', 'left') || isScrolledPast(target, fromRect, 'left', 'right'))) continue;

        if (target.thisAnimationDuration) {
          // Could also check if animatingRect is between fromRect and toRect
          if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect
          (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
            // If returning to same place as started from animation and on same axis
            time = calculateRealTime(animatingRect, prevFromRect, prevToRect, this.options);
          }
        } // if fromRect != toRect: animate


        if (!isRectEqual(toRect, fromRect)) {
          target.prevFromRect = fromRect;
          target.prevToRect = toRect;

          if (!time) {
            time = this.options.animation;
          }

          this.animate(target, animatingRect, time);
        }

        if (time) {
          animating = true;
          animationTime = Math.max(animationTime, time);
          clearTimeout(target.animationResetTimer);
          target.animationResetTimer = setTimeout(function () {
            this.animationStates[this.i].target.animationTime = 0;
            this.animationStates[this.i].target.prevFromRect = null;
            this.animationStates[this.i].target.fromRect = null;
            this.animationStates[this.i].target.prevToRect = null;
            this.animationStates[this.i].target.thisAnimationDuration = null;
          }.bind({
            animationStates: animationStates,
            i: Number(i)
          }), time);
          target.thisAnimationDuration = time;
        }
      }

      clearTimeout(animationCallbackId);

      if (!animating) {
        if (typeof callback === 'function') callback();
      } else {
        animationCallbackId = setTimeout(function () {
          if (typeof callback === 'function') callback();
        }, animationTime);
      }

      animationStates = [];
    },
    animate: function animate(target, prev, duration) {
      if (duration) {
        css(target, 'transition', '');
        css(target, 'transform', '');
        var currentRect = getRect(target),
            elMatrix = matrix(this.el),
            scaleX = elMatrix && elMatrix.a,
            scaleY = elMatrix && elMatrix.d,
            translateX = (prev.left - currentRect.left) / (scaleX || 1),
            translateY = (prev.top - currentRect.top) / (scaleY || 1);
        target.animatingX = !!translateX;
        target.animatingY = !!translateY;
        css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
        repaint(target); // repaint

        css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
        css(target, 'transform', 'translate3d(0,0,0)');
        typeof target.animated === 'number' && clearTimeout(target.animated);
        target.animated = setTimeout(function () {
          css(target, 'transition', '');
          css(target, 'transform', '');
          target.animated = false;
          target.animatingX = false;
          target.animatingY = false;
        }, duration);
      }
    }
  };
}

function repaint(target) {
  return target.offsetWidth;
}

function calculateRealTime(animatingRect, fromRect, toRect, options) {
  return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
}

var plugins = [];
var defaults = {
  initializeByDefault: true
};
var PluginManager = {
  mount: function mount(plugin) {
    // Set default static properties
    for (var option in defaults) {
      !(option in plugin) && (plugin[option] = defaults[option]);
    }

    plugins.push(plugin);
  },
  pluginEvent: function pluginEvent(eventName, sortable, evt) {
    this.eventCanceled = false;
    var eventNameGlobal = eventName + 'Global';

    for (var i in plugins) {
      if (!sortable[plugins[i].pluginName]) continue; // Fire global events if it exists in this sortable

      if (sortable[plugins[i].pluginName][eventNameGlobal]) {
        this.eventCanceled = !!sortable[plugins[i].pluginName][eventNameGlobal](_objectSpread({
          sortable: sortable
        }, evt));
      } // Only fire plugin event if plugin is enabled in this sortable,
      // and plugin has event defined


      if (sortable.options[plugins[i].pluginName] && sortable[plugins[i].pluginName][eventName]) {
        this.eventCanceled = this.eventCanceled || !!sortable[plugins[i].pluginName][eventName](_objectSpread({
          sortable: sortable
        }, evt));
      }
    }
  },
  initializePlugins: function initializePlugins(sortable, el, defaults) {
    for (var i in plugins) {
      var pluginName = plugins[i].pluginName;
      if (!sortable.options[pluginName] && !plugins[i].initializeByDefault) continue;
      var initialized = new plugins[i](sortable, el);
      initialized.sortable = sortable;
      sortable[pluginName] = initialized; // Add default options from plugin

      _extends(defaults, initialized.options);
    }

    for (var option in sortable.options) {
      var modified = this.modifyOption(sortable, option, sortable.options[option]);

      if (typeof modified !== 'undefined') {
        sortable.options[option] = modified;
      }
    }
  },
  getEventOptions: function getEventOptions(name, sortable) {
    var eventOptions = {};

    for (var i in plugins) {
      if (typeof plugins[i].eventOptions !== 'function') continue;

      _extends(eventOptions, plugins[i].eventOptions.call(sortable, name));
    }

    return eventOptions;
  },
  modifyOption: function modifyOption(sortable, name, value) {
    var modifiedValue;

    for (var i in plugins) {
      // Plugin must exist on the Sortable
      if (!sortable[plugins[i].pluginName]) continue; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin

      if (plugins[i].optionListeners && typeof plugins[i].optionListeners[name] === 'function') {
        modifiedValue = plugins[i].optionListeners[name].call(sortable[plugins[i].pluginName], value);
      }
    }

    return modifiedValue;
  }
};

function dispatchEvent(_ref) {
  var sortable = _ref.sortable,
      rootEl = _ref.rootEl,
      name = _ref.name,
      targetEl = _ref.targetEl,
      cloneEl = _ref.cloneEl,
      toEl = _ref.toEl,
      fromEl = _ref.fromEl,
      oldIndex = _ref.oldIndex,
      newIndex = _ref.newIndex,
      oldDraggableIndex = _ref.oldDraggableIndex,
      newDraggableIndex = _ref.newDraggableIndex,
      originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      eventOptions = _ref.eventOptions;
  sortable = sortable || rootEl[expando];
  var evt,
      options = sortable.options,
      onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature

  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent(name, {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent(name, true, true);
  }

  evt.to = toEl || rootEl;
  evt.from = fromEl || rootEl;
  evt.item = targetEl || rootEl;
  evt.clone = cloneEl;
  evt.oldIndex = oldIndex;
  evt.newIndex = newIndex;
  evt.oldDraggableIndex = oldDraggableIndex;
  evt.newDraggableIndex = newDraggableIndex;
  evt.originalEvent = originalEvent;
  evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;

  var allEventOptions = _objectSpread({}, eventOptions, PluginManager.getEventOptions(name, sortable));

  for (var option in allEventOptions) {
    evt[option] = allEventOptions[option];
  }

  if (rootEl) {
    rootEl.dispatchEvent(evt);
  }

  if (options[onName]) {
    options[onName].call(sortable, evt);
  }
}

var pluginEvent = function pluginEvent(eventName, sortable) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      originalEvent = _ref.evt,
      data = _objectWithoutProperties(_ref, ["evt"]);

  PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread({
    dragEl: dragEl,
    parentEl: parentEl,
    ghostEl: ghostEl,
    rootEl: rootEl,
    nextEl: nextEl,
    lastDownEl: lastDownEl,
    cloneEl: cloneEl,
    cloneHidden: cloneHidden,
    dragStarted: moved,
    putSortable: putSortable,
    activeSortable: Sortable.active,
    originalEvent: originalEvent,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex,
    hideGhostForTarget: _hideGhostForTarget,
    unhideGhostForTarget: _unhideGhostForTarget,
    cloneNowHidden: function cloneNowHidden() {
      cloneHidden = true;
    },
    cloneNowShown: function cloneNowShown() {
      cloneHidden = false;
    },
    dispatchSortableEvent: function dispatchSortableEvent(name) {
      _dispatchEvent({
        sortable: sortable,
        name: name,
        originalEvent: originalEvent
      });
    }
  }, data));
};

function _dispatchEvent(info) {
  dispatchEvent(_objectSpread({
    putSortable: putSortable,
    cloneEl: cloneEl,
    targetEl: dragEl,
    rootEl: rootEl,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex
  }, info));
}

if (typeof window === "undefined" || !window.document) {
  throw new Error("Sortable.js requires a window with a document");
}

var dragEl,
    parentEl,
    ghostEl,
    rootEl,
    nextEl,
    lastDownEl,
    cloneEl,
    cloneHidden,
    oldIndex,
    newIndex,
    oldDraggableIndex,
    newDraggableIndex,
    activeGroup,
    putSortable,
    awaitingDragStarted = false,
    ignoreNextClick = false,
    sortables = [],
    tapEvt,
    touchEvt,
    moved,
    lastTarget,
    lastDirection,
    pastFirstInvertThresh = false,
    isCircumstantialInvert = false,
    targetMoveDistance,
    // For positioning ghost absolutely
ghostRelativeParent,
    ghostRelativeParentInitialScroll = [],
    // (left, top)
_silent = false,
    savedInputChecked = [];
/** @const */

var PositionGhostAbsolutely = IOS,
    CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
    // This will not pass for IE9, because IE9 DnD only works on anchors
supportDraggable = 'draggable' in document.createElement('div'),
    supportCssPointerEvents = function () {
  // false when <= IE11
  if (IE11OrLess) {
    return false;
  }

  var el = document.createElement('x');
  el.style.cssText = 'pointer-events:auto';
  return el.style.pointerEvents === 'auto';
}(),
    _detectDirection = function _detectDirection(el, options) {
  var elCSS = css(el),
      elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
      child1 = getChild(el, 0, options),
      child2 = getChild(el, 1, options),
      firstChildCSS = child1 && css(child1),
      secondChildCSS = child2 && css(child2),
      firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
      secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;

  if (elCSS.display === 'flex') {
    return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
  }

  if (elCSS.display === 'grid') {
    return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
  }

  if (child1 && firstChildCSS["float"] !== 'none') {
    var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
    return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
  }

  return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
},
    _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
  var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
      dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
      dragElOppLength = vertical ? dragRect.width : dragRect.height,
      targetS1Opp = vertical ? targetRect.left : targetRect.top,
      targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
      targetOppLength = vertical ? targetRect.width : targetRect.height;
  return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
},

/**
 * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
 * @param  {Number} x      X position
 * @param  {Number} y      Y position
 * @return {HTMLElement}   Element of the first found nearest Sortable
 */
_detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
  for (var i in sortables) {
    if (lastChild(sortables[i])) continue;
    var rect = getRect(sortables[i]),
        threshold = sortables[i][expando].options.emptyInsertThreshold,
        insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
        insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;

    if (threshold && insideHorizontally && insideVertically) {
      return sortables[i];
    }
  }
},
    _prepareGroup = function _prepareGroup(options) {
  function toFn(value, pull) {
    return function (to, from, dragEl, evt) {
      var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;

      if (value == null && (pull || sameGroup)) {
        // Default pull value
        // Default pull and put value if same group
        return true;
      } else if (value == null || value === false) {
        return false;
      } else if (pull && value === 'clone') {
        return value;
      } else if (typeof value === 'function') {
        return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
      } else {
        var otherGroup = (pull ? to : from).options.group.name;
        return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
      }
    };
  }

  var group = {};
  var originalGroup = options.group;

  if (!originalGroup || _typeof(originalGroup) != 'object') {
    originalGroup = {
      name: originalGroup
    };
  }

  group.name = originalGroup.name;
  group.checkPull = toFn(originalGroup.pull, true);
  group.checkPut = toFn(originalGroup.put);
  group.revertClone = originalGroup.revertClone;
  options.group = group;
},
    _hideGhostForTarget = function _hideGhostForTarget() {
  if (!supportCssPointerEvents && ghostEl) {
    css(ghostEl, 'display', 'none');
  }
},
    _unhideGhostForTarget = function _unhideGhostForTarget() {
  if (!supportCssPointerEvents && ghostEl) {
    css(ghostEl, 'display', '');
  }
}; // #1184 fix - Prevent click event on fallback if dragged but item not changed position


document.addEventListener('click', function (evt) {
  if (ignoreNextClick) {
    evt.preventDefault();
    evt.stopPropagation && evt.stopPropagation();
    evt.stopImmediatePropagation && evt.stopImmediatePropagation();
    ignoreNextClick = false;
    return false;
  }
}, true);

var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
  if (dragEl) {
    evt = evt.touches ? evt.touches[0] : evt;

    var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);

    if (nearest) {
      // Create imitation event
      var event = {};

      for (var i in evt) {
        event[i] = evt[i];
      }

      event.target = event.rootEl = nearest;
      event.preventDefault = void 0;
      event.stopPropagation = void 0;

      nearest[expando]._onDragOver(event);
    }
  }
};

var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
  if (dragEl) {
    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
  }
};
/**
 * @class  Sortable
 * @param  {HTMLElement}  el
 * @param  {Object}       [options]
 */


function Sortable(el, options) {
  if (!(el && el.nodeType && el.nodeType === 1)) {
    throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
  }

  this.el = el; // root element

  this.options = options = _extends({}, options); // Export instance

  el[expando] = this;
  var defaults = {
    group: null,
    sort: true,
    disabled: false,
    store: null,
    handle: null,
    draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
    swapThreshold: 1,
    // percentage; 0 <= x <= 1
    invertSwap: false,
    // invert always
    invertedSwapThreshold: null,
    // will be set to same as swapThreshold if default
    removeCloneOnHide: true,
    direction: function direction() {
      return _detectDirection(el, this.options);
    },
    ghostClass: 'sortable-ghost',
    chosenClass: 'sortable-chosen',
    dragClass: 'sortable-drag',
    ignore: 'a, img',
    filter: null,
    preventOnFilter: true,
    animation: 0,
    easing: null,
    setData: function setData(dataTransfer, dragEl) {
      dataTransfer.setData('Text', dragEl.textContent);
    },
    dropBubble: false,
    dragoverBubble: false,
    dataIdAttr: 'data-id',
    delay: 0,
    delayOnTouchOnly: false,
    touchStartThreshold: Number.parseInt(window.devicePixelRatio, 10) || 1,
    forceFallback: false,
    fallbackClass: 'sortable-fallback',
    fallbackOnBody: false,
    fallbackTolerance: 0,
    fallbackOffset: {
      x: 0,
      y: 0
    },
    supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window,
    emptyInsertThreshold: 5
  };
  PluginManager.initializePlugins(this, el, defaults); // Set default options

  for (var name in defaults) {
    !(name in options) && (options[name] = defaults[name]);
  }

  _prepareGroup(options); // Bind all private methods


  for (var fn in this) {
    if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
      this[fn] = this[fn].bind(this);
    }
  } // Setup drag mode


  this.nativeDraggable = options.forceFallback ? false : supportDraggable;

  if (this.nativeDraggable) {
    // Touch start threshold cannot be greater than the native dragstart threshold
    this.options.touchStartThreshold = 1;
  } // Bind events


  if (options.supportPointer) {
    on(el, 'pointerdown', this._onTapStart);
  } else {
    on(el, 'mousedown', this._onTapStart);
    on(el, 'touchstart', this._onTapStart);
  }

  if (this.nativeDraggable) {
    on(el, 'dragover', this);
    on(el, 'dragenter', this);
  }

  sortables.push(this.el); // Restore sorting

  options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager

  _extends(this, AnimationStateManager());
}

Sortable.prototype =
/** @lends Sortable.prototype */
{
  constructor: Sortable,
  _isOutsideThisEl: function _isOutsideThisEl(target) {
    if (!this.el.contains(target) && target !== this.el) {
      lastTarget = null;
    }
  },
  _getDirection: function _getDirection(evt, target) {
    return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
  },
  _onTapStart: function _onTapStart(
  /** Event|TouchEvent */
  evt) {
    if (!evt.cancelable) return;

    var _this = this,
        el = this.el,
        options = this.options,
        preventOnFilter = options.preventOnFilter,
        type = evt.type,
        touch = evt.touches && evt.touches[0],
        target = (touch || evt).target,
        originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
        filter = options.filter;

    _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.


    if (dragEl) {
      return;
    }

    if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
      return; // only left button and enabled
    } // cancel dnd if original target is content editable


    if (originalTarget.isContentEditable) {
      return;
    }

    target = closest(target, options.draggable, el, false);

    if (target && target.animated) {
      return;
    }

    if (lastDownEl === target) {
      // Ignoring duplicate `down`
      return;
    } // Get the index of the dragged element within its parent


    oldIndex = index(target);
    oldDraggableIndex = index(target, options.draggable); // Check filter

    if (typeof filter === 'function') {
      if (filter.call(this, evt, target, this)) {
        _dispatchEvent({
          sortable: _this,
          rootEl: originalTarget,
          name: 'filter',
          targetEl: target,
          toEl: el,
          fromEl: el
        });

        pluginEvent('filter', _this, {
          evt: evt
        });
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return; // cancel dnd
      }
    } else if (filter) {
      filter = filter.split(',').some(function (criteria) {
        criteria = closest(originalTarget, criteria.trim(), el, false);

        if (criteria) {
          _dispatchEvent({
            sortable: _this,
            rootEl: criteria,
            name: 'filter',
            targetEl: target,
            fromEl: el,
            toEl: el
          });

          pluginEvent('filter', _this, {
            evt: evt
          });
          return true;
        }
      });

      if (filter) {
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return; // cancel dnd
      }
    }

    if (options.handle && !closest(originalTarget, options.handle, el, false)) {
      return;
    } // Prepare `dragstart`


    this._prepareDragStart(evt, touch, target);
  },
  _prepareDragStart: function _prepareDragStart(
  /** Event */
  evt,
  /** Touch */
  touch,
  /** HTMLElement */
  target) {
    var _this = this,
        el = _this.el,
        options = _this.options,
        ownerDocument = el.ownerDocument,
        dragStartFn;

    if (target && !dragEl && target.parentNode === el) {
      rootEl = el;
      dragEl = target;
      parentEl = dragEl.parentNode;
      nextEl = dragEl.nextSibling;
      lastDownEl = target;
      activeGroup = options.group;
      Sortable.dragged = dragEl;
      tapEvt = {
        target: dragEl,
        clientX: (touch || evt).clientX,
        clientY: (touch || evt).clientY
      };
      this._lastX = (touch || evt).clientX;
      this._lastY = (touch || evt).clientY;
      dragEl.style['will-change'] = 'all';

      dragStartFn = function dragStartFn() {
        pluginEvent('delayEnded', _this, {
          evt: evt
        });

        if (Sortable.eventCanceled) {
          _this._onDrop();

          return;
        } // Delayed drag has been triggered
        // we can re-enable the events: touchmove/mousemove


        _this._disableDelayedDragEvents();

        if (!FireFox && _this.nativeDraggable) {
          dragEl.draggable = true;
        } // Bind the events: dragstart/dragend


        _this._triggerDragStart(evt, touch); // Drag start event


        _dispatchEvent({
          sortable: _this,
          name: 'choose',
          originalEvent: evt
        }); // Chosen item


        toggleClass(dragEl, options.chosenClass, true);
      }; // Disable "draggable"


      options.ignore.split(',').forEach(function (criteria) {
        find(dragEl, criteria.trim(), _disableDraggable);
      });
      on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mouseup', _this._onDrop);
      on(ownerDocument, 'touchend', _this._onDrop);
      on(ownerDocument, 'touchcancel', _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)

      if (FireFox && this.nativeDraggable) {
        this.options.touchStartThreshold = 4;
        dragEl.draggable = true;
      }

      pluginEvent('delayStart', this, {
        evt: evt
      }); // Delay is impossible for native DnD in Edge or IE

      if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
        if (Sortable.eventCanceled) {
          this._onDrop();

          return;
        } // If the user moves the pointer or let go the click or touch
        // before the delay has been reached:
        // disable the delayed drag


        on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
        on(ownerDocument, 'touchend', _this._disableDelayedDrag);
        on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
        on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
        on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
        options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
      } else {
        dragStartFn();
      }
    }
  },
  _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(
  /** TouchEvent|PointerEvent **/
  e) {
    var touch = e.touches ? e.touches[0] : e;

    if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
      this._disableDelayedDrag();
    }
  },
  _disableDelayedDrag: function _disableDelayedDrag() {
    dragEl && _disableDraggable(dragEl);
    clearTimeout(this._dragStartTimer);

    this._disableDelayedDragEvents();
  },
  _disableDelayedDragEvents: function _disableDelayedDragEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._disableDelayedDrag);
    off(ownerDocument, 'touchend', this._disableDelayedDrag);
    off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
    off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
  },
  _triggerDragStart: function _triggerDragStart(
  /** Event */
  evt,
  /** Touch */
  touch) {
    touch = touch || (evt.pointerType == 'touch' ? evt : null);

    if (!this.nativeDraggable || touch) {
      if (this.options.supportPointer) {
        on(document, 'pointermove', this._onTouchMove);
      } else if (touch) {
        on(document, 'touchmove', this._onTouchMove);
      } else {
        on(document, 'mousemove', this._onTouchMove);
      }
    } else {
      on(dragEl, 'dragend', this);
      on(rootEl, 'dragstart', this._onDragStart);
    }

    try {
      if (document.selection) {
        // Timeout neccessary for IE9
        _nextTick(function () {
          document.selection.empty();
        });
      } else {
        window.getSelection().removeAllRanges();
      }
    } catch (err) {}
  },
  _dragStarted: function _dragStarted(fallback, evt) {

    awaitingDragStarted = false;

    if (rootEl && dragEl) {
      pluginEvent('dragStarted', this, {
        evt: evt
      });

      if (this.nativeDraggable) {
        on(document, 'dragover', _checkOutsideTargetEl);
      }

      var options = this.options; // Apply effect

      !fallback && toggleClass(dragEl, options.dragClass, false);
      toggleClass(dragEl, options.ghostClass, true);
      Sortable.active = this;
      fallback && this._appendGhost(); // Drag start event

      _dispatchEvent({
        sortable: this,
        name: 'start',
        originalEvent: evt
      });
    } else {
      this._nulling();
    }
  },
  _emulateDragOver: function _emulateDragOver() {
    if (touchEvt) {
      this._lastX = touchEvt.clientX;
      this._lastY = touchEvt.clientY;

      _hideGhostForTarget();

      var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
      var parent = target;

      while (target && target.shadowRoot) {
        target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        if (target === parent) break;
        parent = target;
      }

      dragEl.parentNode[expando]._isOutsideThisEl(target);

      if (parent) {
        do {
          if (parent[expando]) {
            var inserted = void 0;
            inserted = parent[expando]._onDragOver({
              clientX: touchEvt.clientX,
              clientY: touchEvt.clientY,
              target: target,
              rootEl: parent
            });

            if (inserted && !this.options.dragoverBubble) {
              break;
            }
          }

          target = parent; // store last element
        }
        /* jshint boss:true */
        while (parent = parent.parentNode);
      }

      _unhideGhostForTarget();
    }
  },
  _onTouchMove: function _onTouchMove(
  /**TouchEvent*/
  evt) {
    if (tapEvt) {
      var options = this.options,
          fallbackTolerance = options.fallbackTolerance,
          fallbackOffset = options.fallbackOffset,
          touch = evt.touches ? evt.touches[0] : evt,
          ghostMatrix = ghostEl && matrix(ghostEl),
          scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
          scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
          relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
          dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
          dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1),
          translate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)'; // only set the status to dragging, when we are actually dragging

      if (!Sortable.active && !awaitingDragStarted) {
        if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
          return;
        }

        this._onDragStart(evt, true);
      }

      touchEvt = touch;
      css(ghostEl, 'webkitTransform', translate3d);
      css(ghostEl, 'mozTransform', translate3d);
      css(ghostEl, 'msTransform', translate3d);
      css(ghostEl, 'transform', translate3d);
      evt.cancelable && evt.preventDefault();
    }
  },
  _appendGhost: function _appendGhost() {
    // Bug if using scale(): https://stackoverflow.com/questions/2637058
    // Not being adjusted for
    if (!ghostEl) {
      var container = this.options.fallbackOnBody ? document.body : rootEl,
          rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
          options = this.options; // Position absolutely

      if (PositionGhostAbsolutely) {
        // Get relatively positioned parent
        ghostRelativeParent = container;

        while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
          ghostRelativeParent = ghostRelativeParent.parentNode;
        }

        if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
          if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
          rect.top += ghostRelativeParent.scrollTop;
          rect.left += ghostRelativeParent.scrollLeft;
        } else {
          ghostRelativeParent = getWindowScrollingElement();
        }

        ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
      }

      ghostEl = dragEl.cloneNode(true);
      toggleClass(ghostEl, options.ghostClass, false);
      toggleClass(ghostEl, options.fallbackClass, true);
      toggleClass(ghostEl, options.dragClass, true);
      css(ghostEl, 'transition', '');
      css(ghostEl, 'transform', '');
      css(ghostEl, 'box-sizing', 'border-box');
      css(ghostEl, 'margin', 0);
      css(ghostEl, 'top', rect.top);
      css(ghostEl, 'left', rect.left);
      css(ghostEl, 'width', rect.width);
      css(ghostEl, 'height', rect.height);
      css(ghostEl, 'opacity', '0.8');
      css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
      css(ghostEl, 'zIndex', '100000');
      css(ghostEl, 'pointerEvents', 'none');
      Sortable.ghost = ghostEl;
      container.appendChild(ghostEl);
    }
  },
  _onDragStart: function _onDragStart(
  /**Event*/
  evt,
  /**boolean*/
  fallback) {
    var _this = this;

    var dataTransfer = evt.dataTransfer;
    var options = _this.options;
    pluginEvent('dragStart', this, {
      evt: evt
    });

    if (Sortable.eventCanceled) {
      this._onDrop();

      return;
    }

    pluginEvent('setupClone', this);

    if (!Sortable.eventCanceled) {
      cloneEl = clone(dragEl);
      cloneEl.draggable = false;
      cloneEl.style['will-change'] = '';

      this._hideClone();

      toggleClass(cloneEl, this.options.chosenClass, false);
      Sortable.clone = cloneEl;
    } // #1143: IFrame support workaround


    _this.cloneId = _nextTick(function () {
      pluginEvent('clone', _this);
      if (Sortable.eventCanceled) return;

      if (!_this.options.removeCloneOnHide) {
        rootEl.insertBefore(cloneEl, dragEl);
      }

      _this._hideClone();

      _dispatchEvent({
        sortable: _this,
        name: 'clone'
      });
    });
    !fallback && toggleClass(dragEl, options.dragClass, true); // Set proper drop events

    if (fallback) {
      ignoreNextClick = true;
      _this._loopId = setInterval(_this._emulateDragOver, 50);
    } else {
      // Undo what was set in _prepareDragStart before drag started
      off(document, 'mouseup', _this._onDrop);
      off(document, 'touchend', _this._onDrop);
      off(document, 'touchcancel', _this._onDrop);

      if (dataTransfer) {
        dataTransfer.effectAllowed = 'move';
        options.setData && options.setData.call(_this, dataTransfer, dragEl);
      }

      on(document, 'drop', _this); // #1276 fix:

      css(dragEl, 'transform', 'translateZ(0)');
    }

    awaitingDragStarted = true;
    _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
    on(document, 'selectstart', _this);
    moved = true;

    if (Safari) {
      css(document.body, 'user-select', 'none');
    }
  },
  // Returns true - if no further action is needed (either inserted or another condition)
  _onDragOver: function _onDragOver(
  /**Event*/
  evt) {
    var el = this.el,
        target = evt.target,
        dragRect,
        targetRect,
        revert,
        options = this.options,
        group = options.group,
        activeSortable = Sortable.active,
        isOwner = activeGroup === group,
        canSort = options.sort,
        fromSortable = putSortable || activeSortable,
        vertical,
        _this = this,
        completedFired = false;

    if (_silent) return;

    function dragOverEvent(name, extra) {
      pluginEvent(name, _this, _objectSpread({
        evt: evt,
        isOwner: isOwner,
        axis: vertical ? 'vertical' : 'horizontal',
        revert: revert,
        dragRect: dragRect,
        targetRect: targetRect,
        canSort: canSort,
        fromSortable: fromSortable,
        target: target,
        completed: completed,
        onMove: function onMove(target, after) {
          return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
        },
        changed: changed
      }, extra));
    } // Capture animation state


    function capture() {
      dragOverEvent('dragOverAnimationCapture');

      _this.captureAnimationState();

      if (_this !== fromSortable) {
        fromSortable.captureAnimationState();
      }
    } // Return invocation when dragEl is inserted (or completed)


    function completed(insertion) {
      dragOverEvent('dragOverCompleted', {
        insertion: insertion
      });

      if (insertion) {
        // Clones must be hidden before folding animation to capture dragRectAbsolute properly
        if (isOwner) {
          activeSortable._hideClone();
        } else {
          activeSortable._showClone(_this);
        }

        if (_this !== fromSortable) {
          // Set ghost class to new sortable's ghost class
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
          toggleClass(dragEl, options.ghostClass, true);
        }

        if (putSortable !== _this && _this !== Sortable.active) {
          putSortable = _this;
        } else if (_this === Sortable.active && putSortable) {
          putSortable = null;
        } // Animation


        if (fromSortable === _this) {
          _this._ignoreWhileAnimating = target;
        }

        _this.animateAll(function () {
          dragOverEvent('dragOverAnimationComplete');
          _this._ignoreWhileAnimating = null;
        });

        if (_this !== fromSortable) {
          fromSortable.animateAll();
          fromSortable._ignoreWhileAnimating = null;
        }
      } // Null lastTarget if it is not inside a previously swapped element


      if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
        lastTarget = null;
      } // no bubbling and not fallback


      if (!options.dragoverBubble && !evt.rootEl && target !== document) {
        dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted


        !insertion && nearestEmptyInsertDetectEvent(evt);
      }

      !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
      return completedFired = true;
    } // Call when dragEl has been inserted


    function changed() {
      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);

      _dispatchEvent({
        sortable: _this,
        name: 'change',
        toEl: el,
        newIndex: newIndex,
        newDraggableIndex: newDraggableIndex,
        originalEvent: evt
      });
    }

    if (evt.preventDefault !== void 0) {
      evt.cancelable && evt.preventDefault();
    }

    target = closest(target, options.draggable, el, true);
    dragOverEvent('dragOver');
    if (Sortable.eventCanceled) return completedFired;

    if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
      return completed(false);
    }

    ignoreNextClick = false;

    if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list
    : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
      vertical = this._getDirection(evt, target) === 'vertical';
      dragRect = getRect(dragEl);
      dragOverEvent('dragOverValid');
      if (Sortable.eventCanceled) return completedFired;

      if (revert) {
        parentEl = rootEl; // actualization

        capture();

        this._hideClone();

        dragOverEvent('revert');

        if (!Sortable.eventCanceled) {
          if (nextEl) {
            rootEl.insertBefore(dragEl, nextEl);
          } else {
            rootEl.appendChild(dragEl);
          }
        }

        return completed(true);
      }

      var elLastChild = lastChild(el, options.draggable);

      if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
        // If already at end of list: Do not insert
        if (elLastChild === dragEl) {
          return completed(false);
        } // assign target only if condition is true


        if (elLastChild && el === evt.target) {
          target = elLastChild;
        }

        if (target) {
          targetRect = getRect(target);
        }

        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
          capture();
          el.appendChild(dragEl);
          parentEl = el; // actualization

          changed();
          return completed(true);
        }
      } else if (target.parentNode === el) {
        targetRect = getRect(target);
        var direction = 0,
            targetBeforeFirstSwap,
            differentLevel = dragEl.parentNode !== el,
            differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
            side1 = vertical ? 'top' : 'left',
            scrolledPastTop = isScrolledPast(target, null, 'top', 'top') || isScrolledPast(dragEl, null, 'top', 'top'),
            scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;

        if (lastTarget !== target) {
          targetBeforeFirstSwap = targetRect[side1];
          pastFirstInvertThresh = false;
          isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
        }

        direction = _getSwapDirection(evt, target, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
        var sibling;

        if (direction !== 0) {
          // Check if target is beside dragEl in respective direction (ignoring hidden elements)
          var dragIndex = index(dragEl);

          do {
            dragIndex -= direction;
            sibling = parentEl.children[dragIndex];
          } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
        } // If dragEl is already beside target: Do not insert


        if (direction === 0 || sibling === target) {
          return completed(false);
        }

        lastTarget = target;
        lastDirection = direction;
        var nextSibling = target.nextElementSibling,
            after = false;
        after = direction === 1;

        var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);

        if (moveVector !== false) {
          if (moveVector === 1 || moveVector === -1) {
            after = moveVector === 1;
          }

          _silent = true;
          setTimeout(_unsilent, 30);
          capture();

          if (after && !nextSibling) {
            el.appendChild(dragEl);
          } else {
            target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
          } // Undo chrome's scroll adjustment (has no effect on other browsers)


          if (scrolledPastTop) {
            scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
          }

          parentEl = dragEl.parentNode; // actualization
          // must be done before animation

          if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
            targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
          }

          changed();
          return completed(true);
        }
      }

      if (el.contains(dragEl)) {
        return completed(false);
      }
    }

    return false;
  },
  _ignoreWhileAnimating: null,
  _offMoveEvents: function _offMoveEvents() {
    off(document, 'mousemove', this._onTouchMove);
    off(document, 'touchmove', this._onTouchMove);
    off(document, 'pointermove', this._onTouchMove);
    off(document, 'dragover', nearestEmptyInsertDetectEvent);
    off(document, 'mousemove', nearestEmptyInsertDetectEvent);
    off(document, 'touchmove', nearestEmptyInsertDetectEvent);
  },
  _offUpEvents: function _offUpEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._onDrop);
    off(ownerDocument, 'touchend', this._onDrop);
    off(ownerDocument, 'pointerup', this._onDrop);
    off(ownerDocument, 'touchcancel', this._onDrop);
    off(document, 'selectstart', this);
  },
  _onDrop: function _onDrop(
  /**Event*/
  evt) {
    var el = this.el,
        options = this.options; // Get the index of the dragged element within its parent

    newIndex = index(dragEl);
    newDraggableIndex = index(dragEl, options.draggable);
    pluginEvent('drop', this, {
      evt: evt
    }); // Get again after plugin event

    newIndex = index(dragEl);
    newDraggableIndex = index(dragEl, options.draggable);

    if (Sortable.eventCanceled) {
      this._nulling();

      return;
    }

    awaitingDragStarted = false;
    isCircumstantialInvert = false;
    pastFirstInvertThresh = false;
    clearInterval(this._loopId);
    clearTimeout(this._dragStartTimer);

    _cancelNextTick(this.cloneId);

    _cancelNextTick(this._dragStartId); // Unbind events


    if (this.nativeDraggable) {
      off(document, 'drop', this);
      off(el, 'dragstart', this._onDragStart);
    }

    this._offMoveEvents();

    this._offUpEvents();

    if (Safari) {
      css(document.body, 'user-select', '');
    }

    if (evt) {
      if (moved) {
        evt.cancelable && evt.preventDefault();
        !options.dropBubble && evt.stopPropagation();
      }

      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);

      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
        // Remove clone(s)
        cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
      }

      if (dragEl) {
        if (this.nativeDraggable) {
          off(dragEl, 'dragend', this);
        }

        _disableDraggable(dragEl);

        dragEl.style['will-change'] = ''; // Remove classes
        // ghostClass is added in dragStarted

        if (moved && !awaitingDragStarted) {
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
        }

        toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event

        _dispatchEvent({
          sortable: this,
          name: 'unchoose',
          toEl: parentEl,
          newIndex: null,
          newDraggableIndex: null,
          originalEvent: evt
        });

        if (rootEl !== parentEl) {
          if (newIndex >= 0) {
            // Add event
            _dispatchEvent({
              rootEl: parentEl,
              name: 'add',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            }); // Remove event


            _dispatchEvent({
              sortable: this,
              name: 'remove',
              toEl: parentEl,
              originalEvent: evt
            }); // drag from one list and drop into another


            _dispatchEvent({
              rootEl: parentEl,
              name: 'sort',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            });

            _dispatchEvent({
              sortable: this,
              name: 'sort',
              toEl: parentEl,
              originalEvent: evt
            });
          }

          putSortable && putSortable.save();
        } else {
          if (newIndex !== oldIndex) {
            if (newIndex >= 0) {
              // drag & drop within the same list
              _dispatchEvent({
                sortable: this,
                name: 'update',
                toEl: parentEl,
                originalEvent: evt
              });

              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }
          }
        }

        if (Sortable.active) {
          /* jshint eqnull:true */
          if (newIndex == null || newIndex === -1) {
            newIndex = oldIndex;
            newDraggableIndex = oldDraggableIndex;
          }

          _dispatchEvent({
            sortable: this,
            name: 'end',
            toEl: parentEl,
            originalEvent: evt
          }); // Save sorting


          this.save();
        }
      }
    }

    this._nulling();
  },
  _nulling: function _nulling() {
    pluginEvent('nulling', this);
    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
    savedInputChecked.forEach(function (el) {
      el.checked = true;
    });
    savedInputChecked.length = 0;
  },
  handleEvent: function handleEvent(
  /**Event*/
  evt) {
    switch (evt.type) {
      case 'drop':
      case 'dragend':
        this._onDrop(evt);

        break;

      case 'dragenter':
      case 'dragover':
        if (dragEl) {
          this._onDragOver(evt);

          _globalDragOver(evt);
        }

        break;

      case 'selectstart':
        evt.preventDefault();
        break;
    }
  },

  /**
   * Serializes the item into an array of string.
   * @returns {String[]}
   */
  toArray: function toArray() {
    var order = [],
        el,
        children = this.el.children,
        i = 0,
        n = children.length,
        options = this.options;

    for (; i < n; i++) {
      el = children[i];

      if (closest(el, options.draggable, this.el, false)) {
        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
      }
    }

    return order;
  },

  /**
   * Sorts the elements according to the array.
   * @param  {String[]}  order  order of the items
   */
  sort: function sort(order) {
    var items = {},
        rootEl = this.el;
    this.toArray().forEach(function (id, i) {
      var el = rootEl.children[i];

      if (closest(el, this.options.draggable, rootEl, false)) {
        items[id] = el;
      }
    }, this);
    order.forEach(function (id) {
      if (items[id]) {
        rootEl.removeChild(items[id]);
        rootEl.appendChild(items[id]);
      }
    });
  },

  /**
   * Save the current sorting
   */
  save: function save() {
    var store = this.options.store;
    store && store.set && store.set(this);
  },

  /**
   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
   * @param   {HTMLElement}  el
   * @param   {String}       [selector]  default: `options.draggable`
   * @returns {HTMLElement|null}
   */
  closest: function closest$1(el, selector) {
    return closest(el, selector || this.options.draggable, this.el, false);
  },

  /**
   * Set/get option
   * @param   {string} name
   * @param   {*}      [value]
   * @returns {*}
   */
  option: function option(name, value) {
    var options = this.options;

    if (value === void 0) {
      return options[name];
    } else {
      var modifiedValue = PluginManager.modifyOption(this, name, value);

      if (typeof modifiedValue !== 'undefined') {
        options[name] = modifiedValue;
      } else {
        options[name] = value;
      }

      if (name === 'group') {
        _prepareGroup(options);
      }
    }
  },

  /**
   * Destroy
   */
  destroy: function destroy() {
    pluginEvent('destroy', this);
    var el = this.el;
    el[expando] = null;
    off(el, 'mousedown', this._onTapStart);
    off(el, 'touchstart', this._onTapStart);
    off(el, 'pointerdown', this._onTapStart);

    if (this.nativeDraggable) {
      off(el, 'dragover', this);
      off(el, 'dragenter', this);
    } // Remove draggable attributes


    Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
      el.removeAttribute('draggable');
    });

    this._onDrop();

    sortables.splice(sortables.indexOf(this.el), 1);
    this.el = el = null;
  },
  _hideClone: function _hideClone() {
    if (!cloneHidden) {
      pluginEvent('hideClone', this);
      if (Sortable.eventCanceled) return;
      css(cloneEl, 'display', 'none');

      if (this.options.removeCloneOnHide && cloneEl.parentNode) {
        cloneEl.parentNode.removeChild(cloneEl);
      }

      cloneHidden = true;
    }
  },
  _showClone: function _showClone(putSortable) {
    if (putSortable.lastPutMode !== 'clone') {
      this._hideClone();

      return;
    }

    if (cloneHidden) {
      pluginEvent('showClone', this);
      if (Sortable.eventCanceled) return; // show clone at dragEl or original position

      if (rootEl.contains(dragEl) && !this.options.group.revertClone) {
        rootEl.insertBefore(cloneEl, dragEl);
      } else if (nextEl) {
        rootEl.insertBefore(cloneEl, nextEl);
      } else {
        rootEl.appendChild(cloneEl);
      }

      if (this.options.group.revertClone) {
        this._animate(dragEl, cloneEl);
      }

      css(cloneEl, 'display', '');
      cloneHidden = false;
    }
  }
};

function _globalDragOver(
/**Event*/
evt) {
  if (evt.dataTransfer) {
    evt.dataTransfer.dropEffect = 'move';
  }

  evt.cancelable && evt.preventDefault();
}

function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
  var evt,
      sortable = fromEl[expando],
      onMoveFn = sortable.options.onMove,
      retVal; // Support for new CustomEvent feature

  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent('move', {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent('move', true, true);
  }

  evt.to = toEl;
  evt.from = fromEl;
  evt.dragged = dragEl;
  evt.draggedRect = dragRect;
  evt.related = targetEl || toEl;
  evt.relatedRect = targetRect || getRect(toEl);
  evt.willInsertAfter = willInsertAfter;
  evt.originalEvent = originalEvent;
  fromEl.dispatchEvent(evt);

  if (onMoveFn) {
    retVal = onMoveFn.call(sortable, evt, originalEvent);
  }

  return retVal;
}

function _disableDraggable(el) {
  el.draggable = false;
}

function _unsilent() {
  _silent = false;
}

function _ghostIsLast(evt, vertical, sortable) {
  var rect = getRect(lastChild(sortable.el, sortable.options.draggable));
  var spacer = 10;
  return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;
}

function _getSwapDirection(evt, target, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
  var targetRect = getRect(target),
      mouseOnAxis = vertical ? evt.clientY : evt.clientX,
      targetLength = vertical ? targetRect.height : targetRect.width,
      targetS1 = vertical ? targetRect.top : targetRect.left,
      targetS2 = vertical ? targetRect.bottom : targetRect.right,
      invert = false;

  if (!invertSwap) {
    // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
      // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
      // check if past first invert threshold on side opposite of lastDirection
      if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
        // past first invert threshold, do not restrict inverted threshold to dragEl shadow
        pastFirstInvertThresh = true;
      }

      if (!pastFirstInvertThresh) {
        // dragEl shadow (target move distance shadow)
        if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
        : mouseOnAxis > targetS2 - targetMoveDistance) {
          return -lastDirection;
        }
      } else {
        invert = true;
      }
    } else {
      // Regular
      if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
        return _getInsertDirection(target);
      }
    }
  }

  invert = invert || invertSwap;

  if (invert) {
    // Invert of regular
    if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
    }
  }

  return 0;
}
/**
 * Gets the direction dragEl must be swapped relative to target in order to make it
 * seem that dragEl has been "inserted" into that element's position
 * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
 * @return {Number}                   Direction dragEl must be swapped
 */


function _getInsertDirection(target) {
  if (index(dragEl) < index(target)) {
    return 1;
  } else {
    return -1;
  }
}
/**
 * Generate id
 * @param   {HTMLElement} el
 * @returns {String}
 * @private
 */


function _generateId(el) {
  var str = el.tagName + el.className + el.src + el.href + el.textContent,
      i = str.length,
      sum = 0;

  while (i--) {
    sum += str.charCodeAt(i);
  }

  return sum.toString(36);
}

function _saveInputCheckedState(root) {
  savedInputChecked.length = 0;
  var inputs = root.getElementsByTagName('input');
  var idx = inputs.length;

  while (idx--) {
    var _el = inputs[idx];
    _el.checked && savedInputChecked.push(_el);
  }
}

function _nextTick(fn) {
  return setTimeout(fn, 0);
}

function _cancelNextTick(id) {
  return clearTimeout(id);
} // Fixed #973:


on(document, 'touchmove', function (evt) {
  if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
    evt.preventDefault();
  }
}); // Export utils

Sortable.utils = {
  on: on,
  off: off,
  css: css,
  find: find,
  is: function is(el, selector) {
    return !!closest(el, selector, el, false);
  },
  extend: extend,
  throttle: throttle,
  closest: closest,
  toggleClass: toggleClass,
  clone: clone,
  index: index,
  nextTick: _nextTick,
  cancelNextTick: _cancelNextTick,
  detectDirection: _detectDirection,
  getChild: getChild
};
/**
 * Mount a plugin to Sortable
 * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
 */

Sortable.mount = function () {
  for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
    plugins[_key] = arguments[_key];
  }

  if (plugins[0].constructor === Array) plugins = plugins[0];

  for (var i in plugins) {
    var plugin = plugins[i];

    if (!plugin.prototype || !plugin.prototype.constructor) {
      throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(el));
    }

    if (plugin.utils) Sortable.utils = _objectSpread({}, Sortable.utils, plugin.utils);
    PluginManager.mount(plugin);
  }
};
/**
 * Create sortable instance
 * @param {HTMLElement}  el
 * @param {Object}      [options]
 */


Sortable.create = function (el, options) {
  return new Sortable(el, options);
}; // Export


Sortable.version = version;

var autoScrolls = [],
    scrollEl,
    scrollRootEl,
    scrolling = false,
    lastAutoScrollX,
    lastAutoScrollY,
    touchEvt$1,
    pointerElemChangedInterval;

function AutoScrollPlugin() {
  function AutoScroll() {
    this.options = {
      scroll: true,
      scrollSensitivity: 30,
      scrollSpeed: 10,
      bubbleScroll: true
    }; // Bind all private methods

    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }
  }

  AutoScroll.prototype = {
    dragStarted: function dragStarted(_ref) {
      var originalEvent = _ref.originalEvent;

      if (this.sortable.nativeDraggable) {
        on(document, 'dragover', this._handleAutoScroll);
      } else {
        if (this.sortable.options.supportPointer) {
          on(document, 'pointermove', this._handleFallbackAutoScroll);
        } else if (originalEvent.touches) {
          on(document, 'touchmove', this._handleFallbackAutoScroll);
        } else {
          on(document, 'mousemove', this._handleFallbackAutoScroll);
        }
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref2) {
      var originalEvent = _ref2.originalEvent;

      // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)
      if (!this.sortable.options.dragOverBubble && !originalEvent.rootEl) {
        this._handleAutoScroll(originalEvent);
      }
    },
    drop: function drop() {
      if (this.sortable.nativeDraggable) {
        off(document, 'dragover', this._handleAutoScroll);
      } else {
        off(document, 'pointermove', this._handleFallbackAutoScroll);
        off(document, 'touchmove', this._handleFallbackAutoScroll);
        off(document, 'mousemove', this._handleFallbackAutoScroll);
      }

      clearPointerElemChangedInterval();
      clearAutoScrolls();
      cancelThrottle();
    },
    nulling: function nulling() {
      touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
      autoScrolls.length = 0;
    },
    _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
      this._handleAutoScroll(evt, true);
    },
    _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
      var _this = this;

      var x = evt.clientX,
          y = evt.clientY,
          elem = document.elementFromPoint(x, y);
      touchEvt$1 = evt; // IE does not seem to have native autoscroll,
      // Edge's autoscroll seems too conditional,
      // MACOS Safari does not have autoscroll,
      // Firefox and Chrome are good

      if (fallback || Edge || IE11OrLess || Safari) {
        autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change

        var ogElemScroller = getParentAutoScrollElement(elem, true);

        if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
          pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour

          pointerElemChangedInterval = setInterval(function () {
            var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);

            if (newElem !== ogElemScroller) {
              ogElemScroller = newElem;
              clearAutoScrolls();
            }

            autoScroll(evt, _this.options, newElem, fallback);
          }, 10);
          lastAutoScrollX = x;
          lastAutoScrollY = y;
        }
      } else {
        // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
        if (!this.sortable.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
          clearAutoScrolls();
          return;
        }

        autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
      }
    }
  };
  return _extends(AutoScroll, {
    pluginName: 'scroll',
    initializeByDefault: true
  });
}

function clearAutoScrolls() {
  autoScrolls.forEach(function (autoScroll) {
    clearInterval(autoScroll.pid);
  });
  autoScrolls = [];
}

function clearPointerElemChangedInterval() {
  clearInterval(pointerElemChangedInterval);
}

var autoScroll = throttle(function (evt, options, rootEl, isFallback) {
  // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
  if (!options.scroll) return;
  var sens = options.scrollSensitivity,
      speed = options.scrollSpeed,
      winScroller = getWindowScrollingElement();
  var scrollThisInstance = false,
      scrollCustomFn; // New scroll root, set scrollEl

  if (scrollRootEl !== rootEl) {
    scrollRootEl = rootEl;
    clearAutoScrolls();
    scrollEl = options.scroll;
    scrollCustomFn = options.scrollFn;

    if (scrollEl === true) {
      scrollEl = getParentAutoScrollElement(rootEl, true);
    }
  }

  var layersOut = 0;
  var currentParent = scrollEl;

  do {
    var el = currentParent,
        rect = getRect(el),
        top = rect.top,
        bottom = rect.bottom,
        left = rect.left,
        right = rect.right,
        width = rect.width,
        height = rect.height,
        canScrollX = void 0,
        canScrollY = void 0,
        scrollWidth = el.scrollWidth,
        scrollHeight = el.scrollHeight,
        elCSS = css(el),
        scrollPosX = el.scrollLeft,
        scrollPosY = el.scrollTop;

    if (el === winScroller) {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
    } else {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
    }

    var vx = canScrollX && (Math.abs(right - evt.clientX) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - evt.clientX) <= sens && !!scrollPosX);
    var vy = canScrollY && (Math.abs(bottom - evt.clientY) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - evt.clientY) <= sens && !!scrollPosY);

    if (!autoScrolls[layersOut]) {
      for (var i = 0; i <= layersOut; i++) {
        if (!autoScrolls[i]) {
          autoScrolls[i] = {};
        }
      }
    }

    if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
      autoScrolls[layersOut].el = el;
      autoScrolls[layersOut].vx = vx;
      autoScrolls[layersOut].vy = vy;
      clearInterval(autoScrolls[layersOut].pid);

      if (vx != 0 || vy != 0) {
        scrollThisInstance = true;
        /* jshint loopfunc:true */

        autoScrolls[layersOut].pid = setInterval(function () {
          // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
          if (isFallback && this.layer === 0) {
            Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely

          }

          var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
          var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;

          if (typeof scrollCustomFn === 'function') {
            if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
              return;
            }
          }

          scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
        }.bind({
          layer: layersOut
        }), 24);
      }
    }

    layersOut++;
  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));

  scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
}, 30);

var drop = function drop(_ref) {
  var originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      dragEl = _ref.dragEl,
      activeSortable = _ref.activeSortable,
      dispatchSortableEvent = _ref.dispatchSortableEvent,
      hideGhostForTarget = _ref.hideGhostForTarget,
      unhideGhostForTarget = _ref.unhideGhostForTarget;
  var toSortable = putSortable || activeSortable;
  hideGhostForTarget();
  var target = document.elementFromPoint(originalEvent.clientX, originalEvent.clientY);
  unhideGhostForTarget();

  if (toSortable && !toSortable.el.contains(target)) {
    dispatchSortableEvent('spill');
    this.onSpill(dragEl);
  }
};

function Revert() {}

Revert.prototype = {
  startIndex: null,
  dragStart: function dragStart(_ref2) {
    var oldDraggableIndex = _ref2.oldDraggableIndex;
    this.startIndex = oldDraggableIndex;
  },
  onSpill: function onSpill(dragEl) {
    this.sortable.captureAnimationState();
    var nextSibling = getChild(this.sortable.el, this.startIndex, this.sortable.options);

    if (nextSibling) {
      this.sortable.el.insertBefore(dragEl, nextSibling);
    } else {
      this.sortable.el.appendChild(dragEl);
    }

    this.sortable.animateAll();
  },
  drop: drop
};

_extends(Revert, {
  pluginName: 'revertOnSpill'
});

function Remove() {}

Remove.prototype = {
  onSpill: function onSpill(dragEl) {
    this.sortable.captureAnimationState();
    dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
    this.sortable.animateAll();
  },
  drop: drop
};

_extends(Remove, {
  pluginName: 'removeOnSpill'
});

var lastSwapEl;

function SwapPlugin() {
  function Swap() {
    this.options = {
      swapClass: 'sortable-swap-highlight'
    };
  }

  Swap.prototype = {
    dragStart: function dragStart(_ref) {
      var dragEl = _ref.dragEl;
      lastSwapEl = dragEl;
    },
    dragOverValid: function dragOverValid(_ref2) {
      var completed = _ref2.completed,
          target = _ref2.target,
          onMove = _ref2.onMove,
          activeSortable = _ref2.activeSortable,
          changed = _ref2.changed;
      if (!activeSortable.options.swap) return;
      var el = this.sortable.el,
          options = this.sortable.options;

      if (target && target !== el) {
        var prevSwapEl = lastSwapEl;

        if (onMove(target) !== false) {
          toggleClass(target, options.swapClass, true);
          lastSwapEl = target;
        } else {
          lastSwapEl = null;
        }

        if (prevSwapEl && prevSwapEl !== lastSwapEl) {
          toggleClass(prevSwapEl, options.swapClass, false);
        }
      }

      changed();
      return completed(true);
    },
    drop: function drop(_ref3) {
      var activeSortable = _ref3.activeSortable,
          putSortable = _ref3.putSortable,
          dragEl = _ref3.dragEl;
      var toSortable = putSortable || this.sortable;
      var options = this.sortable.options;
      lastSwapEl && toggleClass(lastSwapEl, options.swapClass, false);

      if (lastSwapEl && (options.swap || putSortable && putSortable.options.swap)) {
        if (dragEl !== lastSwapEl) {
          toSortable.captureAnimationState();
          if (toSortable !== activeSortable) activeSortable.captureAnimationState();
          swapNodes(dragEl, lastSwapEl);
          toSortable.animateAll();
          if (toSortable !== activeSortable) activeSortable.animateAll();
        }
      }
    },
    nulling: function nulling() {
      lastSwapEl = null;
    }
  };
  return _extends(Swap, {
    pluginName: 'swap',
    eventOptions: function eventOptions() {
      return {
        swapItem: lastSwapEl
      };
    }
  });
}

function swapNodes(n1, n2) {
  var p1 = n1.parentNode,
      p2 = n2.parentNode,
      i1,
      i2;
  if (!p1 || !p2 || p1.isEqualNode(n2) || p2.isEqualNode(n1)) return;
  i1 = index(n1);
  i2 = index(n2);

  if (p1.isEqualNode(p2) && i1 < i2) {
    i2++;
  }

  p1.insertBefore(n2, p1.children[i1]);
  p2.insertBefore(n1, p2.children[i2]);
}

var multiDragElements = [],
    multiDragClones = [],
    lastMultiDragSelect,
    // for selection with modifier key down (SHIFT)
multiDragSortable,
    initialFolding = false,
    // Initial multi-drag fold when drag started
folding = false,
    // Folding any other time
dragStarted = false,
    dragEl$1,
    clonesFromRect,
    clonesHidden;

function MultiDragPlugin() {
  function MultiDrag(sortable) {
    // Bind all private methods
    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }

    if (sortable.options.supportPointer) {
      on(document, 'pointerup', this._deselectMultiDrag);
    } else {
      on(document, 'mouseup', this._deselectMultiDrag);
      on(document, 'touchend', this._deselectMultiDrag);
    }

    on(document, 'keydown', this._checkKeyDown);
    on(document, 'keyup', this._checkKeyUp);
    this.options = {
      selectedClass: 'sortable-selected',
      multiDragKey: null,
      setData: function setData(dataTransfer, dragEl) {
        var data = '';

        if (multiDragElements.length && multiDragSortable === sortable) {
          for (var i in multiDragElements) {
            data += (!i ? '' : ', ') + multiDragElements[i].textContent;
          }
        } else {
          data = dragEl.textContent;
        }

        dataTransfer.setData('Text', data);
      }
    };
  }

  MultiDrag.prototype = {
    multiDragKeyDown: false,
    isMultiDrag: false,
    delayStartGlobal: function delayStartGlobal(_ref) {
      var dragged = _ref.dragEl;
      dragEl$1 = dragged;
    },
    delayEnded: function delayEnded() {
      this.isMultiDrag = ~multiDragElements.indexOf(dragEl$1);
    },
    setupClone: function setupClone(_ref2) {
      var sortable = _ref2.sortable;
      if (!this.isMultiDrag) return;

      for (var i in multiDragElements) {
        multiDragClones.push(clone(multiDragElements[i]));
        multiDragClones[i].sortableIndex = multiDragElements[i].sortableIndex;
        multiDragClones[i].draggable = false;
        multiDragClones[i].style['will-change'] = '';
        toggleClass(multiDragClones[i], sortable.options.selectedClass, false);
        multiDragElements[i] === dragEl$1 && toggleClass(multiDragClones[i], sortable.options.chosenClass, false);
      }

      sortable._hideClone();

      return true;
    },
    clone: function clone(_ref3) {
      var sortable = _ref3.sortable,
          rootEl = _ref3.rootEl,
          dispatchSortableEvent = _ref3.dispatchSortableEvent;
      if (!this.isMultiDrag) return;

      if (!sortable.options.removeCloneOnHide) {
        if (multiDragElements.length && multiDragSortable === sortable) {
          insertMultiDragClones(true, rootEl);
          dispatchSortableEvent('clone');
          return true;
        }
      }
    },
    showClone: function showClone(_ref4) {
      var cloneNowShown = _ref4.cloneNowShown,
          rootEl = _ref4.rootEl;
      if (!this.isMultiDrag) return;
      insertMultiDragClones(false, rootEl);

      for (var i in multiDragClones) {
        css(multiDragClones[i], 'display', '');
      }

      cloneNowShown();
      clonesHidden = false;
      return true;
    },
    hideClone: function hideClone(_ref5) {
      var sortable = _ref5.sortable,
          cloneNowHidden = _ref5.cloneNowHidden;
      if (!this.isMultiDrag) return;

      for (var i in multiDragClones) {
        css(multiDragClones[i], 'display', 'none');

        if (sortable.options.removeCloneOnHide && multiDragClones[i].parentNode) {
          multiDragClones[i].parentNode.removeChild(multiDragClones[i]);
        }
      }

      cloneNowHidden();
      clonesHidden = true;
      return true;
    },
    dragStartGlobal: function dragStartGlobal(_ref6) {
      var sortable = _ref6.sortable;

      if (!this.isMultiDrag && multiDragSortable) {
        multiDragSortable.multiDrag._deselectMultiDrag();
      }

      for (var i in multiDragElements) {
        multiDragElements[i].sortableIndex = index(multiDragElements[i]);
      } // Sort multi-drag elements


      multiDragElements = multiDragElements.sort(function (a, b) {
        return a.sortableIndex - b.sortableIndex;
      });
      dragStarted = true;
    },
    dragStarted: function dragStarted(_ref7) {
      var sortable = _ref7.sortable;
      if (!this.isMultiDrag) return;

      if (sortable.options.sort) {
        // Capture rects,
        // hide multi drag elements (by positioning them absolute),
        // set multi drag elements rects to dragRect,
        // show multi drag elements,
        // animate to rects,
        // unset rects & remove from DOM
        sortable.captureAnimationState();

        if (sortable.options.animation) {
          for (var i in multiDragElements) {
            if (multiDragElements[i] === dragEl$1) continue;
            css(multiDragElements[i], 'position', 'absolute');
          }

          var dragRect = getRect(dragEl$1, false, true, true);

          for (var _i in multiDragElements) {
            if (multiDragElements[_i] === dragEl$1) continue;
            setRect(multiDragElements[_i], dragRect);
          }

          folding = true;
          initialFolding = true;
        }
      }

      sortable.animateAll(function () {
        folding = false;
        initialFolding = false;

        if (sortable.options.animation) {
          for (var _i2 in multiDragElements) {
            unsetRect(multiDragElements[_i2]);
          }
        } // Remove all auxiliary multidrag items from el, if sorting enabled


        if (sortable.options.sort) {
          removeMultiDragElements();
        }
      });
    },
    dragOver: function dragOver(_ref8) {
      var target = _ref8.target,
          completed = _ref8.completed;

      if (folding && ~multiDragElements.indexOf(target)) {
        return completed(false);
      }
    },
    revert: function revert(_ref9) {
      var fromSortable = _ref9.fromSortable,
          rootEl = _ref9.rootEl,
          sortable = _ref9.sortable,
          dragRect = _ref9.dragRect;

      if (multiDragElements.length > 1) {
        // Setup unfold animation
        for (var i in multiDragElements) {
          sortable.addAnimationState({
            target: multiDragElements[i],
            rect: folding ? getRect(multiDragElements[i]) : dragRect
          });
          unsetRect(multiDragElements[i]);
          multiDragElements[i].fromRect = dragRect;
          fromSortable.removeAnimationState(multiDragElements[i]);
        }

        folding = false;
        insertMultiDragElements(!sortable.options.removeCloneOnHide, rootEl);
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref10) {
      var sortable = _ref10.sortable,
          isOwner = _ref10.isOwner,
          insertion = _ref10.insertion,
          activeSortable = _ref10.activeSortable,
          parentEl = _ref10.parentEl,
          putSortable = _ref10.putSortable;
      var options = sortable.options;

      if (insertion) {
        // Clones must be hidden before folding animation to capture dragRectAbsolute properly
        if (isOwner) {
          activeSortable._hideClone();
        }

        initialFolding = false; // If leaving sort:false root, or already folding - Fold to new location

        if (options.animation && multiDragElements.length > 1 && (folding || !isOwner && !activeSortable.options.sort && !putSortable)) {
          // Fold: Set all multi drag elements's rects to dragEl's rect when multi-drag elements are invisible
          var dragRectAbsolute = getRect(dragEl$1, false, true, true);

          for (var i in multiDragElements) {
            if (multiDragElements[i] === dragEl$1) continue;
            setRect(multiDragElements[i], dragRectAbsolute); // Move element(s) to end of parentEl so that it does not interfere with multi-drag clones insertion if they are inserted
            // while folding, and so that we can capture them again because old sortable will no longer be fromSortable

            parentEl.appendChild(multiDragElements[i]);
          }

          folding = true;
        } // Clones must be shown (and check to remove multi drags) after folding when interfering multiDragElements are moved out


        if (!isOwner) {
          // Only remove if not folding (folding will remove them anyways)
          if (!folding) {
            removeMultiDragElements();
          }

          if (multiDragElements.length > 1) {
            var clonesHiddenBefore = clonesHidden;

            activeSortable._showClone(sortable); // Unfold animation for clones if showing from hidden


            if (activeSortable.options.animation && !clonesHidden && clonesHiddenBefore) {
              for (var _i3 in multiDragClones) {
                activeSortable.addAnimationState({
                  target: multiDragClones[_i3],
                  rect: clonesFromRect
                });
                multiDragClones[_i3].fromRect = clonesFromRect;
                multiDragClones[_i3].thisAnimationDuration = null;
              }
            }
          } else {
            activeSortable._showClone(sortable);
          }
        }
      }
    },
    dragOverAnimationCapture: function dragOverAnimationCapture(_ref11) {
      var dragRect = _ref11.dragRect,
          isOwner = _ref11.isOwner,
          activeSortable = _ref11.activeSortable;

      for (var i in multiDragElements) {
        multiDragElements[i].thisAnimationDuration = null;
      }

      if (activeSortable.options.animation && !isOwner && activeSortable.multiDrag.isMultiDrag) {
        clonesFromRect = _extends({}, dragRect);
        var dragMatrix = matrix(dragEl$1, true);
        clonesFromRect.top -= dragMatrix.f;
        clonesFromRect.left -= dragMatrix.e;
      }
    },
    dragOverAnimationComplete: function dragOverAnimationComplete() {
      if (folding) {
        folding = false;
        removeMultiDragElements();
      }
    },
    drop: function drop(_ref12) {
      var evt = _ref12.originalEvent,
          rootEl = _ref12.rootEl,
          parentEl = _ref12.parentEl,
          sortable = _ref12.sortable,
          dispatchSortableEvent = _ref12.dispatchSortableEvent,
          oldIndex = _ref12.oldIndex,
          putSortable = _ref12.putSortable;
      var toSortable = putSortable || this.sortable;
      if (!evt) return;
      var options = sortable.options,
          children = parentEl.children; // Multi-drag selection

      if (!dragStarted) {
        if (options.multiDragKey && !this.multiDragKeyDown) {
          this._deselectMultiDrag();
        }

        toggleClass(dragEl$1, options.selectedClass, !~multiDragElements.indexOf(dragEl$1));

        if (!~multiDragElements.indexOf(dragEl$1)) {
          multiDragElements.push(dragEl$1);
          dispatchEvent({
            sortable: sortable,
            rootEl: rootEl,
            name: 'select',
            targetEl: dragEl$1,
            originalEvt: evt
          }); // Modifier activated, select from last to dragEl

          if ((!options.multiDragKey || this.multiDragKeyDown) && evt.shiftKey && lastMultiDragSelect && sortable.el.contains(lastMultiDragSelect)) {
            var lastIndex = index(lastMultiDragSelect),
                currentIndex = index(dragEl$1);

            if (~lastIndex && ~currentIndex && lastIndex !== currentIndex) {
              // Must include lastMultiDragSelect (select it), in case modified selection from no selection
              // (but previous selection existed)
              var n, i;

              if (currentIndex > lastIndex) {
                i = lastIndex;
                n = currentIndex;
              } else {
                i = currentIndex;
                n = lastIndex + 1;
              }

              for (; i < n; i++) {
                if (~multiDragElements.indexOf(children[i])) continue;
                toggleClass(children[i], options.selectedClass, true);
                multiDragElements.push(children[i]);
                dispatchEvent({
                  sortable: sortable,
                  rootEl: rootEl,
                  name: 'select',
                  targetEl: children[i],
                  originalEvt: evt
                });
              }
            }
          } else {
            lastMultiDragSelect = dragEl$1;
          }

          multiDragSortable = toSortable;
        } else {
          multiDragElements.splice(multiDragElements.indexOf(dragEl$1), 1);
          lastMultiDragSelect = null;
          dispatchEvent({
            sortable: sortable,
            rootEl: rootEl,
            name: 'deselect',
            targetEl: dragEl$1,
            originalEvt: evt
          });
        }
      } // Multi-drag drop


      if (dragStarted && this.isMultiDrag) {
        // Do not "unfold" after around dragEl if reverted
        if ((parentEl[expando].options.sort || parentEl !== rootEl) && multiDragElements.length > 1) {
          var dragRect = getRect(dragEl$1),
              multiDragIndex = index(dragEl$1, ':not(.' + this.options.selectedClass + ')');
          if (!initialFolding && options.animation) dragEl$1.thisAnimationDuration = null;
          toSortable.captureAnimationState();

          if (!initialFolding) {
            if (options.animation) {
              dragEl$1.fromRect = dragRect;

              for (var _i4 in multiDragElements) {
                multiDragElements[_i4].thisAnimationDuration = null;

                if (multiDragElements[_i4] !== dragEl$1) {
                  var rect = folding ? getRect(multiDragElements[_i4]) : dragRect;
                  multiDragElements[_i4].fromRect = rect; // Prepare unfold animation

                  toSortable.addAnimationState({
                    target: multiDragElements[_i4],
                    rect: rect
                  });
                }
              }
            } // Multi drag elements are not necessarily removed from the DOM on drop, so to reinsert
            // properly they must all be removed


            removeMultiDragElements();

            for (var _i5 in multiDragElements) {
              if (children[multiDragIndex]) {
                parentEl.insertBefore(multiDragElements[_i5], children[multiDragIndex]);
              } else {
                parentEl.appendChild(multiDragElements[_i5]);
              }

              multiDragIndex++;
            } // If initial folding is done, the elements may have changed position because they are now
            // unfolding around dragEl, even though dragEl may not have his index changed, so update event
            // must be fired here as Sortable will not.


            if (oldIndex === index(dragEl$1)) {
              var update = false;

              for (var _i6 in multiDragElements) {
                if (multiDragElements[_i6].sortableIndex !== index(multiDragElements[_i6])) {
                  update = true;
                  break;
                }
              }

              if (update) {
                dispatchSortableEvent('update');
              }
            }
          } // Must be done after capturing individual rects (scroll bar)


          for (var _i7 in multiDragElements) {
            unsetRect(multiDragElements[_i7]);
          }

          toSortable.animateAll();
        }

        multiDragSortable = toSortable;
      } // Remove clones if necessary


      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
        for (var _i8 in multiDragClones) {
          multiDragClones[_i8].parentNode && multiDragClones[_i8].parentNode.removeChild(multiDragClones[_i8]);
        }
      }
    },
    nullingGlobal: function nullingGlobal() {
      this.isMultiDrag = dragStarted = false;
      multiDragClones.length = 0;
    },
    destroy: function destroy() {
      this._deselectMultiDrag();

      off(document, 'pointerup', this._deselectMultiDrag);
      off(document, 'mouseup', this._deselectMultiDrag);
      off(document, 'touchend', this._deselectMultiDrag);
      off(document, 'keydown', this._checkKeyDown);
      off(document, 'keyup', this._checkKeyUp);
    },
    _deselectMultiDrag: function _deselectMultiDrag(evt) {
      if (dragStarted) return; // Only deselect if selection is in this sortable

      if (multiDragSortable !== this.sortable) return; // Only deselect if target is not item in this sortable

      if (evt && closest(evt.target, this.sortable.options.draggable, this.sortable.el, false)) return; // Only deselect if left click

      if (evt && evt.button !== 0) return;

      while (multiDragElements.length) {
        var el = multiDragElements[0];
        toggleClass(el, this.sortable.options.selectedClass, false);
        multiDragElements.shift();
        dispatchEvent({
          sortable: this.sortable,
          rootEl: this.sortable.el,
          name: 'deselect',
          targetEl: el,
          originalEvt: evt
        });
      }
    },
    _checkKeyDown: function _checkKeyDown(evt) {
      if (evt.key === this.sortable.options.multiDragKey) {
        this.multiDragKeyDown = true;
      }
    },
    _checkKeyUp: function _checkKeyUp(evt) {
      if (evt.key === this.sortable.options.multiDragKey) {
        this.multiDragKeyDown = false;
      }
    }
  };
  return _extends(MultiDrag, {
    // Static methods & properties
    pluginName: 'multiDrag',
    utils: {
      /**
       * Selects the provided multi-drag item
       * @param  {HTMLElement} el    The element to be selected
       */
      select: function select(el) {
        var sortable = el.parentNode[expando];
        if (!sortable || !sortable.options.multiDrag || ~multiDragElements.indexOf(el)) return;

        if (multiDragSortable && multiDragSortable !== sortable) {
          multiDragSortable.multiDrag._deselectMultiDrag();

          multiDragSortable = sortable;
        }

        toggleClass(el, sortable.options.selectedClass, true);
        multiDragElements.push(el);
      },

      /**
       * Deselects the provided multi-drag item
       * @param  {HTMLElement} el    The element to be deselected
       */
      deselect: function deselect(el) {
        var sortable = el.parentNode[expando],
            index = multiDragElements.indexOf(el);
        if (!sortable || !sortable.options.multiDrag || !~index) return;
        toggleClass(el, sortable.options.selectedClass, false);
        multiDragElements.splice(index, 1);
      }
    },
    eventOptions: function eventOptions() {
      var _this = this;

      var oldIndicies = [],
          newIndicies = [];
      multiDragElements.forEach(function (element) {
        oldIndicies.push({
          element: element,
          index: element.sortableIndex
        }); // multiDragElements will already be sorted if folding

        var newIndex;

        if (folding && element !== dragEl$1) {
          newIndex = -1;
        } else if (folding) {
          newIndex = index(element, ':not(.' + _this.options.selectedClass + ')');
        } else {
          newIndex = index(element);
        }

        newIndicies.push({
          element: element,
          index: newIndex
        });
      });
      return {
        items: _toConsumableArray(multiDragElements),
        clones: [].concat(multiDragClones),
        oldIndicies: oldIndicies,
        newIndicies: newIndicies
      };
    },
    optionListeners: {
      multiDragKey: function multiDragKey(key) {
        key = key.toLowerCase();

        if (key === 'ctrl') {
          key = 'Control';
        } else if (key.length > 1) {
          key = key.charAt(0).toUpperCase() + key.substr(1);
        }

        return key;
      }
    }
  });
}

function insertMultiDragElements(clonesInserted, rootEl) {
  for (var i in multiDragElements) {
    var target = rootEl.children[multiDragElements[i].sortableIndex + (clonesInserted ? Number(i) : 0)];

    if (target) {
      rootEl.insertBefore(multiDragElements[i], target);
    } else {
      rootEl.appendChild(multiDragElements[i]);
    }
  }
}
/**
 * Insert multi-drag clones
 * @param  {[Boolean]} elementsInserted  Whether the multi-drag elements are inserted
 * @param  {HTMLElement} rootEl
 */


function insertMultiDragClones(elementsInserted, rootEl) {
  for (var i in multiDragClones) {
    var target = rootEl.children[multiDragClones[i].sortableIndex + (elementsInserted ? Number(i) : 0)];

    if (target) {
      rootEl.insertBefore(multiDragClones[i], target);
    } else {
      rootEl.appendChild(multiDragClones[i]);
    }
  }
}

function removeMultiDragElements() {
  for (var i in multiDragElements) {
    if (multiDragElements[i] === dragEl$1) continue;
    multiDragElements[i].parentNode && multiDragElements[i].parentNode.removeChild(multiDragElements[i]);
  }
}

Sortable.mount(new AutoScrollPlugin());
Sortable.mount(Remove, Revert);

/* harmony default export */ __webpack_exports__["default"] = (Sortable);



/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,