/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/src/editor/backend/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/src/editor/backend/codegeneration.js":
/*!*************************************************!*\
  !*** ./js/src/editor/backend/codegeneration.js ***!
  \*************************************************/
/*! exports provided: generateSectionCode, editableContentCodeGeneration, codeGenerationInitJS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateSectionCode", function() { return generateSectionCode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editableContentCodeGeneration", function() { return editableContentCodeGeneration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "codeGenerationInitJS", function() { return codeGenerationInitJS; });
/*********************************
 *
 * = CODE GENERATION =
 *
 * - dslc_save_composer ( Save the Page Changes )
 * - dslc_save_draft_composer ( Save the changes as draft, not publish )
 * - dslc_generate_code ( Generates Page's LC data )
 * - generateSectionCode ( Generate LC data for a specific row/section )
 * - dslca_gen_content_for_search ( Generate Readable Content For Search )
 *
 ***********************************/

/**
 * CODE GENERATION - Save Page Changes
 */

var _this = undefined;

function dslc_save_composer() {
  if (window.dslcDebug) console.log('dslc_save_composer');
  /**
   * Before saving code via ajax
   * refresh the page source in a hidden #dslca-code
   */

  window.dslc_generate_code(); // Generate content for search

  dslca_gen_content_for_search(); // Vars

  var composerCode = jQuery('#dslca-code').val(),
      contentForSearch = jQuery('#dslca-content-for-search').val(),
      postID = jQuery('.dslca-container').data('post-id'); // Apply class to body to know saving is in progress

  jQuery('body').addClass('dslca-saving-in-progress'); // Replace the check in publish button with a loading animation

  jQuery('.dslca-save-composer .dslca-icon').removeClass('dslc-icon-ok').addClass('dslc-icon-spin dslc-icon-spinner'); // Ajax call to save the new content

  jQuery.ajax({
    method: 'POST',
    type: 'POST',
    url: DSLCAjax.ajaxurl,
    data: {
      action: 'dslc-ajax-save-composer',
      dslc: 'active',
      dslc_post_id: postID,
      dslc_code: composerCode,
      dslc_content_for_search: contentForSearch
    },
    timeout: 30000
  }).done(function (response) {
    // On success hide the publish button
    if (response.status == 'success') {
      jQuery('.dslca-save-composer').fadeOut(250);
      jQuery('.dslca-save-draft-composer').fadeOut(250); // Create new cache version after it's saved.

      jQuery('body').append('<iframe class="lbmn-cache-iframe" id="lbmn-cache-iframe-' + postID + '" src="' + DSLCSiteData.siteurl + '/?p=' + postID + '" ></iframe>');
      jQuery('.lbmn-cache-iframe').each(function (index, el) {
        jQuery(el).load(function () {
          jQuery(el).remove(); // Cache built at this point. Remove iframe.
        });
      }); // On fail show an alert message
    } else {
      alert('Something went wrong, please try to save again. Are you sure to make any changes? Error Code: ' + response.status);
    }
  }).fail(function (response) {
    if (response.statusText == 'timeout') {
      alert('The request timed out after 30 seconds. Server do not respond in time. Please try again.');
    } else {
      alert('Something went wrong. Please try again. Error Code: ' + response.statusText);
    }
  }).always(function (reseponse) {
    // Replace the loading animation with a check icon
    jQuery('.dslca-save-composer .dslca-icon').removeClass('dslc-icon-spin dslc-icon-spinner').addClass('dslc-icon-ok'); // Remove the class previously added so we know saving is finished

    jQuery('body').removeClass('dslca-saving-in-progress');
  });
}
/**
 * CODE GENERATION - Save Draft
 */


function dslc_save_draft_composer() {
  if (window.dslcDebug) console.log('dslc_save_draft_composer'); // Vars

  var composerCode = jQuery('#dslca-code').val(),
      postID = jQuery('.dslca-container').data('post-id'); // Apply class to body to know saving is in progress

  jQuery('body').addClass('dslca-saving-in-progress'); // Replace the check in publish button with a loading animation

  jQuery('.dslca-save-draft-composer .dslca-icon').removeClass('dslc-icon-ok').addClass('dslc-icon-spin dslc-icon-spinner'); // Ajax call to save the new content

  jQuery.post(DSLCAjax.ajaxurl, {
    action: 'dslc-ajax-save-draft-composer',
    dslc: 'active',
    dslc_post_id: postID,
    dslc_code: composerCode
  }, function (response) {
    // Replace the loading animation with a check icon
    jQuery('.dslca-save-draft-composer .dslca-icon').removeClass('dslc-icon-spin dslc-icon-spinner').addClass('dslc-icon-save'); // On success hide the publish button

    if (response.status == 'success') {
      jQuery('.dslca-save-draft-composer').fadeOut(250); // On fail show an alert message
    } else {
      alert('Something went wrong, please try to save again.');
    } // Remove the class previously added so we know saving is finished


    jQuery('body').removeClass('dslca-saving-in-progress');
  });
}
/**
 * CODE GENERATION - Generate LC Data
 * @param section is not required. If no parameter provided function generates
 */


window.dslc_generate_code = function () {
  if (window.dslcDebug) console.log('dslc_generate_code'); // Vars

  var moduleCode = '',
      module_size,
      composerCode = '',
      pageCodeInJson = '',
      maxPerRow = 12,
      maxPerRowA = 12,
      currPerRow = 0,
      currPerRowA = 0,
      modulesAreaSize,
      modulesArea,
      modulesAreaLastState,
      modulesAreaFirstState,
      modulesSection,
      modulesSectionAtts = '',
      modulesSectionJson;
  /**
   * Go through module areas (empty or not empty)
   * TODO: Optimize code to go though the section/area needed only,
   * not the whole page.
   */

  jQuery('#dslc-main .dslc-modules-area', LiveComposer.Builder.PreviewAreaDocument).each(function () {
    if (jQuery('.dslc-module-front', this).length) {
      jQuery(this).removeClass('dslc-modules-area-empty').addClass('dslc-modules-area-not-empty');
      jQuery('.dslca-no-content', this).hide();
    } else {
      jQuery(this).removeClass('dslc-modules-area-not-empty').addClass('dslc-modules-area-empty');
      jQuery('.dslca-no-content:not(:visible)', this).show().css({
        '-webkit-animation-name': 'dslcBounceIn',
        '-moz-animation-name': 'dslcBounceIn',
        'animation-name': 'dslcBounceIn',
        'animation-duration': '0.6s',
        '-webkit-animation-duration': '0.6s',
        padding: 0
      }).animate({
        padding: '35px 0'
      }, 300);
    }
  });
  /**
   * Go through each row (empty or not empty)
   */

  jQuery('#dslc-main .dslc-modules-section', LiveComposer.Builder.PreviewAreaDocument).each(function () {
    modulesSection = jQuery(this);
    modulesSectionJson = generateSectionCode(modulesSection); // Update JSON in hidden text area with updated code.

    modulesSection.find('.dslca-section-code').val(modulesSectionJson); // Add row code into the the whole page code.

    pageCodeInJson = pageCodeInJson + modulesSectionJson + ','; // Close row ( section ) shortcode
    // composerCode = composerCode + '[/dslc_modules_section] ';
  }); // Remove the last comma in the code.

  pageCodeInJson = pageCodeInJson.slice(0, -1); // pageCodeInJson = pageCodeInJson;

  pageCodeInJson = '[' + pageCodeInJson + ']'; // Apply the new code values to the setting containers

  jQuery('#dslca-code').val(pageCodeInJson);
  jQuery('#dslca-export-code').val(pageCodeInJson);
};
/**
 * CODE GENERATION - Generate LC Data for Section
 *
 * @param  {jQuery Object} theModulesSection jQuery element for the section to process
 * @return {String}                   			JSON code for the section
 */
// ex. dslc_generate_section_code


var generateSectionCode = function generateSectionCode(theModulesSection) {
  if (window.dslcDebug) console.log('generateSectionCode'); // Vars

  var moduleCode = '',
      module_size,
      composerCode = '',
      pageCodeInJson = '',
      maxPerRow = 12,
      maxPerRowA = 12,
      currPerRow = 0,
      currPerRowA = 0,
      modulesAreaSize,
      modulesArea,
      modulesAreaLastState,
      modulesAreaFirstState,
      modulesSection,
      modulesSectionAtts = '',
      modulesSectionJsonString = '',
      modulesSectionJson;
  modulesSection = theModulesSection; // Update dslc-modules-section-(not)empty classes

  if (jQuery('.dslc-modules-area', modulesSection).length) {
    modulesSection.removeClass('dslc-modules-section-empty').addClass('dslc-modules-section-not-empty');
  } else {
    modulesSection.removeClass('dslc-modules-section-not-empty').addClass('dslc-modules-section-empty');
  } // Remove last and first classes from module areas and modules


  jQuery('.dslc-modules-area.dslc-last-col, .dslc-modules-area.dslc-first-col', _this).removeClass('dslc-last-col dslc-first-col');
  jQuery('.dslc-module-front.dslc-last-col, .dslc-module-front.dslc-first-col', _this).removeClass('dslc-last-col dslc-first-col'); // Vars

  currPerRowA = 0; // Get current JSON.

  modulesSectionJsonString = modulesSection.find('.dslca-section-code').val();
  modulesSectionJson = JSON.parse(modulesSectionJsonString); // Generate attributes for the row shortcode

  modulesSectionAtts = '';
  jQuery('.dslca-modules-section-settings input', modulesSection).each(function () {
    var currentInput = jQuery(this);
    var currentAttrKey = currentInput.data('id');
    var currentAttrVal = currentInput.val(); // Update hidden text fields with row attributes.

    modulesSectionAtts = modulesSectionAtts + currentAttrKey + '="' + currentAttrVal + '" '; // Update JSON object.

    modulesSectionJson[currentAttrKey] = currentAttrVal;
  }); // Delete attribute 'give_new_id'.
  // It supposed to be used only once and by this time it was already applied.

  if (undefined !== modulesSectionJson['give_new_id']) {
    delete modulesSectionJson['give_new_id'];
  } // Prepare place for module areas.


  modulesSectionJson['content'] = []; // Open the module section ( row ) shortcode
  // composerCode = composerCode + '[dslc_modules_section ' + modulesSectionAtts + '] ';

  /**
   * Go through each column of current row
   */

  jQuery('.dslc-modules-area', modulesSection).each(function () {
    // Reset width counter for modules
    currPerRow = 0; // Vars

    modulesArea = jQuery(this);
    modulesAreaSize = parseInt(modulesArea.data('size'));
    modulesAreaLastState = 'no';
    modulesAreaFirstState = 'no'; // Increment area column counter

    currPerRowA += modulesAreaSize;
    jQuery(this).removeClass('dslc-first-col');
    jQuery(this).removeClass('dslc-last-col'); // If area column counter same as maximum

    if (currPerRowA == maxPerRowA) {
      // Apply classes to current and next column
      jQuery(this).addClass('dslc-last-col').next('.dslc-modules-area').addClass('dslc-first-col'); // Reset area column counter

      currPerRowA = 0; // Set shortcode's "last" attribute to "yes"

      modulesAreaLastState = 'yes'; // If area column counter bigger than maximum
    } else if (currPerRowA > maxPerRowA) {
      // Apply classes to current and previous column
      jQuery(this).removeClass('dslc-last-col').addClass('dslc-first-col'); // Set area column counter to the size of the current area

      currPerRowA = modulesAreaSize; // Set shortcode's "first" attribute to yes

      modulesAreaFirstState = 'yes';
    } // If area column counter same as current area size


    if (currPerRowA == modulesAreaSize) {
      // Set shortcode's "first" attribute to yes
      modulesAreaFirstState = 'yes'; // Apply classes to current and previous column

      jQuery(this).removeClass('dslc-last-col').addClass('dslc-first-col');
    } // Open the modules area ( area ) shortcode
    // composerCode = composerCode + '[dslc_modules_area last="' + modulesAreaLastState + '" first="' + modulesAreaFirstState + '" size="' + modulesAreaSize + '"] ';


    var moduleAreaJSON = '{"element_type":"module_area","last":"' + modulesAreaLastState + '","first":"' + modulesAreaFirstState + '","size":"' + modulesAreaSize + '"}'; // pageCodeInJson = pageCodeInJson +  moduleAreaJSON + ',';

    moduleAreaJSON = JSON.parse(moduleAreaJSON); // Delete attribute 'give_new_id'.
    // It supposed to be used only once and by this time it was already applied.

    if (undefined !== moduleAreaJSON['give_new_id']) {
      delete moduleAreaJSON['give_new_id'];
    }

    moduleAreaJSON.content = [];
    /**
     * Go through each module of current area
     */

    jQuery('.dslc-module-front', modulesArea).each(function () {
      var dslc_module = jQuery(this); // Vars

      module_size = parseInt(dslc_module[0].getAttribute('data-dslc-module-size'));
      var moduleLastState = 'no';
      var moduleFirstState = 'no';
      jQuery(this).removeClass('dslc-first-col');
      jQuery(this).removeClass('dslc-last-col'); // Increment modules column counter

      currPerRow += module_size; // If modules column counter same as maximum

      if (currPerRow == maxPerRow) {
        // Add classes to current and next module
        jQuery(this).addClass('dslc-last-col');
        jQuery(this).next('.dslc-module-front').addClass('dslc-first-col'); // Reset modules column counter

        currPerRow = 0; // Set shortcode's "last" state to "yes"

        moduleLastState = 'yes'; // Set shorcode's "first" state to "yes"

        moduleFirstState = 'yes'; // If modules column counter bigger than maximum
      } else if (currPerRow > maxPerRow) {
        // Add classes to current and previous module
        jQuery(this).removeClass('dslc-last-col').addClass('dslc-first-col'); // Set modules column counter to the size of current module

        currPerRow = module_size; // Set shortcode's "first" state to "yes"

        moduleFirstState = 'yes';
      } // If modules column counter same as current module size


      if (currPerRow == module_size) {
        // Set shortcode's "first" attribute to yes
        moduleFirstState = 'yes'; // Apply classes to current and previous column

        jQuery(this).removeClass('dslc-last-col').addClass('dslc-first-col');
      }

      try {
        // Get module's LC data
        moduleCode = dslc_module[0].querySelector('.dslca-module-code').value;
      } catch (err) {
        console.info('No DSLC code found in module: ' + dslc_module[0].getAttribute('id'));
      }

      if ('' !== moduleCode) {
        // Add the module shortcode containing the data
        // composerCode = composerCode + '[dslc_module last="' + moduleLastState + '"]' + moduleCode + '[/dslc_module] ';
        var moduleCodeJSON = JSON.parse(moduleCode); // Add idicator for the last module in the row.

        moduleCodeJSON.last = moduleLastState; // RAW CODE CLEANUP: Clean the module code from keys with empty values.

        jQuery.each(moduleCodeJSON, function (index, el) {
          if (false === el || '' === el) {
            delete moduleCodeJSON[index];
          }

          if ('content' === index) {
            moduleCodeJSON[index] = el.replace(/\\'/g, "'");
          }

          if ('give_new_id' === index) {
            delete moduleCodeJSON[index];
          }
        }); // Put optimized code back into the hidden textarea.

        dslc_module[0].querySelector('.dslca-module-code').value = JSON.stringify(moduleCodeJSON); // Add the module JSON as array item

        moduleAreaJSON['content'].push(moduleCodeJSON);
      } // Fix bug with modules duplication if broken module saved.


      moduleCode = '';
    });
    modulesSectionJson['content'].push(moduleAreaJSON); // Close area shortcode
    // composerCode = composerCode + '[/dslc_modules_area] ';
  });
  var generatedCode = JSON.stringify(modulesSectionJson);
  return generatedCode;
};
/**
 * CODE GENERATION - Document Ready
 */

var setEventListeners = function setEventListeners() {
  /**
   * Hook - Save Page
   */
  jQuery(document).on('click', '.dslca-save-composer-hook', function (e) {
    e.preventDefault(); // If some saving action not already in progress

    if (!jQuery('body').hasClass('dslca-module-saving-in-progress') && !jQuery('body').hasClass('dslca-saving-in-progress')) {
      // Call the function to save
      dslc_save_composer();
    }
  });
  /**
   * Hook - Save Draft
   */

  jQuery(document).on('click', '.dslca-save-draft-composer-hook', function (e) {
    e.preventDefault(); // If some saving action not already in progress

    if (!jQuery('body').hasClass('dslca-module-saving-in-progress') && !jQuery('body').hasClass('dslca-saving-in-progress')) {
      // Call the function to save
      dslc_save_draft_composer();
    }
  });
};
/**
* Other - Generate Readable Content For Search
*/


function dslca_gen_content_for_search() {
  if (window.dslcDebug) console.log('dslca_gen_content_for_search'); // Vars

  var holder = document.getElementById('dslca-content-for-search');

  if (null === holder) {
    return;
  }

  var prevContent = holder.value;
  var content = ''; // Go through each content element

  var elements = LiveComposer.Builder.PreviewAreaWindow.document.querySelectorAll('#dslc-main .dslc-module-front [data-exportable-content]');

  if (undefined !== elements) {
    Array.prototype.forEach.call(elements, function (el, i) {
      // el - current DOM element, i – counter
      var extracted_html_code;

      if (el.getAttribute('data-exportable-content') !== '') {
        var wrapper_tag = el.getAttribute('data-exportable-content');
        extracted_html_code = '<' + wrapper_tag + '>' + el.innerHTML + '</' + wrapper_tag + '>';
      } else {
        extracted_html_code = el.innerHTML;
      }

      if (extracted_html_code !== null) {
        content += extracted_html_code.replace(/\s+/g, ' ').trim() + '\n';
      }
    });
  } // Set the value of the content field


  holder.value = content; // Used to show the publish button for pages made before this feature

  if (prevContent !== content) {
    window.dslc_show_publish_button();
  }
}
/**
 * Other - Generate code of editable content
 */


var editableContentCodeGeneration = function editableContentCodeGeneration(dslcField) {
  if (window.dslcDebug) console.log('editableContentCodeGeneration'); // In some rare cases we have the next error:
  // TypeError: undefined is not an object (evaluating 'dslcField.html().trim()...')

  if (undefined === dslcField) {
    return false;
  }

  var dslcModule = dslcField.closest('.dslc-module-front');
  var moduleEl = dslcModule[0];
  var dslcContent = dslcField.html().trim().replace(/<textarea/g, '<lctextarea').replace(/<\/textarea/g, '</lctextarea');
  var dslcFieldID = dslcField.data('id'); // Update module ID in raw base64 code (dslc_code) of the module

  LiveComposer.Utils.update_module_property_raw(moduleEl, dslcFieldID, dslcContent); // dslcFieldID = 'content'
  // jQuery('.dslca-module-option-front[data-id="' + dslcFieldID + '"]', dslcModule).val( dslcContent );
};
var codeGenerationInitJS = function codeGenerationInitJS() {
  setEventListeners();
};

/***/ }),

/***/ "./js/src/editor/backend/dragndrop.js":
/*!********************************************!*\
  !*** ./js/src/editor/backend/dragndrop.js ***!
  \********************************************/
/*! exports provided: dragAndDropInit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dragAndDropInit", function() { return dragAndDropInit; });
/* harmony import */ var _module_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./module.js */ "./js/src/editor/backend/module.js");
/* harmony import */ var sortablejs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sortablejs */ "./node_modules/sortablejs/modular/sortable.esm.js");
/**
 * UI - General - Initiate Drag and Drop Functonality
 */


var dragAndDropInit = function dragAndDropInit() {
  var modulesSection, modulesArea, moduleID, moduleOutput; // Drag and Drop for module icons from the list of modules

  var modules_list = jQuery('.dslca-modules .dslca-section-scroller-content'); // Groups that can hold modules
  // jQuery(modules_list).each(function (i,e) {

  if (modules_list.length == 0) {
    modules_list = [document.createElement('div')];
  }

  var modules_list_sortable = sortablejs__WEBPACK_IMPORTED_MODULE_1__["default"].create(modules_list[0], {
    sort: false,
    // do not allow sorting inside the list of modules
    group: {
      name: 'modules',
      pull: 'clone',
      put: false
    },
    animation: 150,
    handle: '.dslca-module',
    draggable: '.dslca-module',
    // ghostClass: 'dslca-module-placeholder',
    chosenClass: 'dslca-module-dragging',
    scroll: true,
    // or HTMLElement
    scrollSensitivity: 150,
    // px, how near the mouse must be to an edge to start scrolling.
    scrollSpeed: 15,
    // px
    setData: function setData(dataTransfer, dragEl) {
      //dragEl – contains html of the draggable element like:
      //<div class="dslca-module dslca-scroller-item dslca-origin dslca-origin-General" data-id="DSLC_Button" data-origin="General" draggable="false" style="">
      // dataTransfer.setData('Text', dragEl.textContent);
      dataTransfer.setData(LiveComposer.Utils.msieversion() !== false ? 'Text' : 'text/html', dragEl.innerHTML);
    },
    // dragging started
    onStart: function onStart(
    /**Event*/
    evt) {
      evt.oldIndex; // element index within parent
      // jQuery( '.dslc-modules-area' ).sortable( "refreshPositions" );

      jQuery('body').removeClass('dslca-new-module-drag-not-in-progress').addClass('dslca-new-module-drag-in-progress');
      jQuery('body', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-new-module-drag-not-in-progress').addClass('dslca-new-module-drag-in-progress');
      jQuery('#dslc-header').addClass('dslca-header-low-z-index');
    },
    // dragging ended
    onEnd: function onEnd(
    /**Event*/
    evt) {
      evt.oldIndex; // element's old index within parent

      evt.newIndex; // element's new index within parent

      var itemEl = evt.item; // dragged HTML

      evt.preventDefault(); // evt.stopPropagation();
      //return false;
      // Prevent drop into modules listing

      if (jQuery(itemEl).closest('.dslca-section-scroller-content').length > 0) return false;
      jQuery('.dslca-options-hovered', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-options-hovered'); // Vars

      modulesArea = jQuery(itemEl.parentNode); //jQuery(this);

      moduleID = itemEl.dataset.id; // get value of data-id attr.

      window.dslc_generate_code();

      if (moduleID == 'DSLC_M_A' || jQuery('body').hasClass('dslca-module-drop-in-progress') || modulesArea.closest('#dslc-header').length || modulesArea.closest('#dslc-footer').length) {// nothing
      } else {
        jQuery('body').addClass('dslca-module-drop-in-progress'); // Add padding to modules area

        /*
        if ( modulesArea.hasClass('dslc-modules-area-not-empty') )
        	modulesArea.animate({ paddingBottom : 50 }, 150);
        */
        // TODO: Optimize expensive ajax call in this function!
        // Load Output

        Object(_module_js__WEBPACK_IMPORTED_MODULE_0__["moduleOutputDefault"])(moduleID, function (response) {
          // Append Content
          moduleOutput = response.output; // Remove extra padding from area
          // modulesArea.css({ paddingBottom : 0 });
          // Add output
          // TODO: optimize jQuery in the string below

          var dslcJustAdded = LiveComposer.Builder.Helpers.insertModule(moduleOutput, jQuery('.dslca-module', modulesArea));
          setTimeout(function () {
            LiveComposer.Builder.PreviewAreaWindow.dslc_masonry();
            jQuery('body').removeClass('dslca-module-drop-in-progress');
          }, 700); // "Show" no content text // Not used anymore?
          // jQuery('.dslca-no-content-primary', modulesArea ).css({ opacity : 1 });
          // "Show" modules area management

          jQuery('.dslca-modules-area-manage', modulesArea).css({
            visibility: 'visible'
          }); // Generete

          LiveComposer.Builder.PreviewAreaWindow.dslc_carousel();
          LiveComposer.Builder.PreviewAreaWindow.dslc_tabs();
          LiveComposer.Builder.PreviewAreaWindow.dslc_init_accordion();
          window.dslc_generate_code(); // Show publish

          window.dslc_show_publish_button(); // LiveComposer.Builder.UI.initInlineEditors();
        }); // Loading animation
        // Show loader – Not used anymore.
        // jQuery('.dslca-module-loading', modulesArea).show();
        // Change module icon to the spinning loader.

        jQuery(itemEl).find('.dslca-icon').attr('class', '').attr('class', 'dslca-icon dslc-icon-refresh dslc-icon-spin'); // Hide no content text // Not used anymore?
        // jQuery('.dslca-no-content-primary', modulesArea).css({ opacity : 0 });
        // Hide modules area management

        jQuery('.dslca-modules-area-manage', modulesArea).css({
          visibility: 'hidden'
        }); // Animate loading

        /*
        var randomLoadingTime = Math.floor(Math.random() * (100 - 50 + 1) + 50) * 100;
        jQuery('.dslca-module-loading-inner', modulesArea).css({ width : 0 }).animate({
        	width : '100%'
        }, randomLoadingTime, 'linear' );
        */
      }

      LiveComposer.Builder.UI.stopScroller();
      jQuery('body').removeClass('dslca-new-module-drag-in-progress').addClass('dslca-new-module-drag-not-in-progress');
      jQuery('body', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-new-module-drag-in-progress').addClass('dslca-new-module-drag-not-in-progress');
      jQuery('#dslc-header').removeClass('dslca-header-low-z-index');
    },
    // Element is dropped into the list from another list
    onAdd: function onAdd(
    /**Event*/
    evt) {
      var itemEl = evt.item; // dragged HTMLElement

      evt.from; // previous list
      // + indexes from onEnd
      // evt.preventDefault();
    },
    // Changed sorting within list
    onUpdate: function onUpdate(
    /**Event*/
    evt) {
      var itemEl = evt.item; // dragged HTMLElement
      // + indexes from onEnd

      window.dslc_show_publish_button(); // evt.preventDefault();
    },
    // Called by any change to the list (add / update / remove)
    onSort: function onSort(
    /**Event*/
    evt) {
      // same properties as onUpdate
      evt.preventDefault(); // evt.stopPropagation(); return false;
    },
    // Element is removed from the list into another list
    onRemove: function onRemove(
    /**Event*/
    evt) {// same properties as onUpdate
    },
    // Attempt to drag a filtered element
    onFilter: function onFilter(
    /**Event*/
    evt) {
      var itemEl = evt.item; // HTMLElement receiving the `mousedown|tapstart` event.
    },
    // Event when you move an item in the list or between lists
    onMove: function onMove(
    /**Event*/
    evt) {
      // Example: http://jsbin.com/tuyafe/1/edit?js,output
      evt.dragged; // dragged HTMLElement

      evt.draggedRect; // TextRectangle {left, top, right и bottom}

      evt.related; // HTMLElement on which have guided

      evt.relatedRect; // TextRectangle
      // return false; — for cancel

      jQuery(evt.to).addClass('dslca-options-hovered');
    }
  });
};

/***/ }),

/***/ "./js/src/editor/backend/events.js":
/*!*****************************************!*\
  !*** ./js/src/editor/backend/events.js ***!
  \*****************************************/
/*! exports provided: eventsInit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eventsInit", function() { return eventsInit; });
/**
 * The place to do all the events bindings.
 */
var eventsInit = function eventsInit() {
  // Parent page events.
  document.addEventListener('click', function (event) {
    if (event.target.matches('[data-event="modal-wysiwyg-cancel"]')) {
      // Create a new "Modal Cancel" event
      var modalWysiwygCancel = new CustomEvent('modalWysiwygCancel', {
        detail: event.target
      });
      document.dispatchEvent(modalWysiwygCancel);
    }

    if (event.target.matches('[data-event="modal-wysiwyg-confirm"]')) {
      // Create a new "Modal Cancel" event
      var modalWysiwygConfirm = new CustomEvent('modalWysiwygConfirm', {
        detail: event.target
      });
      document.dispatchEvent(modalWysiwygConfirm);
    }
  }, false); // Preview iframe events.

  LiveComposer.Builder.PreviewAreaWindow.document.addEventListener('click', function (event) {
    event.preventDefault();

    if (event.target.matches('[data-event="module-edit"]')) {
      // Create a new "Open Module Editing" event
      var moduleEdit = new CustomEvent('moduleEdit', {
        detail: event.target
      });
      document.dispatchEvent(moduleEdit);
    }

    if (event.target.matches('[data-event="module-duplicate"]')) {
      // Create a new "Duplicate Module" event
      var moduleDuplicate = new CustomEvent('moduleDuplicate', {
        detail: event.target
      });
      document.dispatchEvent(moduleDuplicate);
    }

    if (event.target.matches('[data-event="module-delete"]')) {
      // Create a new "Delete Module" event
      var moduleDelete = new CustomEvent('moduleDelete', {
        detail: event.target
      });
      document.dispatchEvent(moduleDelete);
    }

    if (event.target.matches('.dslca-change-width-module-options [data-size]')) {
      // Create a new "Change Module Width" event
      var moduleChangeWidth = new CustomEvent('moduleChangeWidth', {
        detail: event.target
      });
      document.dispatchEvent(moduleChangeWidth);
    }

    if (event.target.matches('[data-event="wysiwyg-edit"]')) {
      // Create a new "Module WYSIWYG Editing" event
      var wysiwygEdit = new CustomEvent('wysiwygEdit', {
        detail: event.target
      });
      document.dispatchEvent(wysiwygEdit);
    }
  }, false);
};

/***/ }),

/***/ "./js/src/editor/backend/index.js":
/*!****************************************!*\
  !*** ./js/src/editor/backend/index.js ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _templates_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./templates.js */ "./js/src/editor/backend/templates.js");
/* harmony import */ var _uigeneral_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./uigeneral.js */ "./js/src/editor/backend/uigeneral.js");
/* harmony import */ var _sectionscontainer_class_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sectionscontainer.class.js */ "./js/src/editor/backend/sectionscontainer.class.js");
/* harmony import */ var _settings_panel_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./settings.panel.js */ "./js/src/editor/backend/settings.panel.js");
/* harmony import */ var _sections_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sections.js */ "./js/src/editor/backend/sections.js");
/* harmony import */ var _dragndrop_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dragndrop.js */ "./js/src/editor/backend/dragndrop.js");
/* harmony import */ var _codegeneration_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./codegeneration.js */ "./js/src/editor/backend/codegeneration.js");
/* harmony import */ var _scroller_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./scroller.js */ "./js/src/editor/backend/scroller.js");
/* harmony import */ var _utils_class_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.class.js */ "./js/src/editor/backend/utils.class.js");
/* harmony import */ var _modalwindow_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modalwindow.js */ "./js/src/editor/backend/modalwindow.js");
/* harmony import */ var _module_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./module.js */ "./js/src/editor/backend/module.js");
/* harmony import */ var _presets_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./presets.js */ "./js/src/editor/backend/presets.js");
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./events.js */ "./js/src/editor/backend/events.js");
/**
 * Main builder file
 */













var dslcDebug = false; // dslcDebug = true;
// Global Plugin Object

window.LiveComposer = {
  Builder: {
    Elements: {},
    UI: {},
    Actions: {},
    Flags: {},
    PreviewFrame: {},
    Helpers: {}
  },
  Production: {},
  Utils: {}
};

(function () {
  LiveComposer.Builder.Flags = {
    windowScroller: false,
    panelOpened: false,
    // Settings panel opened
    uiHidden: false,
    // ex composer-hidden
    modalOpen: false,
    // Used to prevent multiple code generation when
    // cancelling row edits
    generate_code_after_row_changed: true
  };
  LiveComposer.Builder.Actions = {
    postponed_actions_queue: {},
    add_postponed_action: function add_postponed_action(action_name) {
      if (action_name === undefined) {
        return;
      }

      if (isNaN(this.postponed_actions_queue[action_name])) {
        this.postponed_actions_queue[action_name] = 0;
      }

      this.postponed_actions_queue[action_name] += 1;
    },
    release_postponed_actions: function release_postponed_actions() {
      var self = this;
      jQuery.each(this.postponed_actions_queue, function (index, value) {
        if (1 < value) {
          self.postponed_actions_queue[index] -= 1;
        } else if (1 == value) {
          window[index](); // Run function with action name

          self.postponed_actions_queue[index] -= 1;
        }
      });
    },
    // LiveComposer.Builder.Actions.optionsChanged() - if calling from parent.
    // parent.LiveComposer.Builder.Actions.optionsChanged() - if calling from iframe.
    optionsChanged: function optionsChanged() {
      window.dslc_show_publish_button();
    }
    /**
     * Inserts module fixing inline scripts bug
     *
     * @param {string} moduleHTML
     * @param {string} afterObject after what module should be inserted
     *
     * @return {DOM} inserted object
     */

  };

  LiveComposer.Builder.Helpers.insertModule = function (moduleHTML, afterObject) {
    var newModule = jQuery(moduleHTML),
        afterObject = jQuery(afterObject);
    var scripts = [];
    newModule.find('script').each(function () {
      scripts.push(this.innerHTML);
      this.parentNode.removeChild(this);
    }); // Insert 'updated' module output after module we are editing.
    // && Delete 'old' instance of the module we are editing.

    afterObject.after(newModule).remove();
    scripts.forEach(function (item) {
      var script = LiveComposer.Builder.PreviewAreaDocument[0].createElement('script');
      script.innerHTML = item;
      script.type = 'text/javascript';
      LiveComposer.Builder.PreviewAreaDocument[0].getElementById(newModule[0].id).appendChild(script);
    });
    scripts = null;
    afterObject = null;
    return newModule;
  };
})();
/** Wait till tinyMCE loaded */


window.previewAreaTinyMCELoaded = function (windowObj) {
  LiveComposer.Builder.PreviewAreaWindow = windowObj;
  LiveComposer.Builder.PreviewAreaDocument = jQuery(windowObj.document); // Disable WP admin bar in editing mode

  jQuery('#wpadminbar', LiveComposer.Builder.PreviewAreaDocument).remove(); // LiveComposer.Builder.UI.initInlineEditors();

  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_1__["fixContenteditable"])();
  Object(_templates_js__WEBPACK_IMPORTED_MODULE_0__["templatesPanelInit"])();
  Object(_settings_panel_js__WEBPACK_IMPORTED_MODULE_3__["settingsPanelInit"])();
  Object(_sections_js__WEBPACK_IMPORTED_MODULE_4__["sectionsInit"])();
  var mainDraggable = LiveComposer.Builder.PreviewAreaDocument.find("#dslc-main").eq(0)[0];
  new _sectionscontainer_class_js__WEBPACK_IMPORTED_MODULE_2__["CSectionsContainer"](mainDraggable);
  jQuery(document).trigger('editorFrameLoaded');
  Object(_dragndrop_js__WEBPACK_IMPORTED_MODULE_5__["dragAndDropInit"])();
  Object(_codegeneration_js__WEBPACK_IMPORTED_MODULE_6__["codeGenerationInitJS"])();
  window.dslc_generate_code(); // Catch keypress events (from both parent and iframe) to add keyboard support

  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_1__["keypressEvents"])();
  Object(_scroller_js__WEBPACK_IMPORTED_MODULE_7__["initPreviewAreaScroller"])();
  Object(_modalwindow_js__WEBPACK_IMPORTED_MODULE_9__["modalwindowInitJS"])();
  Object(_module_js__WEBPACK_IMPORTED_MODULE_10__["moduleInitJS"])();
  Object(_utils_class_js__WEBPACK_IMPORTED_MODULE_8__["untilsInitJs"])();
  Object(_presets_js__WEBPACK_IMPORTED_MODULE_11__["presetsInit"])();
  Object(_events_js__WEBPACK_IMPORTED_MODULE_12__["eventsInit"])();
}; // Disable the prompt ( are you sure ) on refresh


window.onbeforeunload = function () {
  return;
};

/***/ }),

/***/ "./js/src/editor/backend/modalwindow.class.js":
/*!****************************************************!*\
  !*** ./js/src/editor/backend/modalwindow.class.js ***!
  \****************************************************/
/*! exports provided: CModalWindow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CModalWindow", function() { return CModalWindow; });
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Modal Window Class file
 */

/**
 * Shows modal window
 *
 * @param {object} params
 * @params.title         {string} - modal window title
 * @params.content       {string}- modal window description
 * @params.confirm       {function} - modal window confirm action
 * @params.cancel        {function} - modal window cancel action
 * @params.cancel_title  {string} - modal window cancel title
 * @params.confirm_title {string} - modal window confirm title
 * @params.ok_title {string} - modal window OK title
 */
var CModalWindow = function CModalWindow(params) {
  if (_typeof(params) != 'object' || LiveComposer.Builder.Flags.modalOpen === true) return false;
  var self = this; // Show Modal Window

  var modalWindowWrap = '<div class="dslca-prompt-modal dslca-prompt-modal-active">' + '<div class="dslca-prompt-modal-content"><div class="dslca-prompt-modal-msg">' + '<span class="dslca-prompt-modal-title">' + params.title + '</span>' + '<span class="dslca-prompt-modal-descr">' + params.content + '</span></div>';
  var modalWindowActions = '';

  if (params.confirm || params.cancel) {
    modalWindowActions = '<div class="dslca-prompt-modal-actions">' + '<a href="#" class="dslca-prompt-modal-confirm-hook"><span class="dslc-icon dslc-icon-ok">' + '</span>' + (params.confirm_title ? params.confirm_title : 'Confirm') + '</a><span class="dslca-prompt-modal-cancel-hook"><span class="dslc-icon dslc-icon-remove">' + '</span>' + (params.cancel_title ? params.cancel_title : 'Cancel') + '</span></div>';
  } else {
    modalWindowActions = '<div class="dslca-prompt-modal-actions">' + '<a href="#" class="dslca-prompt-modal-confirm-hook"><span class="dslc-icon dslc-icon-ok">' + '</span>' + (params.ok_title ? params.ok_title : 'OK') + '</a></div>';
  }

  modalWindowWrap += modalWindowActions + '</div>';
  modalWindowWrap = jQuery(modalWindowWrap);
  if (typeof params.confirm != 'function') params.confirm = function () {};
  if (typeof params.cancel != 'function') params.cancel = function () {}; // Confirm handler (function)

  modalWindowWrap.find('.dslca-prompt-modal-confirm-hook').click(function (e) {
    e.stopPropagation();
    modalWindowWrap.find('.dslca-prompt-modal-content').animate({
      top: '55%'
    }, 400);
    modalWindowWrap.animate({
      opacity: 0
    }, 400, function () {
      params.confirm();
      LiveComposer.Builder.Flags.modalOpen = false;
      jQuery(this).remove(); // – moved here as it prevent some JS to get value on time
    });
    return false;
  }); // Cancel handler (function)

  modalWindowWrap.find('.dslca-prompt-modal-cancel-hook').click(function (e) {
    e.stopPropagation();
    modalWindowWrap.find('.dslca-prompt-modal-content').animate({
      top: '55%'
    }, 400);
    modalWindowWrap.animate({
      opacity: 0
    }, 400, function () {
      jQuery(this).remove();
      LiveComposer.Builder.Flags.modalOpen = false;
      params.cancel();
    });
    return false;
  });
  modalWindowWrap.hide();
  jQuery("body").append(modalWindowWrap);
  modalWindowWrap.css({
    opacity: 0
  }).show().animate({
    opacity: 1
  }, 400); // Animate modal

  modalWindowWrap.find('.dslca-prompt-modal-content').css({
    top: '55%'
  }).animate({
    top: '50%'
  }, 400);
  LiveComposer.Builder.Flags.modalOpen = true;
};

/***/ }),

/***/ "./js/src/editor/backend/modalwindow.js":
/*!**********************************************!*\
  !*** ./js/src/editor/backend/modalwindow.js ***!
  \**********************************************/
/*! exports provided: hideModal, confirmClose, modalwindowInitJS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hideModal", function() { return hideModal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "confirmClose", function() { return confirmClose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modalwindowInitJS", function() { return modalwindowInitJS; });
/* harmony import */ var _codegeneration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codegeneration.js */ "./js/src/editor/backend/codegeneration.js");
/*********************************
 *
 * = UI - MODAL =
 * Note: Used for the templates save/export/import and icons
 *
 * - dslc_show_modal ( Show Modal )
 * - dslc_hide_modal ( Hide Modal )
 *
 ***********************************/

/**
 * MODAL - Show
 *
 * @param {Object} hook - Button that was clicked to open modal
 * @param {string} modal - CSS address of the modal, like '.modal-icons'
 */

function dslc_show_modal(hook, modal) {
  if (typeof dslcDebug !== 'undefined' && dslcDebug) console.log('dslc_show_modal');

  if (jQuery('.dslca-modal:visible').length) {
    // If a modal already visibile hide it
    hideModal('', jQuery('.dslca-modal:visible'));
  } // Vars


  var modal = jQuery(modal); // Calc popup height

  var containerHeight = jQuery('.dslca-container').height();
  modal.outerHide({
    clbk: function clbk() {
      hideModal('', jQuery('.dslca-modal:visible'));
    }
  }); // Vars ( Calc Offset )

  var position = jQuery(hook).position(),
      diff = modal.outerWidth() / 2 - hook.outerWidth() / 2,
      offset = position.left - diff; // Show Modal

  modal.css({
    left: offset
  });
  jQuery(".dslca-prompt-modal-custom").insertAfter(modal);

  if (jQuery(".dslca-prompt-modal-custom").length > 0) {
    jQuery(".dslca-prompt-modal-custom").fadeIn();
  }

  modal.addClass('dslca-modal-open').show(); // Animate Modal
  // modal.css({
  // '-webkit-animation-name' : 'dslcBounceIn',
  // '-moz-animation-name' : 'dslcBounceIn',
  // 'animation-name' : 'dslcBounceIn',
  // 'animation-duration' : '0.6s',
  // '-webkit-animation-duration' : '0.6s'
  // }).fadeIn(600);
}
/**
 * MODAL - Hide
 */
// ex. dslc_hide_modal


var hideModal = function hideModal(hook, modal) {
  if (typeof dslcDebug !== 'undefined' && dslcDebug) console.log('hideModal'); // Vars

  var modal = jQuery(modal); // Hide ( with animation )

  modal.outerHide('destroy');
  modal.hide();

  if (jQuery(".dslca-prompt-modal-custom").length > 0) {
    jQuery(".dslca-prompt-modal-custom").fadeOut();
  }

  modal.removeClass('dslca-modal-open');
  /*
  modal.css({
  	'-webkit-animation-name' : 'dslcBounceOut',
  	'-moz-animation-name' : 'dslcBounceOut',
  	'animation-name' : 'dslcBounceOut',
  	'animation-duration' : '0.6s',
  	'-webkit-animation-duration' : '0.6s'
  }).fadeOut(600);
  */
}; // Hide if clicked outside of modal

/*jQuery(document).mouseup(function (e) {
		var container = jQuery(".dslca-modal-open");

		if (!container.is(e.target) // if the target of the click isn't the container...
		&& container.has(e.target).length === 0) // ... nor a descendant of the container
		{
		container.hide();
		}
});*/

/**
 * MODAL - Document Ready
 */

jQuery(document).ready(function ($) {
  /**
   * Hook - Show Modal
   */
  jQuery(document).on('click', '.dslca-open-modal-hook', function (e) {
    e.preventDefault();
    var modal = jQuery(this).data('modal');
    dslc_show_modal(jQuery(this), modal);
  });
  /**
   * Hook - Hide Modal
   */

  jQuery(document).on('click', '.dslca-close-modal-hook', function (e) {
    e.preventDefault();

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      var modal = jQuery(this).data('modal');
      hideModal(jQuery(this), modal);
    }
  });
});
/*********************************
 *
 * 5) = UI - PROMPT MODAL =
 *
 * - dslc_js_confirm
 * - dslc_js_confirm_close
 *
 ***********************************/

function dslc_js_confirm(dslcID, dslcContent, dslcTarget) {
  if (typeof dslcDebug !== 'undefined' && dslcDebug) console.log('dslc_js_confirm'); // Add "active" class

  jQuery('.dslca-prompt-modal').addClass('dslca-prompt-modal-active'); // Add the ID of current event

  jQuery('.dslca-prompt-modal').data('id', dslcID);
  jQuery('.dslca-prompt-modal').data('target', dslcTarget); // Add modal content

  jQuery('.dslca-prompt-modal-msg').html(dslcContent); // Show modal

  jQuery('.dslca-prompt-modal').css({
    opacity: 0
  }).show().animate({
    opacity: 1
  }, 400); // Animate modal

  jQuery('.dslca-prompt-modal-content').css({
    top: '55%'
  }).animate({
    top: '50%'
  }, 400);
} // ex. dslc_js_confirm_close


var confirmClose = function confirmClose() {
  if (typeof dslcDebug !== 'undefined' && dslcDebug) console.log('dslc_js_confirm_close'); // Remove "active" class

  jQuery('.dslca-prompt-modal').removeClass('dslca-prompt-modal-active'); // Hide modal

  jQuery('.dslca-prompt-modal').animate({
    opacity: 0
  }, 400, function () {
    jQuery(this).hide();
    jQuery('.dslca-prompt-modal-cancel-hook').show();
    jQuery('.dslca-prompt-modal-confirm-hook').html('<span class="dslc-icon dslc-icon-ok"></span>' + DSLCString.str_confirm);
  });
  jQuery('.dslca-prompt-modal-content').animate({
    top: '55%'
  }, 400);
};
/**
 * Hook - Confirm on Enter, Cancel on Esc
 */

window.dslc_modal_keypress_events = function dslc_modal_keypress_events(e) {
  // Enter ( confirm )
  if (e.which == 13) {
    if (jQuery('.dslca-prompt-modal-active').length) {
      jQuery('.dslca-prompt-modal-confirm-hook').trigger('click');
    } // Escape ( cancel )

  } else if (e.which == 27) {
    if (jQuery('.dslca-prompt-modal-active').length) {
      jQuery('.dslca-prompt-modal-cancel-hook').trigger('click');
    }
  }
};
/**
 * UI - PROMPT MODAL - Document Ready
 */


jQuery(document).ready(function ($) {
  jQuery(document).on('click', '.dslca-prompt-modal-cancel-hook', function (e) {
    e.preventDefault();
    var dslcAction = jQuery('.dslca-prompt-modal').data('id');
    var dslcTarget = jQuery('.dslca-prompt-modal').data('target');

    if (dslcAction == 'edit_in_progress') {
      /// MOVED
      dslc_module_options_cancel_changes(function () {
        dslcTarget.trigger('click');
      });
    } else if (dslcAction == 'delete_module') {}

    confirmClose();
    jQuery('.dslca-prompt-modal').data('id', '');
  });
  jQuery(document).on('click', '.dslca-prompt-modal-confirm-hook', function (e) {
    e.preventDefault();
    var dslcAction = jQuery('.dslca-prompt-modal').data('id');
    var dslcTarget = jQuery('.dslca-prompt-modal').data('target');
    var closeAtEnd = true;

    if (dslcAction == 'edit_in_progress') {
      /// MOVED
      dslc_module_options_confirm_changes(function () {
        dslcTarget.trigger('click');
      });
    } else if (dslcAction == 'disable_lc') {
      window.location = dslcTarget;
    } else if ('delete_module' === dslcAction) {
      /// MOVED
      var module = dslcTarget.closest('.dslc-module-front');
      dslc_module_delete(module);
    } else if ('delete_modules_area' === dslcAction) {
      var modulesArea = dslcTarget.closest('.dslc-modules-area');
      var parentSectionContainer = modulesArea.closest('.dslc-modules-section-inner');
      dslc_modules_area_delete(modulesArea);
    } else if (dslcAction == 'delete_modules_section') {
      /// MOVED
      dslc_row_delete(dslcTarget.closest('.dslc-modules-section'));
    } else if (dslcAction == 'export_modules_section') {} else if (dslcAction == 'import_modules_section') {
      /// MOVED
      dslc_row_import(jQuery('.dslca-prompt-modal textarea').val());
      jQuery('.dslca-prompt-modal-confirm-hook span').css({
        opacity: 0
      });
      jQuery('.dslca-prompt-modal-confirm-hook .dslca-loading').show();
      closeAtEnd = false;
    }

    if (closeAtEnd) {
      confirmClose();
    }

    jQuery('.dslca-prompt-modal').data('id', '');
  });
});
/**
 * DON'T MOVE THE FUNCTION BELLOW OUT OF THIS FILE!
 * Hide element when click on another element on the page
 */

jQuery.fn.outerHide = function (params) {
  var $ = jQuery;
  params = params ? params : {};
  var self = this;

  if ('destroy' == params) {
    jQuery(document).unbind('click.outer_hide');
    return false;
  }

  jQuery(document).bind('click.outer_hide', function (e) {
    if (jQuery(e.target).closest(self).length == 0 && e.target != self && $.inArray(jQuery(e.target)[0], jQuery(params.clickObj)) == -1 && jQuery(self).css('display') != 'none') {
      if (params.clbk) {
        params.clbk();
      } else {
        jQuery(self).hide();
      }
    }
  });
};
/**
 * Cancel changes in standard WP Editor (TinyMCE) WYSIWYG
 */


document.addEventListener('modalWysiwygCancel', function (customEvent) {
  jQuery('.dslca-wp-editor').hide();
  jQuery('.dslca-wysiwyg-active', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-wysiwyg-active');
});
/**
 * Confirm changes in standard WP Editor (TinyMCE) WYSIWYG
 */

document.addEventListener('modalWysiwygConfirm', function (customEvent) {
  var module = jQuery('.dslca-wysiwyg-active', LiveComposer.Builder.PreviewAreaDocument).closest('.dslc-module-front');

  if (typeof tinymce != "undefined") {
    if (jQuery('#wp-dslcawpeditor-wrap').hasClass('tmce-active')) {
      var editor = tinymce.get('dslcawpeditor');
      var content = editor.getContent();
    } else {
      var content = jQuery('#dslcawpeditor').val();
    }

    content = content.trim();
    jQuery('.dslca-wp-editor').hide();
    jQuery('.dslca-wysiwyg-active', LiveComposer.Builder.PreviewAreaDocument).html(content);

    if (module.hasClass('dslc-module-handle-like-accordion')) {
      jQuery('.dslca-wysiwyg-active', LiveComposer.Builder.PreviewAreaDocument).siblings('.dslca-editable-content').html(content);
      jQuery('.dslca-wysiwyg-active', LiveComposer.Builder.PreviewAreaDocument).siblings('.dslca-accordion-plain-content').val(content);
      var dslcAccordion = module.find('.dslc-accordion');
      LiveComposer.Builder.PreviewAreaWindow.dslc_accordion_generate_code(dslcAccordion);
    } else if (module.hasClass('dslc-module-handle-like-tabs')) {
      jQuery('.dslca-wysiwyg-active', LiveComposer.Builder.PreviewAreaDocument).siblings('.dslca-editable-content').html(content);
      jQuery('.dslca-wysiwyg-active', LiveComposer.Builder.PreviewAreaDocument).siblings('.dslca-tab-plain-content').val(content);
      var dslcTabs = module.find('.dslc-tabs');
      LiveComposer.Builder.PreviewAreaWindow.dslc_tabs_generate_code(dslcTabs);
    }

    Object(_codegeneration_js__WEBPACK_IMPORTED_MODULE_0__["editableContentCodeGeneration"])(jQuery('.dslca-wysiwyg-active', LiveComposer.Builder.PreviewAreaDocument));
    jQuery('.dslca-wysiwyg-active', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-wysiwyg-active');
  } else {
    console.info('Live Composer: TinyMCE is undefined.');
  }
});
var modalwindowInitJS = function modalwindowInitJS() {};

/***/ }),

/***/ "./js/src/editor/backend/module.js":
/*!*****************************************!*\
  !*** ./js/src/editor/backend/module.js ***!
  \*****************************************/
/*! exports provided: getNewModuleId, moduleOutputDefault, moduleOutputAltered, moduleInitJS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNewModuleId", function() { return getNewModuleId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moduleOutputDefault", function() { return moduleOutputDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moduleOutputAltered", function() { return moduleOutputAltered; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moduleInitJS", function() { return moduleInitJS; });
/* harmony import */ var _modalwindow_class_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modalwindow.class.js */ "./js/src/editor/backend/modalwindow.class.js");
/* harmony import */ var _uigeneral_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./uigeneral.js */ "./js/src/editor/backend/uigeneral.js");
/* harmony import */ var animejs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! animejs */ "./node_modules/animejs/lib/anime.es.js");
/* harmony import */ var _codegeneration_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./codegeneration.js */ "./js/src/editor/backend/codegeneration.js");
/**
 *  Builder module functions & hooks
 *
 *   = MODULES =
 *
 * - dslc_module_delete ( Deletes a module )
 * - moduleDuplicate ( Copies a module )
 * - dslc_module_width_set ( Sets a width to module )
 * - dslc_module_options_show ( Show module options )
 * - dslc_module_options_section_filter ( Filter options section )
 * - dslc_module_options_hideshow_tabs ( Hide show tabs based on option choices )
 * - dslc_module_options_confirm_changes ( Confirm changes )
 * - dslc_module_options_cancel_changes ( Cancel changes )
 * - dslc_module_options_tooltip ( Helper tooltips for options )
 * - dslc_module_options_font ( Actions for font option type )
 * - dslc_module_options_icon ( Actions for icon font option type )
 * - dslc_module_options_icon_returnid (Fill icon option type with selected icon ID/name)
 * - dslc_module_options_text_align ( Actions for text align option type )
 * - dslc_module_options_checkbox ( Actions for checkbox option type )
 * - dslc_module_options_box_shadow ( Actions for box shadow option type )
 * - dslc_modules_options_box_shadow_color ( Initiate colorpicker for box shadow)
 * - dslc_module_options_text_shadow ( Actions for text shadow option type )
 * - dslc_modules_options_text_shadow_color ( Initiate colorpicker for text shadow)
 * - dslc_module_options_color ( Actions for color option type )
 * - dslc_module_output_default ( Get module output with default settings )
 * - dslc_module_output_altered ( Get module output when settings altered )
 *
 */





var actionAvail = function actionAvail() {
  if (LiveComposer.Builder.Flags.panelOpened) {
    LiveComposer.Builder.UI.shakePanelConfirmButton();
    return false;
  }

  return true;
};
/**
 * Hook - Duplicate Module
 */


document.addEventListener('moduleDuplicate', function (customEvent) {
  var elClicked = customEvent.detail; // customEvent.detail - is element being clicked passed as additional data in the event.
  // Check if action can be fired

  if (!actionAvail()) return false;

  if (!elClicked.classList.contains('dslca-action-disabled')) {
    moduleDuplicate(elClicked.closest('.dslc-module-front'));
  }
});
/**
 * Hook - Module Delete
 */

document.addEventListener('moduleDelete', function (customEvent) {
  var elClicked = customEvent.detail; // customEvent.detail - is element being clicked passed as additional data in the event.
  // Check if action can be fired

  if (!actionAvail()) return false;
  var self = this;

  if (!elClicked.classList.contains('dslca-action-disabled')) {
    Object(_modalwindow_class_js__WEBPACK_IMPORTED_MODULE_0__["CModalWindow"])({
      title: DSLCString.str_del_module_title,
      content: DSLCString.str_del_module_descr,
      confirm: function confirm() {
        var module = elClicked.closest('.dslc-module-front');
        dslc_module_delete(module);
      }
    });
  }
});
/**
 * Hook - Edit Module On Click ( Display Options Panel )
 */

document.addEventListener('moduleEdit', function (customEvent) {
  var elClicked = customEvent.detail; // customEvent.detail - is element being clicked passed as additional data in the event.

  var currentModuleEl = elClicked.closest('.dslc-module-front');
  var currentModuleId = currentModuleEl.dataset.module;
  var elEditing = LiveComposer.Builder.PreviewAreaWindow.document.querySelector('.dslca-module-being-edited');
  var row_edited = jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).length; /// If settings panel opened - do not proceed.

  if (LiveComposer.Builder.Flags.uiHidden || null !== elEditing && elEditing.length > 0 || row_edited > 0) {
    if (elEditing != currentModuleEl) {
      LiveComposer.Builder.UI.shakePanelConfirmButton();
    }

    return false;
  }

  unmarkModulesBeingEdited(); // Add the "being edited" class to current module

  currentModuleEl.classList.add('dslca-module-being-edited'); // Call the function to display options

  dslc_module_options_show(currentModuleId); // Cover up other modules with semi transp cover

  LiveComposer.Builder.PreviewAreaWindow.document.body.classList.add('module-editing-in-progress');
});
/**
 * Hook - Edit Module On Click ( Display Options Panel ) - Fixed: https://github.com/live-composer/live-composer-page-builder/issues/895
 */

var adjustZindex = function adjustZindex() {
  LiveComposer.Builder.PreviewAreaDocument.on({
    mouseenter: function mouseenter() {
      jQuery('.dslca-modules-section-manage', LiveComposer.Builder.PreviewAreaDocument).css("z-index", "99998");
    },
    mouseleave: function mouseleave() {
      jQuery('.dslca-modules-section-manage', LiveComposer.Builder.PreviewAreaDocument).css("z-index", "999999");
    }
  }, '.dslca-change-width-module-hook, .dslc-module-front .dslca-module-manage');
};
/**
 * Hook - Set Module Width
 */


document.addEventListener('moduleChangeWidth', function (customEvent) {
  var elClicked = customEvent.detail; // customEvent.detail - is element being clicked passed as additional data in the event.

  var currentModuleEl = elClicked.closest('.dslc-module-front');

  if (!elClicked.classList.contains('dslca-action-disabled')) {
    var oldSize = currentModuleEl.dataset.dslcModuleSize;
    var newSize = elClicked.dataset.size; // Start expensive function only if the value changed.

    if (Number(oldSize) !== Number(newSize)) {
      dslc_module_width_set(currentModuleEl, newSize);
    }
  }
});
/**
 * Hook - Show code for altering module's defaults
 */

/*
FIXIT
LiveComposer.Builder.PreviewAreaDocument.on( 'click', '.dslca-module-get-defaults-hook', function(){

	// Vars
	var module = jQuery(this).closest('.dslc-module-front');
	var code = dslc_dm_get_defaults( module );

	// Generate modal's text
	var message = '<span class="dslca-prompt-modal-title">Module Defaults</span>'
		+ '<span class="dslca-prompt-modal-descr">The code bellow is used to alter the defaults.</span>'
		+ '<textarea></textarea><br><br>';

	// Hide modal's cancel button
	jQuery('.dslca-prompt-modal-cancel-hook').hide();

	// Show confirm button and change it to "OK"
	jQuery('.dslca-prompt-modal-confirm-hook').html('<span class="dslc-icon dslc-icon-ok"></span>OK');

	// Show the modal prompt
	dslc_js_confirm( 'dev_mode_get_default', message, module );
}); */

/**
 * Hook - Refresh Module
 * We have 'refresh' icon on blog posts grid and other post-based modules.
 * It's visible only when there are no posts to render.
 */

/*
FIXIT
LiveComposer.Builder.PreviewAreaDocument.on( 'click', '.dslca-refresh-module-hook', function(e){

	jQuery(this).css({
		'-webkit-animation-name' : 'dslcRotate',
		'-moz-animation-name' : 'dslcRotate',
		'animation-name' : 'dslcRotate',
		'animation-duration' : '0.6s',
		'-webkit-animation-duration' : '0.6s',
		'animation-iteration-count' : 'infinite',
		'-webkit-animation-iteration-count' : 'infinite'
	});
	jQuery(this).closest('.dslc-module-front').addClass('dslca-module-being-edited');
	moduleOutputAltered( function() {

		jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-module-being-edited');
	});
}); */

/**
 * Show WYSIWYG
 */

document.addEventListener('wysiwygEdit', function (customEvent) {
  var elClicked = customEvent.detail; // customEvent.detail - is element being clicked passed as additional data in the event.

  var currentModuleEl = elClicked.closest('.dslc-module-front'); // const editableEl = elClicked.querySelector('.dslca-editable-content');

  var idToEdit = elClicked.dataset.idToEdit;
  var editableEl = currentModuleEl.querySelector('[data-edit-id="' + idToEdit + '"]');
  var content = '';

  if ('TEXTAREA' === editableEl.tagName || 'INPUT' === editableEl.tagName) {
    content = editableEl.value;
  } else {
    content = editableEl.innerHTML;
  }

  if (undefined === content) {
    content = '';
  }

  if (content.trim().length) {
    // Extract Content for current tab/accordion:

    /* if ( currentModuleEl.classList.contains('dslc-module-handle-like-accordion') || currentModuleEl.classList.contains('dslc-module-handle-like-tabs') ) {
    	const full_content_arr = content.split('(dslc_sep)');
    	if ( full_content_arr.length ) {
    		content = full_content_arr[idToEdit].trim();
    	}
    } */
    content = content.replace(/<lctextarea/g, '<textarea').replace(/<\/lctextarea/g, '</textarea');
  } // Restore shortcodes presentation.


  if (content.includes('%')) {
    content = content.replace(/%\(\(%/g, '[');
    content = content.replace(/%\)\)%/g, ']');
    content = content.replace(/%\(%/g, '[');
    content = content.replace(/%\)%/g, ']');
    content = content.replace(/%\{%/g, '[');
    content = content.replace(/%\}%/g, ']');
  }

  content = content.trim(); // Fill TinyMCE editor with extracted above content.

  if (typeof tinymce != 'undefined') {
    var editor = tinymce.get('dslcawpeditor');

    if (document.getElementById('wp-dslcawpeditor-wrap').classList.contains('tmce-active')) {
      editor.setContent(content, {
        format: 'html'
      });
    } else {
      document.getElementById('dslcawpeditor').value = content;
    }

    if (!currentModuleEl.classList.contains('dslca-module-being-edited')) {
      currentModuleEl.querySelector('.dslca-module-edit-hook').click();
    }

    jQuery('.dslca-wp-editor').show();
    editableEl.classList.add('dslca-wysiwyg-active');
    jQuery('#dslcawpeditor_ifr, #dslcawpeditor').css({
      height: jQuery('.dslca-wp-editor').height() - 300
    });
  } else {
    console.info('Live Composer: TinyMCE is undefined.');
  }
}); // Editable Contents.

var editableContentTextEvents = function editableContentTextEvents() {
  // Preview iframe events.

  /* LiveComposer.Builder.PreviewAreaWindow.document.addEventListener('blur', function (event) {
  	// event.preventDefault();
  	if ( event.target.matches( '[data-event="module-edit"]' ) ) {
  		}
  });
  */

  /* 	LiveComposer.Builder.PreviewAreaWindow.document.addEventListener('keyup', function (event) {
  		// event.preventDefault();
  		if ( event.target.matches( '[data-event="module-edit"]' ) ) {
  
  		}
  	});
   */
  LiveComposer.Builder.PreviewAreaDocument.on('blur', '.dslca-editable-content', function () {
    if (!LiveComposer.Builder.Flags.uiHidden && jQuery(this).data('type') == 'simple') {
      Object(_codegeneration_js__WEBPACK_IMPORTED_MODULE_3__["editableContentCodeGeneration"])(jQuery(this));
    }
  }).on('paste', '.dslca-editable-content:not(.inline-editor)', function () {
    if (!LiveComposer.Builder.Flags.uiHidden && jQuery(this).data('type') == 'simple') {
      var dslcRealInput = jQuery(this);
      setTimeout(function () {
        if (dslcRealInput.data('type') == 'simple') {
          dslcRealInput.html(dslcRealInput.text());
        }

        Object(_codegeneration_js__WEBPACK_IMPORTED_MODULE_3__["editableContentCodeGeneration"])(dslcRealInput);
      }, 100);
    }
  }).on('focus', '.dslca-editable-content', function () {
    if (jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).length > 0 && !jQuery(this).closest('.dslc-module-front').hasClass('dslca-module-being-edited')) {
      jQuery(this).trigger('blur');
    }
  }).on('keyup', '.dslca-editable-content', function () {
    if (jQuery(this).data('type') == 'simple') {
      jQuery(this).closest('.dslc-module-front').addClass('dslca-module-change-made');
    }
  });
};
/**
 * MODULES - Delete a Module
 */


function dslc_module_delete(module) {
  if (window.dslcDebug) console.log('dslc_delete_module');
  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_1__["showSection"])('.dslca-modules');
  Object(animejs__WEBPACK_IMPORTED_MODULE_2__["default"])({
    targets: module,
    easing: 'easeOutExpo',
    scale: 0,
    opacity: 0,
    duration: 350,
    delay: 0,
    endDelay: 0,
    complete: function complete(anim) {
      // Remove module, regenerate code, show publish button
      module.parentNode.removeChild(module);
      window.dslc_generate_code();
      window.dslc_show_publish_button();
    }
  });
}

var unmarkModulesBeingEdited = function unmarkModulesBeingEdited() {
  // Remove being edited class if some module is being edited.
  var elEditing = LiveComposer.Builder.PreviewAreaWindow.document.querySelector('.dslca-module-being-edited');

  if (null !== elEditing) {
    elEditing.classList.remove('dslca-module-being-edited');
  }
};
/**
 * Modules - Copy a Module
 */


function moduleDuplicate(module) {
  if (window.dslcDebug) console.log('dslc_copy_module');
  unmarkModulesBeingEdited(); // Duplicate the module and append it to the same area

  var module_new = module.cloneNode(true);
  jQuery(module_new).appendTo(module.closest('.dslc-modules-area')).css({
    '-webkit-animation-name': 'none',
    '-moz-animation-name': 'none',
    'animation-name': 'none',
    'animation-duration': '0',
    '-webkit-animation-duration': '0',
    opacity: 0,
    top: -50
  }).addClass('dslca-module-being-edited'); // Generate new ID for the new module and change it in HTML/CSS of the module.

  getNewModuleId(module_new); // Module fully cloned. Finish the process.
  // Need to call this function to update last column class for the modules.

  window.dslc_generate_code(); // Fade in the module

  Object(animejs__WEBPACK_IMPORTED_MODULE_2__["default"])({
    targets: module_new,
    easing: 'easeOutExpo',
    // scale: 0,
    top: 0,
    opacity: 1,
    duration: 400,
    delay: 0,
    endDelay: 0,
    complete: function complete(anim) {
      module_new.classList.remove('dslca-module-being-edited');
    }
  });
  window.dslc_show_publish_button();
}
/**
 * Generate new ID for the module provided
 *
 * Search/Replace old module ID with new one in HTML/CSS of the module.
 *
 * @param DOM module Module that needs ID updated (new ID).
 * @return void
 */


var getNewModuleId = function getNewModuleId(moduleEl) {
  // Vars
  var dslc_module_id = LiveComposer.Utils.get_unique_id(); // Generate new module ID.

  var dslc_module_id_original = moduleEl.getAttribute('id'); // Original Module ID.
  // Update module ID in data attribute

  moduleEl.setAttribute('data-module-id', dslc_module_id); // Update module ID in id attribute of element

  moduleEl.setAttribute('id', 'dslc-module-' + dslc_module_id);
  /**
   * Search/Replace module id in the inline CSS
   */

  var inline_css_el = moduleEl.getElementsByTagName('style')[0];
  var inline_css_code = inline_css_el.textContent; // Update id attribute for <style> element with new value

  inline_css_el.setAttribute('id', '#css-for-dslc-module-' + dslc_module_id); // Search/Replace all occurrences of module ID in inline CSS

  inline_css_code = inline_css_code.split(dslc_module_id_original).join('dslc-module-' + dslc_module_id); // Put CSS code back into <style> element

  inline_css_el.textContent = inline_css_code; // Update module ID in raw base64 code (dslc_code) of the module

  LiveComposer.Utils.update_module_property_raw(moduleEl, 'module_instance_id', dslc_module_id);
};
/**
 * MODULES - Set Width
 */

function dslc_module_width_set(moduleEl, new_width) {
  if (window.dslcDebug) console.log('dslc_module_width_set'); // Generate new column class

  var newClass = 'dslc-' + new_width + '-col'; // Add new column class and change size "data"

  jQuery(moduleEl).removeClass('dslc-1-col dslc-2-col dslc-3-col dslc-4-col dslc-5-col dslc-6-col dslc-7-col dslc-8-col dslc-9-col dslc-10-col dslc-11-col dslc-12-col').addClass(newClass).data('dslc-module-size', new_width); //.addClass('dslca-module-being-edited'); – Deprecated
  // Change module size in element attribute

  moduleEl.setAttribute('data-dslc-module-size', new_width); // Update module size in raw base64 code (dslc_code) of the module

  LiveComposer.Utils.update_module_property_raw(moduleEl, 'dslc_m_size', new_width);
  LiveComposer.Builder.PreviewAreaWindow.dslc_masonry();
  window.dslc_generate_code();
  window.dslc_show_publish_button();
}
/**
 * MODULES - Show module options
 */


function dslc_module_options_show(moduleID) {
  if (window.dslcDebug) console.log('dslc_module_options_show');

  if (undefined === moduleID) {
    console.warn('No module ID defined in dslc_module_options_show function.');
  } // Vars


  var dslcModule = jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument),
      dslcModuleOptions = jQuery('.dslca-module-options-front textarea', dslcModule),
      dslcDefaultSection = jQuery('.dslca-header').data('default-section'),
      pseudoPanel = jQuery(jQuery('#pseudo-panel').html());
  jQuery("#wpwrap").append(pseudoPanel); // Settings array for the Ajax call

  var dslcSettings = {};
  dslcSettings['action'] = 'dslc-ajax-display-module-options';
  dslcSettings['dslc'] = 'active';
  dslcSettings['dslc_module_id'] = moduleID;
  dslcSettings['dslc_post_id'] = jQuery('.dslca-container').data('data-post-id');
  dslcSettings.dslc_url_vars = LiveComposer.Utils.get_page_params(); // Go through each option to fill dslcSettings array
  // with current module setting values

  dslcModuleOptions.each(function () {
    // Vars
    var dslcOption = jQuery(this),
        dslcOptionID = dslcOption.data('id'),
        dslcOptionValue = dslcOption.val();

    if (dslcOptionValue.includes('%')) {
      // Restore shortcodes.
      dslcOptionValue = dslcOptionValue.replace(/%\(\(%/g, '[');
      dslcOptionValue = dslcOptionValue.replace(/%\)\)%/g, ']');
      dslcOptionValue = dslcOptionValue.replace(/%\(%/g, '[');
      dslcOptionValue = dslcOptionValue.replace(/%\)%/g, ']');
      dslcOptionValue = dslcOptionValue.replace(/%\{%/g, '[');
      dslcOptionValue = dslcOptionValue.replace(/%\}%/g, ']');
    } // Add option ID and value to the settings array


    dslcSettings[dslcOptionID] = dslcOptionValue;
  }); // Hide the save/cancel actions for text editor and show notification

  jQuery('.dslca-wp-editor-actions').hide();
  jQuery('.dslca-wp-editor-notification').show(); // Hide the publish button

  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_1__["hidePublishButton"])(); // LiveComposer.Builder.UI.initInlineEditors();
  // Set up backup

  var moduleBackup = jQuery('.dslca-module-options-front', dslcModule).children().clone();
  LiveComposer.Builder.moduleBackup = moduleBackup;
  LiveComposer.Builder.Flags.panelOpened = true; // Show pseudo settings panel

  pseudoPanel.show();
  pseudoPanel.addClass('show'); // AJAX call to get options HTML

  jQuery.post(DSLCAjax.ajaxurl, dslcSettings, function (response) {
    // Hide pseudo panel
    pseudoPanel.remove(); // Show edit section

    Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_1__["showSection"])('.dslca-module-edit'); // Add the options

    if (!jQuery('body').hasClass('rtl')) {
      jQuery('.dslca-module-edit-options-inner').html(response.output);
    } else {
      jQuery('.dslca-module-edit-options-inner').html(response.output);
    }

    jQuery('.dslca-module-edit-options-tabs').html(response.output_tabs);
    var sectionsUsed = []; // – Array with tab ids to show for current module.

    /**
     * Go through each option and check its tab property.
     * Fill sectionsUsed array with ids of the tabs to display.
     * We don't want to display tabs with no options inside.
     */

    jQuery('.dslca-module-edit-options-inner .dslca-module-edit-option').each(function () {
      var currentOptionSection = jQuery(this).data('section'); // Check if this section is in the list of tabs to show.

      if (sectionsUsed.indexOf(currentOptionSection) == -1) {
        sectionsUsed.push(currentOptionSection);
      }
    });
    var tabs_total = sectionsUsed.length;

    for (var i = 0; i < tabs_total; i++) {
      // Show the tabs used by the current module.
      jQuery('.dslca-header .dslca-options-filter-hook[data-section="' + sectionsUsed[i] + '"]').show();
    } // Show the filter hooks
    // jQuery('.dslca-header .dslca-options-filter-hook').show();
    // Trigger click on first filter hook


    if (jQuery('.dslca-module-edit-option[data-section="' + dslcDefaultSection + '"]').length) {
      jQuery('.dslca-header .dslca-options-filter-hook[data-section="' + dslcDefaultSection + '"]').show();
      jQuery('.dslca-header .dslca-options-filter-hook[data-section="' + dslcDefaultSection + '"]').trigger('click');
    } else {
      jQuery('.dslca-header .dslca-options-filter-hook:first').hide();
      jQuery('.dslca-header .dslca-options-filter-hook:first').next('.dslca-options-filter-hook').trigger('click');
    } // Show the save/cancel actions


    jQuery('.dslca-module-edit-actions').show(); // Show the save/cancel actions for text editor and hide notification

    jQuery('.dslca-wp-editor-notification').hide();
    jQuery('.dslca-wp-editor-actions').show(); // Hide the section hooks

    jQuery('.dslca-header .dslca-go-to-section-hook').hide(); // Hide the row save/cancel actions

    jQuery('.dslca-row-edit-actions').hide();
    LiveComposer.Builder.UI.loadOptionsDeps();
  });
}
/**
 * MODULES - Module output default settings
 */


var moduleOutputDefault = function moduleOutputDefault(dslc_module_id, callback) {
  if (window.dslcDebug) console.log('moduleOutputDefault');
  jQuery.post(DSLCAjax.ajaxurl, {
    action: 'dslc-ajax-add-module',
    dslc: 'active',
    dslc_module_id: dslc_module_id,
    // ex. DSLC_Button
    dslc_post_id: jQuery('.dslca-container').data('post-id'),
    dslc_url_vars: LiveComposer.Utils.get_page_params(),
    dslc_new_module: true
  }, function (response) {
    callback(response);
  });
};
/**
 * MODULES - Redraw module output when settings altered
 */

var moduleOutputAltered = function moduleOutputAltered(callback) {
  if (window.dslcDebug) console.log('moduleOutputAltered');
  callback = typeof callback !== 'undefined' ? callback : false;
  var dslcModule = jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument),
      dslc_module_id = dslcModule.data('module'),
      dslcModuleOptions = jQuery('.dslca-module-options-front textarea', dslcModule),
      dslcModuleInstanceID = dslcModule.data('module-id');
  /**
   * Generate code
   */

  var dslcSettings = {};
  dslcSettings['action'] = 'dslc-ajax-add-module';
  dslcSettings['dslc'] = 'active';
  dslcSettings['dslc_module_id'] = dslc_module_id;
  dslcSettings['dslc_module_instance_id'] = dslcModuleInstanceID;
  dslcSettings['dslc_post_id'] = jQuery('.dslca-container').data('post-id');
  if (dslcModule.hasClass('dslca-preload-preset')) dslcSettings['dslc_preload_preset'] = 'enabled';else dslcSettings['dslc_preload_preset'] = 'disabled';
  dslcModule.removeClass('dslca-preload-preset');
  dslcModuleOptions.each(function () {
    var dslcOption = jQuery(this);
    var dslcOptionID = dslcOption.data('id');
    var dslcOptionValue = dslcOption.val();
    dslcSettings[dslcOptionID] = dslcOptionValue;
  });
  dslcSettings.dslc_url_vars = LiveComposer.Utils.get_page_params();
  /**
   * Call AJAX for preview
   */

  jQuery.post(DSLCAjax.ajaxurl, dslcSettings, function (response) {
    var newModule = LiveComposer.Builder.Helpers.insertModule(response.output, dslcModule);
    newModule.addClass('dslca-module-being-edited');
    response = null;
    newModule = null; // TODO: Add new postponed action to run after all done
    // window.dslc_show_publish_button();

    LiveComposer.Builder.PreviewAreaWindow.dslc_carousel();
    LiveComposer.Builder.PreviewAreaWindow.dslc_masonry();
    LiveComposer.Builder.PreviewAreaWindow.dslc_tabs();
    LiveComposer.Builder.PreviewAreaWindow.dslc_init_accordion();
    /**
     * Create Custom Event/Hook
     *
     * Third-party developers should use it like this:
     * window.addEventListener('moduleOutputAltered', function (e) {
     * 	....
     * }, false);
     */

    var event = new Event('moduleOutputAltered'); // Dispatch the event.

    LiveComposer.Builder.PreviewAreaWindow.dispatchEvent(event);

    if (callback) {
      callback(response);
    }
  });
};
/**
 * MODULES - Reload a specific module
 */

function dslc_module_output_reload(dslcModule, callback) {
  if (window.dslcDebug) console.log('dslc_module_output_reload');
  callback = typeof callback !== 'undefined' ? callback : false;
  var dslc_module_id = dslcModule.data('module'),
      dslcModuleOptions = jQuery('.dslca-module-options-front textarea', dslcModule),
      dslcModuleInstanceID = dslcModule.data('module-id');
  /**
   * Generate code
   */

  var dslcSettings = {};
  dslcSettings['action'] = 'dslc-ajax-add-module';
  dslcSettings['dslc'] = 'active';
  dslcSettings['dslc_module_id'] = dslc_module_id;
  dslcSettings['dslc_module_instance_id'] = dslcModuleInstanceID;
  dslcSettings['dslc_post_id'] = jQuery('.dslca-container').data('post-id');
  dslcSettings['dslc_preload_preset'] = 'enabled';
  dslcModule.removeClass('dslca-preload-preset');
  dslcModuleOptions.each(function () {
    var dslcOption = jQuery(this);
    var dslcOptionID = dslcOption.data('id');
    var dslcOptionValue = dslcOption.val();
    dslcSettings[dslcOptionID] = dslcOptionValue;
  });
  /**
   * Loader
   */

  dslcModule.append('<div class="dslca-module-reloading"><span class="dslca-icon dslc-icon-spin dslc-icon-refresh"></span></div>');
  /**
   * Call AJAX for preview
   */

  jQuery.post(DSLCAjax.ajaxurl, dslcSettings, function (response) {
    dslcModule.after(response.output).next().addClass('dslca-module-being-edited');
    dslcModule.remove();
    window.dslc_generate_code();
    window.dslc_show_publish_button();
    LiveComposer.Builder.PreviewAreaWindow.dslc_carousel();
    LiveComposer.Builder.PreviewAreaWindow.dslc_masonry();
    LiveComposer.Builder.PreviewAreaWindow.dslc_tabs();
    LiveComposer.Builder.PreviewAreaWindow.dslc_init_accordion();

    if (callback) {
      callback(response);
    }

    jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-module-being-edited');
  });
}
/**
 * Other - Get Alter Module Defaults Code
 */


function dslc_dm_get_defaults(module) {
  if (window.dslcDebug) console.log('dslc_dm_get_defaults'); // The module code value

  var optionsCode = module.find('.dslca-module-code').val(); // Ajax call to get the plain PHP code

  jQuery.post(DSLCAjax.ajaxurl, {
    action: 'dslc-ajax-dm-module-defaults',
    dslc: 'active',
    dslc_modules_options: optionsCode
  }, function (response) {
    // Apply the plain PHP code to the textarea
    jQuery('.dslca-prompt-modal textarea').val(response.output);
  });
}
/**
 * Deprecated Functions and Fallbacks
 */


function dslc_copy_module(module) {
  moduleDuplicate(module);
}

function dslc_display_module_options(moduleID) {
  dslc_module_options_show(moduleID);
}

function dslc_preview_change(callback) {
  moduleOutputAltered(callback);
}

function dslc_reload_module(moduleID, callback) {
  dslc_module_output_reload(moduleID, callback);
}

var moduleInitJS = function moduleInitJS() {
  adjustZindex();
  editableContentTextEvents();
};

/***/ }),

/***/ "./js/src/editor/backend/modulearea.class.js":
/*!***************************************************!*\
  !*** ./js/src/editor/backend/modulearea.class.js ***!
  \***************************************************/
/*! exports provided: ModuleArea */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuleArea", function() { return ModuleArea; });
/* harmony import */ var sortablejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sortablejs */ "./node_modules/sortablejs/modular/sortable.esm.js");
/**
 * DSLC_ModuleArea class
 */



var ModuleArea = function ModuleArea(elem) {
  var self = this;
  this.section = jQuery(elem).closest('.dslc-modules-section');
  this.elem = elem;
  /** Set observer to change elems class */

  this.observer = new mqMutationObserver(elem, function () {
    var classList = self.elem.classList;

    if (elem.querySelectorAll('.dslc-module-front').length == 0) {
      classList.add('dslc-modules-area-empty');
      classList.remove('dslc-modules-area-not-empty');
    } else {
      classList.remove('dslc-modules-area-empty');
      classList.add('dslc-modules-area-not-empty');
    }
  }, {
    childList: true
  });
  /**
   * Make MODULES inside the Modules Area draggable/sortable
   */

  this.sortable = sortablejs__WEBPACK_IMPORTED_MODULE_0__["default"].create(elem, {
    group: 'modules',
    animation: 350,
    handle: '.dslca-move-module-hook',
    draggable: '.dslc-module-front',
    ghostClass: 'dslca-module-ghost',
    chosenClass: 'dslca-module-dragging',
    scroll: true,
    // or HTMLElement
    scrollSensitivity: 150,
    // px, how near the mouse must be to an edge to start scrolling.
    scrollSpeed: 15,
    // px
    setData: function setData(dataTransfer, dragEl) {
      dataTransfer.setData(LiveComposer.Utils.msieversion() !== false ? 'Text' : 'text/html', dragEl.innerHTML);
    },
    // dragging started
    onStart: function onStart(evt) {
      evt.oldIndex; // element index within parent

      jQuery('body').removeClass('dslca-drag-not-in-progress').addClass('dslca-drag-in-progress');
      jQuery('body', LiveComposer.Builder.PreviewAreaWindow.document).removeClass('dslca-drag-not-in-progress').addClass('dslca-drag-in-progress');
    },
    // dragging ended
    onEnd: function onEnd(evt) {
      evt.oldIndex; // element's old index within parent

      evt.newIndex; // element's new index within parent

      evt.preventDefault();
      window.dslc_generate_code();
      LiveComposer.Builder.UI.stopScroller();
      jQuery('body').removeClass('dslca-drag-in-progress').addClass('dslca-drag-not-in-progress');
      jQuery('body', LiveComposer.Builder.PreviewAreaWindow.document).removeClass('dslca-drag-in-progress').addClass('dslca-drag-not-in-progress');
    },
    // Element is dropped into the list from another list
    onAdd: function onAdd(evt) {
      var itemEl = evt.item; // dragged HTMLElement

      evt.from; // previous list
      // If container/column/modules area droped.

      if (jQuery(itemEl).data('id') == 'DSLC_M_A') {
        dslc_modules_area_add(jQuery(self.section).find('.dslc-modules-section-wrapper .dslc-modules-section-inner'));
        itemEl.remove();
      } // + indexes from onEnd
      // evt.preventDefault();
      // evt.stopPropagation(); return false;

    },
    // Changed sorting within list
    onUpdate: function onUpdate(evt) {
      var itemEl = evt.item; // dragged HTMLElement
      // + indexes from onEnd
      // evt.preventDefault();
      // evt.stopPropagation(); return false;

      window.dslc_show_publish_button();
    },
    // Called by any change to the list (add / update / remove)
    onSort: function onSort(evt) {// same properties as onUpdate
      // evt.preventDefault();
      // evt.stopPropagation(); return false;
    },
    // Element is removed from the list into another list
    onRemove: function onRemove(evt) {// same properties as onUpdate
    },
    // Attempt to drag a filtered element
    onFilter: function onFilter(evt) {
      var itemEl = evt.item; // HTMLElement receiving the `mousedown|tapstart` event.
    },
    // Event when you move an item in the list or between lists
    onMove: function onMove(evt) {
      // Example: http://jsbin.com/tuyafe/1/edit?js,output
      evt.dragged; // dragged HTMLElement

      evt.draggedRect; // TextRectangle {left, top, right и bottom}

      evt.related; // HTMLElement on which have guided

      evt.relatedRect; // TextRectangle
      // return false; — for cancel
      // Add here the function to update underlying class

      if (jQuery('.dslc-modules-area-empty').find('.dslc-module-front').length > 0) {
        jQuery(this).removeClass('dslc-modules-area-empty').addClass('dslc-modules-area-not-empty');
        jQuery('.dslca-no-content:not(:visible)', this).show().css({
          '-webkit-animation-name': 'dslcBounceIn',
          '-moz-animation-name': 'dslcBounceIn',
          'animation-name': 'dslcBounceIn',
          'animation-duration': '0.6s',
          '-webkit-animation-duration': '0.6s',
          padding: 0
        }).animate({
          padding: '35px 0'
        }, 300, function () {});
      }
    }
  }); // Mark module area as initialized

  jQuery(elem).attr('data-jsinit', 'initialized');
  /** Sort option setter */

  jQuery(document).on('LC.sortableOff', function () {
    self.sortable && self.sortable.option && self.sortable.option('disabled', true);
  });
  jQuery(document).on('LC.sortableOn', function () {
    self.sortable && self.sortable.option && self.sortable.option('disabled', false);
  });
};

/***/ }),

/***/ "./js/src/editor/backend/modulearea.js":
/*!*********************************************!*\
  !*** ./js/src/editor/backend/modulearea.js ***!
  \*********************************************/
/*! exports provided: moduleareasInitJS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moduleareasInitJS", function() { return moduleareasInitJS; });
/* harmony import */ var _dragndrop_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dragndrop.js */ "./js/src/editor/backend/dragndrop.js");
/* harmony import */ var _sections_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sections.js */ "./js/src/editor/backend/sections.js");
/* harmony import */ var _modulearea_class_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modulearea.class.js */ "./js/src/editor/backend/modulearea.class.js");
/* harmony import */ var _modalwindow_class_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modalwindow.class.js */ "./js/src/editor/backend/modalwindow.class.js");
/* harmony import */ var _uigeneral_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./uigeneral.js */ "./js/src/editor/backend/uigeneral.js");
/* harmony import */ var _module_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./module.js */ "./js/src/editor/backend/module.js");
/**
 * Functions powering Module Areas functionality
 *
 * = AREAS ( MODULE AREAS ) =
 *
 * - Actions/Events (Duplicate, Change Width, Delete, ...)
 * - dslc_modules_area_add ( Adds a new modules area )
 * - dslc_modules_area_delete ( Deletes modules area )
 * - dslc_modules_area_width_set ( Sets specific width to the modules area )
 * - dslc_copy_modules_area ( Copies modules area )
 *
 */






/**
 * Module Area Actions (Duplicate, Change Width, Delete, ...)
 *
 * Attach these actions once the editing iFrame loaded.
 */

;
jQuery(document).on('editorFrameLoaded', function () {
  function init_sortables() {
    var el = jQuery('.dslc-modules-area', LiveComposer.Builder.PreviewAreaDocument); // Groups that can hold modules

    jQuery(el).each(function (i, e) {
      new _modulearea_class_js__WEBPACK_IMPORTED_MODULE_2__["ModuleArea"](e);
    });
  }

  var actionAvail = function actionAvail() {
    if (LiveComposer.Builder.Flags.panelOpened) {
      LiveComposer.Builder.UI.shakePanelConfirmButton();
      return false;
    }

    return true;
  };
  /**
   * Action - Automatically Add a Row if Empty
   */


  if (!jQuery('#dslc-main .dslc-modules-section', LiveComposer.Builder.PreviewAreaDocument).length && !jQuery('#dslca-tut-page', LiveComposer.Builder.PreviewAreaDocument).length) {
    Object(_sections_js__WEBPACK_IMPORTED_MODULE_1__["addSection"])(init_sortables());
  } else {
    init_sortables();
  }
  /**
   * Hook - Copy Module Area
   */


  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-copy-modules-area-hook', function (e) {
    e.preventDefault(); // Check if action can be fired

    if (!actionAvail()) return false;

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      var modulesArea = jQuery(this).closest('.dslc-modules-area');
      dslc_copy_modules_area(modulesArea);
    }
  });
  /**
   * Hook - Delete Module Area
   */

  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-delete-modules-area-hook', function (e) {
    e.preventDefault(); // Check if action can be fired

    if (!actionAvail()) return false;

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      // Check if current modules area is empty.
      var modulesAreaEmpty = jQuery(this).closest('.dslc-modules-area').hasClass('dslc-modules-area-empty');

      if (!modulesAreaEmpty) {
        var self = jQuery(this);
        Object(_modalwindow_class_js__WEBPACK_IMPORTED_MODULE_3__["CModalWindow"])({
          title: DSLCString.str_del_area_title,
          content: DSLCString.str_del_area_descr,
          confirm: function confirm() {
            var modulesArea = self.closest('.dslc-modules-area');
            dslc_modules_area_delete(modulesArea);
          }
        }); // Show confirmation modal only if the module area isn't empty.

        /*dslc_js_confirm( 'delete_modules_area', '<span class="dslca-prompt-modal-title">' + DSLCString.str_del_area_title +
        	'</span><span class="dslca-prompt-modal-descr">' + DSLCString.str_del_area_descr + '</span>', jQuery(this) );*/
      } else {
        var modulesArea = jQuery(this).closest('.dslc-modules-area'); // Delete module area without asking anything.

        dslc_delete_modules_area(modulesArea);
      }
    }
  });
  /**
   * Hook - Set Width of the Module Area
   */

  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-change-width-modules-area-options span', function () {
    // Check if action can be fired
    if (!actionAvail()) return false;

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      var moduleAreaJQ = jQuery(this).closest('.dslc-modules-area');
      var oldSize = moduleAreaJQ.data('size');
      var newSize = jQuery(this).data('size'); // Start expensive function only if the value changed.

      if (Number(oldSize) !== Number(newSize)) {
        dslc_modules_area_width_set(moduleAreaJQ, newSize);
      }
    }
  });
  /**
   * Action - Show/Hide Width Options Popup for the Module Area
   */

  /* LiveComposer.Builder.PreviewAreaDocument.on( 'click', '.dslca-change-width-modules-area-hook', function(e){
  		e.preventDefault();
  		// Check if action can be fired
  	if ( ! actionAvail() ) return false;
  		if ( ! jQuery(this).hasClass('dslca-action-disabled') ) {
  			// Is visible
  		if ( jQuery('.dslca-change-width-modules-area-options:visible', this).length ) {
  				// Hide
  			jQuery('.dslca-change-width-modules-area-options', this).hide();
  			// Is hidden
  		} else {
  				// Show
  			jQuery('.dslca-change-width-modules-area-options', this).show();
  		}
  	}
  }); */

  /* 
  	LiveComposer.Builder.PreviewAreaDocument.on( 'mouseleave', '.dslca-change-width-modules-area-options', function(e){
  
  		// Hide width seleciton panel.
  		jQuery(this).hide();
  	});
   */

  /**
   * Hook - Add Modules Area
   * TODO: Where we use it? Delete maybe?
   */

  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-add-modules-area-hook', function (e) {
    e.preventDefault(); // Check if action can be fired

    if (!actionAvail()) return false;
    dslc_modules_area_add(jQuery(this).closest('.dslc-modules-section').find('.dslc-modules-section-inner'));
  });
});
/**
 * AREAS - Add New
 */

function dslc_modules_area_add(row) {
  if (window.dslcDebug) console.log('dslc_add_modules_area'); // Add class to body so we know it's in progress
  // jQuery('body', LiveComposer.Builder.PreviewAreaDocument).addClass('dslca-anim-in-progress');

  var output = '<div class="dslc-modules-area dslc-modules-area-dnd dslc-col dslc-12-col dslc-modules-area-empty " data-size="12">' + '<div class="dslca-modules-area-manage"> <div class="dslca-modules-area-manage-inner">' + '<span class="dslca-manage-action dslca-copy-modules-area-hook" title="Duplicate" ><span class="dslca-icon dslc-icon-copy">' + '</span></span> <span class="dslca-manage-action dslca-move-modules-area-hook" title="Drag to move" >' + '<span class="dslca-icon dslc-icon-move"></span></span>' + '<span class="dslca-manage-action dslca-change-width-modules-area-hook" title="Change width" >' + '<span class="dslca-icon dslc-icon-columns"></span> <div class="dslca-change-width-modules-area-options">' + '<span>Container Width</span><span data-size="1">1/12</span><span data-size="2">2/12</span>' + '<span data-size="3">3/12</span><span data-size="4">4/12</span> <span data-size="5">5/12</span><span data-size="6">6/12</span>' + '<span data-size="7">7/12</span><span data-size="8">8/12</span> <span data-size="9">9/12</span><span data-size="10">10/12</span>' + '<span data-size="11">11/12</span><span data-size="12">12/12</span> </div> </span>' + '<span class="dslca-manage-action dslca-delete-modules-area-hook" title="Delete" ><span class="dslca-icon dslc-icon-remove"></span></span> </div> </div>' + '</div>'; // Append new area and animate

  jQuery(output).appendTo(row).css({
    height: 0
  }).animate({
    height: 99
  }, 300, function () {
    jQuery(this).css({
      height: 'auto'
    });
  }).addClass('dslca-init-animation'); // Re-initialize all the empty areas on the page

  var emptyModuleAreas = jQuery('.dslc-modules-area-empty', LiveComposer.Builder.PreviewAreaDocument);
  jQuery(emptyModuleAreas).each(function (i, e) {
    new _modulearea_class_js__WEBPACK_IMPORTED_MODULE_2__["ModuleArea"](e);
  }); // Call other functions

  Object(_dragndrop_js__WEBPACK_IMPORTED_MODULE_0__["dragAndDropInit"])();
  window.dslc_generate_code();
  window.dslc_show_publish_button(); // Remove class from body so we know it's done
  // jQuery('body', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-anim-in-progress');
}
/**
 * AREAS - Delete
 */


function dslc_modules_area_delete(area) {
  if (window.dslcDebug) console.log('dslc_delete_modules_area'); // Vars

  var modulesSection = area.closest('.dslc-modules-section').find('.dslc-modules-section-inner'),
      dslcDeleteSectionToo = false; // Add a class to the area so we know it's being deleted

  area.addClass('dslca-modules-area-being-deleted'); // If it's the last area in the row delete section as well

  if (modulesSection.find('.dslc-modules-area').length < 2) {
    dslcDeleteSectionToo = true;
  } // If a module in the area is being edited


  if (area.find('.dslca-module-being-edited').length) {
    // Hide the filter hooks
    jQuery('.dslca-header .dslca-options-filter-hook', LiveComposer.Builder.PreviewAreaDocument).hide(); // Hide the save/cancel actions

    jQuery('.dslca-module-edit-actions', LiveComposer.Builder.PreviewAreaDocument).hide(); // Show the section hooks

    jQuery('.dslca-header .dslca-go-to-section-hook', LiveComposer.Builder.PreviewAreaDocument).show(); // Show the modules listing

    Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_4__["showSection"])('.dslca-modules');
  } // Set a timeout so we handle deletion after animation ends


  setTimeout(function () {
    // Delete section if no more module areas inside.
    if (dslcDeleteSectionToo) {
      var parentSectionContainer = area.closest('.dslc-modules-section-inner'); // dslc_modules_area_add( modulesSection );
      // Don't delete latest module area in the latest section on the page

      if (2 <= area.closest('#dslc-main').find('.dslc-modules-section').length) {
        dslc_row_delete(area.closest('.dslc-modules-section'));
      } else {
        // Remove the area
        area.remove(); // Create new empty area in current module section

        dslc_modules_area_add(modulesSection);
      }
    } // Remove the area


    area.remove(); // Call other functions

    window.dslc_generate_code();
    window.dslc_show_publish_button();
  }, 900); // Animation

  area.css({
    '-webkit-animation-name': 'dslcBounceOut',
    '-moz-animation-name': 'dslcBounceOut',
    'animation-name': 'dslcBounceOut',
    'animation-duration': '0.6s',
    '-webkit-animation-duration': '0.6s',
    'overflow': 'hidden'
  }).animate({
    opacity: 0
  }, 600).animate({
    height: 0,
    marginBottom: 0
  }, 300, function () {
    area.remove();
    window.dslc_generate_code();
    window.dslc_show_publish_button();
  });
}
/**
 * AREAS - Copy
 */


function dslc_modules_area_copy(area) {
  if (window.dslcDebug) console.log('dslc_copy_modules_area'); // Vars

  var dslc_moduleID,
      modulesSection = area.closest('.dslc-modules-section').find('.dslc-modules-section-inner'); // Copy the area and append to the row

  var dslc_modulesAreaCloned = area.clone().appendTo(modulesSection);
  new _modulearea_class_js__WEBPACK_IMPORTED_MODULE_2__["ModuleArea"](dslc_modulesAreaCloned[0]); // Trigger mouseleave ( so the actions that show on hover go away )

  dslc_modulesAreaCloned.find('.dslca-modules-area-manage').trigger('mouseleave'); // Apply correct data size and get rid of animations

  dslc_modulesAreaCloned.data('size', area.data('size')).find('.dslc-module-front').css({
    '-webkit-animation-name': 'none',
    '-moz-animation-name': 'none',
    'animation-name': 'none',
    'animation-duration': '0',
    '-webkit-animation-duration': '0',
    opacity: 0 // Go through each module in the area

  }).each(function () {
    var dslc_module = jQuery(this); //Generate new ID for the new module and change it in HTML/CSS of the module.

    Object(_module_js__WEBPACK_IMPORTED_MODULE_5__["getNewModuleId"])(dslc_module[0]); // Remove "dslca-module-being-edited" class form any element

    jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-module-being-edited'); // Need to call this function to update last column class for the modules.

    window.dslc_generate_code(); // Show back new created module

    dslc_module.animate({
      opacity: 1
    }, 300);
  }); // Call other functions

  Object(_dragndrop_js__WEBPACK_IMPORTED_MODULE_0__["dragAndDropInit"])();
  window.dslc_show_publish_button(); // Need to call this function to update last column class for the module areas.

  window.dslc_generate_code();
}
/**
 * AREAS - Set Width
 */


function dslc_modules_area_width_set(area, newWidth) {
  if (window.dslcDebug) console.log('dslc_modules_area_width_set'); // Generate new class based on width

  var newClass = 'dslc-' + newWidth + '-col'; // Remove width classes, add new width class and set the data-size attr

  area.removeClass('dslc-1-col dslc-2-col dslc-3-col dslc-4-col dslc-5-col dslc-6-col dslc-7-col dslc-8-col dslc-9-col dslc-10-col dslc-11-col dslc-12-col').addClass(newClass).data('size', newWidth); // Call other functions

  LiveComposer.Builder.PreviewAreaWindow.dslc_masonry();

  if (LiveComposer.Builder.Flags.panelOpened) {
    return false;
  }

  window.dslc_generate_code();
  window.dslc_show_publish_button();
}
/**
 * Check Module Areas initialization
 *
 * @return void
 */


var moduleareasInitJS = function moduleareasInitJS() {
  // Select all the module areas form the main section of the page
  jQuery('#dslc-main .dslc-modules-area', LiveComposer.Builder.PreviewAreaDocument).each(function () {
    // Check if all the module areas have data attribute 'jsinit' set to 'initialized'?
    if (jQuery(this).data('jsinit') !== 'initialized') {
      // Initialize all the module areas without 'jsinit' attribute!
      new _modulearea_class_js__WEBPACK_IMPORTED_MODULE_2__["ModuleArea"](this);
    }
  });
};
/**
 * Deprecated Functions and Fallbacks
 */

function dslc_add_modules_area(row) {
  dslc_modules_area_add(row);
}

function dslc_delete_modules_area(area) {
  dslc_modules_area_delete(area);
}

function dslc_copy_modules_area(area) {
  dslc_modules_area_copy(area);
}

/***/ }),

/***/ "./js/src/editor/backend/presets.js":
/*!******************************************!*\
  !*** ./js/src/editor/backend/presets.js ***!
  \******************************************/
/*! exports provided: updatePreset, presetsInit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updatePreset", function() { return updatePreset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "presetsInit", function() { return presetsInit; });
/*********************************
*
* = MODULE PRESETS =
*
* - dslc_update_preset ( Update Styling Preset )
*
***********************************/

/**
 * Module Presets - Update
 */

var updatePreset = function updatePreset() {
  if (window.dslcDebug) console.log('updatePreset'); // Vars

  var module = jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument),
      presetName = module.find('.dslca-module-option-front[data-id="css_load_preset"]').val(),
      presetCode = module.find('.dslca-module-code').val(),
      moduleID = module.data('module'); // If preset value not "none"

  if ('none' !== presetName && '' !== presetName) {
    // AJAX Call to Save Preset
    jQuery.post(DSLCAjax.ajaxurl, {
      action: 'dslc-ajax-save-preset',
      dslc_preset_name: presetName,
      dslc_preset_code: presetCode,
      dslc_module_id: moduleID
    }, function (response) {
      if (response.preset_setting == 'enabled') {
        // Reload all modules with the same preset
        jQuery('.dslc-module-front:not(#' + module.attr('id') + ')[data-module="' + module.data('module') + '"][data-dslc-preset="' + module.data('dslc-preset') + '"]', LiveComposer.Builder.PreviewAreaDocument).each(function () {
          dslc_module_output_reload(jQuery(this));
        });
      }
    });
  }
};
/**
 * Module Presets - Document Ready
 */

jQuery(document).ready(function ($) {
  /**
   * Action - Save preset
   */
  jQuery(document).on('keypress', '.dslca-module-edit-field[name="css_save_preset"]', function (e) {
    // Enter Key Pressed
    if (e.which == 13) {
      // Vars
      var presetName = jQuery(this).val(),
          presetID = presetName.toLowerCase().replace(/\s/g, '-'); // Add class to body that a new preset is added

      jQuery('body').addClass('dslca-new-preset-added'); // Append the new preset to the "Load Preset" option and trigger change

      jQuery('.dslca-module-edit-field[name="css_load_preset"]').append('<option value="' + presetID + '">' + presetID + '</option>').val(presetID).trigger('change'); // Erase value from the "Save Preset" option

      jQuery(this).val('');
      jQuery('.dslc-delete-preset').removeClass('dslc-delete-preset-hide');
    }
  });
  /**
   * Action - Preset value changed
   */

  jQuery(document).on('change', '.dslca-module-edit-field[name="css_load_preset"]', function (e) {
    jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).addClass('dslca-preload-preset');
  });
  /**
   * Action - Delete Preset
   */

  jQuery(document).on('click', '.dslc-delete-preset', function (e) {
    // Vars
    var module = jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument),
        presetName = module.find('.dslca-module-option-front[data-id="css_load_preset"]').val(),
        moduleID = module.data('module'); // If preset value not "none"

    if ('none' !== presetName && '' !== presetName) {
      // AJAX Call to Save Preset
      jQuery.post(DSLCAjax.ajaxurl, {
        action: 'dslc-ajax-delete-preset',
        dslc_preset_name: presetName,
        dslc_module_id: moduleID
      }, function (response) {
        dslc_module_options_show(moduleID);
      });
    }
  });
});
var presetsInit = function presetsInit() {};

/***/ }),

/***/ "./js/src/editor/backend/scroller.js":
/*!*******************************************!*\
  !*** ./js/src/editor/backend/scroller.js ***!
  \*******************************************/
/*! exports provided: initPreviewAreaScroller */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initPreviewAreaScroller", function() { return initPreviewAreaScroller; });
/*********************************
 *
 * = UI - SCROLLER =
 *
 ***********************************/

/**
 * SCROLLER - Document Ready
 */
jQuery(document).ready(function ($) {
  var scrollerPlugin = function scrollerPlugin(container) {
    /**
     * Scroll list of modules with a mouse wheel.
     */
    var deltaKoef = .75;
    var increment = 500;
    var scrollinc = 100;
    var scroller = jQuery('.dslca-section-scroller', container);
    var scrollInner = jQuery('.dslca-section-scroller-inner', container)[0];
    scroller.on('wheel', function (event) {
      scroll_to(event.originalEvent.deltaY || event.originalEvent.deltaX);
      return false;
    });
    /**
     * Scroll to delta
     *
     * @param  {int} delta
     */

    function scroll_to(delta) {
      if (delta < 0) {
        delta = -scrollinc;
      } else {
        delta = scrollinc;
      }

      delta = delta * deltaKoef;
      var listWidth = scroller.find('.dslca-section-scroller-content').width();
      var contentWidth = scroller.width();
      if (listWidth <= contentWidth) return false;
      var scrollMax = listWidth - contentWidth + 10;
      delta = parseInt(scrollInner.style.left || 0) - delta;
      delta = delta >= 0 ? 0 : delta;
      delta = delta <= -scrollMax ? -scrollMax : delta;
      scrollInner.style.left = delta + 'px';
    }
    /**
     * Hook - Scroller Prev
     */


    jQuery('.dslca-section-scroller-prev', container).click(function (e) {
      e.preventDefault();
      scroll_to(-increment);
    });
    /**
     * Hook - Scroller Next
     */

    jQuery('.dslca-section-scroller-next', container).click(function (e) {
      e.preventDefault();
      scroll_to(increment);
    });
    jQuery(window).load(function () {
      // Initiate scroller on window resize
      jQuery(window).resize(function () {
        scroll_to(0);
      });
    });
  };

  scrollerPlugin(jQuery('.dslca-section.dslca-modules'));
  scrollerPlugin(jQuery('.dslca-section.dslca-templates-load'));
});
/** Scroll preview area when mouse are on some distant of edge */

var initPreviewAreaScroller = function initPreviewAreaScroller() {
  var pxInTik = 5;
  var timerTik = 6;
  LiveComposer.Builder.Flags.windowScroller = false;
  /** Stop scroll if within areas */

  jQuery(LiveComposer.Builder.PreviewAreaDocument).on('dragleave', '.lc-scroll-top-area, .lc-scroll-bottom-area', function (e) {
    LiveComposer.Builder.UI.stopScroller();
  });
  /** Scroll bottom */

  jQuery(LiveComposer.Builder.PreviewAreaDocument).on('dragenter dragover', '.lc-scroll-bottom-area', function (e) {
    if (LiveComposer.Builder.Flags.windowScroller !== false) return false;
    LiveComposer.Utils.publish('LC.sortableOff', {});
    LiveComposer.Builder.Flags.windowScroller = setInterval(function () {
      LiveComposer.Builder.PreviewAreaWindow.scrollBy(0, pxInTik);
    }, timerTik);
  });
  /** Scroll top */

  jQuery(LiveComposer.Builder.PreviewAreaDocument).on('dragenter', '.lc-scroll-top-area', function (e) {
    if (LiveComposer.Builder.Flags.windowScroller !== false) return false;
    LiveComposer.Utils.publish('LC.sortableOff', {});
    LiveComposer.Builder.Flags.windowScroller = setInterval(function () {
      LiveComposer.Builder.PreviewAreaWindow.scrollBy(0, -pxInTik);
    }, timerTik);
  });
  /** Stop scroll if click or drag ended */

  jQuery(LiveComposer.Builder.PreviewAreaDocument).on('dragend mouseup', 'body', function (e) {
    LiveComposer.Builder.Flags.windowScroller && LiveComposer.Builder.UI.stopScroller();
  });
};
/** Window Y-scroller */

jQuery(document).ready(function ($) {
  initPreviewAreaScroller();
  /**
   * Stops scroller function
   */

  LiveComposer.Builder.UI.stopScroller = function () {
    LiveComposer.Utils.publish('LC.sortableOn', {});
    clearInterval(LiveComposer.Builder.Flags.windowScroller);
    LiveComposer.Builder.Flags.windowScroller = false;
  };

  jQuery("#scroller-stopper").on('dragover', function () {
    LiveComposer.Builder.UI.stopScroller();
  });
});

/***/ }),

/***/ "./js/src/editor/backend/section.class.js":
/*!************************************************!*\
  !*** ./js/src/editor/backend/section.class.js ***!
  \************************************************/
/*! exports provided: Section */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Section", function() { return Section; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Builder section class
 */
var Section =
/*#__PURE__*/
function () {
  function Section(elem) {
    _classCallCheck(this, Section);

    this.sortable;
    this.sortableContainer = jQuery(elem).find('.dslc-modules-section-wrapper .dslc-modules-section-inner').eq(0)[0];
    this.initSortable(elem);
    this.initDropable(elem);
    this.reactToSortableOnOff(); // Mark section as initialized

    jQuery(elem).attr('data-jsinit', 'initialized');
  }

  _createClass(Section, [{
    key: "initDropable",
    value: function initDropable(elem) {
      jQuery(elem).droppable({
        drop: function drop(event, ui) {
          var modulesSection = jQuery(this).find('.dslc-modules-section-inner');
          var moduleID = ui.draggable.data('id');

          if (moduleID == 'DSLC_M_A') {
            dslc_modules_area_add(modulesSection);
          }
        }
      });
    }
  }, {
    key: "initSortable",
    value: function initSortable(elem) {
      this.sortable = jQuery(this.sortableContainer).sortable({
        connectWith: '.dslc-modules-section-inner',
        items: ".dslc-modules-area-dnd",
        handle: '.dslca-move-modules-area-hook:not(".dslca-action-disabled")',
        placeholder: 'dslca-modules-area-placeholder',
        cursorAt: {
          top: 0,
          left: 0
        },
        tolerance: 'intersect',
        scroll: true,
        scrollSensitivity: 100,
        scrollSpeed: 15,
        sort: function sort() {
          jQuery(this).removeClass("ui-state-default");
        },
        over: function over(e, ui) {
          var dslcSection = ui.placeholder.closest('.dslc-modules-section');
          jQuery(dslcSection).removeClass('dslc-modules-section-empty').addClass('dslc-modules-section-not-empty');
          dslcSection.siblings('.dslc-modules-section').each(function () {
            if (jQuery('.dslc-modules-area:not(.ui-sortable-helper)', jQuery(this)).length) {
              jQuery(this).removeClass('dslc-modules-section-empty').addClass('dslc-modules-section-not-empty');
            } else {
              jQuery(this).removeClass('dslc-modules-section-not-empty').addClass('dslc-modules-section-empty');
            }
          });
        },
        remove: function remove() {
          jQuery(self.elem).find('.dslc-modules-area').length == 0 && dslc_modules_area_add(jQuery(sortableContainer));
        },
        update: function update(e, ui) {
          window.dslc_generate_code();
          window.dslc_show_publish_button();
        },
        start: function start(e, ui) {
          // Placeholder
          ui.placeholder.html('<span class="dslca-placeholder-help-text"><span class="dslca-placeholder-help-text-inner">' + DSLCString.str_area_helper_text + '</span></span>');

          if (!jQuery(ui.item).hasClass('dslc-12-col')) {
            ui.placeholder.width(ui.item.width() - 10);
          } else {
            ui.placeholder.width(ui.item.width()).css({
              margin: 0
            });
          } // Add drag in progress class


          jQuery('body').removeClass('dslca-drag-not-in-progress').addClass('dslca-drag-in-progress dslca-modules-area-drag-in-progress'); // Refresh positions

          jQuery('.dslc-modules-section-inner').sortable("refreshPositions");
        },
        stop: function stop(e, ui) {
          LiveComposer.Builder.UI.stopScroller();
          jQuery('body').removeClass('dslca-drag-in-progress dslca-modules-area-drag-in-progress').addClass('dslca-drag-not-in-progress');
          jQuery('.dslca-anim-opacity-drop').removeClass('dslca-anim-opacity-drop');
        },
        change: function change(e, ui) {}
      });
    }
  }, {
    key: "reactToSortableOnOff",
    value: function reactToSortableOnOff() {
      self = this.sortable;
      /** Sort option setter */

      jQuery(document).on('LC.sortableOff', function () {
        if (undefined !== self.sortable("instance")) {
          self.sortable('option', 'disabled', true);
        }
      });
      jQuery(document).on('LC.sortableOn', function () {
        if (undefined !== self.sortable("instance")) {
          self.sortable('option', 'disabled', false);
        }
      });
    }
  }]);

  return Section;
}();

/***/ }),

/***/ "./js/src/editor/backend/sections.js":
/*!*******************************************!*\
  !*** ./js/src/editor/backend/sections.js ***!
  \*******************************************/
/*! exports provided: addSection, sectionsInitJS, sectionsInit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addSection", function() { return addSection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sectionsInitJS", function() { return sectionsInitJS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sectionsInit", function() { return sectionsInit; });
/* harmony import */ var _section_class_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./section.class.js */ "./js/src/editor/backend/section.class.js");
/* harmony import */ var _dragndrop_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dragndrop.js */ "./js/src/editor/backend/dragndrop.js");
/* harmony import */ var _modulearea_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modulearea.js */ "./js/src/editor/backend/modulearea.js");
/* harmony import */ var _modulearea_class_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modulearea.class.js */ "./js/src/editor/backend/modulearea.class.js");
/* harmony import */ var _modalwindow_class_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modalwindow.class.js */ "./js/src/editor/backend/modalwindow.class.js");
/* harmony import */ var _uigeneral_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./uigeneral.js */ "./js/src/editor/backend/uigeneral.js");
/* harmony import */ var _module_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./module.js */ "./js/src/editor/backend/module.js");
/* harmony import */ var _codegeneration_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./codegeneration.js */ "./js/src/editor/backend/codegeneration.js");
/* harmony import */ var _modalwindow_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modalwindow.js */ "./js/src/editor/backend/modalwindow.js");
/*********************************
 *
 * = ROWS =
 *
 * - dslc_row_add ( Add New )
 * - dslc_row_delete ( Delete )
 * - dslc_row_edit ( Edit )
 * - dslc_row_edit_slider_init ( Edit - Initiate Slider )
 * - dslc_row_edit_cancel ( Edit - Cancel Changes )
 * - dslc_row_edit_confirm ( Edit - Confirm Changes )
 * - dslc_row_copy ( Copy )
 * - dslc_row_import ( Import )
 *
 ***********************************/










var sectionsEventsInit = function sectionsEventsInit() {
  var $ = jQuery;

  var actionAvail = function actionAvail() {
    if (LiveComposer.Builder.Flags.panelOpened) {
      LiveComposer.Builder.UI.shakePanelConfirmButton();
      return false;
    }

    return true;
  };

  jQuery(".dslc-modules-section", LiveComposer.Builder.PreviewAreaDocument).each(function () {
    new _section_class_js__WEBPACK_IMPORTED_MODULE_0__["Section"](this);
  });
  /**
   * Hook - Delete Row
   */

  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-delete-modules-section-hook', function (e) {
    // Check if action can be fired
    if (!actionAvail()) return false;
    e.preventDefault();
    var self = this;

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      Object(_modalwindow_class_js__WEBPACK_IMPORTED_MODULE_4__["CModalWindow"])({
        title: DSLCString.str_del_row_title,
        content: DSLCString.str_del_row_descr,
        confirm: function confirm() {
          dslc_row_delete(jQuery(self).closest('.dslc-modules-section'));
        }
      });
      /*	dslc_js_confirm( 'delete_modules_section', '<span class="dslca-prompt-modal-title">' + DSLCString.str_del_row_title +
      		'</span><span class="dslca-prompt-modal-descr">' + DSLCString.str_del_row_descr + '</span>', jQuery(this) );*/
    }
  });
  /**
   * Hook - Import Row
   */

  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-import-modules-section-hook', function (e) {
    e.preventDefault(); // Check if action can be fired

    if (!actionAvail()) return false;

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      Object(_modalwindow_class_js__WEBPACK_IMPORTED_MODULE_4__["CModalWindow"])({
        title: DSLCString.str_import_row_title,
        content: DSLCString.str_import_row_descr + '<br><br><textarea></textarea>',
        confirm: function confirm() {
          dslc_row_import(jQuery('.dslca-prompt-modal textarea').val());
          jQuery('.dslca-prompt-modal-confirm-hook span').css({
            opacity: 0
          });
          jQuery('.dslca-prompt-modal-confirm-hook .dslca-loading').show();
        },
        confirm_title: DSLCString.str_import
      });
      /*jQuery('.dslca-prompt-modal-confirm-hook').html('<span class="dslc-icon dslc-icon-ok"></span><span>' + DSLCString.str_import +
      	'</span><div class="dslca-loading followingBallsGWrap"><div class="followingBallsG_1 followingBallsG"></div>'+
      	'<div class="followingBallsG_2 followingBallsG"></div><div class="followingBallsG_3 followingBallsG"></div><div class="followingBallsG_4 followingBallsG"></div></div>');
      	dslc_js_confirm( 'import_modules_section', '<span class="dslca-prompt-modal-title">' + DSLCString.str_import_row_title +
      	'</span><span class="dslca-prompt-modal-descr">' + DSLCString.str_import_row_descr + ' <br><br><textarea></textarea></span>', jQuery(this) );*/
    }
  });
  /**
   * Hook - Export Row
   */

  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-export-modules-section-hook', function (e) {
    e.preventDefault(); // Check if action can be fired

    if (!actionAvail()) return false;

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      jQuery('.dslca-prompt-modal-cancel-hook').hide();
      jQuery('.dslca-prompt-modal-confirm-hook').html('<span class="dslc-icon dslc-icon-ok"></span>' + DSLCString.str_ok);
      Object(_modalwindow_class_js__WEBPACK_IMPORTED_MODULE_4__["CModalWindow"])({
        title: DSLCString.str_export_row_title,
        content: DSLCString.str_export_row_descr + '<br><br><textarea>' + '[' + Object(_codegeneration_js__WEBPACK_IMPORTED_MODULE_7__["generateSectionCode"])(jQuery(this).closest('.dslc-modules-section')) + ']' + '</textarea></span>'
      }); // dslc_js_confirm( 'export_modules_section', '<span class="dslca-prompt-modal-title">' + DSLCString.str_export_row_title +
      // 	'</span><span class="dslca-prompt-modal-descr">' + DSLCString.str_export_row_descr + ' <br><br><textarea></textarea></span>', jQuery(this) );
      // jQuery('.dslca-prompt-modal textarea').val( dslc_generate_section_code( jQuery(this).closest('.dslc-modules-section') ) );
    }
  });
  /**
   * Hook - Copy Row
   */

  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-copy-modules-section-hook', function () {
    // Check if action can be fired
    if (!actionAvail()) return false;

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      dslc_row_copy(jQuery(this).closest('.dslc-modules-section'));
    }
  });
  /**
   * Hook - Add Row
   */

  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-add-modules-section-hook', function (e) {
    e.preventDefault(); // Check if action can be fired

    if (!actionAvail()) return false;
    var button = jQuery(this);

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      // Add a loading animation
      button.find('.dslca-icon').removeClass('dslc-icon-align-justify').addClass('dslc-icon-spinner dslc-icon-spin'); // Add a row

      addSection(function () {
        button.find('.dslca-icon').removeClass('dslc-icon-spinner dslc-icon-spin').addClass('dslc-icon-align-justify');
      });
    }
  });
  /**
   * Hook - Edit Row
   */

  LiveComposer.Builder.PreviewAreaDocument.on('click', '.dslca-edit-modules-section-hook', function () {
    // Check if action can be fired
    if (!actionAvail()) return false;
    var self = this;
    var module_edited = jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).length;
    var row_edited = jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).length; /// If settings panel opened - finish func

    if (LiveComposer.Builder.Flags.uiHidden || module_edited > 0 || row_edited > 0) return false; // If not disabled ( disabling used for tutorial )

    if (!jQuery(this).hasClass('dslca-action-disabled')) {
      // Trigger the function to edit
      dslc_row_edit(jQuery(this).closest('.dslc-modules-section'));
    }

    jQuery('body', LiveComposer.Builder.PreviewAreaDocument).addClass('section-editing-in-progress');
  });
};
/**
 * Row - Add New
 */


var addSection = function addSection(callback) {
  if (window.dslcDebug) console.log('dslc_row_add');
  callback = typeof callback !== 'undefined' ? callback : false;
  var defer = jQuery.Deferred();
  var browserCacheTmp = sessionStorage;
  var newRow = jQuery();
  var cachedAjaxRequest = browserCacheTmp.getItem('cache-dslc-ajax-add-modules-section'); // If option 'lc_section_padding_vertical' was update.

  if (null !== cachedAjaxRequest) {
    var current_value, cache_curent_value;
    current_value = DSLCMainOptions.section_padding_vertical;
    cache_curent_value = jQuery(cachedAjaxRequest).find('input[data-id="padding"]').val();

    if (current_value !== cache_curent_value) {
      browserCacheTmp.removeItem('cache-dslc-ajax-add-modules-section');
      cachedAjaxRequest = null;
    }
  } // If no cache for current Ajax request.


  if (null === cachedAjaxRequest) {
    // AJAX Request
    jQuery.post(DSLCAjax.ajaxurl, {
      action: 'dslc-ajax-add-modules-section',
      dslc: 'active'
    }, function (response) {
      // newRow = jQuery(response.output);
      browserCacheTmp.setItem('cache-dslc-ajax-add-modules-section', response.output);
      newRow = dslc_row_after_add(response.output);

      if (callback) {
        callback();
      }

      return defer;
    });
  } else {
    // There is cached version of AJAX request.
    // newRow = jQuery(cachedAjaxRequest);
    newRow = dslc_row_after_add(cachedAjaxRequest);

    if (callback) {
      callback();
    }

    return defer;
  }
};
/**
 * Finish new row creation process.
 *
 * @param  {String} newRowHTML HTML code of the new row.
 * @return {jQuery}            New ROW jQuery object.
 */

function dslc_row_after_add(newRowHTML) {
  var newRow = jQuery(newRowHTML); // Append new row

  newRow.appendTo(LiveComposer.Builder.PreviewAreaDocument.find("#dslc-main")); // Call other functions

  Object(_dragndrop_js__WEBPACK_IMPORTED_MODULE_1__["dragAndDropInit"])();
  window.dslc_generate_code();
  window.dslc_show_publish_button();
  new _section_class_js__WEBPACK_IMPORTED_MODULE_0__["Section"](newRow);
  new _modulearea_class_js__WEBPACK_IMPORTED_MODULE_3__["ModuleArea"](newRow.find('.dslc-modules-area').eq(0)[0]);
  newRow.find('.dslc-modules-area').addClass('dslc-modules-area-empty dslc-last-col');
  return newRow;
}
/**
 * Row - Delete
 */


function dslc_row_delete(row) {
  if (window.dslcDebug) console.log('dslc_row_delete'); // If the row is being edited

  if (row.find('.dslca-module-being-edited')) {
    // Hide the filter hooks
    jQuery('.dslca-header .dslca-options-filter-hook').hide(); // Hide the save/cancel actions

    jQuery('.dslca-module-edit-actions').hide(); // Show the section hooks

    jQuery('.dslca-header .dslca-go-to-section-hook').show();
    Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_5__["showSection"])('.dslca-modules');
  } // Remove row


  row.trigger('mouseleave').remove(); // Call other functions

  window.dslc_generate_code();
  window.dslc_show_publish_button();
}
/**
 * Row - Edit
 */


function dslc_row_edit(row) {
  if (window.dslcDebug) console.log('dslc_row_edit'); // Vars we will use

  var dslcModulesSectionOpts, dslcVal; // Set editing class

  jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-module-being-edited');
  jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-modules-section-being-edited').removeClass('dslca-modules-section-change-made');
  row.addClass('dslca-modules-section-being-edited'); // Hide the section hooks

  jQuery('.dslca-header .dslca-go-to-section-hook').hide(); // Show the styling/responsive tabs

  jQuery('.dslca-row-options-filter-hook[data-section="styling"], .dslca-row-options-filter-hook[data-section="responsive"]').show();
  jQuery('.dslca-row-options-filter-hook[data-section="styling"]').trigger('click'); // Hide the filter hooks

  jQuery('.dslca-header .dslca-options-filter-hook').hide(); // Hide the save/cancel actions

  jQuery('.dslca-module-edit-actions').hide(); // Show the save/cancel actions

  jQuery('.dslca-row-edit-actions').show(); // Set current values

  jQuery('.dslca-modules-section-edit-field').each(function () {
    /**
     * Temporary migration from 'wrapped' value to 'wrapper' in ROW type selector
     * TODO: delete this block in a few versions as problem do not exists on new installs
     *
     * @since ver 1.1
     */
    if ('type' === jQuery(this).data('id')) {
      if ('' === jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input[data-id="type"]', LiveComposer.Builder.PreviewAreaDocument).val() || 'wrapped' === jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input[data-id="type"]', LiveComposer.Builder.PreviewAreaDocument).val()) {
        jQuery('select[data-id="type"]').val('wrapper').change();
      }
    }

    if (jQuery(this).data('id') == 'border-top') {
      if (jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input[data-id="border"]', LiveComposer.Builder.PreviewAreaDocument).val().indexOf('top') >= 0) {
        jQuery(this).prop('checked', true);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check-empty').addClass('dslc-icon-check');
      } else {
        jQuery(this).prop('checked', false);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check').addClass('dslc-icon-check-empty');
      }
    } else if (jQuery(this).data('id') == 'border-right') {
      if (jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input[data-id="border"]', LiveComposer.Builder.PreviewAreaDocument).val().indexOf('right') >= 0) {
        jQuery(this).prop('checked', true);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check-empty').addClass('dslc-icon-check');
      } else {
        jQuery(this).prop('checked', false);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check').addClass('dslc-icon-check-empty');
      }
    } else if (jQuery(this).data('id') == 'border-bottom') {
      if (jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input[data-id="border"]', LiveComposer.Builder.PreviewAreaDocument).val().indexOf('bottom') >= 0) {
        jQuery(this).prop('checked', true);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check-empty').addClass('dslc-icon-check');
      } else {
        jQuery(this).prop('checked', false);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check').addClass('dslc-icon-check-empty');
      }
    } else if (jQuery(this).data('id') == 'border-left') {
      if (jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input[data-id="border"]', LiveComposer.Builder.PreviewAreaDocument).val().indexOf('left') >= 0) {
        jQuery(this).prop('checked', true);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check-empty').addClass('dslc-icon-check');
      } else {
        jQuery(this).prop('checked', false);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check').addClass('dslc-icon-check-empty');
      }
    } else if (jQuery(this).hasClass('dslca-modules-section-edit-field-checkbox')) {
      if (jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input[data-id="' + jQuery(this).data('id') + '"]', LiveComposer.Builder.PreviewAreaDocument).val().indexOf(jQuery(this).data('val')) >= 0) {
        jQuery(this).prop('checked', true);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check-empty').addClass('dslc-icon-check');
      } else {
        jQuery(this).prop('checked', false);
        jQuery(this).siblings('.dslca-modules-section-edit-option-checkbox-hook').find('.dslca-icon').removeClass('dslc-icon-check').addClass('dslc-icon-check-empty');
      }
    } else {
      jQuery(this).val(jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input[data-id="' + jQuery(this).data('id') + '"]', LiveComposer.Builder.PreviewAreaDocument).val().trim().replace('%(%', '[').replace('%)%', ']'));

      if (jQuery(this).hasClass('dslca-modules-section-edit-field-colorpicker')) {
        var _this = jQuery(this);

        jQuery(this).closest('.dslca-modules-section-edit-option').find('.sp-preview-inner').removeClass('sp-clear-display').css({
          'background-color': _this.val()
        });
        jQuery(this).css({
          'background-color': _this.val()
        });
      }
    }
  });
  jQuery('.dslca-modules-section-edit-field-upload').each(function () {
    var dslcParent = jQuery(this).closest('.dslca-modules-section-edit-option');

    if (jQuery(this).val() && jQuery(this).val() !== 'disabled') {
      jQuery('.dslca-modules-section-edit-field-image-add-hook', dslcParent).hide();
      jQuery('.dslca-modules-section-edit-field-image-remove-hook', dslcParent).show();
    } else {
      jQuery('.dslca-modules-section-edit-field-image-remove-hook', dslcParent).hide();
      jQuery('.dslca-modules-section-edit-field-image-add-hook', dslcParent).show();
    }
  }); // Initiate numeric option sliders
  // dslc_row_edit_slider_init();
  // Show options management

  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_5__["showSection"])('.dslca-modules-section-edit');
  LiveComposer.Builder.Flags.panelOpened = true; // Hide the publish button

  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_5__["hidePublishButton"])();
}
/**
 * Row - Edit - Cancel Changes
 */


function dslc_row_edit_cancel(callback) {
  if (window.dslcDebug) console.log('dslc_row_cancel_changes');
  callback = typeof callback !== 'undefined' ? callback : false; // Time to generate code optimized {HACK}

  LiveComposer.Builder.Flags.generate_code_after_row_changed = false; // Recover original data from data-def attribute for each control

  jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input', LiveComposer.Builder.PreviewAreaDocument).each(function () {
    jQuery(this).val(jQuery(this).data('def')); // Fire change for every ROW control, so it redraw linked CSS properties

    jQuery('.dslca-modules-section-edit-field[data-id="' + jQuery(this).data('id') + '"]').val(jQuery(this).data('def')).trigger('change');
  });
  LiveComposer.Builder.Flags.generate_code_after_row_changed = true;
  window.dslc_generate_code();
  window.dslc_show_publish_button();
  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_5__["showSection"])('.dslca-modules'); // Hide the save/cancel actions

  jQuery('.dslca-row-edit-actions').hide(); // Hide the styling/responsive tabs

  jQuery('.dslca-row-options-filter-hook').hide(); // Show the section hooks

  jQuery('.dslca-header .dslca-go-to-section-hook').show(); // Show the publish button

  dslc_show_publish_button; // Remove being edited class

  jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-modules-section-being-edited dslca-modules-section-change-made');

  if (callback) {
    callback();
  }

  LiveComposer.Builder.Flags.panelOpened = false;
  jQuery("body", LiveComposer.Builder.PreviewAreaDocument).removeClass('section-editing-in-progress');
}
/**
 * Row - Edit - Confirm Changes
 */


function dslc_row_edit_confirm(callback) {
  if (window.dslcDebug) console.log('dslc_confirm_row_changes');
  callback = typeof callback !== 'undefined' ? callback : false;
  jQuery('.dslca-modules-section-being-edited .dslca-modules-section-settings input', LiveComposer.Builder.PreviewAreaDocument).each(function () {
    jQuery(this).data('def', jQuery(this).val());
  });
  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_5__["showSection"])('.dslca-modules'); // Hide the save/cancel actions

  jQuery('.dslca-row-edit-actions').hide(); // Hide the styling/responsive tabs

  jQuery('.dslca-row-options-filter-hook').hide(); // Show the section hooks

  jQuery('.dslca-header .dslca-go-to-section-hook').show(); // Remove being edited class

  jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-modules-section-being-edited dslca-modules-section-change-made');
  window.dslc_generate_code(); // Show the publish button

  window.dslc_show_publish_button();

  if (callback) {
    callback();
  }

  LiveComposer.Builder.Flags.panelOpened = false;
  jQuery("body", LiveComposer.Builder.PreviewAreaDocument).removeClass('section-editing-in-progress');
}
/**
 * Row - Copy
 */


function dslc_row_copy(row) {
  if (window.dslcDebug) console.log('dslc_row_copy'); // Vars that will be used

  var dslc_module_id, dslcModulesSectionCloned, dslcModule; // Clone the row

  dslcModulesSectionCloned = row.clone().appendTo(jQuery('#dslc-main', LiveComposer.Builder.PreviewAreaDocument)); // Mark new ROW as NON initialized

  dslcModulesSectionCloned[0].removeAttribute('data-jsinit'); // Go through each area of the new row and apply correct data-size
  // Mark each module area inside as NON initialized (2)

  dslcModulesSectionCloned.find('.dslc-modules-area').each(function () {
    var dslcIndex = jQuery(this).index();
    jQuery(this).data('size', row.find('.dslc-modules-area:eq( ' + dslcIndex + ' )').data('size'));
    this.removeAttribute('data-jsinit'); // (2)
  });
  new _section_class_js__WEBPACK_IMPORTED_MODULE_0__["Section"](dslcModulesSectionCloned);
  /**
   * Re-render modules inside of the new ROW
   */
  // Remove animations and temporary hide modules inside

  dslcModulesSectionCloned.find('.dslc-module-front').css({
    '-webkit-animation-name': 'none',
    '-moz-animation-name': 'none',
    'animation-name': 'none',
    'animation-duration': '0',
    '-webkit-animation-duration': '0',
    opacity: 0 // Go through each module inside the new ROW

  }).each(function () {
    // Current module
    var dslc_module = jQuery(this); //Generate new ID for the new module and change it in HTML/CSS of the module.

    Object(_module_js__WEBPACK_IMPORTED_MODULE_6__["getNewModuleId"])(dslc_module[0]); // Check init for rows and module areas

    sectionsInitJS();
    Object(_modulearea_js__WEBPACK_IMPORTED_MODULE_2__["moduleareasInitJS"])(); // TODO: the next function contains AJAX call. It needs optimization.

    window.dslc_generate_code();
    /**
     * Re-init drag and drop from modules list into modules areas.
     * Need this function, so we can drop new modules on the cloned areas.
     */

    Object(_dragndrop_js__WEBPACK_IMPORTED_MODULE_1__["dragAndDropInit"])(); // Remove "dslca-module-being-edited" class form any element

    jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-module-being-edited'); // Show back new created module

    dslc_module.animate({
      opacity: 1
    }, 300);
    window.dslc_show_publish_button();
  }); // Generate new ID for the new section.

  dslc_section_new_id(dslcModulesSectionCloned[0]);
}
/**
 * Generate new ID for the section provided
 *
 *
 * @param DOM section that needs ID updated (new ID).
 * @return void
 */


function dslc_section_new_id(section) {
  if (window.dslcDebug) console.log('dslc_section_new_id');
  var dslc_section_id = LiveComposer.Utils.get_unique_id(); // Generate new section ID.
  // Update section ID in data attribute

  section.setAttribute('data-section-id', dslc_section_id); // Update section ID in raw base64 code (dslc_code) of the section

  LiveComposer.Utils.update_section_property_raw(section, 'section_instance_id', dslc_section_id);
}
/**
 * Row - Import
 */


function dslc_row_import(rowCode) {
  if (window.dslcDebug) console.log('dslc_row_import'); // AJAX Call

  jQuery.post(DSLCAjax.ajaxurl, {
    action: 'dslc-ajax-import-modules-section',
    dslc: 'active',
    dslc_modules_section_code: rowCode
  }, function (response) {
    // Close the import popup/modal
    Object(_modalwindow_js__WEBPACK_IMPORTED_MODULE_8__["confirmClose"])(); // Add the new section

    jQuery('#dslc-main', LiveComposer.Builder.PreviewAreaDocument).append(response.output); // Call other functions

    LiveComposer.Builder.PreviewAreaWindow.dslc_bg_video();
    LiveComposer.Builder.PreviewAreaWindow.dslc_carousel();
    LiveComposer.Builder.PreviewAreaWindow.dslc_masonry(); // Check init for rows and module areas

    sectionsInitJS();
    Object(_modulearea_js__WEBPACK_IMPORTED_MODULE_2__["moduleareasInitJS"])();
    Object(_dragndrop_js__WEBPACK_IMPORTED_MODULE_1__["dragAndDropInit"])();
    window.dslc_generate_code();
    window.dslc_show_publish_button();
  });
}
/**
 * Deprecated Functions and Fallbacks
 */


function dslc_add_modules_section() {
  addSection();
}

function dslc_delete_modules_section(row) {
  dslc_row_delete(row);
}

function dslc_edit_modules_section(row) {
  dslc_row_edit(row);
}

function dslc_copy_modules_section(row) {
  dslc_row_copy(row);
}

function dslc_import_modules_section(rowCode) {
  dslc_row_import(rowCode);
}
/**
 * Check ROWs initialization
 *
 * @return void
 */


var sectionsInitJS = function sectionsInitJS() {
  // Select all the ROWs form the main section of the page
  jQuery('#dslc-main .dslc-modules-section', LiveComposer.Builder.PreviewAreaDocument).each(function () {
    // Check if all the rows have data attribute 'jsinit' set to 'initialized'?
    if (jQuery(this).data('jsinit') !== 'initialized') {
      // Initialize all the rows without 'jsinit' attribute!
      new _section_class_js__WEBPACK_IMPORTED_MODULE_0__["Section"](this);
    }
  });
};
var sectionsInit = function sectionsInit() {
  sectionsInitJS();
  sectionsEventsInit();
  /**
   * Hook - Confirm Row Changes
   */

  jQuery(document).on('click', '.dslca-row-edit-save', function () {
    dslc_row_edit_confirm();
    jQuery(".dslca-currently-editing").removeAttr('style');
    jQuery('.dslca-row-options-filter-hook.dslca-active').removeClass('dslca-active');
    LiveComposer.Builder.PreviewAreaWindow.dslc_responsive_classes(true);
  });
  /**
   * Hook - Cancel Row Changes
   */

  jQuery(document).on('click', '.dslca-row-edit-cancel', function () {
    dslc_row_edit_cancel();
    jQuery(".dslca-currently-editing").removeAttr('style');
    jQuery('.dslca-row-options-filter-hook.dslca-active').removeClass('dslca-active');
    LiveComposer.Builder.PreviewAreaWindow.dslc_responsive_classes(true);
  });
};

/***/ }),

/***/ "./js/src/editor/backend/sectionscontainer.class.js":
/*!**********************************************************!*\
  !*** ./js/src/editor/backend/sectionscontainer.class.js ***!
  \**********************************************************/
/*! exports provided: CSectionsContainer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CSectionsContainer", function() { return CSectionsContainer; });
/**
 * Sections container class
 */


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CSectionsContainer =
/*#__PURE__*/
function () {
  function CSectionsContainer(elem) {
    _classCallCheck(this, CSectionsContainer);

    this.sortable;
    this.initSortable(elem);
    this.reactToSortableOnOff();
  }

  _createClass(CSectionsContainer, [{
    key: "initSortable",
    value: function initSortable(elem) {
      this.sortable = window.jQuery(elem).sortable({
        items: ".dslc-modules-section-dnd",
        handle: '.dslca-move-modules-section-hook:not(".dslca-action-disabled")',
        placeholder: 'dslca-modules-section-placeholder',
        tolerance: 'intersect',
        cursorAt: {
          bottom: 10
        },
        axis: 'y',
        scroll: true,
        scrollSensitivity: 140,
        scrollSpeed: 5,
        sort: function sort() {
          jQuery(this).removeClass("ui-state-default");
        },
        update: function update(e, ui) {
          window.dslc_show_publish_button();
        },
        start: function start(e, ui) {
          jQuery('body').removeClass('dslca-drag-not-in-progress').addClass('dslca-drag-in-progress');
          jQuery('body', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-drag-not-in-progress').addClass('dslca-drag-in-progress');
          ui.placeholder.html('<span class="dslca-placeholder-help-text"><span class="dslca-placeholder-help-text-inner">' + DSLCString.str_row_helper_text + '</span></span>');
          jQuery('.dslc-content').sortable("refreshPositions");
        },
        stop: function stop(e, ui) {
          window.dslc_generate_code();
          LiveComposer.Builder.UI.stopScroller();
          jQuery('body', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-drag-in-progress').addClass('dslca-drag-not-in-progress');
          jQuery('body').removeClass('dslca-drag-in-progress').addClass('dslca-drag-not-in-progress');
          jQuery('.dslca-anim-opacity-drop').removeClass('dslca-anim-opacity-drop');
        }
      });
    }
  }, {
    key: "reactToSortableOnOff",
    value: function reactToSortableOnOff() {
      self = this.sortable;
      /** Sort option setter */

      jQuery(document).on('LC.sortableOff', function () {
        if (undefined !== self.sortable("instance")) {
          self.sortable('option', 'disabled', true);
        }
      });
      jQuery(document).on('LC.sortableOn', function () {
        if (undefined !== self.sortable("instance")) {
          self.sortable('option', 'disabled', false);
        }
      });
    }
  }]);

  return CSectionsContainer;
}();

/***/ }),

/***/ "./js/src/editor/backend/settings.panel.js":
/*!*************************************************!*\
  !*** ./js/src/editor/backend/settings.panel.js ***!
  \*************************************************/
/*! exports provided: settingsPanelInit, elementOptionsTabs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "settingsPanelInit", function() { return settingsPanelInit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elementOptionsTabs", function() { return elementOptionsTabs; });
/* harmony import */ var _uigeneral_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./uigeneral.js */ "./js/src/editor/backend/uigeneral.js");
/* harmony import */ var _module_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./module.js */ "./js/src/editor/backend/module.js");
/* harmony import */ var _presets_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./presets.js */ "./js/src/editor/backend/presets.js");
/* harmony import */ var _modalwindow_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modalwindow.js */ "./js/src/editor/backend/modalwindow.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Builder settings panel functions providing work with modules
 */




var dslcRegularFontsArray = window.DSLCFonts.regular;
var dslcGoogleFontsArray = window.DSLCFonts.google;
var dslcAllFontsArray = dslcRegularFontsArray.concat(dslcGoogleFontsArray); // Set current/default icons set

var dslcIconsCurrentSet = window.DSLCIcons.fontawesome;
/**
 * Modules - Document Ready
 */

jQuery(document).ready(function ($) {
  dslc_module_options_tooltip();
  dslc_module_options_font();
  dslc_module_options_icon();
  dslc_module_options_icon_returnid();
  dslc_module_options_text_align();
  dslc_module_options_checkbox();
  dslc_module_options_box_shadow();
  dslc_module_options_text_shadow();
  /* Initiate all the color picker controls on the module/section options panel. */

  var dslca_options_with_colorpicker = '';
  dslca_options_with_colorpicker += '.dslca-module-edit-field-colorpicker';
  dslca_options_with_colorpicker += ', .dslca-modules-section-edit-field-colorpicker';
  dslca_options_with_colorpicker += ', .dslca-module-edit-option-box-shadow-color';
  dslca_options_with_colorpicker += ', .dslca-module-edit-option-text-shadow-color'; // Init color picker on click only to not polute DOM with unwanted elements.
  // It will fire only once (first time) as color picker then put it's own listeners.

  jQuery(document).on('click', dslca_options_with_colorpicker, function () {
    // Call the color picker init function.
    dslc_module_options_color(this); // Make sure the color picker popup appears in the right place.

    var wrapper = jQuery(this).closest('.dslca-color-option');
    var optionsPanel = jQuery('.dslca-module-edit-options-inner');
    var colorpicker = wrapper.find('.wp-picker-holder');
    var offset = wrapper.offset();
    var offsetPopup = offset.left + 15;
    var windoWidth = window.innerWidth;
    var popupWidth = 260;

    if (windoWidth < offsetPopup + popupWidth) {
      offsetPopup = windoWidth - popupWidth;
    } // Set the right position for the color picker popup on first click.


    colorpicker.css('left', offsetPopup + 'px'); // Update position left for the color picker on options scroll.

    jQuery(optionsPanel).on('scroll', function (event) {
      offset = wrapper.offset();
      var offsetPopup = offset.left + 15;
      var windoWidth = window.innerWidth;
      var popupWidth = 260;

      if (windoWidth < offsetPopup + popupWidth) {
        offsetPopup = windoWidth - popupWidth;
      }

      colorpicker.css('left', offsetPopup + 'px');
    });
  });
  /* Initiate all the slider controls on the module options panel. */

  jQuery('.dslca-container').on('mouseenter', '.dslca-module-edit-option-slider', function () {
    // Fixed: https://github.com/live-composer/live-composer-page-builder/issues/740
    if (!jQuery(this).hasClass('dslca-module-edit-option-select')) {
      dslc_module_options_numeric(this);
    }
  });
  /* Initiate all the slider controls on the row options panel. */

  jQuery('.dslca-container').on('mouseenter', '.dslca-modules-section-edit-option-slider', function () {
    dslc_module_options_numeric(this);
  });
  /**
   * Hook - Submit
   */

  jQuery('.dslca-module-edit-form').submit(function (e) {
    e.preventDefault();
    Object(_module_js__WEBPACK_IMPORTED_MODULE_1__["moduleOutputAltered"])();
  });
  /**
   * Hook - Tab Switch
   */

  jQuery(document).on('click', '.dslca-module-edit-options-tab-hook', function (e) {
    e.preventDefault();
    elementOptionsTabs(jQuery(this));
  });
  /**
   * Hook - Option Section Switch
   */

  jQuery(document).on('click', '.dslca-options-filter-hook', function (e) {
    e.preventDefault();
    var dslcPrev = jQuery('.dslca-options-filter-hook.dslca-active').data('section');
    var currentSection = jQuery(this).data('section');
    jQuery('.dslca-options-filter-hook.dslca-active').removeClass('dslca-active');
    jQuery(this).addClass('dslca-active');
    dslc_module_options_section_filter(currentSection); // If previous was responsive reload module

    if (dslcPrev == 'responsive') {
      // Show the loader
      jQuery('.dslca-container-loader').show(); // Reset the responsive classes

      window.LiveComposer.Builder.PreviewAreaWindow.dslc_responsive_classes(); // Reload Module

      Object(_module_js__WEBPACK_IMPORTED_MODULE_1__["moduleOutputAltered"])(function () {
        // Hide the loader
        jQuery('.dslca-container-loader').hide();
      });
      /**
       * Destroy resizable preview functionality
       * when leaving Responsive view.
       */

      jQuery('#page-builder-preview-area').resizable('destroy').attr('style', '');
    }
    /**
     * Make the preview area resizable
     * when entering Responsive view.
     */


    if (currentSection == 'responsive') {
      jQuery('#page-builder-preview-area').resizable();
    }
  });
  /**
   * Hook - Confirm Changes
   */

  jQuery(document).on('click', '.dslca-module-edit-save', function (e) {
    e.preventDefault();
    dslc_module_options_confirm_changes(function () {
      // window.LiveComposer.Builder.UI.initInlineEditors({withRemove:true});
      window.LiveComposer.Builder.UI.unloadOptionsDeps();
      window.LiveComposer.Builder.Flags.panelOpened = false;
      jQuery("body", window.LiveComposer.Builder.PreviewAreaDocument).removeClass('module-editing-in-progress');
    });
    jQuery('.dslca-options-filter-hook.dslca-active').removeClass('dslca-active');
    dslc_disable_responsive_view();
  });
  /**
   * Hook - Cancel Changes
   */

  jQuery(document).on('click', '.dslca-module-edit-cancel', function (e) {
    e.preventDefault();
    dslc_module_options_cancel_changes(function () {
      // window.LiveComposer.Builder.UI.initInlineEditors({withRemove:true});
      window.LiveComposer.Builder.UI.unloadOptionsDeps();
      window.LiveComposer.Builder.Flags.panelOpened = false;
      jQuery("body", window.LiveComposer.Builder.PreviewAreaDocument).removeClass('module-editing-in-progress');
    });
    jQuery('.dslca-options-filter-hook.dslca-active').removeClass('dslca-active');
    dslc_disable_responsive_view();
  });
});
/* Editor scripts */

var settingsPanelInit = function settingsPanelInit() {
  var self = window.LiveComposer.Builder;
  window.LiveComposer.Builder.Helpers.colorpickers = [];
  /*
  	window.LiveComposer.Builder.UI.initInlineEditors = function(params){
  		params = params || {};
  
  		if ( params.withRemove == true ) {
  			try {
  				window.LiveComposer.Builder.PreviewAreaWindow.tinyMCE.remove();
  			} catch(err) {
  				console.info( 'No tinyMCE code found. Error code: 10181116.' );
  			}
  		}
  
  		window.LiveComposer.Builder.PreviewAreaWindow.tinyMCE.init({
  			selector: '.inline-editor.dslca-editable-content',
  			editor_deselector: 'mce-content-body',
  			menubar: false,
  			inline: true,
  			plugins: 'wordpress wplink lists paste',
  			paste_as_text: true, // Paste styled text as plain text only. Requires 'paste' in plugins.
  			paste_block_drop: true, // Disabled drop action for inline editor to prevent js errors in the console. http://archive.tinymce.com/wiki.php/Plugin3x:paste
  			style_formats: [
  					{title: 'Paragraph', format: 'p'},
  					{title: 'Header 1', format: 'h1'},
  					{title: 'Header 2', format: 'h2'},
  					{title: 'Header 3', format: 'h3'},
  					{title: 'Header 4', format: 'h4'},
  					{title: 'Header 5', format: 'h5'},
  					{title: 'Header 6', format: 'h6'},
  			  ],
  			toolbar: 'styleselect | bold italic blockquote | removeformat | bullist numlist '
  		});
  	}
  */

  /* Destroy instanced of sliders, color pickers and other temporary elements */

  window.LiveComposer.Builder.UI.clearUtils = function () {
    if (window.dslcDebug) console.log('window.LiveComposer.Builder.UI.clearUtils'); // Destroy all Color Pickers

    window.LiveComposer.Builder.UI.clearColorPickers(); // Delete module backups form memory.

    if (undefined !== window.LiveComposer.Builder.moduleBackup) {
      window.LiveComposer.Builder.moduleBackup.remove();
    }

    jQuery('.temp-styles-for-module', window.LiveComposer.Builder.PreviewAreaDocument).remove(); // Hide inline editor panel if on [Confirm] or [Cancel] button click.

    jQuery('.mce-tinymce', window.LiveComposer.Builder.PreviewAreaDocument).hide();
  };

  window.LiveComposer.Builder.UI.clearColorPickers = function () {
    if (Array.isArray(self.Helpers.colorpickers)) {
      self.Helpers.colorpickers.forEach(function (item) {
        // Do not delete color picker instance from row settings panel,
        // as it stays on page and not get loaded via Ajax.
        if (!jQuery(item).hasClass('dslca-modules-section-edit-field')) {
          // Destroy color picker instance.
          jQuery(item).remove();
        }
      });
      self.Helpers.colorpickers = [];
    } // Delete the color picker events.


    jQuery('body').off('click.wpcolorpicker');
  };
  /** Options dependencies */


  window.LiveComposer.Builder.Helpers.depsHandlers = [];

  window.LiveComposer.Builder.UI.loadOptionsDeps = function () {
    var self = this;
    jQuery(".dslca-module-edit-option").each(function () {
      var elem = this;
      var parsed = true;

      try {
        var dep = JSON.parse(LiveComposer.Utils.b64_to_utf8(jQuery(this).data('dep')));
      } catch (e) {
        parsed = false;
      }

      if (parsed) {
        var handler = function handler() {
          var optElem = this;
          var localDep = {};

          if ((optElem.type == 'radio' || optElem.type == 'checkbox') && dep[optElem.value] == undefined) {
            return false;
          }

          if (optElem.type == 'checkbox' && dep[optElem.value] != undefined) {
            localDep[optElem.value] = dep[optElem.value];
          } else {
            localDep = dep;
          }

          Object.keys(localDep).forEach(function (opt_val) {
            localDep[opt_val].split(',').forEach(function (item) {
              var opt_wrap = jQuery(".dslca-module-edit-option-" + item.trim()).closest('.dslca-module-edit-option');
              var checkedCheckbox = true;

              if (optElem.type == 'radio' || optElem.type == 'checkbox') {
                checkedCheckbox = jQuery(optElem).is(":checked");
              }

              var section_tab = jQuery('.dslca-module-edit-options-tab-hook.dslca-active').data('id');

              if (optElem.value == opt_val && checkedCheckbox) {
                if (opt_wrap.not(".dependent")) {
                  opt_wrap.addClass('dependent');
                }

                if (opt_wrap.hasClass('dep-hide')) {
                  opt_wrap.removeClass('dep-hide');
                  opt_wrap.addClass('dep-show');
                } else {
                  opt_wrap.addClass('dep-show');
                }

                if (section_tab == opt_wrap.data('tab')) {
                  opt_wrap.show();
                }
              } else {
                if (opt_wrap.not(".dependent")) {
                  opt_wrap.addClass('dependent');
                }

                if (opt_wrap.hasClass('dep-show')) {
                  opt_wrap.removeClass('dep-show');
                  opt_wrap.addClass('dep-hide');
                } else {
                  opt_wrap.addClass('dep-hide');
                }

                opt_wrap.hide();
              }
            });
          });
        };

        jQuery(document).on('change dslc-init-deps', '.dslca-module-edit-option *[data-id="' + jQuery(this).data('id') + '"]', handler);
        window.LiveComposer.Builder.Helpers.depsHandlers.push(handler);
      }
    });
    jQuery(".dslca-module-edit-option input, .dslca-module-edit-option select").trigger('dslc-init-deps');
  };

  window.LiveComposer.Builder.UI.unloadOptionsDeps = function () {
    window.LiveComposer.Builder.Helpers.depsHandlers.forEach(function (handler) {
      jQuery(document).unbind('change', handler);
      jQuery(document).unbind('dslc-init-deps', handler);
    });
    window.LiveComposer.Builder.Helpers.depsHandlers = [];
  };
  /**
   * Creates inline style tag when editing WYSWIG
   *
   * @param  {object} params
   *    params.rule
   *    params.elems
   *    params.module_id
   */


  window.LiveComposer.Builder.Helpers.processInlineStyleTag = function (params) {
    if (_typeof(params) != 'object') return false;
    var resp_prefix = '',
        resp_postfix = '';

    if (params.context.closest(".dslca-module-edit-option").data('tab') == 'tablet_responsive') {
      resp_prefix = '@media only screen and (max-width: 1024px) and (min-width: 768px) {';
      resp_postfix = '}';
    } else if (params.context.closest(".dslca-module-edit-option").data('tab') == 'phone_responsive') {
      resp_prefix = '@media only screen and (max-width: 767px) {';
      resp_postfix = '}';
    }

    params.styleContent = resp_prefix + params.styleContent + resp_postfix;
    var id = resp_prefix + params.rule + params.elems;
    id = id.replace(/ /gi, '');

    if (window.LiveComposer.Builder.PreviewAreaDocument[0].getElementById(id) == null) {
      var styleTag = document.createElement('style');
      styleTag.innerHTML = params.styleContent;
      styleTag.id = id;
      styleTag.className = "temp-styles-for-module";
      window.LiveComposer.Builder.PreviewAreaDocument[0].body.appendChild(styleTag);
    } else {
      window.LiveComposer.Builder.PreviewAreaDocument[0].getElementById(id).innerHTML = params.styleContent;
    }
  };

  window.LiveComposer.Builder.UI.shakePanelConfirmButton = function () {
    jQuery('.dslca-module-edit-save').addClass('lc-shake-effect active');
    setTimeout(function () {
      jQuery('.dslca-module-edit-save').removeClass('lc-shake-effect active');
    }, 1000);
  };

  onModuleOptionsChange();
  onSectionOptionsChange();
  onFileUploadOptionsChange();
};

var onModuleOptionsChange = function onModuleOptionsChange() {
  // Live Preview for Module Settings Change
  jQuery(document).on('change', '.dslca-module-edit-field', function () {
    if (window.dslcDebug) console.log('on change event for .dslca-module-edit-field');
    var dslcOptionValue = '',
        dslcOptionValueOrig = '',
        dslcOption = jQuery(this),
        dslcOptionID = dslcOption.data('id'),
        dslcOptionWrap = dslcOption.closest('.dslca-module-edit-option'),
        dslcModule = jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument),
        dslcModuleID = dslcModule.data('module'),
        dslcModuleOptions = jQuery('.dslca-module-options-front textarea', dslcModule); // Add changed class

    dslcModule.addClass('dslca-module-change-made'); // Hide/Show tabs in the module options panel.
    // Required to show/hide particular options tabs based on the current selection.
    // Active only for dropdowns and checkboxes.

    if (dslcOptionWrap.hasClass('dslca-module-edit-option-select') || dslcOptionWrap.hasClass('dslca-module-edit-option-checkbox')) {
      dslc_module_options_hideshow_tabs();
    }
    /**
     * Refresh on change = true
     *
     * Refresh module HTML from the server on every field value change
     */


    if (jQuery(this).closest('.dslca-module-edit-option').data('refresh-on-change') == 'active') {
      /**
       * Get the new value
       */
      if (dslcOptionWrap.find('.dslca-module-edit-option-checkbox-wrapper').length) {
        var dslcOptionChoices = jQuery('input[type="checkbox"]', dslcOptionWrap);
        dslcOptionChoices.each(function () {
          if (jQuery(this).prop('checked')) {
            dslcOptionValue = dslcOptionValue + jQuery(this).val() + ' ';
          }
        });
      } else if (dslcOption.hasClass('dslca-module-edit-option-radio')) {
        var dslcOptionValue = jQuery('.dslca-module-edit-field:checked', dslcOption).val();
      } else {
        var dslcOptionValue = dslcOption.val(); // Post Grid > Thumbnail: Orientation change.
        // Need to change thumbnail width to get it work as expected

        if (dslcOptionID == 'orientation' && dslcOptionValue == 'horizontal') {
          var dslcSliderEl = jQuery('.dslca-module-edit-option-thumb_width .dslca-module-edit-field');
          dslcSliderEl.val('40').trigger('change');
        } else if (dslcOptionID == 'orientation' && dslcOptionValue == 'vertical') {
          var dslcSliderEl = jQuery('.dslca-module-edit-option-thumb_width .dslca-module-edit-field');
          dslcSliderEl.val('100').trigger('change');
        }
      }
      /**
       * Change old value with new value
       */


      if (undefined !== dslcOptionValue) {
        dslcOptionValue = dslcOptionValue.trim().replace(/<textarea/g, '<lctextarea').replace(/<\/textarea/g, '</lctextarea');
      }

      jQuery('.dslca-module-options-front textarea[data-id="' + dslcOptionID + '"]', dslcModule).val(dslcOptionValue);
      jQuery('.dslca-container-loader').show();
      Object(_module_js__WEBPACK_IMPORTED_MODULE_1__["moduleOutputAltered"])(function () {
        jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).addClass('dslca-module-change-made');

        if (dslcOptionID == 'css_load_preset' && !jQuery('body').hasClass('dslca-new-preset-added')) {
          dslc_module_options_show(dslcModuleID);
          jQuery('.dslca-container-loader').hide();
        } else {
          jQuery('.dslca-container-loader').hide();
        }

        jQuery('body').removeClass('dslca-new-preset-added'); // Trigger 'LC.moduleChange' event.
        // This event can be used by 3-rd party developers to re-init
        // some of the JavaScript code on modure re-rendering.

        LiveComposer.Utils.publish('LC.moduleChange', {
          moduleId: dslcModuleID,
          optionID: dslcOptionID,
          optionVal: dslcOption.val()
        });
      });
      /**
       * Refresh on change = false
       *
       * Do not refresh from the server, but using JS
       */
    } else {
      /**
       * Live Preview
       */
      if (dslcOption.hasClass('dslca-module-edit-field-font')) {
        var dslcFontsToLoad = dslcOption.val();
        dslcFontsToLoad = dslcFontsToLoad + ':400,100,200,300,500,600,700,800,900';
        var dslcAffectOnChangeEl = dslcOption.data('affect-on-change-el');
        var dslcAffectOnChangeRule = dslcOption.data('affect-on-change-rule');
        var dslcAffectOnChangeVal = dslcOption.val();
        var dslcAffectOnChangeValOrig = dslcAffectOnChangeVal;
        var module = jQuery(".dslca-module-being-edited", LiveComposer.Builder.PreviewAreaDocument);

        if (dslcOption.val().length && dslcGoogleFontsArray.indexOf(dslcOption.val()) !== -1) {
          // Call WebFont function from the iframe
          document.getElementById('page-builder-frame').contentWindow.WebFont.load({
            google: {
              families: [dslcFontsToLoad]
            },
            active: function active(familyName, fvd) {
              if (jQuery('.dslca-font-loading').closest('.dslca-module-edit-field-font-next').length) {
                jQuery('.dslca-font-loading').removeClass('dslca-font-loading').find('.dslca-icon').removeClass('dslc-icon-spin').addClass('dslc-icon-chevron-right');
              } else {
                jQuery('.dslca-font-loading').removeClass('dslca-font-loading').find('.dslca-icon').removeClass('dslc-icon-spin').addClass('dslc-icon-chevron-left');
              }

              var elems = dslcAffectOnChangeEl.split(',');
              var styleContent = "#" + module[0].id + " " + elems.join(", #" + module[0].id + " ") + " {" + dslcAffectOnChangeRule + ": " + dslcAffectOnChangeVal + "}";
              LiveComposer.Builder.Helpers.processInlineStyleTag({
                context: dslcOption,
                rule: dslcAffectOnChangeRule,
                elems: dslcAffectOnChangeEl,
                styleContent: styleContent
              });
            },
            inactive: function inactive(familyName, fvd) {
              if (jQuery('.dslca-font-loading').closest('.dslca-module-edit-field-font-next').length) {
                jQuery('.dslca-font-loading').removeClass('dslca-font-loading').find('.dslca-icon').removeClass('dslc-icon-spin').addClass('dslc-icon-chevron-right');
              } else {
                jQuery('.dslca-font-loading').removeClass('dslca-font-loading').find('.dslca-icon').removeClass('dslc-icon-spin').addClass('dslc-icon-chevron-left');
              }
            }
          });
        } else {
          setTimeout(function () {
            if (jQuery('.dslca-font-loading.dslca-module-edit-field-font-next').length) {
              jQuery('.dslca-font-loading').removeClass('dslca-font-loading').find('.dslca-icon').removeClass('dslc-icon-spin').addClass('dslc-icon-chevron-right');
            } else {
              jQuery('.dslca-font-loading').removeClass('dslca-font-loading').find('.dslca-icon').removeClass('dslc-icon-spin').addClass('dslc-icon-chevron-left');
            }

            var elems = dslcAffectOnChangeEl.split(',');
            var styleContent = "#" + module[0].id + " " + elems.join(", #" + module[0].id + " ") + " {" + dslcAffectOnChangeRule + ": " + dslcAffectOnChangeVal + "}";
            LiveComposer.Builder.Helpers.processInlineStyleTag({
              context: dslcOption,
              rule: dslcAffectOnChangeRule,
              elems: dslcAffectOnChangeEl,
              styleContent: styleContent
            });
          }, 100);
        }
        /**
         * Checkbox
         */

      } else if (dslcOption.hasClass('dslca-module-edit-field-checkbox')) {
        var dslcOptionChoices = jQuery('input[type="checkbox"]', dslcOptionWrap);
        dslcOptionChoices.each(function () {
          /*
          @todo This function is specific to borders. Needs review.
           */
          if (jQuery(this).prop('checked')) {
            dslcOptionValue = dslcOptionValue + 'solid ';
            dslcOptionValueOrig = dslcOptionValueOrig + jQuery(this).val() + ' ';
          } else {
            dslcOptionValue = dslcOptionValue + 'none ';
          }
        }); // Here dslcOptionValue will look like: none none none solid.
      }
      /**
       * All other option types
       */


      if (!dslcOption.hasClass('dslca-module-edit-field-font') && dslcOption.data('affect-on-change-el') != null && dslcOption.data('affect-on-change-rule') != null) {
        var dslcExt = dslcOption.data('ext') || '';
        var dslcAffectOnChangeEl = dslcOption.data('affect-on-change-el');
        var dslcAffectOnChangeRule = dslcOption.data('affect-on-change-rule');
        var dslcAffectOnChangeVal = dslcOption.val();
        var dslcAffectOnChangeValOrig = dslcAffectOnChangeVal;

        if (dslcOption.hasClass('dslca-module-edit-field-checkbox')) {
          dslcAffectOnChangeVal = dslcOptionValue;
          dslcAffectOnChangeValOrig = dslcOptionValueOrig;
        }

        if (dslcOption.hasClass('dslca-module-edit-field-image')) {
          dslcAffectOnChangeVal = 'url("' + dslcAffectOnChangeVal + '")';
        }

        if (null !== dslcAffectOnChangeVal && dslcAffectOnChangeVal.length < 1 && (dslcAffectOnChangeRule == 'background-color' || dslcAffectOnChangeRule == 'background')) {
          dslcAffectOnChangeVal = 'transparent';
        }

        dslcAffectOnChangeRule.split(',').forEach(function (rule) {
          rule = rule.replace(/\s+/g, '');
          var module = jQuery(".dslca-module-being-edited", LiveComposer.Builder.PreviewAreaDocument);
          var elems = dslcAffectOnChangeEl.split(',');
          var styleContent = "#" + module[0].id + " " + elems.join(", #" + module[0].id + " ") + " {" + rule + ": " + dslcAffectOnChangeVal + dslcExt + "}";
          LiveComposer.Builder.Helpers.processInlineStyleTag({
            context: dslcOption,
            rule: rule,
            elems: dslcAffectOnChangeEl,
            styleContent: styleContent
          });
        });
      }
      /**
       * Update option
       */


      var dslcOptionToApply = ''; // Do we work with CSS control or module property?

      if (dslcOptionID.indexOf('css_') !== -1) {
        // Apply CSS property.
        dslcOptionToApply = dslcAffectOnChangeValOrig;
      } else {
        // Apply module property.
        dslcOptionToApply = dslcOption.val();
      }

      jQuery('.dslca-module-option-front[data-id="' + dslcOptionID + '"]', dslcModule).val(dslcOptionToApply); // Trigger 'LC.moduleChange' event.
      // This event can be used by 3-rd party developers to re-init
      // some of the JavaScript code on modure re-rendering.

      LiveComposer.Utils.publish('LC.moduleChange', {
        moduleId: dslcModule[0].id,
        optionID: dslcOptionID,
        optionVal: dslcAffectOnChangeValOrig || dslcOption.val()
      });
    }
  });
};

var onSectionOptionsChange = function onSectionOptionsChange() {
  // ROW styling option changes
  jQuery(document).on('change', '.dslca-modules-section-edit-field', function () {
    var dslcField, dslcFieldID, dslcEl, dslcModulesSection, dslcVal, dslcValReal, dslcValExt, dslcRule, dslcSetting, dslcTargetEl, dslcImgURL;
    dslcField = jQuery(this);
    dslcFieldID = dslcField.data('id');
    dslcVal = dslcField.val();
    dslcValReal = dslcVal;
    dslcValExt = dslcVal + dslcField.data('ext');
    dslcRule = dslcField.data('css-rule');
    dslcEl = jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument); // Currently editing element

    dslcTargetEl = dslcEl;
    dslcSetting = jQuery('.dslca-modules-section-settings input[data-id="' + dslcFieldID + '"]', dslcEl);
    dslcEl.addClass('dslca-modules-section-change-made'); // If image/upload field alter the value ( use from data )

    if (dslcField.hasClass('dslca-modules-section-edit-field-upload')) {
      if (dslcVal && dslcVal.length) {
        // dslcVal = dslcField.data('dslca-img-url');
        dslcVal = jQuery('.dslca-modules-section-settings input[data-id="dslca-img-url"]', dslcEl).val();
      }
    }

    if (dslcRule == 'background-image') {
      dslcVal = 'url("' + dslcVal + '")';
      LiveComposer.Builder.PreviewAreaWindow.dslc_bg_video();
    }

    if (dslcFieldID == 'bg_image_attachment') {
      dslcEl.removeClass('dslc-init-parallax');
    }

    if (dslcFieldID == 'border-top' || dslcFieldID == 'border-right' || dslcFieldID == 'border-bottom' || dslcFieldID == 'border-left') {
      var dslcBorderStyle = jQuery('.dslca-modules-section-settings input[data-id="border_style"]').val();
      dslcSetting = jQuery('.dslca-modules-section-settings input[data-id="border"]', dslcEl);
      dslcValReal = '';
      var dslcChecboxesWrap = dslcField.closest('.dslca-modules-section-edit-option-checkbox-wrapper');
      dslcChecboxesWrap.find('.dslca-modules-section-edit-field-checkbox').each(function () {
        if (jQuery(this).is(':checked')) {
          if (jQuery(this).data('id') == 'border-top') {
            dslcValReal += 'top ';
          } else if (jQuery(this).data('id') == 'border-right') {
            dslcValReal += 'right ';
          } else if (jQuery(this).data('id') == 'border-bottom') {
            dslcValReal += 'bottom ';
          } else if (jQuery(this).data('id') == 'border-left') {
            dslcValReal += 'left ';
          }
        }
      });

      if (dslcField.is(':checked')) {
        if (dslcField.data('id') == 'border-top') {
          dslcEl.css({
            'border-top-style': dslcBorderStyle
          });
        } else if (dslcField.data('id') == 'border-right') {
          dslcEl.css({
            'border-right-style': dslcBorderStyle
          });
        } else if (dslcField.data('id') == 'border-bottom') {
          dslcEl.css({
            'border-bottom-style': dslcBorderStyle
          });
        } else if (dslcField.data('id') == 'border-left') {
          dslcEl.css({
            'border-left-style': dslcBorderStyle
          });
        }
      } else {
        if (dslcField.data('id') == 'border-top') {
          dslcEl.css({
            'border-top-style': 'hidden'
          });
        } else if (dslcField.data('id') == 'border-right') {
          dslcEl.css({
            'border-right-style': 'hidden'
          });
        } else if (dslcField.data('id') == 'border-bottom') {
          dslcEl.css({
            'border-bottom-style': 'hidden'
          });
        } else if (dslcField.data('id') == 'border-left') {
          dslcEl.css({
            'border-left-style': 'hidden'
          });
        }
      }
    } else if (dslcField.hasClass('dslca-modules-section-edit-field-checkbox')) {
      var checkboxes = jQuery(this).closest('.dslca-modules-section-edit-option-checkbox-wrapper').find('.dslca-modules-section-edit-field-checkbox');
      var checkboxesVal = '';
      checkboxes.each(function () {
        if (jQuery(this).prop('checked')) {
          checkboxesVal += jQuery(this).data('val') + ' ';
        }
      });
      var dslcValReal = checkboxesVal;
      /* Show On */

      if (dslcField.data('id') == 'show_on') {
        if (checkboxesVal.indexOf('desktop') !== -1) {
          jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslc-hide-on-desktop');
        } else {
          jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).addClass('dslc-hide-on-desktop');
        }

        if (checkboxesVal.indexOf('tablet') !== -1) {
          jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslc-hide-on-tablet');
        } else {
          jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).addClass('dslc-hide-on-tablet');
        }

        if (checkboxesVal.indexOf('phone') !== -1) {
          jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslc-hide-on-phone');
        } else {
          jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).addClass('dslc-hide-on-phone');
        }
      }
    } else if (dslcFieldID == 'bg_image_attachment' && dslcVal == 'parallax') {
      dslcEl.addClass('dslc-init-parallax');
      LiveComposer.Builder.PreviewAreaWindow.dslc_parallax();
    } else if (dslcFieldID == 'type') {
      if (dslcVal == 'full') {
        dslcEl.addClass('dslc-full');
      } else {
        dslcEl.removeClass('dslc-full');
      }

      LiveComposer.Builder.PreviewAreaWindow.dslc_masonry();
    } else if (dslcFieldID == 'columns_spacing') {
      if (dslcVal == 'nospacing') {
        dslcEl.addClass('dslc-no-columns-spacing');
      } else {
        dslcEl.removeClass('dslc-no-columns-spacing');
      }
    } else if (dslcFieldID == 'custom_class') {} else if (dslcFieldID == 'custom_id') {} else if (dslcFieldID == 'bg_video') {
      jQuery('.dslc-bg-video video', dslcEl).remove();

      if (dslcVal && dslcVal.length) {
        var dslcVideoVal = dslcVal;
        dslcVideoVal = dslcVideoVal.replace('.webm', '');
        dslcVideoVal = dslcVideoVal.replace('.mp4', '');
        jQuery('.dslc-bg-video-inner', dslcEl).html('<video><source type="video/mp4" src="' + dslcVideoVal + '.mp4" /><source type="video/webm" src="' + dslcVideoVal + '.webm" /></video>');
        LiveComposer.Builder.PreviewAreaWindow.dslc_bg_video();
      }
    } else if (dslcFieldID == 'bg_image_thumb') {
      if (dslcValReal == 'enabled') {
        if (jQuery('#dslca-post-data-thumb').length) {
          var dslcThumbURL = "url('" + jQuery('#dslca-post-data-thumb').val() + "')";
          dslcTargetEl.css(dslcRule, dslcThumbURL);
        }
      } else if (dslcValReal == 'disabled') {
        dslcTargetEl.css(dslcRule, 'none');
      }
    } else {
      if (dslcField.data('css-element')) {
        dslcTargetEl = jQuery(dslcField.data('css-element'), dslcEl);
      }

      dslcRule = dslcRule.replace(/ /g, '').split(',');
      var dslcValToApply;

      if (null != dslcField.data('ext')) {
        dslcValToApply = dslcValExt;
      } else {
        dslcValToApply = dslcVal;
      } // Loop through rules (useful when there are multiple rules)


      for (var i = 0; i < dslcRule.length; i++) {
        dslcTargetEl.css(dslcRule[i], dslcValToApply);
      }
    } // Update hidden input with new value


    dslcSetting.val(dslcValReal);
    if (!LiveComposer.Builder.Flags.generate_code_after_row_changed) return false; // window.dslc_generate_code();
    // window.dslc_show_publish_button();
  });
};

var onFileUploadOptionsChange = function onFileUploadOptionsChange() {
  // Uploading files
  var file_frame;
  jQuery(document).on('click', '.dslca-module-edit-field-image-add-hook, .dslca-modules-section-edit-field-image-add-hook', function () {
    var hook = jQuery(this);

    if (hook.hasClass('dslca-module-edit-field-image-add-hook')) {
      var field = hook.siblings('.dslca-module-edit-field-image');
      var removeHook = hook.siblings('.dslca-module-edit-field-image-remove-hook');
    } else {
      var field = hook.siblings('.dslca-modules-section-edit-field-upload');
      var removeHook = hook.siblings('.dslca-modules-section-edit-field-image-remove-hook');
    } // Whether or not multiple files are allowed


    var multiple = false; // Create the media frame.

    file_frame = wp.media.frames.file_frame = wp.media({
      title: 'Choose Image',
      button: {
        text: 'Confirm'
      },
      multiple: multiple
    }); // When an image is selected, run a callback.

    file_frame.on('select', function () {
      var attachment = file_frame.state().get('selection').first().toJSON();
      /*
      Save image ID as value of the image input.
       */
      // field.val( attachment.id ).data( 'dslca-img-url', attachment.url ).trigger('change'); - previous version

      field.val(attachment.id);
      var dataId = hook.parent().attr("data-id");
      /*
      Save alt as value of the image input.
       */

      if (attachment.alt != '' && dataId == 'image') {
        jQuery('.dslca-module-edit-option-image_alt input[data-id="image_alt"]').val(attachment.alt);
      }
      /*
      Save alt as value of the image input.
       */


      if (attachment.title != '' && dataId == 'image') {
        jQuery('.dslca-module-edit-option-image_title input[data-id="image_title"]').val(attachment.title);
      }
      /*
      Save image URL as data attribute of input in dslca-modules-section-settings set
      We need URL in 'dslca-img-url' for live preview
       */


      jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).find('.dslca-modules-section-settings input[data-id="dslca-img-url"]').val(attachment.url);
      field.trigger('change'); // trigger change only after 'dslca-img-url' is set

      hook.hide();
      removeHook.show();
    }); // Finally, open the modal

    file_frame.open();
  });
  jQuery(document).on('click', '.dslca-module-edit-field-image-remove-hook, .dslca-modules-section-edit-field-image-remove-hook', function () {
    var hook = jQuery(this);

    if (hook.hasClass('dslca-module-edit-field-image-remove-hook')) {
      var field = hook.siblings('.dslca-module-edit-field-image');
      var addHook = hook.siblings('.dslca-module-edit-field-image-add-hook');
    } else {
      var field = hook.siblings('.dslca-modules-section-edit-field-upload');
      var addHook = hook.siblings('.dslca-modules-section-edit-field-image-add-hook');
    }

    field.val('').trigger('change'); // .dslca-modules-section-edit-field

    /*
    Delete alt and title value.
     */

    var dataId = hook.parent().attr("data-id");

    if (dataId == 'image') {
      jQuery('.dslca-module-edit-option-image_alt input').attr('value', '').trigger('change');
      jQuery('.dslca-module-edit-option-image_alt input').attr('data-val-bckp', '').trigger('change');
      jQuery('.dslca-module-edit-option-image_title input').attr('value', '').trigger('change');
      jQuery('.dslca-module-edit-option-image_title input').attr('data-val-bckp', '').trigger('change');
    }

    hook.hide();
    addHook.show();
  });
};
/**
 * MODULES SETTINGS PANEL - Filter Module Options
 */


function dslc_module_options_section_filter(sectionID) {
  if (window.dslcDebug) console.log('dslc_module_options_section_filter'); // Hide all options

  jQuery('.dslca-module-edit-option').hide(); // Show options for current section

  jQuery('.dslca-module-edit-option[data-section="' + sectionID + '"]').show(); // Recall module options tab

  elementOptionsTabs();
}
/**
 * MODULES SETTINGS PANEL - Show module options tab
 */


var elementOptionsTabs = function elementOptionsTabs(dslcTab) {
  if (window.dslcDebug) console.log('elementOptionsTabs'); // Get currently active section

  var dslcSectionID = jQuery('.dslca-options-filter-hook.dslca-active').data('section'); // If tab not supplied set to first

  dslcTab = typeof dslcTab !== 'undefined' ? dslcTab : jQuery('.dslca-module-edit-options-tab-hook[data-section="' + dslcSectionID + '"]:first'); // Get the tab ID

  var dslcTabID = dslcTab.data('id'); // Set active class on tab

  jQuery('.dslca-module-edit-options-tab-hook').removeClass('dslca-active');
  dslcTab.addClass('dslca-active'); // Show tabs container

  jQuery('.dslca-module-edit-options-tabs').show(); // Hide/Show tabs hooks

  jQuery('.dslca-module-edit-options-tab-hook').hide();
  jQuery('.dslca-module-edit-options-tab-hook[data-section="' + dslcSectionID + '"]').show();

  if (dslcTabID) {
    // Hide/Show options
    jQuery('.dslca-module-edit-option').hide();
    jQuery('.dslca-module-edit-option[data-tab="' + dslcTabID + '"]').show(); // Hide/Show Tabs

    dslc_module_options_hideshow_tabs(); // If only one tab hide the tabs container

    if (jQuery('.dslca-module-edit-options-tab-hook:visible').length < 2) {
      jQuery('.dslca-module-edit-options-tabs').hide();
    } else {
      jQuery('.dslca-module-edit-options-tabs').show();
    }
    /**
     * If responsive tab, change the width of the dslc-content div
     */


    dslc_disable_responsive_view(); // Tablet

    if (dslcTabID == DSLCString.str_res_tablet.toLowerCase() + '_responsive') {
      jQuery('body').removeClass('dslc-res-big dslc-res-smaller-monitor dslc-res-phone dslc-res-tablet');
      jQuery('body').addClass('dslc-res-tablet');
      jQuery('html').addClass('dslc-responsive-preview');
    } // Phone


    if (dslcTabID == DSLCString.str_res_phone.toLowerCase() + '_responsive') {
      jQuery('body').removeClass('dslc-res-big dslc-res-smaller-monitor dslc-res-phone dslc-res-tablet');
      jQuery('body').addClass('dslc-res-phone');
      jQuery('html').addClass('dslc-responsive-preview');
    } // If responsive reload module


    if (dslcTabID == DSLCString.str_res_tablet.toLowerCase() + '_responsive' || dslcTabID == DSLCString.str_res_phone.toLowerCase() + '_responsive') {
      // Show the loader
      jQuery('.dslca-container-loader').show(); // Reload Module

      Object(_module_js__WEBPACK_IMPORTED_MODULE_1__["moduleOutputAltered"])(function () {
        // Hide the loader
        jQuery('.dslca-container-loader').hide();
      });
    }
  } // Scroll horizontally options panel to the left (not ready)


  if (jQuery('body').hasClass('rtl')) {
    var totalWidthOption = 0;
    var totalWidthGroup = 0;
    var totalWidth = 0;
    jQuery('.dslca-module-edit-options-wrapper > .dslca-module-edit-option:visible').each(function (index) {
      if (!jQuery(this).hasClass('dslca-module-edit-option-hidden') && !jQuery(this).hasClass('dslca-module-control-group')) {
        totalWidthOption += parseInt(jQuery(this).outerWidth(), 10);
      }
    });
    jQuery('.dslca-module-edit-options-wrapper > .dslca-module-control-group:visible').each(function (index) {
      totalWidthGroup += parseInt(jQuery(this).outerWidth(), 10);
    });
    totalWidth = parseInt(totalWidthOption) + parseInt(totalWidthGroup) + 10;
    jQuery('.dslca-module-edit-options-wrapper').css({
      'width': totalWidth + 'px'
    });
  }
};
/**
 * MODULES SETTINGS PANEL - Hide show tabs based on option choices
 */

function dslc_module_options_hideshow_tabs() {
  if (window.dslcDebug) console.log('dslc_module_options_hideshow_tabs');
  var dslcSectionID = jQuery('.dslca-options-filter-hook.dslca-active').data('section');

  if (dslcSectionID == 'styling') {
    // Vars
    var dslcContainer = jQuery('.dslca-module-edit'),
        dslcHeading = true,
        dslcFilters = true,
        dslcCarArrows = true,
        dslcCarCircles = true,
        dslcPagination = true,
        dslcElThumb = true,
        dslcElTitle = true,
        dslcElExcerpt = true,
        dslcElMeta = true,
        dslcElButton = true,
        dslcElCats = true,
        dslcElCount = true,
        dslcElSeparator = true,
        dslcElTags = true,
        dslcElSocial = true,
        dslcElPosition = true,
        dslcElIcon = true,
        dslcElContent = true,
        dslcElPrice = true,
        dslcElPriceSec = true,
        dslcElAddCart = true,
        dslcElDetails = true,
        dslcElQuote = true,
        dslcElAuthorName = true,
        dslcElAuthorPos = true,
        dslcElImage = true,
        dslcElLogo = true; // Is heading selected?

    if (!jQuery('.dslca-module-edit-field[value="main_heading"]').is(':checked')) dslcHeading = false; // Are filters selected?

    if (!jQuery('.dslca-module-edit-field[value="filters"]').is(':checked')) dslcFilters = false; // Are arrows selected?

    if (!jQuery('.dslca-module-edit-field[value="arrows"]').is(':checked')) dslcCarArrows = false; // Are circles selected?

    if (!jQuery('.dslca-module-edit-field[value="circles"]').is(':checked')) dslcCarCircles = false; // Is it a carousel?

    if (jQuery('.dslca-module-edit-field[data-id="type"]').val() != 'carousel') {
      dslcCarArrows = false;
      dslcCarCircles = false;
    } // Is pagination enabled?


    if (jQuery('.dslca-module-edit-field[data-id="pagination_type"]').val() == 'disabled') {
      dslcPagination = false;
    } // Is thumb enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="thumbnail"]').is(':checked')) {
      dslcElThumb = false;
    } // Is title enabled?


    if (jQuery('.dslca-module-edit-field[data-id*="elements"][value="content"]').length && !jQuery('.dslca-module-edit-field[data-id*="elements"][value="title"]').is(':checked')) {
      dslcElTitle = false;
    } // Is excerpt enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="excerpt"]').is(':checked')) {
      dslcElExcerpt = false;
    } // Is meta enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="meta"]').is(':checked')) {
      dslcElMeta = false;
    } // Is button enabled?


    if (jQuery('.dslca-module-edit-field[data-id*="elements"][value="button"]').length && !jQuery('.dslca-module-edit-field[data-id*="elements"][value="button"]').is(':checked')) {
      dslcElButton = false;
    } // Are cats enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="categories"]').is(':checked')) {
      dslcElCats = false;
    } // Is separator enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="separator"]').is(':checked')) {
      dslcElSeparator = false;
    } // Is count enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="count"]').is(':checked')) {
      dslcElCount = false;
    } // Are tags enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="tags"]').is(':checked')) {
      dslcElTags = false;
    } // Are social link enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="social"]').is(':checked')) {
      dslcElSocial = false;
    } // Is position enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="position"]').is(':checked')) {
      dslcElPosition = false;
    } // Is icon enabled?


    if (jQuery('.dslca-module-edit-field[data-id*="elements"][value="icon"]').length && !jQuery('.dslca-module-edit-field[data-id*="elements"][value="icon"]').is(':checked')) {
      dslcElIcon = false;
    } // Is content enabled?


    if (jQuery('.dslca-module-edit-field[data-id*="elements"][value="content"]').length && !jQuery('.dslca-module-edit-field[data-id*="elements"][value="content"]').is(':checked')) {
      dslcElContent = false;
    } // Is price enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="price"]').is(':checked')) {
      dslcElPrice = false;
    } // Is price secondary enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="price_2"]').is(':checked')) {
      dslcElPriceSec = false;
    } // Is add to cart enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="addtocart"]').is(':checked')) {
      dslcElAddCart = false;
    } // Is add to cart enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="details"]').is(':checked')) {
      dslcElDetails = false;
    } // Is quote enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="quote"]').is(':checked')) {
      dslcElQuote = false;
    } // Is author name enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="author_name"]').is(':checked')) {
      dslcElAuthorName = false;
    } // Is author position enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="author_position"]').is(':checked')) {
      dslcElAuthorPos = false;
    } // Is image enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="image"]').is(':checked')) {
      dslcElImage = false;
    } // Is logo enabled?


    if (!jQuery('.dslca-module-edit-field[data-id*="elements"][value="logo"]').is(':checked')) {
      dslcElLogo = false;
    } // Show/Hide Heading


    if (dslcHeading) jQuery('.dslca-module-edit-options-tab-hook[data-id="heading_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="heading_styling"]').hide(); // Show/Hide Filters

    if (dslcFilters) jQuery('.dslca-module-edit-options-tab-hook[data-id="filters_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="filters_styling"]').hide(); // Show/Hide Carousel Arrows

    if (dslcCarArrows) jQuery('.dslca-module-edit-options-tab-hook[data-id="carousel_arrows_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="carousel_arrows_styling"]').hide(); // Show/Hide Carousel Circles

    if (dslcCarCircles) jQuery('.dslca-module-edit-options-tab-hook[data-id="carousel_circles_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="carousel_circles_styling"]').hide(); // Show/Hide Pagination

    if (dslcPagination) jQuery('.dslca-module-edit-options-tab-hook[data-id="pagination_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="pagination_styling"]').hide(); // Show/Hide Thumb

    if (dslcElThumb) jQuery('.dslca-module-edit-options-tab-hook[data-id="thumbnail_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="thumbnail_styling"]').hide(); // Show/Hide Title

    if (dslcElTitle) jQuery('.dslca-module-edit-options-tab-hook[data-id="title_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="title_styling"]').hide(); // Show/Hide Excerpt

    if (dslcElExcerpt) jQuery('.dslca-module-edit-options-tab-hook[data-id="excerpt_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="excerpt_styling"]').hide(); // Show/Hide Meta

    if (dslcElMeta) jQuery('.dslca-module-edit-options-tab-hook[data-id="meta_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="meta_styling"]').hide(); // Show/Hide Button

    if (dslcElButton) jQuery('.dslca-module-edit-options-tab-hook[data-id="button_styling"], .dslca-module-edit-options-tab-hook[data-id="primary_button_styling"],' + ' .dslca-module-edit-options-tab-hook[data-id="secondary_button_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="button_styling"], .dslca-module-edit-options-tab-hook[data-id="primary_button_styling"],' + ' .dslca-module-edit-options-tab-hook[data-id="secondary_button_styling"]').hide(); // Show/Hide Cats

    if (dslcElCats) jQuery('.dslca-module-edit-options-tab-hook[data-id="categories_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="categories_styling"]').hide(); // Show/Hide Separator

    if (dslcElSeparator) jQuery('.dslca-module-edit-options-tab-hook[data-id="separator_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="separator_styling"]').hide(); // Show/Hide Count

    if (dslcElCount) jQuery('.dslca-module-edit-options-tab-hook[data-id="count_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="count_styling"]').hide(); // Show/Hide Tags

    if (dslcElTags) jQuery('.dslca-module-edit-options-tab-hook[data-id="tags_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="tags_styling"]').hide(); // Show/Hide Tags

    if (dslcElPosition) jQuery('.dslca-module-edit-options-tab-hook[data-id="position_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="position_styling"]').hide(); // Show/Hide Tags

    if (dslcElSocial) jQuery('.dslca-module-edit-options-tab-hook[data-id="social_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="social_styling"]').hide(); // Show/Hide Icon

    if (dslcElIcon) jQuery('.dslca-module-edit-options-tab-hook[data-id="icon_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="icon_styling"]').hide(); // Show/Hide Content

    if (dslcElContent) jQuery('.dslca-module-edit-options-tab-hook[data-id="content_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="content_styling"]').hide(); // Show/Hide Price

    if (dslcElPrice) jQuery('.dslca-module-edit-options-tab-hook[data-id="price_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="price_styling"]').hide(); // Show/Hide Price Sec

    if (dslcElPriceSec) jQuery('.dslca-module-edit-options-tab-hook[data-id="price_secondary_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="price_secondary_styling"]').hide(); // Show/Hide Add to Cart

    if (dslcElAddCart || dslcElDetails) jQuery('.dslca-module-edit-options-tab-hook[data-id="other_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="other_styling"]').hide(); // Show/Hide Quote

    if (dslcElQuote) jQuery('.dslca-module-edit-options-tab-hook[data-id="quote_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="quote_styling"]').hide(); // Show/Hide Author Name

    if (dslcElAuthorName) jQuery('.dslca-module-edit-options-tab-hook[data-id="author_name_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="author_name_styling"]').hide(); // Show/Hide Author Position

    if (dslcElAuthorPos) jQuery('.dslca-module-edit-options-tab-hook[data-id="author_position_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="author_position_styling"]').hide(); // Show/Hide Image

    if (dslcElImage) jQuery('.dslca-module-edit-options-tab-hook[data-id="image_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="image_styling"]').hide(); // Show/Hide Quote

    if (dslcElLogo) jQuery('.dslca-module-edit-options-tab-hook[data-id="logo_styling"]').show();else jQuery('.dslca-module-edit-options-tab-hook[data-id="logo_styling"]').hide();
  }
  /**
   * Check 'Enable/Disable Custom CSS' control
   */


  if (jQuery('.dslca-options-filter-hook[data-section="styling"]').hasClass('dslca-active')) {
    var dslcCustomCSS = jQuery('.dslca-module-edit-option[data-id="css_custom"]'),
        dslcCustomCSSVal = dslcCustomCSS.find('select').val();

    if (dslcCustomCSSVal == 'enabled') {
      jQuery('.dslca-module-edit-option[data-section="styling"]').css({
        visibility: 'visible'
      });
      jQuery('.dslca-module-edit-option[data-tab]').css('visibility', 'visible');
      jQuery('.dslca-module-edit-options-tabs').show();
    } else {
      jQuery('.dslca-module-edit-option[data-section="styling"]').css({
        visibility: 'hidden'
      });
      jQuery('.dslca-module-control-group.dslca-module-edit-option').css('visibility', 'hidden');
      jQuery('.dslca-module-edit-options-tabs').hide();
      dslcCustomCSS.css({
        visibility: 'visible'
      });
    }
  } else {
    jQuery('.dslca-module-edit-options-tabs').show();
  }

  if (jQuery('select.dslca-module-edit-field[data-id="css_res_t"]').val() == 'disabled') {
    jQuery('.dslca-module-edit-option[data-id*="css_res_t"]').css('visibility', 'hidden');
    jQuery('.dslca-module-edit-option[data-tab="tablet_responsive"]').css('visibility', 'hidden');
  } else {
    jQuery('.dslca-module-edit-option[data-id*="css_res_t"]').css('visibility', 'visible');
    jQuery('.dslca-module-edit-option[data-tab="tablet_responsive"]').css('visibility', 'visible');
  }

  if (jQuery('select.dslca-module-edit-field[data-id="css_res_p"]').val() == 'disabled') {
    jQuery('.dslca-module-edit-option[data-id*="css_res_p"]').css('visibility', 'hidden');
    jQuery('.dslca-module-edit-option[data-tab="phone_responsive"]').css('visibility', 'hidden');
  } else {
    jQuery('.dslca-module-edit-option[data-id*="css_res_p"]').css('visibility', 'visible');
    jQuery('.dslca-module-edit-option[data-tab="phone_responsive"]').css('visibility', 'visible');
  }

  jQuery('.dslca-module-edit-option[data-id="css_res_p"], .dslca-module-edit-option[data-id="css_res_t"]').css('visibility', 'visible');

  if (jQuery('.dslca-options-filter-hook').hasClass('dslca-active')) {
    var section_tab = jQuery('.dslca-options-filter-hook.dslca-active').data('section');

    if (jQuery('.dslca-module-edit-option[data-section="' + section_tab + '"]').hasClass('dep-show')) {
      jQuery('.dslca-module-edit-option.dep-show').show();
    }

    if (jQuery('.dslca-module-edit-option[data-section="' + section_tab + '"]').hasClass('dep-hide')) {
      jQuery('.dslca-module-edit-option.dep-hide').hide();
    }
  }

  if (jQuery('.dslca-module-edit-options-tab-hook').hasClass('dslca-active')) {
    var data_tab = jQuery('.dslca-module-edit-options-tab-hook.dslca-active').data('id');

    if (jQuery('.dslca-module-edit-option[data-tab="' + data_tab + '"]').hasClass('dependent')) {
      jQuery('.dslca-module-edit-option.dependent').hide();
      jQuery('.dslca-module-edit-option[data-tab="' + data_tab + '"].dep-show').show();
      jQuery('.dslca-module-edit-option[data-tab="' + data_tab + '"].dep-hide').hide();
    } else {
      jQuery('.dslca-module-edit-option.dependent').hide();
    }
  }
}
/**
 * MODULES SETTINGS PANEL - Confirm module options changes
 */


function dslc_module_options_confirm_changes(callback) {
  if (window.dslcDebug) console.log('dslc_module_options_confirm_changes'); // Callback

  callback = typeof callback !== 'undefined' ? callback : false; // If slider module

  if (jQuery('.dslca-module-being-edited', window.LiveComposer.Builder.PreviewAreaDocument).hasClass('dslc-module-DSLC_Sliders')) {
    jQuery('.dslca-module-being-edited', window.LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-module-being-edited'); // If not slider module
  } else {
    // Add class so we know saving is in progress
    jQuery('body').addClass('dslca-module-saving-in-progress'); // Reload module with new settings

    Object(_module_js__WEBPACK_IMPORTED_MODULE_1__["moduleOutputAltered"])(function () {
      // Update preset
      Object(_presets_js__WEBPACK_IMPORTED_MODULE_2__["updatePreset"])();
      window.dslc_generate_code();
      jQuery('.dslca-module-being-edited', window.LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-module-being-edited'); // Remove classes so we know saving finished

      jQuery('body').removeClass('dslca-module-saving-in-progress'); // Clean up options container

      jQuery('.dslca-module-edit-options-inner').html('');
      jQuery('.dslca-module-edit-options-tabs').html('');
      window.LiveComposer.Builder.UI.clearUtils(); // Callback if there's one

      if (callback) {
        callback();
      }
    });
  } // Show modules listing


  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_0__["showSection"])('.dslca-modules'); // Hide the filter hooks

  jQuery('.dslca-header .dslca-options-filter-hook').hide(); // Hide the save/cancel actions

  jQuery('.dslca-module-edit-actions').hide(); // Show the section hooks

  jQuery('.dslca-header .dslca-go-to-section-hook').show(); // window.dslc_generate_code();
  // Show the publish button

  window.dslc_show_publish_button();
}
/**
 * MODULES SETTINGS PANEL - Cancel module options changes
 */


function dslc_module_options_cancel_changes(callback) {
  if (window.dslcDebug) console.log('dslc_module_options_cancel_changes'); // Callback

  callback = typeof callback !== 'undefined' ? callback : false; // Vars

  var editedModule = jQuery('.dslca-module-being-edited', window.LiveComposer.Builder.PreviewAreaDocument); // Add backup option values

  jQuery('.dslca-module-options-front', editedModule).html('').append(window.LiveComposer.Builder.moduleBackup); // window.LiveComposer.Builder.moduleBackup = false;
  // Reload module

  Object(_module_js__WEBPACK_IMPORTED_MODULE_1__["moduleOutputAltered"])(function () {
    window.dslc_generate_code();
    jQuery('.dslca-module-being-edited', window.LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-module-being-edited'); // Clean up options container

    jQuery('.dslca-module-edit-options-inner').html('');
    jQuery('.dslca-module-edit-options-tabs').html('');
    window.LiveComposer.Builder.UI.clearUtils();

    if (callback) {
      callback();
    }
  }); // Show modules listing

  Object(_uigeneral_js__WEBPACK_IMPORTED_MODULE_0__["showSection"])('.dslca-modules'); // Hide the filter hooks

  jQuery('.dslca-header .dslca-options-filter-hook').hide(); // Hide the save/cancel actions

  jQuery('.dslca-module-edit-actions').hide(); // Show the section hooks

  jQuery('.dslca-header .dslca-go-to-section-hook').show(); // Show the publish button

  window.dslc_show_publish_button();
  window.LiveComposer.Builder.UI.clearUtils();
}
/**
 * MODULES SETTINGS PANEL - Option Tooltips
 */


function dslc_module_options_tooltip() {
  // Close Tooltip
  jQuery(document).on('click', '.dslca-module-edit-field-ttip-close', function () {
    jQuery('.dslca-module-edit-field-ttip, .dslca-module-edit-field-icon-ttip').hide();
  }); // Show Tooltip

  jQuery(document).on('click', '.dslca-module-edit-field-ttip-hook', function () {
    var dslcTtip = jQuery('.dslca-module-edit-field-ttip'),
        dslcTtipInner = dslcTtip.find('.dslca-module-edit-field-ttip-inner'),
        dslcHook = jQuery(this),
        dslcTtipContent,
        dslcLabel;
    dslcLabel = dslcHook.parent();

    if (dslcLabel.parent().hasClass('dslca-modules-section-edit-option')) {
      dslcTtipContent = dslcHook.closest('.dslca-modules-section-edit-option').find('.dslca-module-edit-field-ttip-content').html();
    } else {
      dslcTtipContent = dslcHook.closest('.dslca-module-edit-option').find('.dslca-module-edit-field-ttip-content').html();
    }

    if (dslcTtip.is(':visible')) {
      jQuery('.dslca-module-edit-field-ttip').hide();
    } else {
      dslcTtipInner.html(dslcTtipContent);
      var dslcOffset = dslcHook.offset();
      var dslcTtipHeight = dslcTtip.outerHeight();
      var dslcTtipWidth = dslcTtip.outerWidth();
      var dslcTtipLeft = dslcOffset.left - dslcTtipWidth / 2 + 6;
      var dslcTtipArrLeft = '50%';

      if (dslcTtipLeft < 0) {
        dslcTtipArrLeft = dslcTtipWidth / 2 + dslcTtipLeft + 'px';
        dslcTtipLeft = 0;
      }

      jQuery('.dslca-module-edit-field-ttip').show().css({
        top: dslcOffset.top - dslcTtipHeight - 20,
        left: dslcTtipLeft
      });
      jQuery("head").append(jQuery('<style>.dslca-module-edit-field-ttip:after, .dslca-module-edit-field-ttip:before { left: ' + dslcTtipArrLeft + ' }</style>'));
    }
  }); // Show Tooltip ( Icon Options )

  jQuery(document).on('click', '.dslca-module-edit-field-icon-ttip-hook', function () {
    var dslcTtip = jQuery('.dslca-module-edit-field-icon-ttip');
    var dslcHook = jQuery(this);

    if (dslcTtip.is(':visible')) {
      jQuery('.dslca-module-edit-field-icon-ttip').hide();
    } else {
      var dslcOffset = dslcHook.offset();
      var dslcTtipHeight = dslcTtip.outerHeight();
      var dslcTtipWidth = dslcTtip.outerWidth();
      var dslcTtipLeft = dslcOffset.left - dslcTtipWidth / 2 + 6;
      var dslcTtipArrLeft = '50%';

      if (dslcTtipLeft < 0) {
        dslcTtipArrLeft = dslcTtipWidth / 2 + dslcTtipLeft + 'px';
        dslcTtipLeft = 0;
      }

      jQuery('.dslca-module-edit-field-icon-ttip').show().css({
        top: dslcOffset.top - dslcTtipHeight - 20,
        left: dslcTtipLeft
      });
      jQuery("head").append(jQuery('<style>.dslca-module-edit-field-icon-ttip:after, .dslca-module-edit-field-icon-ttip:before { left: ' + dslcTtipArrLeft + ' }</style>'));
    }
  });
}
/**
 * MODULES SETTINGS PANEL - Font option type
 */


function dslc_module_options_font() {
  // Next Font
  jQuery(document).on('click', '.dslca-module-edit-field-font-next', function (e) {
    e.preventDefault();

    if (!jQuery(this).hasClass('dslca-font-loading') && !jQuery(this).siblings('.dslca-font-loading').length) {
      var dslcOption = jQuery(this).closest('.dslca-module-edit-option-font');
      var dslcField = jQuery('.dslca-module-edit-field-font', dslcOption);
      var dslcCurrIndex = dslcAllFontsArray.indexOf(dslcField.val());
      var dslcNewIndex = dslcCurrIndex + 1;
      jQuery('.dslca-module-edit-field-font-suggest', dslcOption).text('');
      dslcField.val(dslcAllFontsArray[dslcNewIndex]).trigger('change');
      jQuery(this).addClass('dslca-font-loading').find('.dslca-icon').removeClass('dslc-icon-chevron-right').addClass('dslc-icon-refresh dslc-icon-spin');
    }
  }); // Previous Font

  jQuery(document).on('click', '.dslca-module-edit-field-font-prev', function (e) {
    e.preventDefault();

    if (!jQuery(this).hasClass('dslca-font-loading') && !jQuery(this).siblings('.dslca-font-loading').length) {
      var dslcOption = jQuery(this).closest('.dslca-module-edit-option-font');
      var dslcField = jQuery('.dslca-module-edit-field-font', dslcOption);
      var dslcCurrIndex = dslcAllFontsArray.indexOf(dslcField.val());
      var dslcNewIndex = dslcCurrIndex - 1;
      jQuery('.dslca-module-edit-field-font-suggest', dslcOption).text('');

      if (dslcNewIndex < 0) {
        dslcNewIndex = dslcAllFontsArray.length - 1;
      }

      dslcField.val(dslcAllFontsArray[dslcNewIndex]).trigger('change');
      jQuery(this).addClass('dslca-font-loading').find('.dslca-icon').removeClass('dslc-icon-chevron-left').addClass('dslc-icon-refresh dslc-icon-spin');
    }
  }); // Keyup ( left arrow, right arrow, else )

  jQuery(document).on('keyup', '.dslca-module-edit-field-font', function (e) {
    var dslcField,
        dslcOption,
        dslcVal,
        dslcMatchingFont = false,
        dslcFont;
    dslcField = jQuery(this);
    dslcOption = dslcField.closest('.dslca-module-edit-option');

    if (e.which == 38) {
      jQuery('.dslca-module-edit-field-font-prev', dslcOption).click();
    }

    if (e.which == 40) {
      jQuery('.dslca-module-edit-field-font-next', dslcOption).click();
    }

    if (e.which != 13 && e.which != 38 && e.which != 40) {
      dslcVal = dslcField.val();
      var search = [];
      var re = new RegExp('^' + dslcVal, 'i');
      var dslcFontsAmount = dslcAllFontsArray.length;
      var i = 0;

      do {
        if (re.test(dslcAllFontsArray[i])) {
          if (!dslcMatchingFont) {
            var dslcMatchingFont = dslcAllFontsArray[i];
          }
        }

        i++;
      } while (i < dslcFontsAmount);

      if (!dslcMatchingFont) {
        dslcFont = dslcVal;
        jQuery('.dslca-module-edit-field-font-suggest', dslcOption).hide();
      } else {
        dslcFont = dslcMatchingFont;
        jQuery('.dslca-module-edit-field-font-suggest', dslcOption).show();
      }

      jQuery('.dslca-module-edit-field-font-suggest', dslcOption).text(dslcFont);

      if (dslcFont.length) {
        dslcField.val(dslcFont.substring(0, dslcField.val().length));
      }
    }
  }); // Key press ( enter )

  jQuery(document).on('keypress', '.dslca-module-edit-field-font', function (e) {
    if (e.which == 13) {
      e.preventDefault();
      var dslcField, dslcOption, dslcVal, dslcMatchingFont, dslcFont;
      dslcField = jQuery(this);
      dslcOption = dslcField.closest('.dslca-module-edit-option');
      jQuery(this).val(jQuery('.dslca-module-edit-field-font-suggest', dslcOption).text()).trigger('change');
      jQuery('.dslca-module-edit-field-font-suggest', dslcOption).text('');
    }
  });
}
/*
 * MODULES SETTINGS PANEL - Change icon code based on direction (next/previous)
 */


function dslc_list_icon(object, direction) {
  var dslcOption = jQuery(object).closest('.dslca-module-edit-option-icon');
  var dslcField = jQuery('.dslca-module-edit-field-icon', dslcOption);
  var dslcCurrIndex = dslcIconsCurrentSet.indexOf(dslcField.val());

  if (direction == 'previous') {
    var dslcNewIndex = dslcCurrIndex - 1;
  } else {
    var dslcNewIndex = dslcCurrIndex + 1;
  }

  jQuery('.dslca-module-edit-field-icon-suggest', dslcOption).text('');

  if (dslcNewIndex < 0) {
    dslcNewIndex = dslcIconsCurrentSet.length - 1;
  }

  dslcField.val(dslcIconsCurrentSet[dslcNewIndex]).trigger('change');
}
/**
 * MODULES SETTINGS PANEL - Icon option type
 */


function dslc_module_options_icon() {
  // Key Up ( arrow up, arrow down, else )
  jQuery(document).on('keyup', '.dslca-module-edit-field-icon', function (e) {
    var dslcField, dslcOption, dslcVal, dslcIconsArrayGrep, dslcIcon;
    dslcField = jQuery(this);
    dslcOption = dslcField.closest('.dslca-module-edit-option'); // Key pressed: arrow up

    if (e.which == 38) {
      dslc_list_icon(dslcField, 'previous');
    } // Key pressed: arrow down


    if (e.which == 40) {
      dslc_list_icon(dslcField, 'next');
    }

    if (e.which != 13 && e.which != 38 && e.which != 40) {
      dslcVal = dslcField.val().toLowerCase();
      dslcField.val(dslcVal);
      dslcIconsArrayGrep = jQuery.grep(dslcIconsCurrentSet, function (value, i) {
        return value.indexOf(dslcVal) == 0;
      });
      dslcIcon = dslcIconsArrayGrep[0];
      jQuery('.dslca-module-edit-field-icon-suggest', dslcOption).text(dslcIcon);
    }
  }); // Key Press ( Enter )

  jQuery(document).on('keypress', '.dslca-module-edit-field-icon', function (e) {
    if (e.which == 13) {
      e.preventDefault();
      var dslcField, dslcOption, dslcVal, dslcIconsArrayGrep, dslcIcon;
      dslcField = jQuery(this);
      dslcOption = dslcField.closest('.dslca-module-edit-option');
      jQuery(this).val(jQuery('.dslca-module-edit-field-icon-suggest', dslcOption).text()).trigger('change');
      jQuery('.dslca-module-edit-field-icon-suggest', dslcOption).text('');
    }
  });
}
/**
 * MODULES SETTINGS PANEL - return options id
 */


function dslc_module_options_icon_returnid() {
  jQuery(document).on('click', '.dslca-open-modal-hook[data-modal^=".dslc-list-icons"]', function (el) {
    jQuery(this).closest('.dslca-module-edit-option-icon').find('input').addClass('icon-modal-active');
  });
  jQuery(document).on('click', '.dslca-modal-icons .icon-item', function (el) {
    // Get selected item code
    var selectedIconCode = jQuery(this).find('.icon-item_name').text();
    jQuery('input.icon-modal-active').val(selectedIconCode).change(); // Close modal window

    Object(_modalwindow_js__WEBPACK_IMPORTED_MODULE_3__["hideModal"])('', jQuery('.dslca-modal:visible'));
    jQuery('input.icon-modal-active').removeClass('icon-modal-active');
  });
}
/**
 * MODULES SETTINGS PANEL - Text align option type
 */


function dslc_module_options_text_align() {
  jQuery(document).on('click', '.dslca-module-edit-option-text-align-hook', function () {
    var newOpt = jQuery(this),
        otherOpt = jQuery(this).closest('.dslca-module-edit-option-text-align-wrapper').find('.dslca-module-edit-option-text-align-hook'),
        newVal = newOpt.data('val'),
        realOpt = jQuery(this).closest('.dslca-module-edit-option-text-align-wrapper').siblings('input.dslca-module-edit-field');
    otherOpt.removeClass('dslca-active');
    newOpt.addClass('dslca-active');
    realOpt.val(newVal).trigger('change');
  });
}
/**
 * MODULES SETTINGS PANEL - Checkbox Option Type
 */


function dslc_module_options_checkbox() {
  jQuery(document).on('click', '.dslca-module-edit-option-checkbox-hook, .dslca-modules-section-edit-option-checkbox-hook', function () {
    var checkFake = jQuery(this);
    var checkReal = checkFake.siblings('input[type="checkbox"]');

    if (checkReal.prop('checked')) {
      checkReal.prop('checked', false);
      checkFake.find('.dslca-icon').removeClass('dslc-icon-check').addClass('dslc-icon-check-empty');
    } else {
      checkReal.prop('checked', true);
      checkFake.find('.dslca-icon').removeClass('dslc-icon-check-empty').addClass('dslc-icon-check');
    }

    checkReal.change();
  });
}
/**
 * MODULES SETTINGS PANEL - Box Shadow Option Type
 */


function dslc_module_options_box_shadow() {
  if (window.dslcDebug) console.log('dslc_module_options_box_shadow');
  /**
   * Value Change
   */

  jQuery(document).on('change', '.dslca-module-edit-option-box-shadow-hor, ' + '.dslca-module-edit-option-box-shadow-ver, .dslca-module-edit-option-box-shadow-blur, .dslca-module-edit-option-box-shadow-spread,' + ' .dslca-module-edit-option-box-shadow-color, .dslca-module-edit-option-box-shadow-inset', function () {
    var boxShadowWrapper = jQuery(this).closest('.dslca-module-edit-option'),
        boxShadowInput = boxShadowWrapper.find('.dslca-module-edit-field'),
        boxShadowHor = boxShadowWrapper.find('.dslca-module-edit-option-box-shadow-hor').val(),
        boxShadowVer = boxShadowWrapper.find('.dslca-module-edit-option-box-shadow-ver').val(),
        boxShadowBlur = boxShadowWrapper.find('.dslca-module-edit-option-box-shadow-blur').val(),
        boxShadowSpread = boxShadowWrapper.find('.dslca-module-edit-option-box-shadow-spread').val(),
        boxShadowColor = boxShadowWrapper.find('.dslca-module-edit-option-box-shadow-color').val(),
        boxShadowInset = boxShadowWrapper.find('.dslca-module-edit-option-box-shadow-inset').is(':checked');

    if (boxShadowInset) {
      boxShadowInset = ' inset';
    } else {
      boxShadowInset = '';
    }

    var boxShadowVal = boxShadowHor + 'px ' + boxShadowVer + 'px ' + boxShadowBlur + 'px ' + boxShadowSpread + 'px ' + boxShadowColor + boxShadowInset;
    boxShadowInput.val(boxShadowVal).trigger('change');
  });
}
/**
 * MODULES SETTINGS PANEL - Text Shadow Option Type
 */


function dslc_module_options_text_shadow() {
  if (window.dslcDebug) console.log('dslc_module_options_text_shadow');
  /**
   * Value Change
   */

  jQuery(document).on('change', '.dslca-module-edit-option-text-shadow-hor, .dslca-module-edit-option-text-shadow-ver,' + '.dslca-module-edit-option-text-shadow-blur, .dslca-module-edit-option-text-shadow-color', function () {
    var textShadowWrapper = jQuery(this).closest('.dslca-module-edit-option'),
        textShadowInput = textShadowWrapper.find('.dslca-module-edit-field'),
        textShadowHor = textShadowWrapper.find('.dslca-module-edit-option-text-shadow-hor').val(),
        textShadowVer = textShadowWrapper.find('.dslca-module-edit-option-text-shadow-ver').val(),
        textShadowBlur = textShadowWrapper.find('.dslca-module-edit-option-text-shadow-blur').val(),
        textShadowColor = textShadowWrapper.find('.dslca-module-edit-option-text-shadow-color').val();
    var textShadowVal = textShadowHor + 'px ' + textShadowVer + 'px ' + textShadowBlur + 'px ' + textShadowColor;
    textShadowInput.val(textShadowVal).trigger('change');
  });
}
/**
 * MODULES SETTINGS PANEL - Color Option Type
 */


function dslc_module_options_color(field) {
  if (window.dslcDebug) console.log('dslc_module_options_color');
  var dslcColorField, dslcAffectOnChangeEl, dslcAffectOnChangeRule, dslcColorFieldVal, dslcModule, dslcOptionID, dslcCurrColor;
  /**
   * Color Pallete.
   *
   * Last three selected colors get stored in the local storage
   * of the browser under the key 'dslcColors-example.com'.
   *
   * Beside latest three custom colors, color palette includes
   * three predefined/fixed colors: white, black and transparent.
   */

  var dslcColorPallete = [],
      currStorage,
      index;
  var palleteCurrentDommain = 'dslcColors-' + document.domain; // Get three recent colors from the local storage.

  if (undefined !== localStorage[palleteCurrentDommain]) {
    currStorage = JSON.parse(localStorage[palleteCurrentDommain]);
    dslcColorPallete = currStorage;
  } // Set default colors if not enough custom colors. Should be six.


  if (1 > dslcColorPallete.length) {
    dslcColorPallete.push('#78b');
  }

  if (2 > dslcColorPallete.length) {
    dslcColorPallete.push('#ab0');
  }

  if (3 > dslcColorPallete.length) {
    dslcColorPallete.push('#de3');
  } // Add the next "fixed" colors to the end of the pallete.


  dslcColorPallete.push('#fff');
  dslcColorPallete.push('#000');
  dslcColorPallete.push('rgba(0,0,0,0)');
  var query = field; // For each color picker input field.

  jQuery(query).each(function () {
    // Set setting the conotrol wrapper.
    var wrapper = jQuery(this).closest('.dslca-color-option');
    var input = jQuery(this);
    dslcCurrColor = jQuery(this).val();
    /**
     * Init standard WP color pickers (Iris).
     *
     * See: http://automattic.github.io/Iris/
     * See: https://github.com/23r9i0/wp-color-picker-alpha
     */

    input.wpColorPicker({
      mode: 'hsl',
      palettes: dslcColorPallete,
      change: function change(event, ui) {
        // @todo: get the code below into a separate function!
        // The option field
        dslcColorField = input;
        var color = input.wpColorPicker('color'); // The new color

        if (color == null) {
          dslcColorFieldVal = '';
        } else {
          dslcColorFieldVal = color;
        } // Change current value of option


        dslcColorField.val(dslcColorFieldVal).trigger('change'); // Change input field background.

        dslcColorField.css('background', dslcColorFieldVal); // Live change

        dslcAffectOnChangeEl = dslcColorField.data('affect-on-change-el');
        dslcAffectOnChangeRule = dslcColorField.data('affect-on-change-rule'); // ROWs doesn't have 'dslcAffectOnChangeEl' defined

        if (null != dslcAffectOnChangeEl && '.dslca-modules-section-being-edited' !== dslcAffectOnChangeEl) {
          jQuery(dslcAffectOnChangeEl, window.LiveComposer.Builder.PreviewAreaDocument.find('.dslca-module-being-edited')).css(dslcAffectOnChangeRule, dslcColorFieldVal);
        } // Update option


        dslcModule = jQuery('.dslca-module-being-edited', window.LiveComposer.Builder.PreviewAreaDocument);
        dslcOptionID = dslcColorField.data('id');
        jQuery('.dslca-module-option-front[data-id="' + dslcOptionID + '"]', dslcModule).val(dslcColorFieldVal); // Add changed class

        dslcModule.addClass('dslca-module-change-made');
      }
    });
    var colorPickerPopup = wrapper.find('.wp-picker-holder .iris-picker');
    colorPickerPopup.append('<button type="button" class="dslca-colorpicker-apply">Apply</button>');
    var apply = wrapper.find('.dslca-colorpicker-apply');
    input.wpColorPicker('open'); // If [APPLY] button clicked...

    jQuery(apply).on('click', function () {
      // If new color is not one of the "fixed" colors...
      if ('#fff' !== dslcColorFieldVal && '#ffffff' !== dslcColorFieldVal && '#000' !== dslcColorFieldVal && '#000000' !== dslcColorFieldVal && 'rgba(0,0,0,0)' !== dslcColorFieldVal) {
        // Update pallete colors in the local storage.
        if (undefined === localStorage[palleteCurrentDommain]) {
          // Create new record if no local storage found.
          var newStorage = [dslcColorFieldVal];
          localStorage[palleteCurrentDommain] = JSON.stringify(newStorage);
        } else {
          // Update existing record in the local storage.
          var newStorage = JSON.parse(localStorage[palleteCurrentDommain]);

          if (newStorage.indexOf(dslcColorFieldVal) == -1) {
            // Add new color to the head of the pallete array.
            newStorage.unshift(dslcColorFieldVal);

            if (3 < newStorage.length) {
              // Remove the last color from the pallete.
              newStorage.pop();
            }
          }

          localStorage[palleteCurrentDommain] = JSON.stringify(newStorage);
        }
      }

      input.wpColorPicker('close');
    }); // Save this element to destroy on panel closed.

    window.LiveComposer.Builder.Helpers.colorpickers.push(jQuery(this));
  });
}
/**
 * MODULES SETTINGS PANEL - Numeric Option Type
 */


function dslc_module_options_numeric(fieldWrapper) {
  if (window.dslcDebug) console.log('dslc_module_options_numeric');
  var query = fieldWrapper; // || '.dslca-module-edit-option-slider';

  jQuery(query).each(function () {
    var controlWrapper = jQuery(this);
    /* Create an empty div to be uses by jQuery as the slider container. */

    if (0 === jQuery('.dslca-module-edit-field-slider', controlWrapper).length) {
      controlWrapper.append('<div class="dslca-module-edit-field-slider"></div>');
    }

    var workingWithModule = true;
    /* Is the control part of the module setting panel or section settings? */

    if (controlWrapper.hasClass('dslca-modules-section-edit-option')) {
      // We are working with seciton.
      workingWithModule = false;
    } else {
      // We are working with module.
      workingWithModule = true;
    }

    if (workingWithModule) {
      var sliderInput = controlWrapper.find('.dslca-module-edit-field');
    } else {
      var sliderInput = controlWrapper.find('.dslca-modules-section-edit-field');
    }
    /* Is the control part of the module setting panel or section settings? */


    if (controlWrapper.hasClass('dslca-modules-section-edit-option')) {
      // We are working with seciton.
      var sliderInput = controlWrapper.find('.dslca-modules-section-edit-field');
    } else {
      // We are working with module.
      var sliderInput = controlWrapper.find('.dslca-module-edit-field');
    }

    var sliderExt = '',
        sliderControl = controlWrapper.find('.dslca-module-edit-field-slider'),
        currentVal = parseFloat(sliderInput.val()),
        // Max value. By default max is 100.
    max = parseFloat(sliderInput.data('max')),
        // Min value. By default min is 0.
    min = parseFloat(sliderInput.data('min')),
        // Increment value. By default increment is 1.
    inc = parseFloat(sliderInput.data('increment')),
        // Backup values.
    max_orig = max,
        min_orig = min;
    /**
     * Check if value can't be negative according to module settings.
     */

    var onlypositive = false;

    if (undefined !== sliderInput.data('onlypositive') && 1 === sliderInput.data('onlypositive')) {
      onlypositive = true;
    }
    /**
     * If the current slider value gets to the max or min,
     * we set new 'wider' max/min values.
     *
     * This way slider has no fixed top or bottom limit one one hand
     * and works precise enough for both small and big values.
     */


    if (currentVal >= max) {
      max = currentVal * 2;
    }

    if (!onlypositive && currentVal <= min) {
      min = currentVal * 2;
    }

    sliderControl.slider({
      min: min,
      max: max,
      step: inc,
      value: sliderInput.val(),
      slide: function slide(event, ui) {
        sliderInput.val(ui.value + sliderExt);
        sliderInput.trigger('change');
      },
      change: function change(event, ui) {
        /**
         * If the current slider value gets to the max or min,
         * we reset the slider (destroy/call again) so script above
         * set new bigger max/min values.
         *
         * This way slider has no top or bottom limit one one hand
         * and precise enough for both small and big values.
         */
        if (ui.value >= max || ui.value <= min) {
          sliderControl.slider("destroy");
          dslc_module_options_numeric(controlWrapper);
        }
      }
      /*
      stop: function( event, ui ) {
      },
      start: function( event, ui ) {
      }
      */

    });
    /**
     * Once the slider initiated, show it in HTML.
     * Slider control is hidden by default. We show it on hover only.
     */

    sliderControl.show();
    /* On mouse leave: Remove empty DIV and destroy the slider. */

    jQuery(controlWrapper).on('mouseleave', function () {
      if (undefined !== sliderControl.slider('instance')) {
        jQuery(sliderControl).slider('destroy');
      }

      sliderControl.remove();
    });
    if (sliderInput[0].classList.contains('slider-initiated')) return;
    sliderInput[0].classList.add("slider-initiated");
    sliderInput.on('keyup', function (e) {
      // In some rare cases we have the next error:
      // TypeError: undefined is not an object (evaluating 'a.key.match')
      if (undefined === e) {
        return false;
      } // Shift + Up/Down


      if (e.shiftKey) {
        if (e.keyCode == 38) {
          this.value = (parseInt(this.value) || 0) + 9;
          sliderInput.trigger('change');
        }

        if (e.keyCode == 40) {
          this.value = parseInt(this.value) + 0 - 9;
          sliderInput.trigger('change');
        }
      } // Backspace, "-"


      if (e.keyCode == 8 || e.keyCode == 45) {
        sliderInput.trigger('change');
      } // If number key pressed


      if (e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105) {
        sliderInput.trigger('change');
      }

      var charCode = e.which ? e.which : e.keyCode; //@todo more work here

      if ((charCode >= 48 && charCode <= 57 || charCode >= 96 && charCode <= 105) && e.keyCode != 8 && e.keyCode != 39 && e.keyCode != 37 && e.keyCode != 46) {
        return false;
      }
    }); // sliderInput.unbind('change');

    sliderInput.on('change', function (e) {
      if (onlypositive && this.value < 0) {
        this.value = 0;
      }

      var containerWrapper;

      if (workingWithModule) {
        containerWrapper = jQuery(e.target.closest('.dslca-module-edit-option-slider'));
      } else {
        containerWrapper = jQuery(e.target.closest('.dslca-modules-section-edit-option-slider'));
      }
      /**
       * Move the slider needle to reflect the value changes
       * made via direct input of via keyboard arrow keys.
       */


      var currentSliderInstance = containerWrapper.find('.dslca-module-edit-field-slider');

      if (undefined !== currentSliderInstance.slider('instance')) {
        currentSliderInstance.slider('value', this.value);
      }

      if (workingWithModule) {
        // Add changed class to the module.
        var module = jQuery('.dslca-module-being-edited', window.LiveComposer.Builder.PreviewAreaDocument);
        module.addClass('dslca-module-change-made');
      }
    });
    return false;
  }); // .each
}

function dslc_disable_responsive_view() {
  jQuery('html').removeClass('dslc-responsive-preview');
  jQuery('body').removeClass('dslc-res-big dslc-res-smaller-monitor dslc-res-phone dslc-res-tablet');
}

function dslc_filter_module_options(sectionID) {
  dslc_module_options_section_filter(sectionID);
}

function dslc_confirm_changes(callback) {
  dslc_module_options_confirm_changes(callback);
}

function dslc_cancel_changes(callback) {
  dslc_module_options_cancel_changes(callback);
}

function dslc_init_colorpicker() {
  dslc_module_options_color();
}

function dslc_init_options_slider() {
  dslc_module_options_numeric();
}

function dslc_module_edit_options_hideshow_tabs() {
  dslc_module_options_hideshow_tabs();
}

/***/ }),

/***/ "./js/src/editor/backend/templates.js":
/*!********************************************!*\
  !*** ./js/src/editor/backend/templates.js ***!
  \********************************************/
/*! exports provided: templatesPanelInit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "templatesPanelInit", function() { return templatesPanelInit; });
/* harmony import */ var _sections_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sections.js */ "./js/src/editor/backend/sections.js");
/* harmony import */ var _dragndrop_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dragndrop.js */ "./js/src/editor/backend/dragndrop.js");
/* harmony import */ var _modulearea_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modulearea.js */ "./js/src/editor/backend/modulearea.js");
/* harmony import */ var _modalwindow_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modalwindow.js */ "./js/src/editor/backend/modalwindow.js");
/*********************************
 *
 * = TEMPLATES =
 *
 * - dslc_load_template ( Load Template )
 * - dslc_import_template ( Import Template )
 * - dslc_save_template ( Save TEmplate )
 * - dslc_delete_template ( Delete Template )
 *
 ***********************************/




/**
 * TEMPLATES - Load
 */

var loadTemplateById = function loadTemplateById(template) {
  if (window.dslcDebug) console.log('dslc_load_template'); // Vars

  var dslcModule, dslcModuleID; // Template preloader

  jQuery('#wpcontent').prepend('<div class="lc-template-loader"></div>');
  var block = '<div class="lc-loader lds-css"><div class="lds-spinner"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>';
  jQuery('.lc-template-loader').prepend(block); // Ajax call to get template's HTML

  jQuery.post(DSLCAjax.ajaxurl, {
    action: 'dslc-ajax-load-template',
    dslc: 'active',
    dslc_template_id: template
  }, function (response) {
    // Apply the template's HTML
    jQuery('#dslc-main', LiveComposer.Builder.PreviewAreaDocument).html(response.output);
    jQuery('.lc-template-loader').remove(); // Call other functions

    LiveComposer.Builder.PreviewAreaWindow.dslc_carousel(); // Check init for rows and module areas

    Object(_sections_js__WEBPACK_IMPORTED_MODULE_0__["sectionsInitJS"])();
    Object(_modulearea_js__WEBPACK_IMPORTED_MODULE_2__["moduleareasInitJS"])();
    Object(_dragndrop_js__WEBPACK_IMPORTED_MODULE_1__["dragAndDropInit"])();
    window.dslc_show_publish_button();
    window.dslc_generate_code();
  });
};
/**
 * TEMPLATES - Import
 */


function dslc_template_import() {
  if (window.dslcDebug) console.log('dslc_import_template'); // Vars

  var dslcModule, dslcModuleID; // Hide the title on the button and show loading animation

  jQuery('.dslca-modal-templates-import .dslca-modal-title').css({
    opacity: 0
  });
  jQuery('.dslca-modal-templates-import .dslca-loading').show(); // Ajax call to load template's HTML

  jQuery.post(DSLCAjax.ajaxurl, {
    action: 'dslc-ajax-import-template',
    dslc: 'active',
    dslc_template_code: jQuery('#dslca-import-code').val()
  }, function (response) {
    // Apply the template's HTML
    jQuery('#dslc-main', LiveComposer.Builder.PreviewAreaDocument).html(response.output); // Hide the loading on the button and show the title

    jQuery('.dslca-modal-templates-import .dslca-loading').hide();
    jQuery('.dslca-modal-templates-import .dslca-modal-title').css({
      opacity: 1
    }); // Hide the modal

    Object(_modalwindow_js__WEBPACK_IMPORTED_MODULE_3__["hideModal"])('', '.dslca-modal-templates-import'); // Call other functions

    LiveComposer.Builder.PreviewAreaWindow.dslc_bg_video();
    Object(_dragndrop_js__WEBPACK_IMPORTED_MODULE_1__["dragAndDropInit"])();
    window.dslc_show_publish_button();
    window.dslc_generate_code();
  });
}
/**
 * TEMPLATES - SAVE
 */


function dslc_template_save() {
  if (window.dslcDebug) console.log('dslc_save_template'); // AJAX call to save the template

  jQuery.post(DSLCAjax.ajaxurl, {
    action: 'dslc-ajax-save-template',
    dslc: 'active',
    dslc_template_code: jQuery('#dslca-code').val(),
    dslc_template_title: jQuery('#dslca-save-template-title').val()
  }, function (response) {
    // Hide the modal
    Object(_modalwindow_js__WEBPACK_IMPORTED_MODULE_3__["hideModal"])('', '.dslca-modal-templates-save');
  });
}
/**
 * TEMPLATES - DELETE
 */


function dslc_template_delete(template) {
  if (window.dslcDebug) console.log('dslc_delete_template'); // AJAX call to delete template

  jQuery.post(DSLCAjax.ajaxurl, {
    action: 'dslc-ajax-delete-template',
    dslc: 'active',
    dslc_template_id: template
  }, function (response) {
    // Remove template from the template listing
    jQuery('.dslca-template[data-id="' + template + '"]').fadeOut(200, function () {
      jQuery(this).remove();
    });
  });
}
/**
 * Deprecated Functions and Fallbacks
 */


function dslc_import_template() {
  dslc_template_import();
}

function dslc_save_template() {
  dslc_template_save();
}

function dslc_delete_template(template) {
  dslc_template_delete(template);
}
/**
 * TEMPLATES - Document Ready
 */


var templatesPanelInit = function templatesPanelInit() {
  /**
   * Hook - Load Template
   */
  var templateItem = document.querySelectorAll('.dslca-template'); // Attach import function to each template item.

  templateItem.forEach(function (element) {
    element.addEventListener('click', function (event) {
      event.preventDefault();
      var importButton = event.target.closest("[data-id]");
      loadTemplateById(importButton.dataset.id);
    });
  });
  /**
   * Hook - Import Template
   */

  jQuery('.dslca-template-import-form').submit(function (e) {
    e.preventDefault();
    dslc_template_import();
  });
  /**
   * Hook - Save Template
   */

  jQuery('.dslca-template-save-form').submit(function (e) {
    e.preventDefault();
    dslc_template_save();
  });
  /**
   * Hook - Delete Template
   */

  jQuery(document).on('click', '.dslca-delete-template-hook', function (e) {
    e.stopPropagation();
    dslc_template_delete(jQuery(this).data('id'));
  });
};

/***/ }),

/***/ "./js/src/editor/backend/uigeneral.js":
/*!********************************************!*\
  !*** ./js/src/editor/backend/uigeneral.js ***!
  \********************************************/
/*! exports provided: hidePublishButton, showSection, fixContenteditable, keypressEvents */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hidePublishButton", function() { return hidePublishButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "showSection", function() { return showSection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fixContenteditable", function() { return fixContenteditable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keypressEvents", function() { return keypressEvents; });
/* harmony import */ var _settings_panel_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings.panel.js */ "./js/src/editor/backend/settings.panel.js");
/* harmony import */ var _modalwindow_class_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modalwindow.class.js */ "./js/src/editor/backend/modalwindow.class.js");
/* harmony import */ var sortablejs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sortablejs */ "./node_modules/sortablejs/modular/sortable.esm.js");
/*********************************
 *
 * = UI - GENERAL =
 *
 * - dslc_hide_composer ( Hides the composer elements )
 * - dslc_show_composer ( Shows the composer elements )
 * - dslc_show_publish_button ( Shows the publish button )
 * - dslc_show_section now showSection ( Show a specific section )
 * - dslc_generate_filters ( Generate origin filters )
 * - dslc_filter_origin ( Origin filtering for templates/modules listing )
 * - dragAndDropInit ( Initiate drag and drop functionality )
 ***********************************/



/**
 * Try to detect JS errors in WP Admin part.
 */

window.onerror = function (error, file, line, char) {
  dslca_generate_error_report(error, file, line, char);
};
/**
 * Hook - Open Error Log button
 */


jQuery(document).on('click', '.dslca-show-js-error-hook', function (e) {
  e.preventDefault();
  var errors_container = document.getElementById('dslca-js-errors-report');

  if (!jQuery('body').hasClass('dslca-saving-in-progress')) {
    Object(_modalwindow_class_js__WEBPACK_IMPORTED_MODULE_1__["CModalWindow"])({
      title: '<a href="https://livecomposerplugin.com/support/" target="_blank"><span class="dslca-icon dslc-icon-comment"></span> &nbsp; Get Support Info</a>',
      content: '<span class="dslca-error-report">' + errors_container.value + '</span>'
    });
  }
});
/**
 * UI - GENERAL - Document Ready
 */

jQuery(document).ready(function ($) {
  /**
   * Try to detect JS errors in preview area.
   */
  jQuery("#page-builder-frame")[0].contentWindow.onerror = function (error, file, line, char) {
    dslca_generate_error_report(error, file, line, char);
  }; // Put JS error log data in a hidden textarea.


  dslca_update_report_log();
  jQuery('body').addClass('dslca-enabled dslca-drag-not-in-progress');
  jQuery('.dslca-invisible-overlay').hide();
  jQuery('.dslca-section').eq(0).show();
});
/**
 * Action - "Currently Editing" scroll on click
 */

jQuery(document).on('click', '.dslca-currently-editing', function () {
  var activeElement = false,
      newOffset = false,
      outlineColor;

  if (jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).length) {
    activeElement = jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument);
    outlineColor = '#5890e5';
  } else if (jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument).length) {
    activeElement = jQuery('.dslca-modules-section-being-edited', LiveComposer.Builder.PreviewAreaDocument);
    outlineColor = '#eabba9';
  }

  if (activeElement) {
    newOffset = activeElement.offset().top - 100;

    if (newOffset < 0) {
      newOffset = 0;
    }

    var callbacks = [];
    jQuery('html, body', LiveComposer.Builder.PreviewAreaDocument).animate({
      scrollTop: newOffset
    }, 300, function () {
      activeElement.removeAttr('style');
    });
  }
});
/**
 * Save composer code with CMD+S or Ctrl+S
 */

jQuery(window).keypress(function (e) {
  if ((e.metaKey || e.ctrlKey) && e.keyCode == 83) {
    dslc_ajax_save_composer();
    e.preventDefault();
    return false;
  }
});
/**
 * Hook - Hide Composer
 */

jQuery(document).on('click', '.dslca-hide-composer-hook', function (e) {
  e.preventDefault();
  dslc_hide_composer();
});
/**
 * Hook - Show Composer
 */

jQuery(document).on('click', '.dslca-show-composer-hook', function (e) {
  e.preventDefault();
  dslc_show_composer();
});
/**
 * Hook - Section Show - Modules Listing
 */

jQuery(document).on('click', '.dslca-go-to-modules-hook', function (e) {
  e.preventDefault();
  showSection('.dslca-modules');
});
/**
 * Hook - Section Show - Dynamic
 */

jQuery(document).on('click', '.dslca-go-to-section-hook', function (e) {
  e.preventDefault(); // Do nothing if clicked on active tab

  if (jQuery(this).hasClass('dslca-active')) {
    return;
  }

  var sectionTitle = jQuery(this).data('section');
  showSection(sectionTitle);

  if (jQuery(this).hasClass('dslca-go-to-section-modules') || jQuery(this).hasClass('dslca-go-to-section-templates')) {
    jQuery(this).addClass('dslca-active').siblings('.dslca-go-to-section-hook').removeClass('dslca-active');
  }
});
/**
 * Hook - Close Composer
 */

jQuery(document).on('click', '.dslca-close-composer-hook', function (e) {
  e.preventDefault();
  var redirect_url = jQuery(this).attr('href');

  if (!jQuery('body').hasClass('dslca-saving-in-progress') && jQuery('.dslca-save-composer').is(':visible')) {
    // Show warning if changes weren't saved.
    Object(_modalwindow_class_js__WEBPACK_IMPORTED_MODULE_1__["CModalWindow"])({
      title: DSLCString.str_exit_title,
      content: DSLCString.str_exit_descr,
      confirm: function confirm() {
        window.location = redirect_url;
      }
    });
  } else {
    window.location = redirect_url;
  }
});
/**
 * Submit Form
 */

jQuery(document).on('click', '.dslca-submit', function () {
  jQuery(this).closest('form').submit();
});
/**
 * Hook - Show Origin Filters
 */

jQuery(document).on('click', '.dslca-section-title', function (e) {
  e.stopPropagation();

  if (jQuery('.dslca-section-title-filter', this).length) {
    dslc_generate_filters(); // Open filter panel

    jQuery('.dslca-section-title-filter-options').slideToggle(300);
  }
});
/**
 * Hook - Apply Filter Origin
 */

jQuery(document).on('click', '.dslca-section-title-filter-options a', function (e) {
  e.preventDefault();
  e.stopPropagation();
  var origin = jQuery(this).data('origin');
  var section = jQuery(this).closest('.dslca-section');

  if (section.hasClass('dslca-templates-load')) {
    jQuery('.dslca-section-title-filter-curr', section).text(jQuery(this).text());
  } else {
    jQuery('.dslca-section-title-filter-curr', section).text(jQuery(this).text());
  }

  jQuery('.dslca-section-scroller-inner').css({
    left: 0
  });
  dslc_filter_origin(origin, section); // Close filter panel

  jQuery('.dslca-section-title-filter-options').slideToggle(300);
});
/**
 * UI - GENERAL - Hide Composer
 */

function dslc_hide_composer() {
  if (window.dslcDebug) console.log('dslc_hide_composer'); // Hide "hide" button and show "show" button

  jQuery('.dslca-hide-composer-hook').hide();
  jQuery('.dslca-show-composer-hook').show(); // Add class to know it's hidden

  jQuery('body').addClass('dslca-composer-hidden');
  jQuery('body', LiveComposer.Builder.PreviewAreaDocument).addClass('dslca-composer-hidden');
  LiveComposer.Builder.Flags.uiHidden = true; // Hide ( animation ) the main composer area ( at the bottom )

  jQuery('.dslca-container').css({
    bottom: jQuery('.dslca-container').outerHeight() * -1
  }); // Hide the header  part of the main composer area ( at the bottom )

  jQuery('.dslca-header').hide();
}
/**
 * UI - GENERAL - Show Composer
 */


function dslc_show_composer() {
  if (window.dslcDebug) console.log('dslc_show_composer'); // Hide the "show" button and show the "hide" button

  jQuery('.dslca-show-composer-hook').hide();
  jQuery('.dslca-hide-composer-hook').show(); // Remove the class from the body so we know it's not hidden

  jQuery('body').removeClass('dslca-composer-hidden');
  jQuery('body', LiveComposer.Builder.PreviewAreaDocument).removeClass('dslca-composer-hidden');
  LiveComposer.Builder.Flags.uiHidden = false; // Show ( animate ) the main composer area ( at the bottom )

  jQuery('.dslca-container').css({
    bottom: 0
  }); // Show the header of the main composer area ( at the bottom )

  jQuery('.dslca-header').show();
}
/**
 * UI - GENERAL - Show Publish Button
 */


window.dslc_show_publish_button = function () {
  if (window.dslcDebug) console.log('dslc_show_publish_button');
  jQuery('.dslca-save-composer').show().addClass('dslca-init-animation');
  jQuery('.dslca-save-draft-composer').show().addClass('dslca-init-animation');
};

var hidePublishButton = function hidePublishButton() {
  if (window.dslcDebug) console.log('hidePublishButton');
  jQuery('.dslca-save-composer').hide();
  jQuery('.dslca-save-draft-composer').hide();
};
/**
 * UI - GENERAL - Show Section
 */

var showSection = function showSection(section) {
  if (window.dslcDebug) console.log('showSection'); // Add class to body so we know it's in progress
  // jQuery('body').addClass('dslca-anim-in-progress');
  // Get vars

  var sectionTitle = jQuery(section).data('title'),
      newColor = jQuery(section).data('bg'); // Hide ( animate ) the container

  jQuery('.dslca-container').css({
    bottom: -500
  }); // Hide all sections and show specific section

  jQuery('.dslca-section').hide();
  jQuery(section).show(); // Change "currently editing"

  if (section == '.dslca-module-edit') {
    jQuery('.dslca-currently-editing').show().find('strong').text(jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument).attr('title') + ' element');
  } else if (section == '.dslca-modules-section-edit') {
    jQuery('.dslca-currently-editing').show().css('background-color', '#e5855f').find('strong').text('Row');
  } else {
    jQuery('.dslca-currently-editing').hide().find('strong').text('');
  } // Filter module option tabs


  Object(_settings_panel_js__WEBPACK_IMPORTED_MODULE_0__["elementOptionsTabs"])(); // Show ( animate ) the container
  // setTimeout( function() {

  jQuery('.dslca-container').css({
    bottom: 0
  }); // }, 300 );
  // Remove class from body so we know it's finished
  // jQuery('body').removeClass('dslca-anim-in-progress');
  // Set initial background color for the color picker fields
  // Fixes the bug with section color pickers to keep values from the previously
  // edited section.

  jQuery(section).find('input.dslca-module-edit-field-colorpicker').each(function (item) {
    jQuery(this).css('background', jQuery(this).val());
  });
};
/**
 * UI - GENERAL - Generate Origin Filters
 */

function dslc_generate_filters() {
  if (window.dslcDebug) console.log('dslc_generate_filters'); // Vars

  var el,
      filters = [],
      filtersHTML = '<a html="#" data-origin="">Show All</a>',
      els = jQuery('.dslca-section:visible .dslca-origin'); // Go through each and generate the filters

  els.each(function () {
    el = jQuery(this);

    if (jQuery.inArray(el.data('origin'), filters) == -1) {
      filters.push(el.data('origin'));
      filtersHTML += '<a href="#" data-origin="' + el.data('origin') + '">' + el.data('origin') + '</a>';
    }
  });
  jQuery('.dslca-section:visible .dslca-section-title-filter-options').html(filtersHTML).css('background', jQuery('.dslca-section:visible').data('bg'));
}
/**
 * UI - GENERAL - Origin Filter
 */


function dslc_filter_origin(origin, section) {
  if (window.dslcDebug) console.log('dslc_filter_origin');
  jQuery('.dslca-origin', section).attr('data-display-module', 'false');
  jQuery('.dslca-origin[data-origin="' + origin + '"]', section).attr('data-display-module', 'true');

  if (origin == '') {
    jQuery('.dslca-origin', section).attr('data-display-module', 'true');
    jQuery('.dslca-origin.dslca-exclude', section).attr('data-display-module', 'false');
  }
}
/**
 * Prevent drag and drop of the modules
 * into the inner content areas of the other modules
 */


var fixContenteditable = function fixContenteditable() {
  window.LiveComposer.Builder.PreviewAreaDocument.on('dragstart', '.dslca-module, .dslc-module-front, .dslc-modules-area, .dslc-modules-section', function (e) {
    jQuery('[contenteditable]', window.LiveComposer.Builder.PreviewAreaDocument).attr('contenteditable', false);
  });
  window.LiveComposer.Builder.PreviewAreaDocument.on('dragend mousedown', '.dslca-module, .dslc-module-front, .dslc-modules-area, .dslc-modules-section', function (e) {
    jQuery('[contenteditable]', window.LiveComposer.Builder.PreviewAreaDocument).attr('contenteditable', true);
  });
};
/**
 * Disable/Enable module control.
 *
 * @param  {string} control_id CSS ID of the control we are toggling
 * @return {void}
 */

function dslc_toogle_control(control_id) {
  if (control_id === undefined) control_id = false;
  if (!control_id) return;
  var control = jQuery('.dslca-module-edit-option-' + control_id);
  var control_storage = control.find('.dslca-module-edit-field'); // Get the element we are editing

  var module = jQuery('.dslca-module-being-edited', LiveComposer.Builder.PreviewAreaDocument); // Get the element id

  var module_id = module[0].id;
  var responsive_prefix = '';

  if ('tablet_responsive' === control.data('tab')) {
    responsive_prefix = 'body.dslc-res-tablet ';
  } else if ('phone_responsive' === control.data('tab')) {
    responsive_prefix = 'body.dslc-res-phone ';
  }

  var affect_on_change_el = control_storage.data('affect-on-change-el');
  if (affect_on_change_el === undefined) return;
  var affect_on_change_elmts = affect_on_change_el.split(',');
  affect_on_change_el = ''; // Loop through elements (useful when there are multiple elements)

  for (var i = 0; i < affect_on_change_elmts.length; i++) {
    if (i > 0) {
      affect_on_change_el += ', ';
    }

    affect_on_change_el += responsive_prefix + '#' + module_id + ' ' + affect_on_change_elmts[i];
  }

  var affect_on_change_rule = control_storage.data('affect-on-change-rule').replace(/ /g, '');
  var affect_on_change_rules = affect_on_change_rule.split(',');
  var control_value;
  var control_data_ext = control_storage.data('ext');
  control.toggleClass('dslca-option-off');

  if (control.hasClass('dslca-option-off')) {
    // Disable
    control_value = dslc_get_control_value(control_id); // Temporary backup the current value as data attribute

    control_storage.data('val-bckp', control_value); // control_value = dslc_combine_value_and_extension( control_value, control_data_ext);
    // Loop through rules (useful when there are multiple rules)

    for (var i = 0; i < affect_on_change_rules.length; i++) {
      // remove css rule in element inline style
      jQuery(affect_on_change_el, LiveComposer.Builder.PreviewAreaDocument).css(affect_on_change_rules[i], ''); // remove css rule in css block

      disable_css_rule(affect_on_change_el, affect_on_change_rules[i], module_id); // PROBLEM do not work with multiply rules ex.: .dslc-text-module-content,.dslc-text-module-content p
    }

    control_storage.val('').trigger('change');
  } else {
    // Enable
    // Restore value of the data backup attribute
    control_storage.val(control_storage.data('val-bckp')).trigger('change');
    control_value = dslc_get_control_value(control_id);
    control_value = dslc_combine_value_and_extension(control_value, control_data_ext || ''); // Loop through rules (useful when there are multiple rules)

    for (var i = 0; i < affect_on_change_rules.length; i++) {
      var styleContent = affect_on_change_el + "{" + affect_on_change_rules[i] + ": " + control_value + "}";
      LiveComposer.Builder.Helpers.processInlineStyleTag({
        context: control,
        rule: affect_on_change_rules[i],
        elems: affect_on_change_el.replace(new RegExp('#' + module_id, 'gi'), '').trim(),
        styleContent: styleContent
      });
    }
  }
}

jQuery(document).ready(function ($) {
  // Option Control Toggle
  jQuery(document).on('click', '.dslca-module-edit-option .dslc-control-toggle', function (e) {
    e.preventDefault();
    var control_id = jQuery(e.target).closest('.dslca-module-edit-option').find('.dslca-module-edit-field').data('id');
    dslc_toogle_control(control_id);
  }); // Disable Toggle If the Control Focused

  jQuery(document).on('mousedown', '.dslca-module-edit-option', function (e) {
    var toggle = jQuery('.dslc-control-toggle');

    if (!toggle.is(e.target) // if the target of the click isn't the container...
    && toggle.has(e.target).length === 0) // ... nor a descendant of the container
      {
        if (jQuery(e.target).closest('.dslca-module-edit-option').hasClass('dslca-option-off')) {
          var control_id = jQuery(e.target).closest('.dslca-module-edit-option').find('.dslca-module-edit-field').data('id');
          dslc_toogle_control(control_id);
        }
      }
  });
});

function disable_css_rule(selectorCSS, ruleCSS, moduleID) {
  var cssRules;
  var target_stylsheet_ID = 'css-for-' + moduleID;
  var stylesheet = document.getElementById('page-builder-frame').contentWindow.document.getElementById(target_stylsheet_ID);
  selectorCSS = selectorCSS.replace(/\s\s+/g, ' ');

  if (stylesheet) {
    stylesheet = stylesheet.sheet;

    if (stylesheet['rules']) {
      cssRules = 'rules';
    } else if (stylesheet['cssRules']) {
      cssRules = 'cssRules';
    } else {} //no rules found... browser unknown
    // Go through each CSS rule (ex.: .content h1 {...})


    for (var R = 0; R < stylesheet[cssRules].length; R++) {
      // Is current CSS rule equal to the selectorCSS we are looking for?
      // (ex.: '.content h1' == '.content h1' )
      if (stylesheet[cssRules][R].selectorText == selectorCSS) {
        // Get CSS property we are looking for... (ex.: font-size : ...; )
        if (stylesheet[cssRules][R].style[ruleCSS]) {
          stylesheet[cssRules][R].style[ruleCSS] = '';
          break;
        }
      }
    }
  }
}

function dslc_combine_value_and_extension(value, extension) {
  if ('' === value || null === value) {
    return value;
  } // Check if value do not already include extension


  if (value.indexOf(extension) == -1) {
    value = value + extension;
  }

  return value;
}

function dslc_get_control_value(control_id) {
  var control = jQuery('.dslca-module-edit-option-' + control_id);
  var control_type = 'text';
  var control_storage = control.find('.dslca-module-edit-field');
  var value;
  /*
  	if ( control.hasClass('dslca-module-edit-option-select') ) {
  
  	} else {
  		// text based controls
  		value = control_storage.val();
  	}
  */

  value = control_storage.val();
  return value;
}
/**
 * Bind keypress events with both parent and iframe pages.
 * Function called when content inside iframe is loaded.
 *
 * @return {void}
 */


var keypressEvents = function keypressEvents() {
  jQuery([document, LiveComposer.Builder.PreviewAreaWindow.document]).unbind('keydown').bind('keydown', function (keydown_event) {
    // Modal window [ESC]/[Enter]
    window.dslc_modal_keypress_events(keydown_event); // Prevent backspace from navigating back

    dslc_disable_backspace_navigation(keydown_event); // Prompt Modal on F5

    dslc_notice_on_refresh(keydown_event); // Save Page

    dslc_save_page(keydown_event);
  });
};
/**
 * Action - Prevent backspace from navigating back
 */

function dslc_disable_backspace_navigation(event) {
  var doPrevent = false;

  if (event.keyCode === 8) {
    var d = event.srcElement || event.target;

    if (d.tagName.toUpperCase() === 'INPUT' && (d.type.toUpperCase() === 'TEXT' || d.type.toUpperCase() === 'PASSWORD' || d.type.toUpperCase() === 'NUMBER' || d.type.toUpperCase() === 'FILE') || d.tagName.toUpperCase() === 'TEXTAREA' || jQuery(d).hasClass('dslca-editable-content') || jQuery(d).hasClass('dslc-tabs-nav-hook-title') || jQuery(d).hasClass('dslc-accordion-title')) {
      doPrevent = d.readOnly || d.disabled;
    } else {
      doPrevent = true;
    }
  }

  if (doPrevent) {
    event.preventDefault();
  }
}
/**
 * Actions - Prompt Modal on F5
 *
 * 116 – F5
 * 81 + event.metaKey = CMD + R
 */


function dslc_notice_on_refresh(e) {
  if (e.which == 116 || e.which === 82 && e.metaKey) {
    if (jQuery('.dslca-save-composer-hook').offsetParent !== null || jQuery('.dslca-module-edit-save').offsetParent !== null) {
      e.preventDefault();
      Object(_modalwindow_class_js__WEBPACK_IMPORTED_MODULE_1__["CModalWindow"])({
        title: DSLCString.str_refresh_title,
        content: DSLCString.str_refresh_descr,
        confirm: function confirm() {
          window.location.reload();
        }
      });
      /*dslc_js_confirm( 'disable_lc', '<span class="dslca-prompt-modal-title">' + DSLCString.str_refresh_title +
       '</span><span class="dslca-prompt-modal-descr">' + DSLCString.str_refresh_descr + '</span>', document.URL );*/
    }
  }
}
/**
 * If Control or Command key is pressed and the S key is pressed run dslc_save_composer.
 * 83 is the key code for S.
 */


function dslc_save_page(e) {
  if (e.which == 83 && (e.metaKey || e.ctrlKey)) {
    if (jQuery('.dslca-save-composer-hook').css('display') == 'block') {
      dslc_save_composer();
      e.preventDefault();
      return false;
    }
  }
}
/**
 * Generate report about JS error and save it in a local storage.
 * @param  String error Error text
 * @param  String file  File with error
 * @param  String line  Line with error
 * @param  String char  Column with error
 * @return void
 */


function dslca_generate_error_report(error, file, line, char) {
  var title = 'JavaScript error detected in a third-party plugin';

  if (file.match("wp-content\/plugins\/live-composer-page-builder\/js") != null) {
    title = 'Live Composer returned JS error';
  }

  var error_report = '';
  error_report += '<br /><strong style="color:#E55F5F;">' + title + '</strong><br />';
  error_report += error + '<br /> File "' + file + '", line ' + line + ', char ' + char + '<br />';

  if ('undefined' !== typeof Storage) {
    localStorage.setItem('js_errors_report', error_report);
  }
}
/**
 * Put in a hidden div#dslca-js-errors-report information from local storage
 * @return void
 */


function dslca_update_report_log() {
  var errors_container = document.getElementById('dslca-js-errors-report');
  var error_report = localStorage.getItem('js_errors_report');

  if (null !== error_report) {
    errors_container.value = error_report;
    localStorage.removeItem('js_errors_report');
    document.querySelector('.dslca-show-js-error-hook').setAttribute('style', 'visibility:visible');
  }
} // ============================================================


jQuery(document).on('editorFrameLoaded', function () {
  var $ = jQuery;
  var headerFooter = jQuery('div[data-hf]', LiveComposer.Builder.PreviewAreaDocument);
  var overlay = '';
  headerFooter.each(function (index, el) {
    var linkToEdit = jQuery(el).data('editing-link');
    var hfType = jQuery(el).data('editing-type');
    var editingLabel = jQuery(el).data('editing-label');
    var editingSubLabel = jQuery(el).data('editing-sublabel');
    overlay += '<div class="dslc-hf-block-overlay"><a target="_blank" href="' + linkToEdit + '" class="dslc-hf-block-overlay-button dslca-link">' + editingLabel + '</a>';

    if (editingSubLabel !== undefined) {
      overlay += ' <span class="dslc-hf-block-overlay-text">' + editingSubLabel + '</span>';
    }

    overlay += '</div>';
    var htmlObject = document.createElement('div');
    htmlObject.innerHTML = overlay;
    el.append(htmlObject);
  });
});

/***/ }),

/***/ "./js/src/editor/backend/utils.class.js":
/*!**********************************************!*\
  !*** ./js/src/editor/backend/utils.class.js ***!
  \**********************************************/
/*! exports provided: untilsInitJs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "untilsInitJs", function() { return untilsInitJs; });
/**
 * Custom utils
 */


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Utils = {
  addslashes: function addslashes(str) {
    str = str.replace(/\\/g, '\\\\');
    str = str.replace(/\'/g, '\\\'');
    str = str.replace(/\"/g, '\\"');
    str = str.replace(/\0/g, '\\0');
    return str;
  },
  basename: function basename(path) {
    return path.split(/[\\/]/).pop();
  },

  /**
   * Check if browser is IE
   */
  msieversion: function msieversion() {
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf("MSIE ");

    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) // If Internet Explorer, return version number
      {
        return parseInt(ua.substring(msie + 5, ua.indexOf(".", msie)));
      } else // If another browser, return 0
      {
        return false;
      }
  },

  /**
   * Check if variables in array is desired types
   * @param  {array} array
   * @return {boolean}
   */
  checkParams: function checkParams(array) {
    if (!Array.isArray(array)) {
      throw 'Param is not array';
    } /// Instead of switch construction


    var types = {
      integer: function integer(param) {
        return isNaN(parseInt(param));
      },
      float: function float(param) {
        return isNaN(parseFloat(param));
      },
      string: function string(param) {
        return param != null && param != undefined && typeof param == 'string';
      },
      array: function array(param) {
        return Array.isArray(param);
      },
      object: function object(param) {
        return _typeof(param) == 'object';
      } /// Check it!

    };
    array.map(function (item) {
      if (!types[item[1]](item[0])) {
        throw 'Param ' + item[0] + ' is not ' + item[1];
      }
    });
  },

  /**
   * Converts UTF-8 to base64
   *
   * @param  {string} t utf-8
   * @return {string}   b64
   */
  utf8_to_b64: function utf8_to_b64(t) {
    return window.btoa(unescape(encodeURIComponent(t)));
  },

  /**
   * Converts base64 to UTF-8
   *
   * @param  {string} str in b64
   * @return {string}   in utf-8
   */
  b64_to_utf8: function b64_to_utf8(str) {
    return decodeURIComponent(escape(window.atob(str)));
  },

  /**
   * Get Page Params
   *
   * @return {array}
   */
  get_page_params: function get_page_params() {
    return decodeURIComponent(window.location.search.slice(1)).split('&').reduce(function _reduce(a, b) {
      b = b.split('=');
      a[b[0]] = b[1];
      return a;
    }, {});
  },
  get_unique_id: function get_unique_id() {
    return Math.random().toString(32).slice(2);
  },

  /**
   * Update module option in raw JSON code (dslc_code) of the module
   *
   * @param  {DOM element} module    Module Element
   * @param  {string} property_name  Name of the option we change
   * @param  {string} property_value Value of the option we change
   * @return {void}
   */
  update_module_property_raw: function update_module_property_raw(module, property_name, property_value) {
    // Hidden textarea element with raw base64 code of the module
    // <textarea class="dslca-module-code">YTo2On....iOjE7fQ==</textarea>
    var module_code_container = module.getElementsByClassName('dslca-module-code')[0]; // Hidden textarea element with value of this particular setting
    // <textarea data-id="property_name">property_value</textarea>

    var property_container = module.querySelector('.dslca-module-option-front[data-id="' + property_name + '"]'); // Get module raw code

    var module_code = module_code_container.value;
    module_code = JSON.parse(module_code);
    module_code[property_name] = property_value;
    module_code = JSON.stringify(module_code); // Update raw code

    module_code_container.value = module_code;
    module_code_container.innerHTML = module_code; // See comment block below
    // Change the property in hidden textarea as well

    property_container.value = property_value;
    property_container.innerHTML = property_value; // See comment block below

    /**
     * FireFox will not duplicate textarea value properly using .cloneNode(true)
     * if we don't use .innerHTML statement (Chrome works fine with .value only).
     *
     * See bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=237783
     */
  },

  /**
   * Update section option in raw JSON code (dslc_code) of the section
   *
   * @param  {DOM element} section    `section Element
   * @param  {string} property_name  Name of the option we change
   * @param  {string} property_value Value of the option we change
   * @return {void}
   */
  update_section_property_raw: function update_section_property_raw(section, property_name, property_value) {
    // Hidden textarea element with raw base64 code of the roq
    // <textarea class="dslca-section-code"></textarea>
    var section_code_container = section.getElementsByClassName('dslca-section-code')[0]; // Hidden input element with value of this particular setting
    // <input data-id="property_name">property_value</textarea>

    var property_container = section.querySelector('.dslca-modules-section-settings input[data-id="' + property_name + '"]'); // Get module raw code

    var section_code = section_code_container.value;
    section_code = JSON.parse(section_code);
    section_code[property_name] = property_value;
    section_code = JSON.stringify(section_code); // Update raw code

    section_code_container.value = section_code;
    section_code_container.innerHTML = section_code; // See comment block below
    // Change the property in hidden textarea as well

    property_container.setAttribute('value', property_value);
    property_container.setAttribute('data-def', property_value);
  },

  /**
   * Provide custom events publish.
   * Also echoes all the custom events in the preview iframe as well.
   *
   * @param  {string} eventName
   * @param  {object||string||null||numeric} eventData [description]
   */
  publish: function publish(eventName, eventData) {
    eventData = eventData ? eventData : {};
    this.checkParams([[eventName, 'string'], [eventData, 'object']]);
    jQuery(document).trigger({
      type: eventName,
      message: {
        details: eventData
      }
    });
    LiveComposer.Builder.PreviewAreaWindow.dslca_publish_event(eventName, eventData);
  }
};
var untilsInitJs = function untilsInitJs() {
  window.LiveComposer.Utils = Utils;
};

/***/ }),

/***/ "./node_modules/animejs/lib/anime.es.js":
/*!**********************************************!*\
  !*** ./node_modules/animejs/lib/anime.es.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 * anime.js v3.0.1
 * (c) 2019 Julian Garnier
 * Released under the MIT license
 * animejs.com
 */

// Defaults

var defaultInstanceSettings = {
  update: null,
  begin: null,
  loopBegin: null,
  changeBegin: null,
  change: null,
  changeComplete: null,
  loopComplete: null,
  complete: null,
  loop: 1,
  direction: 'normal',
  autoplay: true,
  timelineOffset: 0
};

var defaultTweenSettings = {
  duration: 1000,
  delay: 0,
  endDelay: 0,
  easing: 'easeOutElastic(1, .5)',
  round: 0
};

var validTransforms = ['translateX', 'translateY', 'translateZ', 'rotate', 'rotateX', 'rotateY', 'rotateZ', 'scale', 'scaleX', 'scaleY', 'scaleZ', 'skew', 'skewX', 'skewY', 'perspective'];

// Caching

var cache = {
  CSS: {},
  springs: {}
};

// Utils

function minMax(val, min, max) {
  return Math.min(Math.max(val, min), max);
}

function stringContains(str, text) {
  return str.indexOf(text) > -1;
}

function applyArguments(func, args) {
  return func.apply(null, args);
}

var is = {
  arr: function (a) { return Array.isArray(a); },
  obj: function (a) { return stringContains(Object.prototype.toString.call(a), 'Object'); },
  pth: function (a) { return is.obj(a) && a.hasOwnProperty('totalLength'); },
  svg: function (a) { return a instanceof SVGElement; },
  inp: function (a) { return a instanceof HTMLInputElement; },
  dom: function (a) { return a.nodeType || is.svg(a); },
  str: function (a) { return typeof a === 'string'; },
  fnc: function (a) { return typeof a === 'function'; },
  und: function (a) { return typeof a === 'undefined'; },
  hex: function (a) { return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a); },
  rgb: function (a) { return /^rgb/.test(a); },
  hsl: function (a) { return /^hsl/.test(a); },
  col: function (a) { return (is.hex(a) || is.rgb(a) || is.hsl(a)); },
  key: function (a) { return !defaultInstanceSettings.hasOwnProperty(a) && !defaultTweenSettings.hasOwnProperty(a) && a !== 'targets' && a !== 'keyframes'; }
};

// Easings

function parseEasingParameters(string) {
  var match = /\(([^)]+)\)/.exec(string);
  return match ? match[1].split(',').map(function (p) { return parseFloat(p); }) : [];
}

// Spring solver inspired by Webkit Copyright © 2016 Apple Inc. All rights reserved. https://webkit.org/demos/spring/spring.js

function spring(string, duration) {

  var params = parseEasingParameters(string);
  var mass = minMax(is.und(params[0]) ? 1 : params[0], .1, 100);
  var stiffness = minMax(is.und(params[1]) ? 100 : params[1], .1, 100);
  var damping = minMax(is.und(params[2]) ? 10 : params[2], .1, 100);
  var velocity =  minMax(is.und(params[3]) ? 0 : params[3], .1, 100);
  var w0 = Math.sqrt(stiffness / mass);
  var zeta = damping / (2 * Math.sqrt(stiffness * mass));
  var wd = zeta < 1 ? w0 * Math.sqrt(1 - zeta * zeta) : 0;
  var a = 1;
  var b = zeta < 1 ? (zeta * w0 + -velocity) / wd : -velocity + w0;

  function solver(t) {
    var progress = duration ? (duration * t) / 1000 : t;
    if (zeta < 1) {
      progress = Math.exp(-progress * zeta * w0) * (a * Math.cos(wd * progress) + b * Math.sin(wd * progress));
    } else {
      progress = (a + b * progress) * Math.exp(-progress * w0);
    }
    if (t === 0 || t === 1) { return t; }
    return 1 - progress;
  }

  function getDuration() {
    var cached = cache.springs[string];
    if (cached) { return cached; }
    var frame = 1/6;
    var elapsed = 0;
    var rest = 0;
    while(true) {
      elapsed += frame;
      if (solver(elapsed) === 1) {
        rest++;
        if (rest >= 16) { break; }
      } else {
        rest = 0;
      }
    }
    var duration = elapsed * frame * 1000;
    cache.springs[string] = duration;
    return duration;
  }

  return duration ? solver : getDuration;

}

// Elastic easing adapted from jQueryUI http://api.jqueryui.com/easings/

function elastic(amplitude, period) {
  if ( amplitude === void 0 ) amplitude = 1;
  if ( period === void 0 ) period = .5;

  var a = minMax(amplitude, 1, 10);
  var p = minMax(period, .1, 2);
  return function (t) {
    return (t === 0 || t === 1) ? t : 
      -a * Math.pow(2, 10 * (t - 1)) * Math.sin((((t - 1) - (p / (Math.PI * 2) * Math.asin(1 / a))) * (Math.PI * 2)) / p);
  }
}

// Basic steps easing implementation https://developer.mozilla.org/fr/docs/Web/CSS/transition-timing-function

function steps(steps) {
  if ( steps === void 0 ) steps = 10;

  return function (t) { return Math.round(t * steps) * (1 / steps); };
}

// BezierEasing https://github.com/gre/bezier-easing

var bezier = (function () {

  var kSplineTableSize = 11;
  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1 }
  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1 }
  function C(aA1)      { return 3.0 * aA1 }

  function calcBezier(aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT }
  function getSlope(aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1) }

  function binarySubdivide(aX, aA, aB, mX1, mX2) {
    var currentX, currentT, i = 0;
    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;
      if (currentX > 0.0) { aB = currentT; } else { aA = currentT; }
    } while (Math.abs(currentX) > 0.0000001 && ++i < 10);
    return currentT;
  }

  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (var i = 0; i < 4; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);
      if (currentSlope === 0.0) { return aGuessT; }
      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
  }

  function bezier(mX1, mY1, mX2, mY2) {

    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) { return; }
    var sampleValues = new Float32Array(kSplineTableSize);

    if (mX1 !== mY1 || mX2 !== mY2) {
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }

    function getTForX(aX) {

      var intervalStart = 0;
      var currentSample = 1;
      var lastSample = kSplineTableSize - 1;

      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }

      --currentSample;

      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);

      if (initialSlope >= 0.001) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }

    }

    return function (x) {
      if (mX1 === mY1 && mX2 === mY2) { return x; }
      if (x === 0 || x === 1) { return x; }
      return calcBezier(getTForX(x), mY1, mY2);
    }

  }

  return bezier;

})();

var penner = (function () {

  var names = ['Quad', 'Cubic', 'Quart', 'Quint', 'Sine', 'Expo', 'Circ', 'Back', 'Elastic'];

  // Approximated Penner equations http://matthewlein.com/ceaser/

  var curves = {
    In: [
      [0.550, 0.085, 0.680, 0.530], /* inQuad */
      [0.550, 0.055, 0.675, 0.190], /* inCubic */
      [0.895, 0.030, 0.685, 0.220], /* inQuart */
      [0.755, 0.050, 0.855, 0.060], /* inQuint */
      [0.470, 0.000, 0.745, 0.715], /* inSine */
      [0.950, 0.050, 0.795, 0.035], /* inExpo */
      [0.600, 0.040, 0.980, 0.335], /* inCirc */
      [0.600,-0.280, 0.735, 0.045], /* inBack */
      elastic /* inElastic */
    ],
    Out: [
      [0.250, 0.460, 0.450, 0.940], /* outQuad */
      [0.215, 0.610, 0.355, 1.000], /* outCubic */
      [0.165, 0.840, 0.440, 1.000], /* outQuart */
      [0.230, 1.000, 0.320, 1.000], /* outQuint */
      [0.390, 0.575, 0.565, 1.000], /* outSine */
      [0.190, 1.000, 0.220, 1.000], /* outExpo */
      [0.075, 0.820, 0.165, 1.000], /* outCirc */
      [0.175, 0.885, 0.320, 1.275], /* outBack */
      function (a, p) { return function (t) { return 1 - elastic(a, p)(1 - t); }; } /* outElastic */
    ],
    InOut: [
      [0.455, 0.030, 0.515, 0.955], /* inOutQuad */
      [0.645, 0.045, 0.355, 1.000], /* inOutCubic */
      [0.770, 0.000, 0.175, 1.000], /* inOutQuart */
      [0.860, 0.000, 0.070, 1.000], /* inOutQuint */
      [0.445, 0.050, 0.550, 0.950], /* inOutSine */
      [1.000, 0.000, 0.000, 1.000], /* inOutExpo */
      [0.785, 0.135, 0.150, 0.860], /* inOutCirc */
      [0.680,-0.550, 0.265, 1.550], /* inOutBack */
      function (a, p) { return function (t) { return t < .5 ? elastic(a, p)(t * 2) / 2 : 1 - elastic(a, p)(t * -2 + 2) / 2; }; } /* inOutElastic */
    ]
  };

  var eases = { 
    linear: [0.250, 0.250, 0.750, 0.750]
  };

  var loop = function ( coords ) {
    curves[coords].forEach(function (ease, i) {
      eases['ease'+coords+names[i]] = ease;
    });
  };

  for (var coords in curves) loop( coords );

  return eases;

})();

function parseEasings(easing, duration) {
  if (is.fnc(easing)) { return easing; }
  var name = easing.split('(')[0];
  var ease = penner[name];
  var args = parseEasingParameters(easing);
  switch (name) {
    case 'spring' : return spring(easing, duration);
    case 'cubicBezier' : return applyArguments(bezier, args);
    case 'steps' : return applyArguments(steps, args);
    default : return is.fnc(ease) ? applyArguments(ease, args) : applyArguments(bezier, ease);
  }
}

// Strings

function selectString(str) {
  try {
    var nodes = document.querySelectorAll(str);
    return nodes;
  } catch(e) {
    return;
  }
}

// Arrays

function filterArray(arr, callback) {
  var len = arr.length;
  var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
  var result = [];
  for (var i = 0; i < len; i++) {
    if (i in arr) {
      var val = arr[i];
      if (callback.call(thisArg, val, i, arr)) {
        result.push(val);
      }
    }
  }
  return result;
}

function flattenArray(arr) {
  return arr.reduce(function (a, b) { return a.concat(is.arr(b) ? flattenArray(b) : b); }, []);
}

function toArray(o) {
  if (is.arr(o)) { return o; }
  if (is.str(o)) { o = selectString(o) || o; }
  if (o instanceof NodeList || o instanceof HTMLCollection) { return [].slice.call(o); }
  return [o];
}

function arrayContains(arr, val) {
  return arr.some(function (a) { return a === val; });
}

// Objects

function cloneObject(o) {
  var clone = {};
  for (var p in o) { clone[p] = o[p]; }
  return clone;
}

function replaceObjectProps(o1, o2) {
  var o = cloneObject(o1);
  for (var p in o1) { o[p] = o2.hasOwnProperty(p) ? o2[p] : o1[p]; }
  return o;
}

function mergeObjects(o1, o2) {
  var o = cloneObject(o1);
  for (var p in o2) { o[p] = is.und(o1[p]) ? o2[p] : o1[p]; }
  return o;
}

// Colors

function rgbToRgba(rgbValue) {
  var rgb = /rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(rgbValue);
  return rgb ? ("rgba(" + (rgb[1]) + ",1)") : rgbValue;
}

function hexToRgba(hexValue) {
  var rgx = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  var hex = hexValue.replace(rgx, function (m, r, g, b) { return r + r + g + g + b + b; } );
  var rgb = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  var r = parseInt(rgb[1], 16);
  var g = parseInt(rgb[2], 16);
  var b = parseInt(rgb[3], 16);
  return ("rgba(" + r + "," + g + "," + b + ",1)");
}

function hslToRgba(hslValue) {
  var hsl = /hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(hslValue) || /hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(hslValue);
  var h = parseInt(hsl[1], 10) / 360;
  var s = parseInt(hsl[2], 10) / 100;
  var l = parseInt(hsl[3], 10) / 100;
  var a = hsl[4] || 1;
  function hue2rgb(p, q, t) {
    if (t < 0) { t += 1; }
    if (t > 1) { t -= 1; }
    if (t < 1/6) { return p + (q - p) * 6 * t; }
    if (t < 1/2) { return q; }
    if (t < 2/3) { return p + (q - p) * (2/3 - t) * 6; }
    return p;
  }
  var r, g, b;
  if (s == 0) {
    r = g = b = l;
  } else {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r = hue2rgb(p, q, h + 1/3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1/3);
  }
  return ("rgba(" + (r * 255) + "," + (g * 255) + "," + (b * 255) + "," + a + ")");
}

function colorToRgb(val) {
  if (is.rgb(val)) { return rgbToRgba(val); }
  if (is.hex(val)) { return hexToRgba(val); }
  if (is.hsl(val)) { return hslToRgba(val); }
}

// Units

function getUnit(val) {
  var split = /([\+\-]?[0-9#\.]+)(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(val);
  if (split) { return split[2]; }
}

function getTransformUnit(propName) {
  if (stringContains(propName, 'translate') || propName === 'perspective') { return 'px'; }
  if (stringContains(propName, 'rotate') || stringContains(propName, 'skew')) { return 'deg'; }
}

// Values

function getFunctionValue(val, animatable) {
  if (!is.fnc(val)) { return val; }
  return val(animatable.target, animatable.id, animatable.total);
}

function getAttribute(el, prop) {
  return el.getAttribute(prop);
}

function convertPxToUnit(el, value, unit) {
  var valueUnit = getUnit(value);
  if (arrayContains([unit, 'deg', 'rad', 'turn'], valueUnit)) { return value; }
  var cached = cache.CSS[value + unit];
  if (!is.und(cached)) { return cached; }
  var baseline = 100;
  var tempEl = document.createElement(el.tagName);
  var parentEl = (el.parentNode && (el.parentNode !== document)) ? el.parentNode : document.body;
  parentEl.appendChild(tempEl);
  tempEl.style.position = 'absolute';
  tempEl.style.width = baseline + unit;
  var factor = baseline / tempEl.offsetWidth;
  parentEl.removeChild(tempEl);
  var convertedUnit = factor * parseFloat(value);
  cache.CSS[value + unit] = convertedUnit;
  return convertedUnit;
}

function getCSSValue(el, prop, unit) {
  if (prop in el.style) {
    var uppercasePropName = prop.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
    var value = el.style[prop] || getComputedStyle(el).getPropertyValue(uppercasePropName) || '0';
    return unit ? convertPxToUnit(el, value, unit) : value;
  }
}

function getAnimationType(el, prop) {
  if (is.dom(el) && !is.inp(el) && (getAttribute(el, prop) || (is.svg(el) && el[prop]))) { return 'attribute'; }
  if (is.dom(el) && arrayContains(validTransforms, prop)) { return 'transform'; }
  if (is.dom(el) && (prop !== 'transform' && getCSSValue(el, prop))) { return 'css'; }
  if (el[prop] != null) { return 'object'; }
}

function getElementTransforms(el) {
  if (!is.dom(el)) { return; }
  var str = el.style.transform || '';
  var reg  = /(\w+)\(([^)]*)\)/g;
  var transforms = new Map();
  var m; while (m = reg.exec(str)) { transforms.set(m[1], m[2]); }
  return transforms;
}

function getTransformValue(el, propName, animatable, unit) {
  var defaultVal = stringContains(propName, 'scale') ? 1 : 0 + getTransformUnit(propName);
  var value = getElementTransforms(el).get(propName) || defaultVal;
  if (animatable) {
    animatable.transforms.list.set(propName, value);
    animatable.transforms['last'] = propName;
  }
  return unit ? convertPxToUnit(el, value, unit) : value;
}

function getOriginalTargetValue(target, propName, unit, animatable) {
  switch (getAnimationType(target, propName)) {
    case 'transform': return getTransformValue(target, propName, animatable, unit);
    case 'css': return getCSSValue(target, propName, unit);
    case 'attribute': return getAttribute(target, propName);
    default: return target[propName] || 0;
  }
}

function getRelativeValue(to, from) {
  var operator = /^(\*=|\+=|-=)/.exec(to);
  if (!operator) { return to; }
  var u = getUnit(to) || 0;
  var x = parseFloat(from);
  var y = parseFloat(to.replace(operator[0], ''));
  switch (operator[0][0]) {
    case '+': return x + y + u;
    case '-': return x - y + u;
    case '*': return x * y + u;
  }
}

function validateValue(val, unit) {
  if (is.col(val)) { return colorToRgb(val); }
  var originalUnit = getUnit(val);
  var unitLess = originalUnit ? val.substr(0, val.length - originalUnit.length) : val;
  return unit && !/\s/g.test(val) ? unitLess + unit : unitLess;
}

// getTotalLength() equivalent for circle, rect, polyline, polygon and line shapes
// adapted from https://gist.github.com/SebLambla/3e0550c496c236709744

function getDistance(p1, p2) {
  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
}

function getCircleLength(el) {
  return Math.PI * 2 * getAttribute(el, 'r');
}

function getRectLength(el) {
  return (getAttribute(el, 'width') * 2) + (getAttribute(el, 'height') * 2);
}

function getLineLength(el) {
  return getDistance(
    {x: getAttribute(el, 'x1'), y: getAttribute(el, 'y1')}, 
    {x: getAttribute(el, 'x2'), y: getAttribute(el, 'y2')}
  );
}

function getPolylineLength(el) {
  var points = el.points;
  var totalLength = 0;
  var previousPos;
  for (var i = 0 ; i < points.numberOfItems; i++) {
    var currentPos = points.getItem(i);
    if (i > 0) { totalLength += getDistance(previousPos, currentPos); }
    previousPos = currentPos;
  }
  return totalLength;
}

function getPolygonLength(el) {
  var points = el.points;
  return getPolylineLength(el) + getDistance(points.getItem(points.numberOfItems - 1), points.getItem(0));
}

// Path animation

function getTotalLength(el) {
  if (el.getTotalLength) { return el.getTotalLength(); }
  switch(el.tagName.toLowerCase()) {
    case 'circle': return getCircleLength(el);
    case 'rect': return getRectLength(el);
    case 'line': return getLineLength(el);
    case 'polyline': return getPolylineLength(el);
    case 'polygon': return getPolygonLength(el);
  }
}

function setDashoffset(el) {
  var pathLength = getTotalLength(el);
  el.setAttribute('stroke-dasharray', pathLength);
  return pathLength;
}

// Motion path

function getParentSvgEl(el) {
  var parentEl = el.parentNode;
  while (is.svg(parentEl)) {
    parentEl = parentEl.parentNode;
    if (!is.svg(parentEl.parentNode)) { break; }
  }
  return parentEl;
}

function getParentSvg(pathEl, svgData) {
  var svg = svgData || {};
  var parentSvgEl = svg.el || getParentSvgEl(pathEl);
  var rect = parentSvgEl.getBoundingClientRect();
  var viewBoxAttr = getAttribute(parentSvgEl, 'viewBox');
  var width = rect.width;
  var height = rect.height;
  var viewBox = svg.viewBox || (viewBoxAttr ? viewBoxAttr.split(' ') : [0, 0, width, height]);
  return {
    el: parentSvgEl,
    viewBox: viewBox,
    x: viewBox[0] / 1,
    y: viewBox[1] / 1,
    w: width / viewBox[2],
    h: height / viewBox[3]
  }
}

function getPath(path, percent) {
  var pathEl = is.str(path) ? selectString(path)[0] : path;
  var p = percent || 100;
  return function(property) {
    return {
      property: property,
      el: pathEl,
      svg: getParentSvg(pathEl),
      totalLength: getTotalLength(pathEl) * (p / 100)
    }
  }
}

function getPathProgress(path, progress) {
  function point(offset) {
    if ( offset === void 0 ) offset = 0;

    var l = progress + offset >= 1 ? progress + offset : 0;
    return path.el.getPointAtLength(l);
  }
  var svg = getParentSvg(path.el, path.svg);
  var p = point();
  var p0 = point(-1);
  var p1 = point(+1);
  switch (path.property) {
    case 'x': return (p.x - svg.x) * svg.w;
    case 'y': return (p.y - svg.y) * svg.h;
    case 'angle': return Math.atan2(p1.y - p0.y, p1.x - p0.x) * 180 / Math.PI;
  }
}

// Decompose value

function decomposeValue(val, unit) {
  var rgx = /-?\d*\.?\d+/g;
  var value = validateValue((is.pth(val) ? val.totalLength : val), unit) + '';
  return {
    original: value,
    numbers: value.match(rgx) ? value.match(rgx).map(Number) : [0],
    strings: (is.str(val) || unit) ? value.split(rgx) : []
  }
}

// Animatables

function parseTargets(targets) {
  var targetsArray = targets ? (flattenArray(is.arr(targets) ? targets.map(toArray) : toArray(targets))) : [];
  return filterArray(targetsArray, function (item, pos, self) { return self.indexOf(item) === pos; });
}

function getAnimatables(targets) {
  var parsed = parseTargets(targets);
  return parsed.map(function (t, i) {
    return {target: t, id: i, total: parsed.length, transforms: { list: getElementTransforms(t) } };
  });
}

// Properties

function normalizePropertyTweens(prop, tweenSettings) {
  var settings = cloneObject(tweenSettings);
  // Override duration if easing is a spring
  if (/^spring/.test(settings.easing)) { settings.duration = spring(settings.easing); }
  if (is.arr(prop)) {
    var l = prop.length;
    var isFromTo = (l === 2 && !is.obj(prop[0]));
    if (!isFromTo) {
      // Duration divided by the number of tweens
      if (!is.fnc(tweenSettings.duration)) { settings.duration = tweenSettings.duration / l; }
    } else {
      // Transform [from, to] values shorthand to a valid tween value
      prop = {value: prop};
    }
  }
  var propArray = is.arr(prop) ? prop : [prop];
  return propArray.map(function (v, i) {
    var obj = (is.obj(v) && !is.pth(v)) ? v : {value: v};
    // Default delay value should only be applied to the first tween
    if (is.und(obj.delay)) { obj.delay = !i ? tweenSettings.delay : 0; }
    // Default endDelay value should only be applied to the last tween
    if (is.und(obj.endDelay)) { obj.endDelay = i === propArray.length - 1 ? tweenSettings.endDelay : 0; }
    return obj;
  }).map(function (k) { return mergeObjects(k, settings); });
}


function flattenKeyframes(keyframes) {
  var propertyNames = filterArray(flattenArray(keyframes.map(function (key) { return Object.keys(key); })), function (p) { return is.key(p); })
  .reduce(function (a,b) { if (a.indexOf(b) < 0) { a.push(b); } return a; }, []);
  var properties = {};
  var loop = function ( i ) {
    var propName = propertyNames[i];
    properties[propName] = keyframes.map(function (key) {
      var newKey = {};
      for (var p in key) {
        if (is.key(p)) {
          if (p == propName) { newKey.value = key[p]; }
        } else {
          newKey[p] = key[p];
        }
      }
      return newKey;
    });
  };

  for (var i = 0; i < propertyNames.length; i++) loop( i );
  return properties;
}

function getProperties(tweenSettings, params) {
  var properties = [];
  var keyframes = params.keyframes;
  if (keyframes) { params = mergeObjects(flattenKeyframes(keyframes), params); }
  for (var p in params) {
    if (is.key(p)) {
      properties.push({
        name: p,
        tweens: normalizePropertyTweens(params[p], tweenSettings)
      });
    }
  }
  return properties;
}

// Tweens

function normalizeTweenValues(tween, animatable) {
  var t = {};
  for (var p in tween) {
    var value = getFunctionValue(tween[p], animatable);
    if (is.arr(value)) {
      value = value.map(function (v) { return getFunctionValue(v, animatable); });
      if (value.length === 1) { value = value[0]; }
    }
    t[p] = value;
  }
  t.duration = parseFloat(t.duration);
  t.delay = parseFloat(t.delay);
  return t;
}

function normalizeTweens(prop, animatable) {
  var previousTween;
  return prop.tweens.map(function (t) {
    var tween = normalizeTweenValues(t, animatable);
    var tweenValue = tween.value;
    var to = is.arr(tweenValue) ? tweenValue[1] : tweenValue;
    var toUnit = getUnit(to);
    var originalValue = getOriginalTargetValue(animatable.target, prop.name, toUnit, animatable);
    var previousValue = previousTween ? previousTween.to.original : originalValue;
    var from = is.arr(tweenValue) ? tweenValue[0] : previousValue;
    var fromUnit = getUnit(from) || getUnit(originalValue);
    var unit = toUnit || fromUnit;
    if (is.und(to)) { to = previousValue; }
    tween.from = decomposeValue(from, unit);
    tween.to = decomposeValue(getRelativeValue(to, from), unit);
    tween.start = previousTween ? previousTween.end : 0;
    tween.end = tween.start + tween.delay + tween.duration + tween.endDelay;
    tween.easing = parseEasings(tween.easing, tween.duration);
    tween.isPath = is.pth(tweenValue);
    tween.isColor = is.col(tween.from.original);
    if (tween.isColor) { tween.round = 1; }
    previousTween = tween;
    return tween;
  });
}

// Tween progress

var setProgressValue = {
  css: function (t, p, v) { return t.style[p] = v; },
  attribute: function (t, p, v) { return t.setAttribute(p, v); },
  object: function (t, p, v) { return t[p] = v; },
  transform: function (t, p, v, transforms, manual) {
    transforms.list.set(p, v);
    if (p === transforms.last || manual) {
      var str = '';
      transforms.list.forEach(function (value, prop) { str += prop + "(" + value + ") "; });
      t.style.transform = str;
    }
  }
};

// Set Value helper

function setTargetsValue(targets, properties) {
  var animatables = getAnimatables(targets);
  animatables.forEach(function (animatable) {
    for (var property in properties) {
      var value = getFunctionValue(properties[property], animatable);
      var target = animatable.target;
      var valueUnit = getUnit(value);
      var originalValue = getOriginalTargetValue(target, property, valueUnit, animatable);
      var unit = valueUnit || getUnit(originalValue);
      var to = getRelativeValue(validateValue(value, unit), originalValue);
      var animType = getAnimationType(target, property);
      setProgressValue[animType](target, property, to, animatable.transforms, true);
    }
  });
}

// Animations

function createAnimation(animatable, prop) {
  var animType = getAnimationType(animatable.target, prop.name);
  if (animType) {
    var tweens = normalizeTweens(prop, animatable);
    var lastTween = tweens[tweens.length - 1];
    return {
      type: animType,
      property: prop.name,
      animatable: animatable,
      tweens: tweens,
      duration: lastTween.end,
      delay: tweens[0].delay,
      endDelay: lastTween.endDelay
    }
  }
}

function getAnimations(animatables, properties) {
  return filterArray(flattenArray(animatables.map(function (animatable) {
    return properties.map(function (prop) {
      return createAnimation(animatable, prop);
    });
  })), function (a) { return !is.und(a); });
}

// Create Instance

function getInstanceTimings(animations, tweenSettings) {
  var animLength = animations.length;
  var getTlOffset = function (anim) { return anim.timelineOffset ? anim.timelineOffset : 0; };
  var timings = {};
  timings.duration = animLength ? Math.max.apply(Math, animations.map(function (anim) { return getTlOffset(anim) + anim.duration; })) : tweenSettings.duration;
  timings.delay = animLength ? Math.min.apply(Math, animations.map(function (anim) { return getTlOffset(anim) + anim.delay; })) : tweenSettings.delay;
  timings.endDelay = animLength ? timings.duration - Math.max.apply(Math, animations.map(function (anim) { return getTlOffset(anim) + anim.duration - anim.endDelay; })) : tweenSettings.endDelay;
  return timings;
}

var instanceID = 0;

function createNewInstance(params) {
  var instanceSettings = replaceObjectProps(defaultInstanceSettings, params);
  var tweenSettings = replaceObjectProps(defaultTweenSettings, params);
  var properties = getProperties(tweenSettings, params);
  var animatables = getAnimatables(params.targets);
  var animations = getAnimations(animatables, properties);
  var timings = getInstanceTimings(animations, tweenSettings);
  var id = instanceID;
  instanceID++;
  return mergeObjects(instanceSettings, {
    id: id,
    children: [],
    animatables: animatables,
    animations: animations,
    duration: timings.duration,
    delay: timings.delay,
    endDelay: timings.endDelay
  });
}

// Core

var activeInstances = [];
var pausedInstances = [];
var raf;

var engine = (function () {
  function play() { 
    raf = requestAnimationFrame(step);
  }
  function step(t) {
    var activeInstancesLength = activeInstances.length;
    if (activeInstancesLength) {
      var i = 0;
      while (i < activeInstancesLength) {
        var activeInstance = activeInstances[i];
        if (!activeInstance.paused) {
          activeInstance.tick(t);
        } else {
          var instanceIndex = activeInstances.indexOf(activeInstance);
          if (instanceIndex > -1) {
            activeInstances.splice(instanceIndex, 1);
            activeInstancesLength = activeInstances.length;
          }
        }
        i++;
      }
      play();
    } else {
      raf = cancelAnimationFrame(raf);
    }
  }
  return play;
})();

function handleVisibilityChange() {
  if (document.hidden) {
    activeInstances.forEach(function (ins) { return ins.pause(); });
    pausedInstances = activeInstances.slice(0);
    activeInstances = [];
  } else {
    pausedInstances.forEach(function (ins) { return ins.play(); });
  }
}

if (typeof document !== 'undefined') {
  document.addEventListener('visibilitychange', handleVisibilityChange);
}

// Public Instance

function anime(params) {
  if ( params === void 0 ) params = {};


  var startTime = 0, lastTime = 0, now = 0;
  var children, childrenLength = 0;
  var resolve = null;

  function makePromise(instance) {
    var promise = window.Promise && new Promise(function (_resolve) { return resolve = _resolve; });
    instance.finished = promise;
    return promise;
  }

  var instance = createNewInstance(params);
  var promise = makePromise(instance);

  function toggleInstanceDirection() {
    var direction = instance.direction;
    if (direction !== 'alternate') {
      instance.direction = direction !== 'normal' ? 'normal' : 'reverse';
    }
    instance.reversed = !instance.reversed;
    children.forEach(function (child) { return child.reversed = instance.reversed; });
  }

  function adjustTime(time) {
    return instance.reversed ? instance.duration - time : time;
  }

  function resetTime() {
    startTime = 0;
    lastTime = adjustTime(instance.currentTime) * (1 / anime.speed);
  }

  function seekCild(time, child) {
    if (child) { child.seek(time - child.timelineOffset); }
  }

  function syncInstanceChildren(time) {
    if (!instance.reversePlayback) {
      for (var i = 0; i < childrenLength; i++) { seekCild(time, children[i]); }
    } else {
      for (var i$1 = childrenLength; i$1--;) { seekCild(time, children[i$1]); }
    }
  }

  function setAnimationsProgress(insTime) {
    var i = 0;
    var animations = instance.animations;
    var animationsLength = animations.length;
    while (i < animationsLength) {
      var anim = animations[i];
      var animatable = anim.animatable;
      var tweens = anim.tweens;
      var tweenLength = tweens.length - 1;
      var tween = tweens[tweenLength];
      // Only check for keyframes if there is more than one tween
      if (tweenLength) { tween = filterArray(tweens, function (t) { return (insTime < t.end); })[0] || tween; }
      var elapsed = minMax(insTime - tween.start - tween.delay, 0, tween.duration) / tween.duration;
      var eased = isNaN(elapsed) ? 1 : tween.easing(elapsed);
      var strings = tween.to.strings;
      var round = tween.round;
      var numbers = [];
      var toNumbersLength = tween.to.numbers.length;
      var progress = (void 0);
      for (var n = 0; n < toNumbersLength; n++) {
        var value = (void 0);
        var toNumber = tween.to.numbers[n];
        var fromNumber = tween.from.numbers[n] || 0;
        if (!tween.isPath) {
          value = fromNumber + (eased * (toNumber - fromNumber));
        } else {
          value = getPathProgress(tween.value, eased * toNumber);
        }
        if (round) {
          if (!(tween.isColor && n > 2)) {
            value = Math.round(value * round) / round;
          }
        }
        numbers.push(value);
      }
      // Manual Array.reduce for better performances
      var stringsLength = strings.length;
      if (!stringsLength) {
        progress = numbers[0];
      } else {
        progress = strings[0];
        for (var s = 0; s < stringsLength; s++) {
          var a = strings[s];
          var b = strings[s + 1];
          var n$1 = numbers[s];
          if (!isNaN(n$1)) {
            if (!b) {
              progress += n$1 + ' ';
            } else {
              progress += n$1 + b;
            }
          }
        }
      }
      setProgressValue[anim.type](animatable.target, anim.property, progress, animatable.transforms);
      anim.currentValue = progress;
      i++;
    }
  }

  function setCallback(cb) {
    if (instance[cb] && !instance.passThrough) { instance[cb](instance); }
  }

  function countIteration() {
    if (instance.remaining && instance.remaining !== true) {
      instance.remaining--;
    }
  }

  function setInstanceProgress(engineTime) {
    var insDuration = instance.duration;
    var insDelay = instance.delay;
    var insEndDelay = insDuration - instance.endDelay;
    var insTime = adjustTime(engineTime);
    instance.progress = minMax((insTime / insDuration) * 100, 0, 100);
    instance.reversePlayback = insTime < instance.currentTime;
    if (children) { syncInstanceChildren(insTime); }
    if (!instance.began && instance.currentTime > 0) {
      instance.began = true;
      setCallback('begin');
      setCallback('loopBegin');
    }
    if (insTime <= insDelay && instance.currentTime !== 0) {
      setAnimationsProgress(0);
    }
    if ((insTime >= insEndDelay && instance.currentTime !== insDuration) || !insDuration) {
      setAnimationsProgress(insDuration);
    }
    if (insTime > insDelay && insTime < insEndDelay) {
      if (!instance.changeBegan) {
        instance.changeBegan = true;
        instance.changeCompleted = false;
        setCallback('changeBegin');
      }
      setCallback('change');
      setAnimationsProgress(insTime);
    } else {
      if (instance.changeBegan) {
        instance.changeCompleted = true;
        instance.changeBegan = false;
        setCallback('changeComplete');
      }
    }
    instance.currentTime = minMax(insTime, 0, insDuration);
    if (instance.began) { setCallback('update'); }
    if (engineTime >= insDuration) {
      lastTime = 0;
      countIteration();
      if (instance.remaining) {
        startTime = now;
        setCallback('loopComplete');
        setCallback('loopBegin');
        if (instance.direction === 'alternate') { toggleInstanceDirection(); }
      } else {
        instance.paused = true;
        if (!instance.completed) {
          instance.completed = true;
          setCallback('loopComplete');
          setCallback('complete');
          if (!instance.passThrough && 'Promise' in window) {
            resolve();
            promise = makePromise(instance);
          }
        }
      }
    }
  }

  instance.reset = function() {
    var direction = instance.direction;
    instance.passThrough = false;
    instance.currentTime = 0;
    instance.progress = 0;
    instance.paused = true;
    instance.began = false;
    instance.changeBegan = false;
    instance.completed = false;
    instance.changeCompleted = false;
    instance.reversePlayback = false;
    instance.reversed = direction === 'reverse';
    instance.remaining = instance.loop;
    children = instance.children;
    childrenLength = children.length;
    for (var i = childrenLength; i--;) { instance.children[i].reset(); }
    if (instance.reversed && instance.loop !== true || (direction === 'alternate' && instance.loop === 1)) { instance.remaining++; }
    setAnimationsProgress(0);
  };

  // Set Value helper

  instance.set = function(targets, properties) {
    setTargetsValue(targets, properties);
    return instance;
  };

  instance.tick = function(t) {
    now = t;
    if (!startTime) { startTime = now; }
    setInstanceProgress((now + (lastTime - startTime)) * anime.speed);
  };

  instance.seek = function(time) {
    setInstanceProgress(adjustTime(time));
  };

  instance.pause = function() {
    instance.paused = true;
    resetTime();
  };

  instance.play = function() {
    if (!instance.paused) { return; }
    if (instance.completed) { instance.reset(); }
    instance.paused = false;
    activeInstances.push(instance);
    resetTime();
    if (!raf) { engine(); }
  };

  instance.reverse = function() {
    toggleInstanceDirection();
    resetTime();
  };

  instance.restart = function() {
    instance.reset();
    instance.play();
  };

  instance.reset();

  if (instance.autoplay) { instance.play(); }

  return instance;

}

// Remove targets from animation

function removeTargetsFromAnimations(targetsArray, animations) {
  for (var a = animations.length; a--;) {
    if (arrayContains(targetsArray, animations[a].animatable.target)) {
      animations.splice(a, 1);
    }
  }
}

function removeTargets(targets) {
  var targetsArray = parseTargets(targets);
  for (var i = activeInstances.length; i--;) {
    var instance = activeInstances[i];
    var animations = instance.animations;
    var children = instance.children;
    removeTargetsFromAnimations(targetsArray, animations);
    for (var c = children.length; c--;) {
      var child = children[c];
      var childAnimations = child.animations;
      removeTargetsFromAnimations(targetsArray, childAnimations);
      if (!childAnimations.length && !child.children.length) { children.splice(c, 1); }
    }
    if (!animations.length && !children.length) { instance.pause(); }
  }
}

// Stagger helpers

function stagger(val, params) {
  if ( params === void 0 ) params = {};

  var direction = params.direction || 'normal';
  var easing = params.easing ? parseEasings(params.easing) : null;
  var grid = params.grid;
  var axis = params.axis;
  var fromIndex = params.from || 0;
  var fromFirst = fromIndex === 'first';
  var fromCenter = fromIndex === 'center';
  var fromLast = fromIndex === 'last';
  var isRange = is.arr(val);
  var val1 = isRange ? parseFloat(val[0]) : parseFloat(val);
  var val2 = isRange ? parseFloat(val[1]) : 0;
  var unit = getUnit(isRange ? val[1] : val) || 0;
  var start = params.start || 0 + (isRange ? val1 : 0);
  var values = [];
  var maxValue = 0;
  return function (el, i, t) {
    if (fromFirst) { fromIndex = 0; }
    if (fromCenter) { fromIndex = (t - 1) / 2; }
    if (fromLast) { fromIndex = t - 1; }
    if (!values.length) {
      for (var index = 0; index < t; index++) {
        if (!grid) {
          values.push(Math.abs(fromIndex - index));
        } else {
          var fromX = !fromCenter ? fromIndex%grid[0] : (grid[0]-1)/2;
          var fromY = !fromCenter ? Math.floor(fromIndex/grid[0]) : (grid[1]-1)/2;
          var toX = index%grid[0];
          var toY = Math.floor(index/grid[0]);
          var distanceX = fromX - toX;
          var distanceY = fromY - toY;
          var value = Math.sqrt(distanceX * distanceX + distanceY * distanceY);
          if (axis === 'x') { value = -distanceX; }
          if (axis === 'y') { value = -distanceY; }
          values.push(value);
        }
        maxValue = Math.max.apply(Math, values);
      }
      if (easing) { values = values.map(function (val) { return easing(val / maxValue) * maxValue; }); }
      if (direction === 'reverse') { values = values.map(function (val) { return axis ? (val < 0) ? val * -1 : -val : Math.abs(maxValue - val); }); }
    }
    var spacing = isRange ? (val2 - val1) / maxValue : val1;
    return start + (spacing * (Math.round(values[i] * 100) / 100)) + unit;
  }
}

// Timeline

function timeline(params) {
  if ( params === void 0 ) params = {};

  var tl = anime(params);
  tl.duration = 0;
  tl.add = function(instanceParams, timelineOffset) {
    var tlIndex = activeInstances.indexOf(tl);
    var children = tl.children;
    if (tlIndex > -1) { activeInstances.splice(tlIndex, 1); }
    function passThrough(ins) { ins.passThrough = true; }
    for (var i = 0; i < children.length; i++) { passThrough(children[i]); }
    var insParams = mergeObjects(instanceParams, replaceObjectProps(defaultTweenSettings, params));
    insParams.targets = insParams.targets || params.targets;
    var tlDuration = tl.duration;
    insParams.autoplay = false;
    insParams.direction = tl.direction;
    insParams.timelineOffset = is.und(timelineOffset) ? tlDuration : getRelativeValue(timelineOffset, tlDuration);
    passThrough(tl);
    tl.seek(insParams.timelineOffset);
    var ins = anime(insParams);
    passThrough(ins);
    children.push(ins);
    var timings = getInstanceTimings(children, params);
    tl.delay = timings.delay;
    tl.endDelay = timings.endDelay;
    tl.duration = timings.duration;
    tl.seek(0);
    tl.reset();
    if (tl.autoplay) { tl.play(); }
    return tl;
  };
  return tl;
}

anime.version = '3.0.1';
anime.speed = 1;
anime.running = activeInstances;
anime.remove = removeTargets;
anime.get = getOriginalTargetValue;
anime.set = setTargetsValue;
anime.convertPx = convertPxToUnit;
anime.path = getPath;
anime.setDashoffset = setDashoffset;
anime.stagger = stagger;
anime.timeline = timeline;
anime.easing = parseEasings;
anime.penner = penner;
anime.random = function (min, max) { return Math.floor(Math.random() * (max - min + 1)) + min; };

/* harmony default export */ __webpack_exports__["default"] = (anime);


/***/ }),

/***/ "./node_modules/sortablejs/modular/sortable.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/sortablejs/modular/sortable.esm.js ***!
  \*********************************************************/
/*! exports provided: default, MultiDrag, Sortable, Swap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiDrag", function() { return MultiDragPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sortable", function() { return Sortable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Swap", function() { return SwapPlugin; });
/**!
 * Sortable 1.10.0-rc3
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var version = "1.10.0-rc3";

function userAgent(pattern) {
  return !!
  /*@__PURE__*/
  navigator.userAgent.match(pattern);
}

var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
var Edge = userAgent(/Edge/i);
var FireFox = userAgent(/firefox/i);
var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
var IOS = userAgent(/iP(ad|od|hone)/i);
var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);

var captureMode = {
  capture: false,
  passive: false
};

function on(el, event, fn) {
  el.addEventListener(event, fn, !IE11OrLess && captureMode);
}

function off(el, event, fn) {
  el.removeEventListener(event, fn, !IE11OrLess && captureMode);
}

function matches(
/**HTMLElement*/
el,
/**String*/
selector) {
  if (!selector) return;
  selector[0] === '>' && (selector = selector.substring(1));

  if (el) {
    try {
      if (el.matches) {
        return el.matches(selector);
      } else if (el.msMatchesSelector) {
        return el.msMatchesSelector(selector);
      } else if (el.webkitMatchesSelector) {
        return el.webkitMatchesSelector(selector);
      }
    } catch (_) {
      return false;
    }
  }

  return false;
}

function getParentOrHost(el) {
  return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
}

function closest(
/**HTMLElement*/
el,
/**String*/
selector,
/**HTMLElement*/
ctx, includeCTX) {
  if (el) {
    ctx = ctx || document;

    do {
      if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
        return el;
      }

      if (el === ctx) break;
      /* jshint boss:true */
    } while (el = getParentOrHost(el));
  }

  return null;
}

var R_SPACE = /\s+/g;

function toggleClass(el, name, state) {
  if (el && name) {
    if (el.classList) {
      el.classList[state ? 'add' : 'remove'](name);
    } else {
      var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
      el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
    }
  }
}

function css(el, prop, val) {
  var style = el && el.style;

  if (style) {
    if (val === void 0) {
      if (document.defaultView && document.defaultView.getComputedStyle) {
        val = document.defaultView.getComputedStyle(el, '');
      } else if (el.currentStyle) {
        val = el.currentStyle;
      }

      return prop === void 0 ? val : val[prop];
    } else {
      if (!(prop in style) && prop.indexOf('webkit') === -1) {
        prop = '-webkit-' + prop;
      }

      style[prop] = val + (typeof val === 'string' ? '' : 'px');
    }
  }
}

function matrix(el, selfOnly) {
  var appliedTransforms = '';

  do {
    var transform = css(el, 'transform');

    if (transform && transform !== 'none') {
      appliedTransforms = transform + ' ' + appliedTransforms;
    }
    /* jshint boss:true */

  } while (!selfOnly && (el = el.parentNode));

  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix;
  /*jshint -W056 */

  return matrixFn && new matrixFn(appliedTransforms);
}

function find(ctx, tagName, iterator) {
  if (ctx) {
    var list = ctx.getElementsByTagName(tagName),
        i = 0,
        n = list.length;

    if (iterator) {
      for (; i < n; i++) {
        iterator(list[i], i);
      }
    }

    return list;
  }

  return [];
}

function getWindowScrollingElement() {
  if (IE11OrLess) {
    return document.documentElement;
  } else {
    return document.scrollingElement;
  }
}
/**
 * Returns the "bounding client rect" of given element
 * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
 * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
 * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
 * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
 * @param  {[HTMLElement]} container              The parent the element will be placed in
 * @return {Object}                               The boundingClientRect of el, with specified adjustments
 */


function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
  if (!el.getBoundingClientRect && el !== window) return;
  var elRect, top, left, bottom, right, height, width;

  if (el !== window && el !== getWindowScrollingElement()) {
    elRect = el.getBoundingClientRect();
    top = elRect.top;
    left = elRect.left;
    bottom = elRect.bottom;
    right = elRect.right;
    height = elRect.height;
    width = elRect.width;
  } else {
    top = 0;
    left = 0;
    bottom = window.innerHeight;
    right = window.innerWidth;
    height = window.innerHeight;
    width = window.innerWidth;
  }

  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
    // Adjust for translate()
    container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
    // Not needed on <= IE11

    if (!IE11OrLess) {
      do {
        if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
          var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container

          top -= containerRect.top + parseInt(css(container, 'border-top-width'));
          left -= containerRect.left + parseInt(css(container, 'border-left-width'));
          bottom = top + elRect.height;
          right = left + elRect.width;
          break;
        }
        /* jshint boss:true */

      } while (container = container.parentNode);
    }
  }

  if (undoScale && el !== window) {
    // Adjust for scale()
    var elMatrix = matrix(container || el),
        scaleX = elMatrix && elMatrix.a,
        scaleY = elMatrix && elMatrix.d;

    if (elMatrix) {
      top /= scaleY;
      left /= scaleX;
      width /= scaleX;
      height /= scaleY;
      bottom = top + height;
      right = left + width;
    }
  }

  return {
    top: top,
    left: left,
    bottom: bottom,
    right: right,
    width: width,
    height: height
  };
}
/**
 * Checks if a side of an element is scrolled past a side of its parents
 * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
 * @param  {[DOMRect]}    rect         Optional rect of `el` to use
 * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
 * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
 * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
 */


function isScrolledPast(el, rect, elSide, parentSide) {
  var parent = getParentAutoScrollElement(el, true),
      elSideVal = (rect ? rect : getRect(el))[elSide];
  /* jshint boss:true */

  while (parent) {
    var parentSideVal = getRect(parent)[parentSide],
        visible = void 0;

    if (parentSide === 'top' || parentSide === 'left') {
      visible = elSideVal >= parentSideVal;
    } else {
      visible = elSideVal <= parentSideVal;
    }

    if (!visible) return parent;
    if (parent === getWindowScrollingElement()) break;
    parent = getParentAutoScrollElement(parent, false);
  }

  return false;
}
/**
 * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
 * and non-draggable elements
 * @param  {HTMLElement} el       The parent element
 * @param  {Number} childNum      The index of the child
 * @param  {Object} options       Parent Sortable's options
 * @return {HTMLElement}          The child at index childNum, or null if not found
 */


function getChild(el, childNum, options) {
  var currentChild = 0,
      i = 0,
      children = el.children;

  while (i < children.length) {
    if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && children[i] !== Sortable.dragged && closest(children[i], options.draggable, el, false)) {
      if (currentChild === childNum) {
        return children[i];
      }

      currentChild++;
    }

    i++;
  }

  return null;
}
/**
 * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
 * @param  {HTMLElement} el       Parent element
 * @param  {selector} selector    Any other elements that should be ignored
 * @return {HTMLElement}          The last child, ignoring ghostEl
 */


function lastChild(el, selector) {
  var last = el.lastElementChild;

  while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
    last = last.previousElementSibling;
  }

  return last || null;
}
/**
 * Returns the index of an element within its parent for a selected set of
 * elements
 * @param  {HTMLElement} el
 * @param  {selector} selector
 * @return {number}
 */


function index(el, selector) {
  var index = 0;

  if (!el || !el.parentNode) {
    return -1;
  }
  /* jshint boss:true */


  while (el = el.previousElementSibling) {
    if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
      index++;
    }
  }

  return index;
}
/**
 * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
 * The value is returned in real pixels.
 * @param  {HTMLElement} el
 * @return {Array}             Offsets in the format of [left, top]
 */


function getRelativeScrollOffset(el) {
  var offsetLeft = 0,
      offsetTop = 0,
      winScroller = getWindowScrollingElement();

  if (el) {
    do {
      var elMatrix = matrix(el),
          scaleX = elMatrix.a,
          scaleY = elMatrix.d;
      offsetLeft += el.scrollLeft * scaleX;
      offsetTop += el.scrollTop * scaleY;
    } while (el !== winScroller && (el = el.parentNode));
  }

  return [offsetLeft, offsetTop];
}
/**
 * Returns the index of the object within the given array
 * @param  {Array} arr   Array that may or may not hold the object
 * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
 * @return {Number}      The index of the object in the array, or -1
 */


function indexOfObject(arr, obj) {
  for (var i in arr) {
    if (!arr.hasOwnProperty(i)) continue;

    for (var key in obj) {
      if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
    }
  }

  return -1;
}

function getParentAutoScrollElement(el, includeSelf) {
  // skip to window
  if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
  var elem = el;
  var gotSelf = false;

  do {
    // we don't need to get elem css if it isn't even overflowing in the first place (performance)
    if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
      var elemCSS = css(elem);

      if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
        if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
        if (gotSelf || includeSelf) return elem;
        gotSelf = true;
      }
    }
    /* jshint boss:true */

  } while (elem = elem.parentNode);

  return getWindowScrollingElement();
}

function extend(dst, src) {
  if (dst && src) {
    for (var key in src) {
      if (src.hasOwnProperty(key)) {
        dst[key] = src[key];
      }
    }
  }

  return dst;
}

function isRectEqual(rect1, rect2) {
  return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
}

var _throttleTimeout;

function throttle(callback, ms) {
  return function () {
    if (!_throttleTimeout) {
      var args = arguments,
          _this = this;

      if (args.length === 1) {
        callback.call(_this, args[0]);
      } else {
        callback.apply(_this, args);
      }

      _throttleTimeout = setTimeout(function () {
        _throttleTimeout = void 0;
      }, ms);
    }
  };
}

function cancelThrottle() {
  clearTimeout(_throttleTimeout);
  _throttleTimeout = void 0;
}

function scrollBy(el, x, y) {
  el.scrollLeft += x;
  el.scrollTop += y;
}

function clone(el) {
  var Polymer = window.Polymer;
  var $ = window.jQuery || window.Zepto;

  if (Polymer && Polymer.dom) {
    return Polymer.dom(el).cloneNode(true);
  } else if ($) {
    return $(el).clone(true)[0];
  } else {
    return el.cloneNode(true);
  }
}

function setRect(el, rect) {
  css(el, 'position', 'absolute');
  css(el, 'top', rect.top);
  css(el, 'left', rect.left);
  css(el, 'width', rect.width);
  css(el, 'height', rect.height);
}

function unsetRect(el) {
  css(el, 'position', '');
  css(el, 'top', '');
  css(el, 'left', '');
  css(el, 'width', '');
  css(el, 'height', '');
}

var expando = 'Sortable' + new Date().getTime();

function AnimationStateManager() {
  var animationStates = [],
      animationCallbackId;
  return {
    captureAnimationState: function captureAnimationState() {
      animationStates = [];
      if (!this.options.animation) return;
      var children = [].slice.call(this.el.children);
      children.forEach(function (child) {
        if (css(child, 'display') === 'none' || child === Sortable.ghost) return;
        animationStates.push({
          target: child,
          rect: getRect(child)
        });
        var fromRect = getRect(child); // If animating: compensate for current animation

        if (child.thisAnimationDuration) {
          var childMatrix = matrix(child, true);

          if (childMatrix) {
            fromRect.top -= childMatrix.f;
            fromRect.left -= childMatrix.e;
          }
        }

        child.fromRect = fromRect;
      });
    },
    addAnimationState: function addAnimationState(state) {
      animationStates.push(state);
    },
    removeAnimationState: function removeAnimationState(target) {
      animationStates.splice(indexOfObject(animationStates, {
        target: target
      }), 1);
    },
    animateAll: function animateAll(callback) {
      var _this = this;

      if (!this.options.animation) {
        clearTimeout(animationCallbackId);
        if (typeof callback === 'function') callback();
        return;
      }

      var animating = false,
          animationTime = 0;
      animationStates.forEach(function (state) {
        var time = 0,
            target = state.target,
            fromRect = target.fromRect,
            toRect = getRect(target),
            prevFromRect = target.prevFromRect,
            prevToRect = target.prevToRect,
            animatingRect = state.rect,
            targetMatrix = matrix(target, true);

        if (targetMatrix) {
          // Compensate for current animation
          toRect.top -= targetMatrix.f;
          toRect.left -= targetMatrix.e;
        }

        target.toRect = toRect; // If element is scrolled out of view: Do not animate

        if ((isScrolledPast(target, toRect, 'bottom', 'top') || isScrolledPast(target, toRect, 'top', 'bottom') || isScrolledPast(target, toRect, 'right', 'left') || isScrolledPast(target, toRect, 'left', 'right')) && (isScrolledPast(target, animatingRect, 'bottom', 'top') || isScrolledPast(target, animatingRect, 'top', 'bottom') || isScrolledPast(target, animatingRect, 'right', 'left') || isScrolledPast(target, animatingRect, 'left', 'right')) && (isScrolledPast(target, fromRect, 'bottom', 'top') || isScrolledPast(target, fromRect, 'top', 'bottom') || isScrolledPast(target, fromRect, 'right', 'left') || isScrolledPast(target, fromRect, 'left', 'right'))) return;

        if (target.thisAnimationDuration) {
          // Could also check if animatingRect is between fromRect and toRect
          if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect
          (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
            // If returning to same place as started from animation and on same axis
            time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
          }
        } // if fromRect != toRect: animate


        if (!isRectEqual(toRect, fromRect)) {
          target.prevFromRect = fromRect;
          target.prevToRect = toRect;

          if (!time) {
            time = _this.options.animation;
          }

          _this.animate(target, animatingRect, time);
        }

        if (time) {
          animating = true;
          animationTime = Math.max(animationTime, time);
          clearTimeout(target.animationResetTimer);
          target.animationResetTimer = setTimeout(function () {
            target.animationTime = 0;
            target.prevFromRect = null;
            target.fromRect = null;
            target.prevToRect = null;
            target.thisAnimationDuration = null;
          }, time);
          target.thisAnimationDuration = time;
        }
      });
      clearTimeout(animationCallbackId);

      if (!animating) {
        if (typeof callback === 'function') callback();
      } else {
        animationCallbackId = setTimeout(function () {
          if (typeof callback === 'function') callback();
        }, animationTime);
      }

      animationStates = [];
    },
    animate: function animate(target, prev, duration) {
      if (duration) {
        css(target, 'transition', '');
        css(target, 'transform', '');
        var currentRect = getRect(target),
            elMatrix = matrix(this.el),
            scaleX = elMatrix && elMatrix.a,
            scaleY = elMatrix && elMatrix.d,
            translateX = (prev.left - currentRect.left) / (scaleX || 1),
            translateY = (prev.top - currentRect.top) / (scaleY || 1);
        target.animatingX = !!translateX;
        target.animatingY = !!translateY;
        css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
        repaint(target); // repaint

        css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
        css(target, 'transform', 'translate3d(0,0,0)');
        typeof target.animated === 'number' && clearTimeout(target.animated);
        target.animated = setTimeout(function () {
          css(target, 'transition', '');
          css(target, 'transform', '');
          target.animated = false;
          target.animatingX = false;
          target.animatingY = false;
        }, duration);
      }
    }
  };
}

function repaint(target) {
  return target.offsetWidth;
}

function calculateRealTime(animatingRect, fromRect, toRect, options) {
  return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
}

var plugins = [];
var defaults = {
  initializeByDefault: true
};
var PluginManager = {
  mount: function mount(plugin) {
    // Set default static properties
    for (var option in defaults) {
      if (defaults.hasOwnProperty(option) && !(option in plugin)) {
        plugin[option] = defaults[option];
      }
    }

    plugins.push(plugin);
  },
  pluginEvent: function pluginEvent(eventName, sortable, evt) {
    var _this = this;

    this.eventCanceled = false;
    var eventNameGlobal = eventName + 'Global';
    plugins.forEach(function (plugin) {
      if (!sortable[plugin.pluginName]) return; // Fire global events if it exists in this sortable

      if (sortable[plugin.pluginName][eventNameGlobal]) {
        _this.eventCanceled = !!sortable[plugin.pluginName][eventNameGlobal](_objectSpread({
          sortable: sortable
        }, evt));
      } // Only fire plugin event if plugin is enabled in this sortable,
      // and plugin has event defined


      if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
        _this.eventCanceled = _this.eventCanceled || !!sortable[plugin.pluginName][eventName](_objectSpread({
          sortable: sortable
        }, evt));
      }
    });
  },
  initializePlugins: function initializePlugins(sortable, el, defaults) {
    plugins.forEach(function (plugin) {
      var pluginName = plugin.pluginName;
      if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
      var initialized = new plugin(sortable, el);
      initialized.sortable = sortable;
      sortable[pluginName] = initialized; // Add default options from plugin

      _extends(defaults, initialized.options);
    });

    for (var option in sortable.options) {
      if (!sortable.options.hasOwnProperty(option)) continue;
      var modified = this.modifyOption(sortable, option, sortable.options[option]);

      if (typeof modified !== 'undefined') {
        sortable.options[option] = modified;
      }
    }
  },
  getEventOptions: function getEventOptions(name, sortable) {
    var eventOptions = {};
    plugins.forEach(function (plugin) {
      if (typeof plugin.eventOptions !== 'function') return;

      _extends(eventOptions, plugin.eventOptions.call(sortable, name));
    });
    return eventOptions;
  },
  modifyOption: function modifyOption(sortable, name, value) {
    var modifiedValue;
    plugins.forEach(function (plugin) {
      // Plugin must exist on the Sortable
      if (!sortable[plugin.pluginName]) return; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin

      if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {
        modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
      }
    });
    return modifiedValue;
  }
};

function dispatchEvent(_ref) {
  var sortable = _ref.sortable,
      rootEl = _ref.rootEl,
      name = _ref.name,
      targetEl = _ref.targetEl,
      cloneEl = _ref.cloneEl,
      toEl = _ref.toEl,
      fromEl = _ref.fromEl,
      oldIndex = _ref.oldIndex,
      newIndex = _ref.newIndex,
      oldDraggableIndex = _ref.oldDraggableIndex,
      newDraggableIndex = _ref.newDraggableIndex,
      originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      eventOptions = _ref.eventOptions;
  sortable = sortable || rootEl[expando];
  var evt,
      options = sortable.options,
      onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature

  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent(name, {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent(name, true, true);
  }

  evt.to = toEl || rootEl;
  evt.from = fromEl || rootEl;
  evt.item = targetEl || rootEl;
  evt.clone = cloneEl;
  evt.oldIndex = oldIndex;
  evt.newIndex = newIndex;
  evt.oldDraggableIndex = oldDraggableIndex;
  evt.newDraggableIndex = newDraggableIndex;
  evt.originalEvent = originalEvent;
  evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;

  var allEventOptions = _objectSpread({}, eventOptions, PluginManager.getEventOptions(name, sortable));

  for (var option in allEventOptions) {
    evt[option] = allEventOptions[option];
  }

  if (rootEl) {
    rootEl.dispatchEvent(evt);
  }

  if (options[onName]) {
    options[onName].call(sortable, evt);
  }
}

var pluginEvent = function pluginEvent(eventName, sortable) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      originalEvent = _ref.evt,
      data = _objectWithoutProperties(_ref, ["evt"]);

  PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread({
    dragEl: dragEl,
    parentEl: parentEl,
    ghostEl: ghostEl,
    rootEl: rootEl,
    nextEl: nextEl,
    lastDownEl: lastDownEl,
    cloneEl: cloneEl,
    cloneHidden: cloneHidden,
    dragStarted: moved,
    putSortable: putSortable,
    activeSortable: Sortable.active,
    originalEvent: originalEvent,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex,
    hideGhostForTarget: _hideGhostForTarget,
    unhideGhostForTarget: _unhideGhostForTarget,
    cloneNowHidden: function cloneNowHidden() {
      cloneHidden = true;
    },
    cloneNowShown: function cloneNowShown() {
      cloneHidden = false;
    },
    dispatchSortableEvent: function dispatchSortableEvent(name) {
      _dispatchEvent({
        sortable: sortable,
        name: name,
        originalEvent: originalEvent
      });
    }
  }, data));
};

function _dispatchEvent(info) {
  dispatchEvent(_objectSpread({
    putSortable: putSortable,
    cloneEl: cloneEl,
    targetEl: dragEl,
    rootEl: rootEl,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex
  }, info));
}

if (typeof window === "undefined" || !window.document) {
  throw new Error("Sortable.js requires a window with a document");
}

var dragEl,
    parentEl,
    ghostEl,
    rootEl,
    nextEl,
    lastDownEl,
    cloneEl,
    cloneHidden,
    oldIndex,
    newIndex,
    oldDraggableIndex,
    newDraggableIndex,
    activeGroup,
    putSortable,
    awaitingDragStarted = false,
    ignoreNextClick = false,
    sortables = [],
    tapEvt,
    touchEvt,
    moved,
    lastTarget,
    lastDirection,
    pastFirstInvertThresh = false,
    isCircumstantialInvert = false,
    targetMoveDistance,
    // For positioning ghost absolutely
ghostRelativeParent,
    ghostRelativeParentInitialScroll = [],
    // (left, top)
_silent = false,
    savedInputChecked = [];
/** @const */

var PositionGhostAbsolutely = IOS,
    CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
    // This will not pass for IE9, because IE9 DnD only works on anchors
supportDraggable = !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),
    supportCssPointerEvents = function () {
  // false when <= IE11
  if (IE11OrLess) {
    return false;
  }

  var el = document.createElement('x');
  el.style.cssText = 'pointer-events:auto';
  return el.style.pointerEvents === 'auto';
}(),
    _detectDirection = function _detectDirection(el, options) {
  var elCSS = css(el),
      elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
      child1 = getChild(el, 0, options),
      child2 = getChild(el, 1, options),
      firstChildCSS = child1 && css(child1),
      secondChildCSS = child2 && css(child2),
      firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
      secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;

  if (elCSS.display === 'flex') {
    return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
  }

  if (elCSS.display === 'grid') {
    return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
  }

  if (child1 && firstChildCSS["float"] !== 'none') {
    var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
    return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
  }

  return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
},
    _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
  var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
      dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
      dragElOppLength = vertical ? dragRect.width : dragRect.height,
      targetS1Opp = vertical ? targetRect.left : targetRect.top,
      targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
      targetOppLength = vertical ? targetRect.width : targetRect.height;
  return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
},

/**
 * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
 * @param  {Number} x      X position
 * @param  {Number} y      Y position
 * @return {HTMLElement}   Element of the first found nearest Sortable
 */
_detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
  var ret;
  sortables.some(function (sortable) {
    if (lastChild(sortable)) return;
    var rect = getRect(sortable),
        threshold = sortable[expando].options.emptyInsertThreshold,
        insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
        insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;

    if (threshold && insideHorizontally && insideVertically) {
      return ret = sortable;
    }
  });
  return ret;
},
    _prepareGroup = function _prepareGroup(options) {
  function toFn(value, pull) {
    return function (to, from, dragEl, evt) {
      var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;

      if (value == null && (pull || sameGroup)) {
        // Default pull value
        // Default pull and put value if same group
        return true;
      } else if (value == null || value === false) {
        return false;
      } else if (pull && value === 'clone') {
        return value;
      } else if (typeof value === 'function') {
        return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
      } else {
        var otherGroup = (pull ? to : from).options.group.name;
        return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
      }
    };
  }

  var group = {};
  var originalGroup = options.group;

  if (!originalGroup || _typeof(originalGroup) != 'object') {
    originalGroup = {
      name: originalGroup
    };
  }

  group.name = originalGroup.name;
  group.checkPull = toFn(originalGroup.pull, true);
  group.checkPut = toFn(originalGroup.put);
  group.revertClone = originalGroup.revertClone;
  options.group = group;
},
    _hideGhostForTarget = function _hideGhostForTarget() {
  if (!supportCssPointerEvents && ghostEl) {
    css(ghostEl, 'display', 'none');
  }
},
    _unhideGhostForTarget = function _unhideGhostForTarget() {
  if (!supportCssPointerEvents && ghostEl) {
    css(ghostEl, 'display', '');
  }
}; // #1184 fix - Prevent click event on fallback if dragged but item not changed position


document.addEventListener('click', function (evt) {
  if (ignoreNextClick) {
    evt.preventDefault();
    evt.stopPropagation && evt.stopPropagation();
    evt.stopImmediatePropagation && evt.stopImmediatePropagation();
    ignoreNextClick = false;
    return false;
  }
}, true);

var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
  if (dragEl) {
    evt = evt.touches ? evt.touches[0] : evt;

    var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);

    if (nearest) {
      // Create imitation event
      var event = {};

      for (var i in evt) {
        if (evt.hasOwnProperty(i)) {
          event[i] = evt[i];
        }
      }

      event.target = event.rootEl = nearest;
      event.preventDefault = void 0;
      event.stopPropagation = void 0;

      nearest[expando]._onDragOver(event);
    }
  }
};

var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
  if (dragEl) {
    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
  }
};
/**
 * @class  Sortable
 * @param  {HTMLElement}  el
 * @param  {Object}       [options]
 */


function Sortable(el, options) {
  if (!(el && el.nodeType && el.nodeType === 1)) {
    throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
  }

  this.el = el; // root element

  this.options = options = _extends({}, options); // Export instance

  el[expando] = this;
  var defaults = {
    group: null,
    sort: true,
    disabled: false,
    store: null,
    handle: null,
    draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
    swapThreshold: 1,
    // percentage; 0 <= x <= 1
    invertSwap: false,
    // invert always
    invertedSwapThreshold: null,
    // will be set to same as swapThreshold if default
    removeCloneOnHide: true,
    direction: function direction() {
      return _detectDirection(el, this.options);
    },
    ghostClass: 'sortable-ghost',
    chosenClass: 'sortable-chosen',
    dragClass: 'sortable-drag',
    ignore: 'a, img',
    filter: null,
    preventOnFilter: true,
    animation: 0,
    easing: null,
    setData: function setData(dataTransfer, dragEl) {
      dataTransfer.setData('Text', dragEl.textContent);
    },
    dropBubble: false,
    dragoverBubble: false,
    dataIdAttr: 'data-id',
    delay: 0,
    delayOnTouchOnly: false,
    touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
    forceFallback: false,
    fallbackClass: 'sortable-fallback',
    fallbackOnBody: false,
    fallbackTolerance: 0,
    fallbackOffset: {
      x: 0,
      y: 0
    },
    supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window,
    emptyInsertThreshold: 5
  };
  PluginManager.initializePlugins(this, el, defaults); // Set default options

  for (var name in defaults) {
    !(name in options) && (options[name] = defaults[name]);
  }

  _prepareGroup(options); // Bind all private methods


  for (var fn in this) {
    if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
      this[fn] = this[fn].bind(this);
    }
  } // Setup drag mode


  this.nativeDraggable = options.forceFallback ? false : supportDraggable;

  if (this.nativeDraggable) {
    // Touch start threshold cannot be greater than the native dragstart threshold
    this.options.touchStartThreshold = 1;
  } // Bind events


  if (options.supportPointer) {
    on(el, 'pointerdown', this._onTapStart);
  } else {
    on(el, 'mousedown', this._onTapStart);
    on(el, 'touchstart', this._onTapStart);
  }

  if (this.nativeDraggable) {
    on(el, 'dragover', this);
    on(el, 'dragenter', this);
  }

  sortables.push(this.el); // Restore sorting

  options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager

  _extends(this, AnimationStateManager());
}

Sortable.prototype =
/** @lends Sortable.prototype */
{
  constructor: Sortable,
  _isOutsideThisEl: function _isOutsideThisEl(target) {
    if (!this.el.contains(target) && target !== this.el) {
      lastTarget = null;
    }
  },
  _getDirection: function _getDirection(evt, target) {
    return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
  },
  _onTapStart: function _onTapStart(
  /** Event|TouchEvent */
  evt) {
    if (!evt.cancelable) return;

    var _this = this,
        el = this.el,
        options = this.options,
        preventOnFilter = options.preventOnFilter,
        type = evt.type,
        touch = evt.touches && evt.touches[0],
        target = (touch || evt).target,
        originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
        filter = options.filter;

    _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.


    if (dragEl) {
      return;
    }

    if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
      return; // only left button and enabled
    } // cancel dnd if original target is content editable


    if (originalTarget.isContentEditable) {
      return;
    }

    target = closest(target, options.draggable, el, false);

    if (target && target.animated) {
      return;
    }

    if (lastDownEl === target) {
      // Ignoring duplicate `down`
      return;
    } // Get the index of the dragged element within its parent


    oldIndex = index(target);
    oldDraggableIndex = index(target, options.draggable); // Check filter

    if (typeof filter === 'function') {
      if (filter.call(this, evt, target, this)) {
        _dispatchEvent({
          sortable: _this,
          rootEl: originalTarget,
          name: 'filter',
          targetEl: target,
          toEl: el,
          fromEl: el
        });

        pluginEvent('filter', _this, {
          evt: evt
        });
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return; // cancel dnd
      }
    } else if (filter) {
      filter = filter.split(',').some(function (criteria) {
        criteria = closest(originalTarget, criteria.trim(), el, false);

        if (criteria) {
          _dispatchEvent({
            sortable: _this,
            rootEl: criteria,
            name: 'filter',
            targetEl: target,
            fromEl: el,
            toEl: el
          });

          pluginEvent('filter', _this, {
            evt: evt
          });
          return true;
        }
      });

      if (filter) {
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return; // cancel dnd
      }
    }

    if (options.handle && !closest(originalTarget, options.handle, el, false)) {
      return;
    } // Prepare `dragstart`


    this._prepareDragStart(evt, touch, target);
  },
  _prepareDragStart: function _prepareDragStart(
  /** Event */
  evt,
  /** Touch */
  touch,
  /** HTMLElement */
  target) {
    var _this = this,
        el = _this.el,
        options = _this.options,
        ownerDocument = el.ownerDocument,
        dragStartFn;

    if (target && !dragEl && target.parentNode === el) {
      rootEl = el;
      dragEl = target;
      parentEl = dragEl.parentNode;
      nextEl = dragEl.nextSibling;
      lastDownEl = target;
      activeGroup = options.group;
      Sortable.dragged = dragEl;
      tapEvt = {
        target: dragEl,
        clientX: (touch || evt).clientX,
        clientY: (touch || evt).clientY
      };
      this._lastX = (touch || evt).clientX;
      this._lastY = (touch || evt).clientY;
      dragEl.style['will-change'] = 'all';

      dragStartFn = function dragStartFn() {
        pluginEvent('delayEnded', _this, {
          evt: evt
        });

        if (Sortable.eventCanceled) {
          _this._onDrop();

          return;
        } // Delayed drag has been triggered
        // we can re-enable the events: touchmove/mousemove


        _this._disableDelayedDragEvents();

        if (!FireFox && _this.nativeDraggable) {
          dragEl.draggable = true;
        } // Bind the events: dragstart/dragend


        _this._triggerDragStart(evt, touch); // Drag start event


        _dispatchEvent({
          sortable: _this,
          name: 'choose',
          originalEvent: evt
        }); // Chosen item


        toggleClass(dragEl, options.chosenClass, true);
      }; // Disable "draggable"


      options.ignore.split(',').forEach(function (criteria) {
        find(dragEl, criteria.trim(), _disableDraggable);
      });
      on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mouseup', _this._onDrop);
      on(ownerDocument, 'touchend', _this._onDrop);
      on(ownerDocument, 'touchcancel', _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)

      if (FireFox && this.nativeDraggable) {
        this.options.touchStartThreshold = 4;
        dragEl.draggable = true;
      }

      pluginEvent('delayStart', this, {
        evt: evt
      }); // Delay is impossible for native DnD in Edge or IE

      if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
        if (Sortable.eventCanceled) {
          this._onDrop();

          return;
        } // If the user moves the pointer or let go the click or touch
        // before the delay has been reached:
        // disable the delayed drag


        on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
        on(ownerDocument, 'touchend', _this._disableDelayedDrag);
        on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
        on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
        on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
        options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
      } else {
        dragStartFn();
      }
    }
  },
  _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(
  /** TouchEvent|PointerEvent **/
  e) {
    var touch = e.touches ? e.touches[0] : e;

    if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
      this._disableDelayedDrag();
    }
  },
  _disableDelayedDrag: function _disableDelayedDrag() {
    dragEl && _disableDraggable(dragEl);
    clearTimeout(this._dragStartTimer);

    this._disableDelayedDragEvents();
  },
  _disableDelayedDragEvents: function _disableDelayedDragEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._disableDelayedDrag);
    off(ownerDocument, 'touchend', this._disableDelayedDrag);
    off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
    off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
  },
  _triggerDragStart: function _triggerDragStart(
  /** Event */
  evt,
  /** Touch */
  touch) {
    touch = touch || evt.pointerType == 'touch' && evt;

    if (!this.nativeDraggable || touch) {
      if (this.options.supportPointer) {
        on(document, 'pointermove', this._onTouchMove);
      } else if (touch) {
        on(document, 'touchmove', this._onTouchMove);
      } else {
        on(document, 'mousemove', this._onTouchMove);
      }
    } else {
      on(dragEl, 'dragend', this);
      on(rootEl, 'dragstart', this._onDragStart);
    }

    try {
      if (document.selection) {
        // Timeout neccessary for IE9
        _nextTick(function () {
          document.selection.empty();
        });
      } else {
        window.getSelection().removeAllRanges();
      }
    } catch (err) {}
  },
  _dragStarted: function _dragStarted(fallback, evt) {

    awaitingDragStarted = false;

    if (rootEl && dragEl) {
      pluginEvent('dragStarted', this, {
        evt: evt
      });

      if (this.nativeDraggable) {
        on(document, 'dragover', _checkOutsideTargetEl);
      }

      var options = this.options; // Apply effect

      !fallback && toggleClass(dragEl, options.dragClass, false);
      toggleClass(dragEl, options.ghostClass, true);
      Sortable.active = this;
      fallback && this._appendGhost(); // Drag start event

      _dispatchEvent({
        sortable: this,
        name: 'start',
        originalEvent: evt
      });
    } else {
      this._nulling();
    }
  },
  _emulateDragOver: function _emulateDragOver() {
    if (touchEvt) {
      this._lastX = touchEvt.clientX;
      this._lastY = touchEvt.clientY;

      _hideGhostForTarget();

      var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
      var parent = target;

      while (target && target.shadowRoot) {
        target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        if (target === parent) break;
        parent = target;
      }

      dragEl.parentNode[expando]._isOutsideThisEl(target);

      if (parent) {
        do {
          if (parent[expando]) {
            var inserted = void 0;
            inserted = parent[expando]._onDragOver({
              clientX: touchEvt.clientX,
              clientY: touchEvt.clientY,
              target: target,
              rootEl: parent
            });

            if (inserted && !this.options.dragoverBubble) {
              break;
            }
          }

          target = parent; // store last element
        }
        /* jshint boss:true */
        while (parent = parent.parentNode);
      }

      _unhideGhostForTarget();
    }
  },
  _onTouchMove: function _onTouchMove(
  /**TouchEvent*/
  evt) {
    if (tapEvt) {
      var options = this.options,
          fallbackTolerance = options.fallbackTolerance,
          fallbackOffset = options.fallbackOffset,
          touch = evt.touches ? evt.touches[0] : evt,
          ghostMatrix = ghostEl && matrix(ghostEl),
          scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
          scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
          relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
          dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
          dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1),
          translate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)'; // only set the status to dragging, when we are actually dragging

      if (!Sortable.active && !awaitingDragStarted) {
        if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
          return;
        }

        this._onDragStart(evt, true);
      }

      touchEvt = touch;
      css(ghostEl, 'webkitTransform', translate3d);
      css(ghostEl, 'mozTransform', translate3d);
      css(ghostEl, 'msTransform', translate3d);
      css(ghostEl, 'transform', translate3d);
      evt.cancelable && evt.preventDefault();
    }
  },
  _appendGhost: function _appendGhost() {
    // Bug if using scale(): https://stackoverflow.com/questions/2637058
    // Not being adjusted for
    if (!ghostEl) {
      var container = this.options.fallbackOnBody ? document.body : rootEl,
          rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
          options = this.options; // Position absolutely

      if (PositionGhostAbsolutely) {
        // Get relatively positioned parent
        ghostRelativeParent = container;

        while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
          ghostRelativeParent = ghostRelativeParent.parentNode;
        }

        if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
          if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
          rect.top += ghostRelativeParent.scrollTop;
          rect.left += ghostRelativeParent.scrollLeft;
        } else {
          ghostRelativeParent = getWindowScrollingElement();
        }

        ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
      }

      ghostEl = dragEl.cloneNode(true);
      toggleClass(ghostEl, options.ghostClass, false);
      toggleClass(ghostEl, options.fallbackClass, true);
      toggleClass(ghostEl, options.dragClass, true);
      css(ghostEl, 'transition', '');
      css(ghostEl, 'transform', '');
      css(ghostEl, 'box-sizing', 'border-box');
      css(ghostEl, 'margin', 0);
      css(ghostEl, 'top', rect.top);
      css(ghostEl, 'left', rect.left);
      css(ghostEl, 'width', rect.width);
      css(ghostEl, 'height', rect.height);
      css(ghostEl, 'opacity', '0.8');
      css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
      css(ghostEl, 'zIndex', '100000');
      css(ghostEl, 'pointerEvents', 'none');
      Sortable.ghost = ghostEl;
      container.appendChild(ghostEl);
    }
  },
  _onDragStart: function _onDragStart(
  /**Event*/
  evt,
  /**boolean*/
  fallback) {
    var _this = this;

    var dataTransfer = evt.dataTransfer;
    var options = _this.options;
    pluginEvent('dragStart', this, {
      evt: evt
    });

    if (Sortable.eventCanceled) {
      this._onDrop();

      return;
    }

    pluginEvent('setupClone', this);

    if (!Sortable.eventCanceled) {
      cloneEl = clone(dragEl);
      cloneEl.draggable = false;
      cloneEl.style['will-change'] = '';

      this._hideClone();

      toggleClass(cloneEl, this.options.chosenClass, false);
      Sortable.clone = cloneEl;
    } // #1143: IFrame support workaround


    _this.cloneId = _nextTick(function () {
      pluginEvent('clone', _this);
      if (Sortable.eventCanceled) return;

      if (!_this.options.removeCloneOnHide) {
        rootEl.insertBefore(cloneEl, dragEl);
      }

      _this._hideClone();

      _dispatchEvent({
        sortable: _this,
        name: 'clone'
      });
    });
    !fallback && toggleClass(dragEl, options.dragClass, true); // Set proper drop events

    if (fallback) {
      ignoreNextClick = true;
      _this._loopId = setInterval(_this._emulateDragOver, 50);
    } else {
      // Undo what was set in _prepareDragStart before drag started
      off(document, 'mouseup', _this._onDrop);
      off(document, 'touchend', _this._onDrop);
      off(document, 'touchcancel', _this._onDrop);

      if (dataTransfer) {
        dataTransfer.effectAllowed = 'move';
        options.setData && options.setData.call(_this, dataTransfer, dragEl);
      }

      on(document, 'drop', _this); // #1276 fix:

      css(dragEl, 'transform', 'translateZ(0)');
    }

    awaitingDragStarted = true;
    _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
    on(document, 'selectstart', _this);
    moved = true;

    if (Safari) {
      css(document.body, 'user-select', 'none');
    }
  },
  // Returns true - if no further action is needed (either inserted or another condition)
  _onDragOver: function _onDragOver(
  /**Event*/
  evt) {
    var el = this.el,
        target = evt.target,
        dragRect,
        targetRect,
        revert,
        options = this.options,
        group = options.group,
        activeSortable = Sortable.active,
        isOwner = activeGroup === group,
        canSort = options.sort,
        fromSortable = putSortable || activeSortable,
        vertical,
        _this = this,
        completedFired = false;

    if (_silent) return;

    function dragOverEvent(name, extra) {
      pluginEvent(name, _this, _objectSpread({
        evt: evt,
        isOwner: isOwner,
        axis: vertical ? 'vertical' : 'horizontal',
        revert: revert,
        dragRect: dragRect,
        targetRect: targetRect,
        canSort: canSort,
        fromSortable: fromSortable,
        target: target,
        completed: completed,
        onMove: function onMove(target, after) {
          return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
        },
        changed: changed
      }, extra));
    } // Capture animation state


    function capture() {
      dragOverEvent('dragOverAnimationCapture');

      _this.captureAnimationState();

      if (_this !== fromSortable) {
        fromSortable.captureAnimationState();
      }
    } // Return invocation when dragEl is inserted (or completed)


    function completed(insertion) {
      dragOverEvent('dragOverCompleted', {
        insertion: insertion
      });

      if (insertion) {
        // Clones must be hidden before folding animation to capture dragRectAbsolute properly
        if (isOwner) {
          activeSortable._hideClone();
        } else {
          activeSortable._showClone(_this);
        }

        if (_this !== fromSortable) {
          // Set ghost class to new sortable's ghost class
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
          toggleClass(dragEl, options.ghostClass, true);
        }

        if (putSortable !== _this && _this !== Sortable.active) {
          putSortable = _this;
        } else if (_this === Sortable.active && putSortable) {
          putSortable = null;
        } // Animation


        if (fromSortable === _this) {
          _this._ignoreWhileAnimating = target;
        }

        _this.animateAll(function () {
          dragOverEvent('dragOverAnimationComplete');
          _this._ignoreWhileAnimating = null;
        });

        if (_this !== fromSortable) {
          fromSortable.animateAll();
          fromSortable._ignoreWhileAnimating = null;
        }
      } // Null lastTarget if it is not inside a previously swapped element


      if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
        lastTarget = null;
      } // no bubbling and not fallback


      if (!options.dragoverBubble && !evt.rootEl && target !== document) {
        dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted


        !insertion && nearestEmptyInsertDetectEvent(evt);
      }

      !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
      return completedFired = true;
    } // Call when dragEl has been inserted


    function changed() {
      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);

      _dispatchEvent({
        sortable: _this,
        name: 'change',
        toEl: el,
        newIndex: newIndex,
        newDraggableIndex: newDraggableIndex,
        originalEvent: evt
      });
    }

    if (evt.preventDefault !== void 0) {
      evt.cancelable && evt.preventDefault();
    }

    target = closest(target, options.draggable, el, true);
    dragOverEvent('dragOver');
    if (Sortable.eventCanceled) return completedFired;

    if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
      return completed(false);
    }

    ignoreNextClick = false;

    if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list
    : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
      vertical = this._getDirection(evt, target) === 'vertical';
      dragRect = getRect(dragEl);
      dragOverEvent('dragOverValid');
      if (Sortable.eventCanceled) return completedFired;

      if (revert) {
        parentEl = rootEl; // actualization

        capture();

        this._hideClone();

        dragOverEvent('revert');

        if (!Sortable.eventCanceled) {
          if (nextEl) {
            rootEl.insertBefore(dragEl, nextEl);
          } else {
            rootEl.appendChild(dragEl);
          }
        }

        return completed(true);
      }

      var elLastChild = lastChild(el, options.draggable);

      if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
        // If already at end of list: Do not insert
        if (elLastChild === dragEl) {
          return completed(false);
        } // assign target only if condition is true


        if (elLastChild && el === evt.target) {
          target = elLastChild;
        }

        if (target) {
          targetRect = getRect(target);
        }

        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
          capture();
          el.appendChild(dragEl);
          parentEl = el; // actualization

          changed();
          return completed(true);
        }
      } else if (target.parentNode === el) {
        targetRect = getRect(target);
        var direction = 0,
            targetBeforeFirstSwap,
            differentLevel = dragEl.parentNode !== el,
            differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
            side1 = vertical ? 'top' : 'left',
            scrolledPastTop = isScrolledPast(target, null, 'top', 'top') || isScrolledPast(dragEl, null, 'top', 'top'),
            scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;

        if (lastTarget !== target) {
          targetBeforeFirstSwap = targetRect[side1];
          pastFirstInvertThresh = false;
          isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
        }

        direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
        var sibling;

        if (direction !== 0) {
          // Check if target is beside dragEl in respective direction (ignoring hidden elements)
          var dragIndex = index(dragEl);

          do {
            dragIndex -= direction;
            sibling = parentEl.children[dragIndex];
          } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
        } // If dragEl is already beside target: Do not insert


        if (direction === 0 || sibling === target) {
          return completed(false);
        }

        lastTarget = target;
        lastDirection = direction;
        var nextSibling = target.nextElementSibling,
            after = false;
        after = direction === 1;

        var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);

        if (moveVector !== false) {
          if (moveVector === 1 || moveVector === -1) {
            after = moveVector === 1;
          }

          _silent = true;
          setTimeout(_unsilent, 30);
          capture();

          if (after && !nextSibling) {
            el.appendChild(dragEl);
          } else {
            target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
          } // Undo chrome's scroll adjustment (has no effect on other browsers)


          if (scrolledPastTop) {
            scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
          }

          parentEl = dragEl.parentNode; // actualization
          // must be done before animation

          if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
            targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
          }

          changed();
          return completed(true);
        }
      }

      if (el.contains(dragEl)) {
        return completed(false);
      }
    }

    return false;
  },
  _ignoreWhileAnimating: null,
  _offMoveEvents: function _offMoveEvents() {
    off(document, 'mousemove', this._onTouchMove);
    off(document, 'touchmove', this._onTouchMove);
    off(document, 'pointermove', this._onTouchMove);
    off(document, 'dragover', nearestEmptyInsertDetectEvent);
    off(document, 'mousemove', nearestEmptyInsertDetectEvent);
    off(document, 'touchmove', nearestEmptyInsertDetectEvent);
  },
  _offUpEvents: function _offUpEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._onDrop);
    off(ownerDocument, 'touchend', this._onDrop);
    off(ownerDocument, 'pointerup', this._onDrop);
    off(ownerDocument, 'touchcancel', this._onDrop);
    off(document, 'selectstart', this);
  },
  _onDrop: function _onDrop(
  /**Event*/
  evt) {
    var el = this.el,
        options = this.options; // Get the index of the dragged element within its parent

    newIndex = index(dragEl);
    newDraggableIndex = index(dragEl, options.draggable);
    pluginEvent('drop', this, {
      evt: evt
    }); // Get again after plugin event

    newIndex = index(dragEl);
    newDraggableIndex = index(dragEl, options.draggable);

    if (Sortable.eventCanceled) {
      this._nulling();

      return;
    }

    awaitingDragStarted = false;
    isCircumstantialInvert = false;
    pastFirstInvertThresh = false;
    clearInterval(this._loopId);
    clearTimeout(this._dragStartTimer);

    _cancelNextTick(this.cloneId);

    _cancelNextTick(this._dragStartId); // Unbind events


    if (this.nativeDraggable) {
      off(document, 'drop', this);
      off(el, 'dragstart', this._onDragStart);
    }

    this._offMoveEvents();

    this._offUpEvents();

    if (Safari) {
      css(document.body, 'user-select', '');
    }

    if (evt) {
      if (moved) {
        evt.cancelable && evt.preventDefault();
        !options.dropBubble && evt.stopPropagation();
      }

      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);

      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
        // Remove clone(s)
        cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
      }

      if (dragEl) {
        if (this.nativeDraggable) {
          off(dragEl, 'dragend', this);
        }

        _disableDraggable(dragEl);

        dragEl.style['will-change'] = ''; // Remove classes
        // ghostClass is added in dragStarted

        if (moved && !awaitingDragStarted) {
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
        }

        toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event

        _dispatchEvent({
          sortable: this,
          name: 'unchoose',
          toEl: parentEl,
          newIndex: null,
          newDraggableIndex: null,
          originalEvent: evt
        });

        if (rootEl !== parentEl) {
          if (newIndex >= 0) {
            // Add event
            _dispatchEvent({
              rootEl: parentEl,
              name: 'add',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            }); // Remove event


            _dispatchEvent({
              sortable: this,
              name: 'remove',
              toEl: parentEl,
              originalEvent: evt
            }); // drag from one list and drop into another


            _dispatchEvent({
              rootEl: parentEl,
              name: 'sort',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            });

            _dispatchEvent({
              sortable: this,
              name: 'sort',
              toEl: parentEl,
              originalEvent: evt
            });
          }

          putSortable && putSortable.save();
        } else {
          if (newIndex !== oldIndex) {
            if (newIndex >= 0) {
              // drag & drop within the same list
              _dispatchEvent({
                sortable: this,
                name: 'update',
                toEl: parentEl,
                originalEvent: evt
              });

              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }
          }
        }

        if (Sortable.active) {
          /* jshint eqnull:true */
          if (newIndex == null || newIndex === -1) {
            newIndex = oldIndex;
            newDraggableIndex = oldDraggableIndex;
          }

          _dispatchEvent({
            sortable: this,
            name: 'end',
            toEl: parentEl,
            originalEvent: evt
          }); // Save sorting


          this.save();
        }
      }
    }

    this._nulling();
  },
  _nulling: function _nulling() {
    pluginEvent('nulling', this);
    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
    savedInputChecked.forEach(function (el) {
      el.checked = true;
    });
    savedInputChecked.length = 0;
  },
  handleEvent: function handleEvent(
  /**Event*/
  evt) {
    switch (evt.type) {
      case 'drop':
      case 'dragend':
        this._onDrop(evt);

        break;

      case 'dragenter':
      case 'dragover':
        if (dragEl) {
          this._onDragOver(evt);

          _globalDragOver(evt);
        }

        break;

      case 'selectstart':
        evt.preventDefault();
        break;
    }
  },

  /**
   * Serializes the item into an array of string.
   * @returns {String[]}
   */
  toArray: function toArray() {
    var order = [],
        el,
        children = this.el.children,
        i = 0,
        n = children.length,
        options = this.options;

    for (; i < n; i++) {
      el = children[i];

      if (closest(el, options.draggable, this.el, false)) {
        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
      }
    }

    return order;
  },

  /**
   * Sorts the elements according to the array.
   * @param  {String[]}  order  order of the items
   */
  sort: function sort(order) {
    var items = {},
        rootEl = this.el;
    this.toArray().forEach(function (id, i) {
      var el = rootEl.children[i];

      if (closest(el, this.options.draggable, rootEl, false)) {
        items[id] = el;
      }
    }, this);
    order.forEach(function (id) {
      if (items[id]) {
        rootEl.removeChild(items[id]);
        rootEl.appendChild(items[id]);
      }
    });
  },

  /**
   * Save the current sorting
   */
  save: function save() {
    var store = this.options.store;
    store && store.set && store.set(this);
  },

  /**
   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
   * @param   {HTMLElement}  el
   * @param   {String}       [selector]  default: `options.draggable`
   * @returns {HTMLElement|null}
   */
  closest: function closest$1(el, selector) {
    return closest(el, selector || this.options.draggable, this.el, false);
  },

  /**
   * Set/get option
   * @param   {string} name
   * @param   {*}      [value]
   * @returns {*}
   */
  option: function option(name, value) {
    var options = this.options;

    if (value === void 0) {
      return options[name];
    } else {
      var modifiedValue = PluginManager.modifyOption(this, name, value);

      if (typeof modifiedValue !== 'undefined') {
        options[name] = modifiedValue;
      } else {
        options[name] = value;
      }

      if (name === 'group') {
        _prepareGroup(options);
      }
    }
  },

  /**
   * Destroy
   */
  destroy: function destroy() {
    pluginEvent('destroy', this);
    var el = this.el;
    el[expando] = null;
    off(el, 'mousedown', this._onTapStart);
    off(el, 'touchstart', this._onTapStart);
    off(el, 'pointerdown', this._onTapStart);

    if (this.nativeDraggable) {
      off(el, 'dragover', this);
      off(el, 'dragenter', this);
    } // Remove draggable attributes


    Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
      el.removeAttribute('draggable');
    });

    this._onDrop();

    sortables.splice(sortables.indexOf(this.el), 1);
    this.el = el = null;
  },
  _hideClone: function _hideClone() {
    if (!cloneHidden) {
      pluginEvent('hideClone', this);
      if (Sortable.eventCanceled) return;
      css(cloneEl, 'display', 'none');

      if (this.options.removeCloneOnHide && cloneEl.parentNode) {
        cloneEl.parentNode.removeChild(cloneEl);
      }

      cloneHidden = true;
    }
  },
  _showClone: function _showClone(putSortable) {
    if (putSortable.lastPutMode !== 'clone') {
      this._hideClone();

      return;
    }

    if (cloneHidden) {
      pluginEvent('showClone', this);
      if (Sortable.eventCanceled) return; // show clone at dragEl or original position

      if (rootEl.contains(dragEl) && !this.options.group.revertClone) {
        rootEl.insertBefore(cloneEl, dragEl);
      } else if (nextEl) {
        rootEl.insertBefore(cloneEl, nextEl);
      } else {
        rootEl.appendChild(cloneEl);
      }

      if (this.options.group.revertClone) {
        this._animate(dragEl, cloneEl);
      }

      css(cloneEl, 'display', '');
      cloneHidden = false;
    }
  }
};

function _globalDragOver(
/**Event*/
evt) {
  if (evt.dataTransfer) {
    evt.dataTransfer.dropEffect = 'move';
  }

  evt.cancelable && evt.preventDefault();
}

function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
  var evt,
      sortable = fromEl[expando],
      onMoveFn = sortable.options.onMove,
      retVal; // Support for new CustomEvent feature

  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent('move', {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent('move', true, true);
  }

  evt.to = toEl;
  evt.from = fromEl;
  evt.dragged = dragEl;
  evt.draggedRect = dragRect;
  evt.related = targetEl || toEl;
  evt.relatedRect = targetRect || getRect(toEl);
  evt.willInsertAfter = willInsertAfter;
  evt.originalEvent = originalEvent;
  fromEl.dispatchEvent(evt);

  if (onMoveFn) {
    retVal = onMoveFn.call(sortable, evt, originalEvent);
  }

  return retVal;
}

function _disableDraggable(el) {
  el.draggable = false;
}

function _unsilent() {
  _silent = false;
}

function _ghostIsLast(evt, vertical, sortable) {
  var rect = getRect(lastChild(sortable.el, sortable.options.draggable));
  var spacer = 10;
  return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;
}

function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
  var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
      targetLength = vertical ? targetRect.height : targetRect.width,
      targetS1 = vertical ? targetRect.top : targetRect.left,
      targetS2 = vertical ? targetRect.bottom : targetRect.right,
      invert = false;

  if (!invertSwap) {
    // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
      // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
      // check if past first invert threshold on side opposite of lastDirection
      if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
        // past first invert threshold, do not restrict inverted threshold to dragEl shadow
        pastFirstInvertThresh = true;
      }

      if (!pastFirstInvertThresh) {
        // dragEl shadow (target move distance shadow)
        if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
        : mouseOnAxis > targetS2 - targetMoveDistance) {
          return -lastDirection;
        }
      } else {
        invert = true;
      }
    } else {
      // Regular
      if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
        return _getInsertDirection(target);
      }
    }
  }

  invert = invert || invertSwap;

  if (invert) {
    // Invert of regular
    if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
    }
  }

  return 0;
}
/**
 * Gets the direction dragEl must be swapped relative to target in order to make it
 * seem that dragEl has been "inserted" into that element's position
 * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
 * @return {Number}                   Direction dragEl must be swapped
 */


function _getInsertDirection(target) {
  if (index(dragEl) < index(target)) {
    return 1;
  } else {
    return -1;
  }
}
/**
 * Generate id
 * @param   {HTMLElement} el
 * @returns {String}
 * @private
 */


function _generateId(el) {
  var str = el.tagName + el.className + el.src + el.href + el.textContent,
      i = str.length,
      sum = 0;

  while (i--) {
    sum += str.charCodeAt(i);
  }

  return sum.toString(36);
}

function _saveInputCheckedState(root) {
  savedInputChecked.length = 0;
  var inputs = root.getElementsByTagName('input');
  var idx = inputs.length;

  while (idx--) {
    var _el = inputs[idx];
    _el.checked && savedInputChecked.push(_el);
  }
}

function _nextTick(fn) {
  return setTimeout(fn, 0);
}

function _cancelNextTick(id) {
  return clearTimeout(id);
} // Fixed #973:


on(document, 'touchmove', function (evt) {
  if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
    evt.preventDefault();
  }
}); // Export utils

Sortable.utils = {
  on: on,
  off: off,
  css: css,
  find: find,
  is: function is(el, selector) {
    return !!closest(el, selector, el, false);
  },
  extend: extend,
  throttle: throttle,
  closest: closest,
  toggleClass: toggleClass,
  clone: clone,
  index: index,
  nextTick: _nextTick,
  cancelNextTick: _cancelNextTick,
  detectDirection: _detectDirection,
  getChild: getChild
};
/**
 * Mount a plugin to Sortable
 * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
 */

Sortable.mount = function () {
  for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
    plugins[_key] = arguments[_key];
  }

  if (plugins[0].constructor === Array) plugins = plugins[0];
  plugins.forEach(function (plugin) {
    if (!plugin.prototype || !plugin.prototype.constructor) {
      throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(el));
    }

    if (plugin.utils) Sortable.utils = _objectSpread({}, Sortable.utils, plugin.utils);
    PluginManager.mount(plugin);
  });
};
/**
 * Create sortable instance
 * @param {HTMLElement}  el
 * @param {Object}      [options]
 */


Sortable.create = function (el, options) {
  return new Sortable(el, options);
}; // Export


Sortable.version = version;

var autoScrolls = [],
    scrollEl,
    scrollRootEl,
    scrolling = false,
    lastAutoScrollX,
    lastAutoScrollY,
    touchEvt$1,
    pointerElemChangedInterval;

function AutoScrollPlugin() {
  function AutoScroll() {
    this.options = {
      scroll: true,
      scrollSensitivity: 30,
      scrollSpeed: 10,
      bubbleScroll: true
    }; // Bind all private methods

    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }
  }

  AutoScroll.prototype = {
    dragStarted: function dragStarted(_ref) {
      var originalEvent = _ref.originalEvent;

      if (this.sortable.nativeDraggable) {
        on(document, 'dragover', this._handleAutoScroll);
      } else {
        if (this.sortable.options.supportPointer) {
          on(document, 'pointermove', this._handleFallbackAutoScroll);
        } else if (originalEvent.touches) {
          on(document, 'touchmove', this._handleFallbackAutoScroll);
        } else {
          on(document, 'mousemove', this._handleFallbackAutoScroll);
        }
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref2) {
      var originalEvent = _ref2.originalEvent;

      // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)
      if (!this.sortable.options.dragOverBubble && !originalEvent.rootEl) {
        this._handleAutoScroll(originalEvent);
      }
    },
    drop: function drop() {
      if (this.sortable.nativeDraggable) {
        off(document, 'dragover', this._handleAutoScroll);
      } else {
        off(document, 'pointermove', this._handleFallbackAutoScroll);
        off(document, 'touchmove', this._handleFallbackAutoScroll);
        off(document, 'mousemove', this._handleFallbackAutoScroll);
      }

      clearPointerElemChangedInterval();
      clearAutoScrolls();
      cancelThrottle();
    },
    nulling: function nulling() {
      touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
      autoScrolls.length = 0;
    },
    _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
      this._handleAutoScroll(evt, true);
    },
    _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
      var _this = this;

      var x = evt.clientX,
          y = evt.clientY,
          elem = document.elementFromPoint(x, y);
      touchEvt$1 = evt; // IE does not seem to have native autoscroll,
      // Edge's autoscroll seems too conditional,
      // MACOS Safari does not have autoscroll,
      // Firefox and Chrome are good

      if (fallback || Edge || IE11OrLess || Safari) {
        autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change

        var ogElemScroller = getParentAutoScrollElement(elem, true);

        if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
          pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour

          pointerElemChangedInterval = setInterval(function () {
            var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);

            if (newElem !== ogElemScroller) {
              ogElemScroller = newElem;
              clearAutoScrolls();
            }

            autoScroll(evt, _this.options, newElem, fallback);
          }, 10);
          lastAutoScrollX = x;
          lastAutoScrollY = y;
        }
      } else {
        // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
        if (!this.sortable.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
          clearAutoScrolls();
          return;
        }

        autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
      }
    }
  };
  return _extends(AutoScroll, {
    pluginName: 'scroll',
    initializeByDefault: true
  });
}

function clearAutoScrolls() {
  autoScrolls.forEach(function (autoScroll) {
    clearInterval(autoScroll.pid);
  });
  autoScrolls = [];
}

function clearPointerElemChangedInterval() {
  clearInterval(pointerElemChangedInterval);
}

var autoScroll = throttle(function (evt, options, rootEl, isFallback) {
  // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
  if (!options.scroll) return;
  var sens = options.scrollSensitivity,
      speed = options.scrollSpeed,
      winScroller = getWindowScrollingElement();
  var scrollThisInstance = false,
      scrollCustomFn; // New scroll root, set scrollEl

  if (scrollRootEl !== rootEl) {
    scrollRootEl = rootEl;
    clearAutoScrolls();
    scrollEl = options.scroll;
    scrollCustomFn = options.scrollFn;

    if (scrollEl === true) {
      scrollEl = getParentAutoScrollElement(rootEl, true);
    }
  }

  var layersOut = 0;
  var currentParent = scrollEl;

  do {
    var el = currentParent,
        rect = getRect(el),
        top = rect.top,
        bottom = rect.bottom,
        left = rect.left,
        right = rect.right,
        width = rect.width,
        height = rect.height,
        canScrollX = void 0,
        canScrollY = void 0,
        scrollWidth = el.scrollWidth,
        scrollHeight = el.scrollHeight,
        elCSS = css(el),
        scrollPosX = el.scrollLeft,
        scrollPosY = el.scrollTop;

    if (el === winScroller) {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
    } else {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
    }

    var vx = canScrollX && (Math.abs(right - evt.clientX) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - evt.clientX) <= sens && !!scrollPosX);
    var vy = canScrollY && (Math.abs(bottom - evt.clientY) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - evt.clientY) <= sens && !!scrollPosY);

    if (!autoScrolls[layersOut]) {
      for (var i = 0; i <= layersOut; i++) {
        if (!autoScrolls[i]) {
          autoScrolls[i] = {};
        }
      }
    }

    if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
      autoScrolls[layersOut].el = el;
      autoScrolls[layersOut].vx = vx;
      autoScrolls[layersOut].vy = vy;
      clearInterval(autoScrolls[layersOut].pid);

      if (vx != 0 || vy != 0) {
        scrollThisInstance = true;
        /* jshint loopfunc:true */

        autoScrolls[layersOut].pid = setInterval(function () {
          // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
          if (isFallback && this.layer === 0) {
            Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely

          }

          var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
          var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;

          if (typeof scrollCustomFn === 'function') {
            if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
              return;
            }
          }

          scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
        }.bind({
          layer: layersOut
        }), 24);
      }
    }

    layersOut++;
  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));

  scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
}, 30);

var drop = function drop(_ref) {
  var originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      dragEl = _ref.dragEl,
      activeSortable = _ref.activeSortable,
      dispatchSortableEvent = _ref.dispatchSortableEvent,
      hideGhostForTarget = _ref.hideGhostForTarget,
      unhideGhostForTarget = _ref.unhideGhostForTarget;
  var toSortable = putSortable || activeSortable;
  hideGhostForTarget();
  var target = document.elementFromPoint(originalEvent.clientX, originalEvent.clientY);
  unhideGhostForTarget();

  if (toSortable && !toSortable.el.contains(target)) {
    dispatchSortableEvent('spill');
    this.onSpill(dragEl);
  }
};

function Revert() {}

Revert.prototype = {
  startIndex: null,
  dragStart: function dragStart(_ref2) {
    var oldDraggableIndex = _ref2.oldDraggableIndex;
    this.startIndex = oldDraggableIndex;
  },
  onSpill: function onSpill(dragEl) {
    this.sortable.captureAnimationState();
    var nextSibling = getChild(this.sortable.el, this.startIndex, this.sortable.options);

    if (nextSibling) {
      this.sortable.el.insertBefore(dragEl, nextSibling);
    } else {
      this.sortable.el.appendChild(dragEl);
    }

    this.sortable.animateAll();
  },
  drop: drop
};

_extends(Revert, {
  pluginName: 'revertOnSpill'
});

function Remove() {}

Remove.prototype = {
  onSpill: function onSpill(dragEl) {
    this.sortable.captureAnimationState();
    dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
    this.sortable.animateAll();
  },
  drop: drop
};

_extends(Remove, {
  pluginName: 'removeOnSpill'
});

var lastSwapEl;

function SwapPlugin() {
  function Swap() {
    this.options = {
      swapClass: 'sortable-swap-highlight'
    };
  }

  Swap.prototype = {
    dragStart: function dragStart(_ref) {
      var dragEl = _ref.dragEl;
      lastSwapEl = dragEl;
    },
    dragOverValid: function dragOverValid(_ref2) {
      var completed = _ref2.completed,
          target = _ref2.target,
          onMove = _ref2.onMove,
          activeSortable = _ref2.activeSortable,
          changed = _ref2.changed;
      if (!activeSortable.options.swap) return;
      var el = this.sortable.el,
          options = this.sortable.options;

      if (target && target !== el) {
        var prevSwapEl = lastSwapEl;

        if (onMove(target) !== false) {
          toggleClass(target, options.swapClass, true);
          lastSwapEl = target;
        } else {
          lastSwapEl = null;
        }

        if (prevSwapEl && prevSwapEl !== lastSwapEl) {
          toggleClass(prevSwapEl, options.swapClass, false);
        }
      }

      changed();
      return completed(true);
    },
    drop: function drop(_ref3) {
      var activeSortable = _ref3.activeSortable,
          putSortable = _ref3.putSortable,
          dragEl = _ref3.dragEl;
      var toSortable = putSortable || this.sortable;
      var options = this.sortable.options;
      lastSwapEl && toggleClass(lastSwapEl, options.swapClass, false);

      if (lastSwapEl && (options.swap || putSortable && putSortable.options.swap)) {
        if (dragEl !== lastSwapEl) {
          toSortable.captureAnimationState();
          if (toSortable !== activeSortable) activeSortable.captureAnimationState();
          swapNodes(dragEl, lastSwapEl);
          toSortable.animateAll();
          if (toSortable !== activeSortable) activeSortable.animateAll();
        }
      }
    },
    nulling: function nulling() {
      lastSwapEl = null;
    }
  };
  return _extends(Swap, {
    pluginName: 'swap',
    eventOptions: function eventOptions() {
      return {
        swapItem: lastSwapEl
      };
    }
  });
}

function swapNodes(n1, n2) {
  var p1 = n1.parentNode,
      p2 = n2.parentNode,
      i1,
      i2;
  if (!p1 || !p2 || p1.isEqualNode(n2) || p2.isEqualNode(n1)) return;
  i1 = index(n1);
  i2 = index(n2);

  if (p1.isEqualNode(p2) && i1 < i2) {
    i2++;
  }

  p1.insertBefore(n2, p1.children[i1]);
  p2.insertBefore(n1, p2.children[i2]);
}

var multiDragElements = [],
    multiDragClones = [],
    lastMultiDragSelect,
    // for selection with modifier key down (SHIFT)
multiDragSortable,
    initialFolding = false,
    // Initial multi-drag fold when drag started
folding = false,
    // Folding any other time
dragStarted = false,
    dragEl$1,
    clonesFromRect,
    clonesHidden;

function MultiDragPlugin() {
  function MultiDrag(sortable) {
    // Bind all private methods
    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }

    if (sortable.options.supportPointer) {
      on(document, 'pointerup', this._deselectMultiDrag);
    } else {
      on(document, 'mouseup', this._deselectMultiDrag);
      on(document, 'touchend', this._deselectMultiDrag);
    }

    on(document, 'keydown', this._checkKeyDown);
    on(document, 'keyup', this._checkKeyUp);
    this.options = {
      selectedClass: 'sortable-selected',
      multiDragKey: null,
      setData: function setData(dataTransfer, dragEl) {
        var data = '';

        if (multiDragElements.length && multiDragSortable === sortable) {
          multiDragElements.forEach(function (multiDragElement, i) {
            data += (!i ? '' : ', ') + multiDragElement.textContent;
          });
        } else {
          data = dragEl.textContent;
        }

        dataTransfer.setData('Text', data);
      }
    };
  }

  MultiDrag.prototype = {
    multiDragKeyDown: false,
    isMultiDrag: false,
    delayStartGlobal: function delayStartGlobal(_ref) {
      var dragged = _ref.dragEl;
      dragEl$1 = dragged;
    },
    delayEnded: function delayEnded() {
      this.isMultiDrag = ~multiDragElements.indexOf(dragEl$1);
    },
    setupClone: function setupClone(_ref2) {
      var sortable = _ref2.sortable;
      if (!this.isMultiDrag) return;

      for (var _i = 0; _i < multiDragElements.length; _i++) {
        multiDragClones.push(clone(multiDragElements[_i]));
        multiDragClones[_i].sortableIndex = multiDragElements[_i].sortableIndex;
        multiDragClones[_i].draggable = false;
        multiDragClones[_i].style['will-change'] = '';
        toggleClass(multiDragClones[_i], sortable.options.selectedClass, false);
        multiDragElements[_i] === dragEl$1 && toggleClass(multiDragClones[_i], sortable.options.chosenClass, false);
      }

      sortable._hideClone();

      return true;
    },
    clone: function clone(_ref3) {
      var sortable = _ref3.sortable,
          rootEl = _ref3.rootEl,
          dispatchSortableEvent = _ref3.dispatchSortableEvent;
      if (!this.isMultiDrag) return;

      if (!sortable.options.removeCloneOnHide) {
        if (multiDragElements.length && multiDragSortable === sortable) {
          insertMultiDragClones(true, rootEl);
          dispatchSortableEvent('clone');
          return true;
        }
      }
    },
    showClone: function showClone(_ref4) {
      var cloneNowShown = _ref4.cloneNowShown,
          rootEl = _ref4.rootEl;
      if (!this.isMultiDrag) return;
      insertMultiDragClones(false, rootEl);
      multiDragClones.forEach(function (clone) {
        css(clone, 'display', '');
      });
      cloneNowShown();
      clonesHidden = false;
      return true;
    },
    hideClone: function hideClone(_ref5) {
      var sortable = _ref5.sortable,
          cloneNowHidden = _ref5.cloneNowHidden;
      if (!this.isMultiDrag) return;
      multiDragClones.forEach(function (clone) {
        css(clone, 'display', 'none');

        if (sortable.options.removeCloneOnHide && clone.parentNode) {
          clone.parentNode.removeChild(clone);
        }
      });
      cloneNowHidden();
      clonesHidden = true;
      return true;
    },
    dragStartGlobal: function dragStartGlobal(_ref6) {
      var sortable = _ref6.sortable;

      if (!this.isMultiDrag && multiDragSortable) {
        multiDragSortable.multiDrag._deselectMultiDrag();
      }

      multiDragElements.forEach(function (multiDragElement) {
        multiDragElement.sortableIndex = index(multiDragElement);
      }); // Sort multi-drag elements

      multiDragElements = multiDragElements.sort(function (a, b) {
        return a.sortableIndex - b.sortableIndex;
      });
      dragStarted = true;
    },
    dragStarted: function dragStarted(_ref7) {
      var sortable = _ref7.sortable;
      if (!this.isMultiDrag) return;

      if (sortable.options.sort) {
        // Capture rects,
        // hide multi drag elements (by positioning them absolute),
        // set multi drag elements rects to dragRect,
        // show multi drag elements,
        // animate to rects,
        // unset rects & remove from DOM
        sortable.captureAnimationState();

        if (sortable.options.animation) {
          multiDragElements.forEach(function (multiDragElement) {
            if (multiDragElement === dragEl$1) return;
            css(multiDragElement, 'position', 'absolute');
          });
          var dragRect = getRect(dragEl$1, false, true, true);
          multiDragElements.forEach(function (multiDragElement) {
            if (multiDragElement === dragEl$1) return;
            setRect(multiDragElement, dragRect);
          });
          folding = true;
          initialFolding = true;
        }
      }

      sortable.animateAll(function () {
        folding = false;
        initialFolding = false;

        if (sortable.options.animation) {
          multiDragElements.forEach(function (multiDragElement) {
            unsetRect(multiDragElement);
          });
        } // Remove all auxiliary multidrag items from el, if sorting enabled


        if (sortable.options.sort) {
          removeMultiDragElements();
        }
      });
    },
    dragOver: function dragOver(_ref8) {
      var target = _ref8.target,
          completed = _ref8.completed;

      if (folding && ~multiDragElements.indexOf(target)) {
        return completed(false);
      }
    },
    revert: function revert(_ref9) {
      var fromSortable = _ref9.fromSortable,
          rootEl = _ref9.rootEl,
          sortable = _ref9.sortable,
          dragRect = _ref9.dragRect;

      if (multiDragElements.length > 1) {
        // Setup unfold animation
        multiDragElements.forEach(function (multiDragElement) {
          sortable.addAnimationState({
            target: multiDragElement,
            rect: folding ? getRect(multiDragElement) : dragRect
          });
          unsetRect(multiDragElement);
          multiDragElement.fromRect = dragRect;
          fromSortable.removeAnimationState(multiDragElement);
        });
        folding = false;
        insertMultiDragElements(!sortable.options.removeCloneOnHide, rootEl);
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref10) {
      var sortable = _ref10.sortable,
          isOwner = _ref10.isOwner,
          insertion = _ref10.insertion,
          activeSortable = _ref10.activeSortable,
          parentEl = _ref10.parentEl,
          putSortable = _ref10.putSortable;
      var options = sortable.options;

      if (insertion) {
        // Clones must be hidden before folding animation to capture dragRectAbsolute properly
        if (isOwner) {
          activeSortable._hideClone();
        }

        initialFolding = false; // If leaving sort:false root, or already folding - Fold to new location

        if (options.animation && multiDragElements.length > 1 && (folding || !isOwner && !activeSortable.options.sort && !putSortable)) {
          // Fold: Set all multi drag elements's rects to dragEl's rect when multi-drag elements are invisible
          var dragRectAbsolute = getRect(dragEl$1, false, true, true);
          multiDragElements.forEach(function (multiDragElement) {
            if (multiDragElement === dragEl$1) return;
            setRect(multiDragElement, dragRectAbsolute); // Move element(s) to end of parentEl so that it does not interfere with multi-drag clones insertion if they are inserted
            // while folding, and so that we can capture them again because old sortable will no longer be fromSortable

            parentEl.appendChild(multiDragElement);
          });
          folding = true;
        } // Clones must be shown (and check to remove multi drags) after folding when interfering multiDragElements are moved out


        if (!isOwner) {
          // Only remove if not folding (folding will remove them anyways)
          if (!folding) {
            removeMultiDragElements();
          }

          if (multiDragElements.length > 1) {
            var clonesHiddenBefore = clonesHidden;

            activeSortable._showClone(sortable); // Unfold animation for clones if showing from hidden


            if (activeSortable.options.animation && !clonesHidden && clonesHiddenBefore) {
              multiDragClones.forEach(function (clone) {
                activeSortable.addAnimationState({
                  target: clone,
                  rect: clonesFromRect
                });
                clone.fromRect = clonesFromRect;
                clone.thisAnimationDuration = null;
              });
            }
          } else {
            activeSortable._showClone(sortable);
          }
        }
      }
    },
    dragOverAnimationCapture: function dragOverAnimationCapture(_ref11) {
      var dragRect = _ref11.dragRect,
          isOwner = _ref11.isOwner,
          activeSortable = _ref11.activeSortable;
      multiDragElements.forEach(function (multiDragElement) {
        multiDragElement.thisAnimationDuration = null;
      });

      if (activeSortable.options.animation && !isOwner && activeSortable.multiDrag.isMultiDrag) {
        clonesFromRect = _extends({}, dragRect);
        var dragMatrix = matrix(dragEl$1, true);
        clonesFromRect.top -= dragMatrix.f;
        clonesFromRect.left -= dragMatrix.e;
      }
    },
    dragOverAnimationComplete: function dragOverAnimationComplete() {
      if (folding) {
        folding = false;
        removeMultiDragElements();
      }
    },
    drop: function drop(_ref12) {
      var evt = _ref12.originalEvent,
          rootEl = _ref12.rootEl,
          parentEl = _ref12.parentEl,
          sortable = _ref12.sortable,
          dispatchSortableEvent = _ref12.dispatchSortableEvent,
          oldIndex = _ref12.oldIndex,
          putSortable = _ref12.putSortable;
      var toSortable = putSortable || this.sortable;
      if (!evt) return;
      var options = sortable.options,
          children = parentEl.children; // Multi-drag selection

      if (!dragStarted) {
        if (options.multiDragKey && !this.multiDragKeyDown) {
          this._deselectMultiDrag();
        }

        toggleClass(dragEl$1, options.selectedClass, !~multiDragElements.indexOf(dragEl$1));

        if (!~multiDragElements.indexOf(dragEl$1)) {
          multiDragElements.push(dragEl$1);
          dispatchEvent({
            sortable: sortable,
            rootEl: rootEl,
            name: 'select',
            targetEl: dragEl$1,
            originalEvt: evt
          }); // Modifier activated, select from last to dragEl

          if ((!options.multiDragKey || this.multiDragKeyDown) && evt.shiftKey && lastMultiDragSelect && sortable.el.contains(lastMultiDragSelect)) {
            var lastIndex = index(lastMultiDragSelect),
                currentIndex = index(dragEl$1);

            if (~lastIndex && ~currentIndex && lastIndex !== currentIndex) {
              // Must include lastMultiDragSelect (select it), in case modified selection from no selection
              // (but previous selection existed)
              var n, _i2;

              if (currentIndex > lastIndex) {
                _i2 = lastIndex;
                n = currentIndex;
              } else {
                _i2 = currentIndex;
                n = lastIndex + 1;
              }

              for (; _i2 < n; _i2++) {
                if (~multiDragElements.indexOf(children[_i2])) continue;
                toggleClass(children[_i2], options.selectedClass, true);
                multiDragElements.push(children[_i2]);
                dispatchEvent({
                  sortable: sortable,
                  rootEl: rootEl,
                  name: 'select',
                  targetEl: children[_i2],
                  originalEvt: evt
                });
              }
            }
          } else {
            lastMultiDragSelect = dragEl$1;
          }

          multiDragSortable = toSortable;
        } else {
          multiDragElements.splice(multiDragElements.indexOf(dragEl$1), 1);
          lastMultiDragSelect = null;
          dispatchEvent({
            sortable: sortable,
            rootEl: rootEl,
            name: 'deselect',
            targetEl: dragEl$1,
            originalEvt: evt
          });
        }
      } // Multi-drag drop


      if (dragStarted && this.isMultiDrag) {
        // Do not "unfold" after around dragEl if reverted
        if ((parentEl[expando].options.sort || parentEl !== rootEl) && multiDragElements.length > 1) {
          var dragRect = getRect(dragEl$1),
              multiDragIndex = index(dragEl$1, ':not(.' + this.options.selectedClass + ')');
          if (!initialFolding && options.animation) dragEl$1.thisAnimationDuration = null;
          toSortable.captureAnimationState();

          if (!initialFolding) {
            if (options.animation) {
              dragEl$1.fromRect = dragRect;
              multiDragElements.forEach(function (multiDragElement) {
                multiDragElement.thisAnimationDuration = null;

                if (multiDragElement !== dragEl$1) {
                  var rect = folding ? getRect(multiDragElement) : dragRect;
                  multiDragElement.fromRect = rect; // Prepare unfold animation

                  toSortable.addAnimationState({
                    target: multiDragElement,
                    rect: rect
                  });
                }
              });
            } // Multi drag elements are not necessarily removed from the DOM on drop, so to reinsert
            // properly they must all be removed


            removeMultiDragElements();
            multiDragElements.forEach(function (multiDragElement) {
              if (children[multiDragIndex]) {
                parentEl.insertBefore(multiDragElement, children[multiDragIndex]);
              } else {
                parentEl.appendChild(multiDragElement);
              }

              multiDragIndex++;
            }); // If initial folding is done, the elements may have changed position because they are now
            // unfolding around dragEl, even though dragEl may not have his index changed, so update event
            // must be fired here as Sortable will not.

            if (oldIndex === index(dragEl$1)) {
              var update = false;
              multiDragElements.forEach(function (multiDragElement) {
                if (multiDragElement.sortableIndex !== index(multiDragElement)) {
                  update = true;
                  return;
                }
              });

              if (update) {
                dispatchSortableEvent('update');
              }
            }
          } // Must be done after capturing individual rects (scroll bar)


          multiDragElements.forEach(function (multiDragElement) {
            unsetRect(multiDragElement);
          });
          toSortable.animateAll();
        }

        multiDragSortable = toSortable;
      } // Remove clones if necessary


      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
        multiDragClones.forEach(function (clone) {
          clone.parentNode && clone.parentNode.removeChild(clone);
        });
      }
    },
    nullingGlobal: function nullingGlobal() {
      this.isMultiDrag = dragStarted = false;
      multiDragClones.length = 0;
    },
    destroy: function destroy() {
      this._deselectMultiDrag();

      off(document, 'pointerup', this._deselectMultiDrag);
      off(document, 'mouseup', this._deselectMultiDrag);
      off(document, 'touchend', this._deselectMultiDrag);
      off(document, 'keydown', this._checkKeyDown);
      off(document, 'keyup', this._checkKeyUp);
    },
    _deselectMultiDrag: function _deselectMultiDrag(evt) {
      if (dragStarted) return; // Only deselect if selection is in this sortable

      if (multiDragSortable !== this.sortable) return; // Only deselect if target is not item in this sortable

      if (evt && closest(evt.target, this.sortable.options.draggable, this.sortable.el, false)) return; // Only deselect if left click

      if (evt && evt.button !== 0) return;

      while (multiDragElements.length) {
        var el = multiDragElements[0];
        toggleClass(el, this.sortable.options.selectedClass, false);
        multiDragElements.shift();
        dispatchEvent({
          sortable: this.sortable,
          rootEl: this.sortable.el,
          name: 'deselect',
          targetEl: el,
          originalEvt: evt
        });
      }
    },
    _checkKeyDown: function _checkKeyDown(evt) {
      if (evt.key === this.sortable.options.multiDragKey) {
        this.multiDragKeyDown = true;
      }
    },
    _checkKeyUp: function _checkKeyUp(evt) {
      if (evt.key === this.sortable.options.multiDragKey) {
        this.multiDragKeyDown = false;
      }
    }
  };
  return _extends(MultiDrag, {
    // Static methods & properties
    pluginName: 'multiDrag',
    utils: {
      /**
       * Selects the provided multi-drag item
       * @param  {HTMLElement} el    The element to be selected
       */
      select: function select(el) {
        var sortable = el.parentNode[expando];
        if (!sortable || !sortable.options.multiDrag || ~multiDragElements.indexOf(el)) return;

        if (multiDragSortable && multiDragSortable !== sortable) {
          multiDragSortable.multiDrag._deselectMultiDrag();

          multiDragSortable = sortable;
        }

        toggleClass(el, sortable.options.selectedClass, true);
        multiDragElements.push(el);
      },

      /**
       * Deselects the provided multi-drag item
       * @param  {HTMLElement} el    The element to be deselected
       */
      deselect: function deselect(el) {
        var sortable = el.parentNode[expando],
            index = multiDragElements.indexOf(el);
        if (!sortable || !sortable.options.multiDrag || !~index) return;
        toggleClass(el, sortable.options.selectedClass, false);
        multiDragElements.splice(index, 1);
      }
    },
    eventOptions: function eventOptions() {
      var _this = this;

      var oldIndicies = [],
          newIndicies = [];
      multiDragElements.forEach(function (multiDragElement) {
        oldIndicies.push({
          multiDragElement: multiDragElement,
          index: multiDragElement.sortableIndex
        }); // multiDragElements will already be sorted if folding

        var newIndex;

        if (folding && multiDragElement !== dragEl$1) {
          newIndex = -1;
        } else if (folding) {
          newIndex = index(multiDragElement, ':not(.' + _this.options.selectedClass + ')');
        } else {
          newIndex = index(multiDragElement);
        }

        newIndicies.push({
          multiDragElement: multiDragElement,
          index: newIndex
        });
      });
      return {
        items: _toConsumableArray(multiDragElements),
        clones: [].concat(multiDragClones),
        oldIndicies: oldIndicies,
        newIndicies: newIndicies
      };
    },
    optionListeners: {
      multiDragKey: function multiDragKey(key) {
        key = key.toLowerCase();

        if (key === 'ctrl') {
          key = 'Control';
        } else if (key.length > 1) {
          key = key.charAt(0).toUpperCase() + key.substr(1);
        }

        return key;
      }
    }
  });
}

function insertMultiDragElements(clonesInserted, rootEl) {
  multiDragElements.forEach(function (multiDragElement) {
    var target = rootEl.children[multiDragElement.sortableIndex + (clonesInserted ? Number(i) : 0)];

    if (target) {
      rootEl.insertBefore(multiDragElement, target);
    } else {
      rootEl.appendChild(multiDragElement);
    }
  });
}
/**
 * Insert multi-drag clones
 * @param  {[Boolean]} elementsInserted  Whether the multi-drag elements are inserted
 * @param  {HTMLElement} rootEl
 */


function insertMultiDragClones(elementsInserted, rootEl) {
  multiDragClones.forEach(function (clone) {
    var target = rootEl.children[clone.sortableIndex + (elementsInserted ? Number(i) : 0)];

    if (target) {
      rootEl.insertBefore(clone, target);
    } else {
      rootEl.appendChild(clone);
    }
  });
}

function removeMultiDragElements() {
  multiDragElements.forEach(function (multiDragElement) {
    if (multiDragElement === dragEl$1) return;
    multiDragElement.parentNode && multiDragElement.parentNode.removeChild(multiDragElement);
  });
}

Sortable.mount(new AutoScrollPlugin());
Sortable.mount(Remove, Revert);

/* harmony default export */ __webpack_exports__["default"] = (Sortable);



/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vanMvc3JjL2VkaXRvci9iYWNrZW5kL2NvZGVnZW5lcmF0aW9uLmpzIiwid2VicGFjazovLy8uL2pzL3NyYy9lZGl0b3IvYmFja2VuZC9kcmFnbmRyb3AuanMiLCJ3ZWJwYWNrOi8vLy4vanMvc3JjL2VkaXRvci9iYWNrZW5kL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9qcy9zcmMvZWRpdG9yL2JhY2tlbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vanMvc3JjL2VkaXRvci9iYWNrZW5kL21vZGFsd2luZG93LmNsYXNzLmpzIiwid2VicGFjazovLy8uL2pzL3NyYy9lZGl0b3IvYmFja2VuZC9tb2RhbHdpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9qcy9zcmMvZWRpdG9yL2JhY2tlbmQvbW9kdWxlLmpzIiwid2VicGFjazovLy8uL2pzL3NyYy9lZGl0b3IvYmFja2VuZC9tb2R1bGVhcmVhLmNsYXNzLmpzIiwid2VicGFjazovLy8uL2pzL3NyYy9lZGl0b3IvYmFja2VuZC9tb2R1bGVhcmVhLmpzIiwid2VicGFjazovLy8uL2pzL3NyYy9lZGl0b3IvYmFja2VuZC9wcmVzZXRzLmpzIiwid2VicGFjazovLy8uL2pzL3NyYy9lZGl0b3IvYmFja2VuZC9zY3JvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9zcmMvZWRpdG9yL2JhY2tlbmQvc2VjdGlvbi5jbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9qcy9zcmMvZWRpdG9yL2JhY2tlbmQvc2VjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vanMvc3JjL2VkaXRvci9iYWNrZW5kL3NlY3Rpb25zY29udGFpbmVyLmNsYXNzLmpzIiwid2VicGFjazovLy8uL2pzL3NyYy9lZGl0b3IvYmFja2VuZC9zZXR0aW5ncy5wYW5lbC5qcyIsIndlYnBhY2s6Ly8vLi9qcy9zcmMvZWRpdG9yL2JhY2tlbmQvdGVtcGxhdGVzLmpzIiwid2VicGFjazovLy8uL2pzL3NyYy9lZGl0b3IvYmFja2VuZC91aWdlbmVyYWwuanMiLCJ3ZWJwYWNrOi8vLy4vanMvc3JjL2VkaXRvci9iYWNrZW5kL3V0aWxzLmNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbmltZWpzL2xpYi9hbmltZS5lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ydGFibGVqcy9tb2R1bGFyL3NvcnRhYmxlLmVzbS5qcyJdLCJuYW1lcyI6WyJkc2xjX3NhdmVfY29tcG9zZXIiLCJ3aW5kb3ciLCJkc2xjRGVidWciLCJjb25zb2xlIiwibG9nIiwiZHNsY19nZW5lcmF0ZV9jb2RlIiwiZHNsY2FfZ2VuX2NvbnRlbnRfZm9yX3NlYXJjaCIsImNvbXBvc2VyQ29kZSIsImpRdWVyeSIsInZhbCIsImNvbnRlbnRGb3JTZWFyY2giLCJwb3N0SUQiLCJkYXRhIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImFqYXgiLCJtZXRob2QiLCJ0eXBlIiwidXJsIiwiRFNMQ0FqYXgiLCJhamF4dXJsIiwiYWN0aW9uIiwiZHNsYyIsImRzbGNfcG9zdF9pZCIsImRzbGNfY29kZSIsImRzbGNfY29udGVudF9mb3Jfc2VhcmNoIiwidGltZW91dCIsImRvbmUiLCJyZXNwb25zZSIsInN0YXR1cyIsImZhZGVPdXQiLCJhcHBlbmQiLCJEU0xDU2l0ZURhdGEiLCJzaXRldXJsIiwiZWFjaCIsImluZGV4IiwiZWwiLCJsb2FkIiwicmVtb3ZlIiwiYWxlcnQiLCJmYWlsIiwic3RhdHVzVGV4dCIsImFsd2F5cyIsInJlc2Vwb25zZSIsImRzbGNfc2F2ZV9kcmFmdF9jb21wb3NlciIsInBvc3QiLCJtb2R1bGVDb2RlIiwibW9kdWxlX3NpemUiLCJwYWdlQ29kZUluSnNvbiIsIm1heFBlclJvdyIsIm1heFBlclJvd0EiLCJjdXJyUGVyUm93IiwiY3VyclBlclJvd0EiLCJtb2R1bGVzQXJlYVNpemUiLCJtb2R1bGVzQXJlYSIsIm1vZHVsZXNBcmVhTGFzdFN0YXRlIiwibW9kdWxlc0FyZWFGaXJzdFN0YXRlIiwibW9kdWxlc1NlY3Rpb24iLCJtb2R1bGVzU2VjdGlvbkF0dHMiLCJtb2R1bGVzU2VjdGlvbkpzb24iLCJMaXZlQ29tcG9zZXIiLCJCdWlsZGVyIiwiUHJldmlld0FyZWFEb2N1bWVudCIsImxlbmd0aCIsImhpZGUiLCJzaG93IiwiY3NzIiwicGFkZGluZyIsImFuaW1hdGUiLCJnZW5lcmF0ZVNlY3Rpb25Db2RlIiwiZmluZCIsInNsaWNlIiwidGhlTW9kdWxlc1NlY3Rpb24iLCJtb2R1bGVzU2VjdGlvbkpzb25TdHJpbmciLCJKU09OIiwicGFyc2UiLCJjdXJyZW50SW5wdXQiLCJjdXJyZW50QXR0cktleSIsImN1cnJlbnRBdHRyVmFsIiwidW5kZWZpbmVkIiwicGFyc2VJbnQiLCJuZXh0IiwibW9kdWxlQXJlYUpTT04iLCJjb250ZW50IiwiZHNsY19tb2R1bGUiLCJnZXRBdHRyaWJ1dGUiLCJtb2R1bGVMYXN0U3RhdGUiLCJtb2R1bGVGaXJzdFN0YXRlIiwicXVlcnlTZWxlY3RvciIsInZhbHVlIiwiZXJyIiwiaW5mbyIsIm1vZHVsZUNvZGVKU09OIiwibGFzdCIsInJlcGxhY2UiLCJzdHJpbmdpZnkiLCJwdXNoIiwiZ2VuZXJhdGVkQ29kZSIsInNldEV2ZW50TGlzdGVuZXJzIiwiZG9jdW1lbnQiLCJvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImhhc0NsYXNzIiwiaG9sZGVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJwcmV2Q29udGVudCIsImVsZW1lbnRzIiwiUHJldmlld0FyZWFXaW5kb3ciLCJxdWVyeVNlbGVjdG9yQWxsIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJmb3JFYWNoIiwiY2FsbCIsImkiLCJleHRyYWN0ZWRfaHRtbF9jb2RlIiwid3JhcHBlcl90YWciLCJpbm5lckhUTUwiLCJ0cmltIiwiZHNsY19zaG93X3B1Ymxpc2hfYnV0dG9uIiwiZWRpdGFibGVDb250ZW50Q29kZUdlbmVyYXRpb24iLCJkc2xjRmllbGQiLCJkc2xjTW9kdWxlIiwiY2xvc2VzdCIsIm1vZHVsZUVsIiwiZHNsY0NvbnRlbnQiLCJodG1sIiwiZHNsY0ZpZWxkSUQiLCJVdGlscyIsInVwZGF0ZV9tb2R1bGVfcHJvcGVydHlfcmF3IiwiY29kZUdlbmVyYXRpb25Jbml0SlMiLCJkcmFnQW5kRHJvcEluaXQiLCJtb2R1bGVJRCIsIm1vZHVsZU91dHB1dCIsIm1vZHVsZXNfbGlzdCIsImNyZWF0ZUVsZW1lbnQiLCJtb2R1bGVzX2xpc3Rfc29ydGFibGUiLCJTb3J0YWJsZSIsImNyZWF0ZSIsInNvcnQiLCJncm91cCIsIm5hbWUiLCJwdWxsIiwicHV0IiwiYW5pbWF0aW9uIiwiaGFuZGxlIiwiZHJhZ2dhYmxlIiwiY2hvc2VuQ2xhc3MiLCJzY3JvbGwiLCJzY3JvbGxTZW5zaXRpdml0eSIsInNjcm9sbFNwZWVkIiwic2V0RGF0YSIsImRhdGFUcmFuc2ZlciIsImRyYWdFbCIsIm1zaWV2ZXJzaW9uIiwib25TdGFydCIsImV2dCIsIm9sZEluZGV4Iiwib25FbmQiLCJuZXdJbmRleCIsIml0ZW1FbCIsIml0ZW0iLCJwYXJlbnROb2RlIiwiZGF0YXNldCIsImlkIiwibW9kdWxlT3V0cHV0RGVmYXVsdCIsIm91dHB1dCIsImRzbGNKdXN0QWRkZWQiLCJIZWxwZXJzIiwiaW5zZXJ0TW9kdWxlIiwic2V0VGltZW91dCIsImRzbGNfbWFzb25yeSIsInZpc2liaWxpdHkiLCJkc2xjX2Nhcm91c2VsIiwiZHNsY190YWJzIiwiZHNsY19pbml0X2FjY29yZGlvbiIsImF0dHIiLCJVSSIsInN0b3BTY3JvbGxlciIsIm9uQWRkIiwiZnJvbSIsIm9uVXBkYXRlIiwib25Tb3J0Iiwib25SZW1vdmUiLCJvbkZpbHRlciIsIm9uTW92ZSIsImRyYWdnZWQiLCJkcmFnZ2VkUmVjdCIsInJlbGF0ZWQiLCJyZWxhdGVkUmVjdCIsInRvIiwiZXZlbnRzSW5pdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInRhcmdldCIsIm1hdGNoZXMiLCJtb2RhbFd5c2l3eWdDYW5jZWwiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImRpc3BhdGNoRXZlbnQiLCJtb2RhbFd5c2l3eWdDb25maXJtIiwibW9kdWxlRWRpdCIsIm1vZHVsZUR1cGxpY2F0ZSIsIm1vZHVsZURlbGV0ZSIsIm1vZHVsZUNoYW5nZVdpZHRoIiwid3lzaXd5Z0VkaXQiLCJFbGVtZW50cyIsIkFjdGlvbnMiLCJGbGFncyIsIlByZXZpZXdGcmFtZSIsIlByb2R1Y3Rpb24iLCJ3aW5kb3dTY3JvbGxlciIsInBhbmVsT3BlbmVkIiwidWlIaWRkZW4iLCJtb2RhbE9wZW4iLCJnZW5lcmF0ZV9jb2RlX2FmdGVyX3Jvd19jaGFuZ2VkIiwicG9zdHBvbmVkX2FjdGlvbnNfcXVldWUiLCJhZGRfcG9zdHBvbmVkX2FjdGlvbiIsImFjdGlvbl9uYW1lIiwiaXNOYU4iLCJyZWxlYXNlX3Bvc3Rwb25lZF9hY3Rpb25zIiwic2VsZiIsIm9wdGlvbnNDaGFuZ2VkIiwibW9kdWxlSFRNTCIsImFmdGVyT2JqZWN0IiwibmV3TW9kdWxlIiwic2NyaXB0cyIsInJlbW92ZUNoaWxkIiwiYWZ0ZXIiLCJzY3JpcHQiLCJhcHBlbmRDaGlsZCIsInByZXZpZXdBcmVhVGlueU1DRUxvYWRlZCIsIndpbmRvd09iaiIsImZpeENvbnRlbnRlZGl0YWJsZSIsInRlbXBsYXRlc1BhbmVsSW5pdCIsInNldHRpbmdzUGFuZWxJbml0Iiwic2VjdGlvbnNJbml0IiwibWFpbkRyYWdnYWJsZSIsImVxIiwiQ1NlY3Rpb25zQ29udGFpbmVyIiwidHJpZ2dlciIsImtleXByZXNzRXZlbnRzIiwiaW5pdFByZXZpZXdBcmVhU2Nyb2xsZXIiLCJtb2RhbHdpbmRvd0luaXRKUyIsIm1vZHVsZUluaXRKUyIsInVudGlsc0luaXRKcyIsInByZXNldHNJbml0Iiwib25iZWZvcmV1bmxvYWQiLCJDTW9kYWxXaW5kb3ciLCJwYXJhbXMiLCJtb2RhbFdpbmRvd1dyYXAiLCJ0aXRsZSIsIm1vZGFsV2luZG93QWN0aW9ucyIsImNvbmZpcm0iLCJjYW5jZWwiLCJjb25maXJtX3RpdGxlIiwiY2FuY2VsX3RpdGxlIiwib2tfdGl0bGUiLCJjbGljayIsInN0b3BQcm9wYWdhdGlvbiIsInRvcCIsIm9wYWNpdHkiLCJkc2xjX3Nob3dfbW9kYWwiLCJob29rIiwibW9kYWwiLCJoaWRlTW9kYWwiLCJjb250YWluZXJIZWlnaHQiLCJoZWlnaHQiLCJvdXRlckhpZGUiLCJjbGJrIiwicG9zaXRpb24iLCJkaWZmIiwib3V0ZXJXaWR0aCIsIm9mZnNldCIsImxlZnQiLCJpbnNlcnRBZnRlciIsImZhZGVJbiIsInJlYWR5IiwiJCIsImRzbGNfanNfY29uZmlybSIsImRzbGNJRCIsImRzbGNUYXJnZXQiLCJjb25maXJtQ2xvc2UiLCJEU0xDU3RyaW5nIiwic3RyX2NvbmZpcm0iLCJkc2xjX21vZGFsX2tleXByZXNzX2V2ZW50cyIsIndoaWNoIiwiZHNsY0FjdGlvbiIsImRzbGNfbW9kdWxlX29wdGlvbnNfY2FuY2VsX2NoYW5nZXMiLCJjbG9zZUF0RW5kIiwiZHNsY19tb2R1bGVfb3B0aW9uc19jb25maXJtX2NoYW5nZXMiLCJsb2NhdGlvbiIsIm1vZHVsZSIsImRzbGNfbW9kdWxlX2RlbGV0ZSIsInBhcmVudFNlY3Rpb25Db250YWluZXIiLCJkc2xjX21vZHVsZXNfYXJlYV9kZWxldGUiLCJkc2xjX3Jvd19kZWxldGUiLCJkc2xjX3Jvd19pbXBvcnQiLCJmbiIsInVuYmluZCIsImJpbmQiLCJpbkFycmF5IiwiY2xpY2tPYmoiLCJjdXN0b21FdmVudCIsInRpbnltY2UiLCJlZGl0b3IiLCJnZXQiLCJnZXRDb250ZW50Iiwic2libGluZ3MiLCJkc2xjQWNjb3JkaW9uIiwiZHNsY19hY2NvcmRpb25fZ2VuZXJhdGVfY29kZSIsImRzbGNUYWJzIiwiZHNsY190YWJzX2dlbmVyYXRlX2NvZGUiLCJhY3Rpb25BdmFpbCIsInNoYWtlUGFuZWxDb25maXJtQnV0dG9uIiwiZWxDbGlja2VkIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJzdHJfZGVsX21vZHVsZV90aXRsZSIsInN0cl9kZWxfbW9kdWxlX2Rlc2NyIiwiY3VycmVudE1vZHVsZUVsIiwiY3VycmVudE1vZHVsZUlkIiwiZWxFZGl0aW5nIiwicm93X2VkaXRlZCIsInVubWFya01vZHVsZXNCZWluZ0VkaXRlZCIsImFkZCIsImRzbGNfbW9kdWxlX29wdGlvbnNfc2hvdyIsImJvZHkiLCJhZGp1c3RaaW5kZXgiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsIm9sZFNpemUiLCJkc2xjTW9kdWxlU2l6ZSIsIm5ld1NpemUiLCJzaXplIiwiTnVtYmVyIiwiZHNsY19tb2R1bGVfd2lkdGhfc2V0IiwiaWRUb0VkaXQiLCJlZGl0YWJsZUVsIiwidGFnTmFtZSIsImluY2x1ZGVzIiwic2V0Q29udGVudCIsImZvcm1hdCIsImVkaXRhYmxlQ29udGVudFRleHRFdmVudHMiLCJkc2xjUmVhbElucHV0IiwidGV4dCIsInNob3dTZWN0aW9uIiwiYW5pbWUiLCJ0YXJnZXRzIiwiZWFzaW5nIiwic2NhbGUiLCJkdXJhdGlvbiIsImRlbGF5IiwiZW5kRGVsYXkiLCJjb21wbGV0ZSIsImFuaW0iLCJtb2R1bGVfbmV3IiwiY2xvbmVOb2RlIiwiYXBwZW5kVG8iLCJnZXROZXdNb2R1bGVJZCIsImRzbGNfbW9kdWxlX2lkIiwiZ2V0X3VuaXF1ZV9pZCIsImRzbGNfbW9kdWxlX2lkX29yaWdpbmFsIiwic2V0QXR0cmlidXRlIiwiaW5saW5lX2Nzc19lbCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaW5saW5lX2Nzc19jb2RlIiwidGV4dENvbnRlbnQiLCJzcGxpdCIsImpvaW4iLCJuZXdfd2lkdGgiLCJuZXdDbGFzcyIsIndhcm4iLCJkc2xjTW9kdWxlT3B0aW9ucyIsImRzbGNEZWZhdWx0U2VjdGlvbiIsInBzZXVkb1BhbmVsIiwiZHNsY1NldHRpbmdzIiwiZHNsY191cmxfdmFycyIsImdldF9wYWdlX3BhcmFtcyIsImRzbGNPcHRpb24iLCJkc2xjT3B0aW9uSUQiLCJkc2xjT3B0aW9uVmFsdWUiLCJoaWRlUHVibGlzaEJ1dHRvbiIsIm1vZHVsZUJhY2t1cCIsImNoaWxkcmVuIiwiY2xvbmUiLCJvdXRwdXRfdGFicyIsInNlY3Rpb25zVXNlZCIsImN1cnJlbnRPcHRpb25TZWN0aW9uIiwiaW5kZXhPZiIsInRhYnNfdG90YWwiLCJsb2FkT3B0aW9uc0RlcHMiLCJjYWxsYmFjayIsImRzbGNfbmV3X21vZHVsZSIsIm1vZHVsZU91dHB1dEFsdGVyZWQiLCJkc2xjTW9kdWxlSW5zdGFuY2VJRCIsIkV2ZW50IiwiZHNsY19tb2R1bGVfb3V0cHV0X3JlbG9hZCIsImRzbGNfZG1fZ2V0X2RlZmF1bHRzIiwib3B0aW9uc0NvZGUiLCJkc2xjX21vZHVsZXNfb3B0aW9ucyIsImRzbGNfY29weV9tb2R1bGUiLCJkc2xjX2Rpc3BsYXlfbW9kdWxlX29wdGlvbnMiLCJkc2xjX3ByZXZpZXdfY2hhbmdlIiwiZHNsY19yZWxvYWRfbW9kdWxlIiwiTW9kdWxlQXJlYSIsImVsZW0iLCJzZWN0aW9uIiwib2JzZXJ2ZXIiLCJtcU11dGF0aW9uT2JzZXJ2ZXIiLCJjaGlsZExpc3QiLCJzb3J0YWJsZSIsImdob3N0Q2xhc3MiLCJkc2xjX21vZHVsZXNfYXJlYV9hZGQiLCJvcHRpb24iLCJpbml0X3NvcnRhYmxlcyIsImFkZFNlY3Rpb24iLCJkc2xjX2NvcHlfbW9kdWxlc19hcmVhIiwibW9kdWxlc0FyZWFFbXB0eSIsInN0cl9kZWxfYXJlYV90aXRsZSIsInN0cl9kZWxfYXJlYV9kZXNjciIsImRzbGNfZGVsZXRlX21vZHVsZXNfYXJlYSIsIm1vZHVsZUFyZWFKUSIsImRzbGNfbW9kdWxlc19hcmVhX3dpZHRoX3NldCIsInJvdyIsImVtcHR5TW9kdWxlQXJlYXMiLCJhcmVhIiwiZHNsY0RlbGV0ZVNlY3Rpb25Ub28iLCJtYXJnaW5Cb3R0b20iLCJkc2xjX21vZHVsZXNfYXJlYV9jb3B5IiwiZHNsY19tb2R1bGVJRCIsImRzbGNfbW9kdWxlc0FyZWFDbG9uZWQiLCJuZXdXaWR0aCIsIm1vZHVsZWFyZWFzSW5pdEpTIiwiZHNsY19hZGRfbW9kdWxlc19hcmVhIiwidXBkYXRlUHJlc2V0IiwicHJlc2V0TmFtZSIsInByZXNldENvZGUiLCJkc2xjX3ByZXNldF9uYW1lIiwiZHNsY19wcmVzZXRfY29kZSIsInByZXNldF9zZXR0aW5nIiwicHJlc2V0SUQiLCJ0b0xvd2VyQ2FzZSIsInNjcm9sbGVyUGx1Z2luIiwiY29udGFpbmVyIiwiZGVsdGFLb2VmIiwiaW5jcmVtZW50Iiwic2Nyb2xsaW5jIiwic2Nyb2xsZXIiLCJzY3JvbGxJbm5lciIsInNjcm9sbF90byIsIm9yaWdpbmFsRXZlbnQiLCJkZWx0YVkiLCJkZWx0YVgiLCJkZWx0YSIsImxpc3RXaWR0aCIsIndpZHRoIiwiY29udGVudFdpZHRoIiwic2Nyb2xsTWF4Iiwic3R5bGUiLCJyZXNpemUiLCJweEluVGlrIiwidGltZXJUaWsiLCJwdWJsaXNoIiwic2V0SW50ZXJ2YWwiLCJzY3JvbGxCeSIsImNsZWFySW50ZXJ2YWwiLCJTZWN0aW9uIiwic29ydGFibGVDb250YWluZXIiLCJpbml0U29ydGFibGUiLCJpbml0RHJvcGFibGUiLCJyZWFjdFRvU29ydGFibGVPbk9mZiIsImRyb3BwYWJsZSIsImRyb3AiLCJ1aSIsImNvbm5lY3RXaXRoIiwiaXRlbXMiLCJwbGFjZWhvbGRlciIsImN1cnNvckF0IiwidG9sZXJhbmNlIiwib3ZlciIsImRzbGNTZWN0aW9uIiwidXBkYXRlIiwic3RhcnQiLCJzdHJfYXJlYV9oZWxwZXJfdGV4dCIsIm1hcmdpbiIsInN0b3AiLCJjaGFuZ2UiLCJzZWN0aW9uc0V2ZW50c0luaXQiLCJzdHJfZGVsX3Jvd190aXRsZSIsInN0cl9kZWxfcm93X2Rlc2NyIiwic3RyX2ltcG9ydF9yb3dfdGl0bGUiLCJzdHJfaW1wb3J0X3Jvd19kZXNjciIsInN0cl9pbXBvcnQiLCJzdHJfb2siLCJzdHJfZXhwb3J0X3Jvd190aXRsZSIsInN0cl9leHBvcnRfcm93X2Rlc2NyIiwiZHNsY19yb3dfY29weSIsImJ1dHRvbiIsIm1vZHVsZV9lZGl0ZWQiLCJkc2xjX3Jvd19lZGl0IiwiZGVmZXIiLCJEZWZlcnJlZCIsImJyb3dzZXJDYWNoZVRtcCIsInNlc3Npb25TdG9yYWdlIiwibmV3Um93IiwiY2FjaGVkQWpheFJlcXVlc3QiLCJnZXRJdGVtIiwiY3VycmVudF92YWx1ZSIsImNhY2hlX2N1cmVudF92YWx1ZSIsIkRTTENNYWluT3B0aW9ucyIsInNlY3Rpb25fcGFkZGluZ192ZXJ0aWNhbCIsInJlbW92ZUl0ZW0iLCJzZXRJdGVtIiwiZHNsY19yb3dfYWZ0ZXJfYWRkIiwibmV3Um93SFRNTCIsImRzbGNNb2R1bGVzU2VjdGlvbk9wdHMiLCJkc2xjVmFsIiwicHJvcCIsIl90aGlzIiwiZHNsY1BhcmVudCIsImRzbGNfcm93X2VkaXRfY2FuY2VsIiwiZHNsY19yb3dfZWRpdF9jb25maXJtIiwiZHNsY01vZHVsZXNTZWN0aW9uQ2xvbmVkIiwicmVtb3ZlQXR0cmlidXRlIiwiZHNsY0luZGV4Iiwic2VjdGlvbnNJbml0SlMiLCJkc2xjX3NlY3Rpb25fbmV3X2lkIiwiZHNsY19zZWN0aW9uX2lkIiwidXBkYXRlX3NlY3Rpb25fcHJvcGVydHlfcmF3Iiwicm93Q29kZSIsImRzbGNfbW9kdWxlc19zZWN0aW9uX2NvZGUiLCJkc2xjX2JnX3ZpZGVvIiwiZHNsY19hZGRfbW9kdWxlc19zZWN0aW9uIiwiZHNsY19kZWxldGVfbW9kdWxlc19zZWN0aW9uIiwiZHNsY19lZGl0X21vZHVsZXNfc2VjdGlvbiIsImRzbGNfY29weV9tb2R1bGVzX3NlY3Rpb24iLCJkc2xjX2ltcG9ydF9tb2R1bGVzX3NlY3Rpb24iLCJyZW1vdmVBdHRyIiwiZHNsY19yZXNwb25zaXZlX2NsYXNzZXMiLCJib3R0b20iLCJheGlzIiwic3RyX3Jvd19oZWxwZXJfdGV4dCIsImRzbGNSZWd1bGFyRm9udHNBcnJheSIsIkRTTENGb250cyIsInJlZ3VsYXIiLCJkc2xjR29vZ2xlRm9udHNBcnJheSIsImdvb2dsZSIsImRzbGNBbGxGb250c0FycmF5IiwiY29uY2F0IiwiZHNsY0ljb25zQ3VycmVudFNldCIsIkRTTENJY29ucyIsImZvbnRhd2Vzb21lIiwiZHNsY19tb2R1bGVfb3B0aW9uc190b29sdGlwIiwiZHNsY19tb2R1bGVfb3B0aW9uc19mb250IiwiZHNsY19tb2R1bGVfb3B0aW9uc19pY29uIiwiZHNsY19tb2R1bGVfb3B0aW9uc19pY29uX3JldHVybmlkIiwiZHNsY19tb2R1bGVfb3B0aW9uc190ZXh0X2FsaWduIiwiZHNsY19tb2R1bGVfb3B0aW9uc19jaGVja2JveCIsImRzbGNfbW9kdWxlX29wdGlvbnNfYm94X3NoYWRvdyIsImRzbGNfbW9kdWxlX29wdGlvbnNfdGV4dF9zaGFkb3ciLCJkc2xjYV9vcHRpb25zX3dpdGhfY29sb3JwaWNrZXIiLCJkc2xjX21vZHVsZV9vcHRpb25zX2NvbG9yIiwid3JhcHBlciIsIm9wdGlvbnNQYW5lbCIsImNvbG9ycGlja2VyIiwib2Zmc2V0UG9wdXAiLCJ3aW5kb1dpZHRoIiwiaW5uZXJXaWR0aCIsInBvcHVwV2lkdGgiLCJkc2xjX21vZHVsZV9vcHRpb25zX251bWVyaWMiLCJzdWJtaXQiLCJlbGVtZW50T3B0aW9uc1RhYnMiLCJkc2xjUHJldiIsImN1cnJlbnRTZWN0aW9uIiwiZHNsY19tb2R1bGVfb3B0aW9uc19zZWN0aW9uX2ZpbHRlciIsInJlc2l6YWJsZSIsInVubG9hZE9wdGlvbnNEZXBzIiwiZHNsY19kaXNhYmxlX3Jlc3BvbnNpdmVfdmlldyIsImNvbG9ycGlja2VycyIsImNsZWFyVXRpbHMiLCJjbGVhckNvbG9yUGlja2VycyIsImlzQXJyYXkiLCJvZmYiLCJkZXBzSGFuZGxlcnMiLCJwYXJzZWQiLCJkZXAiLCJiNjRfdG9fdXRmOCIsImhhbmRsZXIiLCJvcHRFbGVtIiwibG9jYWxEZXAiLCJPYmplY3QiLCJrZXlzIiwib3B0X3ZhbCIsIm9wdF93cmFwIiwiY2hlY2tlZENoZWNrYm94IiwiaXMiLCJzZWN0aW9uX3RhYiIsIm5vdCIsInByb2Nlc3NJbmxpbmVTdHlsZVRhZyIsInJlc3BfcHJlZml4IiwicmVzcF9wb3N0Zml4IiwiY29udGV4dCIsInN0eWxlQ29udGVudCIsInJ1bGUiLCJlbGVtcyIsInN0eWxlVGFnIiwiY2xhc3NOYW1lIiwib25Nb2R1bGVPcHRpb25zQ2hhbmdlIiwib25TZWN0aW9uT3B0aW9uc0NoYW5nZSIsIm9uRmlsZVVwbG9hZE9wdGlvbnNDaGFuZ2UiLCJkc2xjT3B0aW9uVmFsdWVPcmlnIiwiZHNsY09wdGlvbldyYXAiLCJkc2xjTW9kdWxlSUQiLCJkc2xjX21vZHVsZV9vcHRpb25zX2hpZGVzaG93X3RhYnMiLCJkc2xjT3B0aW9uQ2hvaWNlcyIsImRzbGNTbGlkZXJFbCIsIm1vZHVsZUlkIiwib3B0aW9uSUQiLCJvcHRpb25WYWwiLCJkc2xjRm9udHNUb0xvYWQiLCJkc2xjQWZmZWN0T25DaGFuZ2VFbCIsImRzbGNBZmZlY3RPbkNoYW5nZVJ1bGUiLCJkc2xjQWZmZWN0T25DaGFuZ2VWYWwiLCJkc2xjQWZmZWN0T25DaGFuZ2VWYWxPcmlnIiwiY29udGVudFdpbmRvdyIsIldlYkZvbnQiLCJmYW1pbGllcyIsImFjdGl2ZSIsImZhbWlseU5hbWUiLCJmdmQiLCJpbmFjdGl2ZSIsImRzbGNFeHQiLCJkc2xjT3B0aW9uVG9BcHBseSIsImRzbGNFbCIsImRzbGNNb2R1bGVzU2VjdGlvbiIsImRzbGNWYWxSZWFsIiwiZHNsY1ZhbEV4dCIsImRzbGNSdWxlIiwiZHNsY1NldHRpbmciLCJkc2xjVGFyZ2V0RWwiLCJkc2xjSW1nVVJMIiwiZHNsY0JvcmRlclN0eWxlIiwiZHNsY0NoZWNib3hlc1dyYXAiLCJjaGVja2JveGVzIiwiY2hlY2tib3hlc1ZhbCIsImRzbGNfcGFyYWxsYXgiLCJkc2xjVmlkZW9WYWwiLCJkc2xjVGh1bWJVUkwiLCJkc2xjVmFsVG9BcHBseSIsImZpbGVfZnJhbWUiLCJmaWVsZCIsInJlbW92ZUhvb2siLCJtdWx0aXBsZSIsIndwIiwibWVkaWEiLCJmcmFtZXMiLCJhdHRhY2htZW50Iiwic3RhdGUiLCJmaXJzdCIsInRvSlNPTiIsImRhdGFJZCIsInBhcmVudCIsImFsdCIsIm9wZW4iLCJhZGRIb29rIiwic2VjdGlvbklEIiwiZHNsY1RhYiIsImRzbGNTZWN0aW9uSUQiLCJkc2xjVGFiSUQiLCJzdHJfcmVzX3RhYmxldCIsInN0cl9yZXNfcGhvbmUiLCJ0b3RhbFdpZHRoT3B0aW9uIiwidG90YWxXaWR0aEdyb3VwIiwidG90YWxXaWR0aCIsImRzbGNDb250YWluZXIiLCJkc2xjSGVhZGluZyIsImRzbGNGaWx0ZXJzIiwiZHNsY0NhckFycm93cyIsImRzbGNDYXJDaXJjbGVzIiwiZHNsY1BhZ2luYXRpb24iLCJkc2xjRWxUaHVtYiIsImRzbGNFbFRpdGxlIiwiZHNsY0VsRXhjZXJwdCIsImRzbGNFbE1ldGEiLCJkc2xjRWxCdXR0b24iLCJkc2xjRWxDYXRzIiwiZHNsY0VsQ291bnQiLCJkc2xjRWxTZXBhcmF0b3IiLCJkc2xjRWxUYWdzIiwiZHNsY0VsU29jaWFsIiwiZHNsY0VsUG9zaXRpb24iLCJkc2xjRWxJY29uIiwiZHNsY0VsQ29udGVudCIsImRzbGNFbFByaWNlIiwiZHNsY0VsUHJpY2VTZWMiLCJkc2xjRWxBZGRDYXJ0IiwiZHNsY0VsRGV0YWlscyIsImRzbGNFbFF1b3RlIiwiZHNsY0VsQXV0aG9yTmFtZSIsImRzbGNFbEF1dGhvclBvcyIsImRzbGNFbEltYWdlIiwiZHNsY0VsTG9nbyIsImRzbGNDdXN0b21DU1MiLCJkc2xjQ3VzdG9tQ1NTVmFsIiwiZGF0YV90YWIiLCJlZGl0ZWRNb2R1bGUiLCJkc2xjVHRpcCIsImRzbGNUdGlwSW5uZXIiLCJkc2xjSG9vayIsImRzbGNUdGlwQ29udGVudCIsImRzbGNMYWJlbCIsImRzbGNPZmZzZXQiLCJkc2xjVHRpcEhlaWdodCIsIm91dGVySGVpZ2h0IiwiZHNsY1R0aXBXaWR0aCIsImRzbGNUdGlwTGVmdCIsImRzbGNUdGlwQXJyTGVmdCIsImRzbGNDdXJySW5kZXgiLCJkc2xjTmV3SW5kZXgiLCJkc2xjTWF0Y2hpbmdGb250IiwiZHNsY0ZvbnQiLCJzZWFyY2giLCJyZSIsIlJlZ0V4cCIsImRzbGNGb250c0Ftb3VudCIsInRlc3QiLCJzdWJzdHJpbmciLCJkc2xjX2xpc3RfaWNvbiIsIm9iamVjdCIsImRpcmVjdGlvbiIsImRzbGNJY29uc0FycmF5R3JlcCIsImRzbGNJY29uIiwiZ3JlcCIsInNlbGVjdGVkSWNvbkNvZGUiLCJuZXdPcHQiLCJvdGhlck9wdCIsIm5ld1ZhbCIsInJlYWxPcHQiLCJjaGVja0Zha2UiLCJjaGVja1JlYWwiLCJib3hTaGFkb3dXcmFwcGVyIiwiYm94U2hhZG93SW5wdXQiLCJib3hTaGFkb3dIb3IiLCJib3hTaGFkb3dWZXIiLCJib3hTaGFkb3dCbHVyIiwiYm94U2hhZG93U3ByZWFkIiwiYm94U2hhZG93Q29sb3IiLCJib3hTaGFkb3dJbnNldCIsImJveFNoYWRvd1ZhbCIsInRleHRTaGFkb3dXcmFwcGVyIiwidGV4dFNoYWRvd0lucHV0IiwidGV4dFNoYWRvd0hvciIsInRleHRTaGFkb3dWZXIiLCJ0ZXh0U2hhZG93Qmx1ciIsInRleHRTaGFkb3dDb2xvciIsInRleHRTaGFkb3dWYWwiLCJkc2xjQ29sb3JGaWVsZCIsImRzbGNDb2xvckZpZWxkVmFsIiwiZHNsY0N1cnJDb2xvciIsImRzbGNDb2xvclBhbGxldGUiLCJjdXJyU3RvcmFnZSIsInBhbGxldGVDdXJyZW50RG9tbWFpbiIsImRvbWFpbiIsImxvY2FsU3RvcmFnZSIsInF1ZXJ5IiwiaW5wdXQiLCJ3cENvbG9yUGlja2VyIiwibW9kZSIsInBhbGV0dGVzIiwiY29sb3IiLCJjb2xvclBpY2tlclBvcHVwIiwiYXBwbHkiLCJuZXdTdG9yYWdlIiwidW5zaGlmdCIsInBvcCIsImZpZWxkV3JhcHBlciIsImNvbnRyb2xXcmFwcGVyIiwid29ya2luZ1dpdGhNb2R1bGUiLCJzbGlkZXJJbnB1dCIsInNsaWRlckV4dCIsInNsaWRlckNvbnRyb2wiLCJjdXJyZW50VmFsIiwicGFyc2VGbG9hdCIsIm1heCIsIm1pbiIsImluYyIsIm1heF9vcmlnIiwibWluX29yaWciLCJvbmx5cG9zaXRpdmUiLCJzbGlkZXIiLCJzdGVwIiwic2xpZGUiLCJzaGlmdEtleSIsImtleUNvZGUiLCJjaGFyQ29kZSIsImNvbnRhaW5lcldyYXBwZXIiLCJjdXJyZW50U2xpZGVySW5zdGFuY2UiLCJkc2xjX2ZpbHRlcl9tb2R1bGVfb3B0aW9ucyIsImRzbGNfY29uZmlybV9jaGFuZ2VzIiwiZHNsY19jYW5jZWxfY2hhbmdlcyIsImRzbGNfaW5pdF9jb2xvcnBpY2tlciIsImRzbGNfaW5pdF9vcHRpb25zX3NsaWRlciIsImRzbGNfbW9kdWxlX2VkaXRfb3B0aW9uc19oaWRlc2hvd190YWJzIiwibG9hZFRlbXBsYXRlQnlJZCIsInRlbXBsYXRlIiwicHJlcGVuZCIsImJsb2NrIiwiZHNsY190ZW1wbGF0ZV9pZCIsImRzbGNfdGVtcGxhdGVfaW1wb3J0IiwiZHNsY190ZW1wbGF0ZV9jb2RlIiwiZHNsY190ZW1wbGF0ZV9zYXZlIiwiZHNsY190ZW1wbGF0ZV90aXRsZSIsImRzbGNfdGVtcGxhdGVfZGVsZXRlIiwiZHNsY19pbXBvcnRfdGVtcGxhdGUiLCJkc2xjX3NhdmVfdGVtcGxhdGUiLCJkc2xjX2RlbGV0ZV90ZW1wbGF0ZSIsInRlbXBsYXRlSXRlbSIsImVsZW1lbnQiLCJpbXBvcnRCdXR0b24iLCJvbmVycm9yIiwiZXJyb3IiLCJmaWxlIiwibGluZSIsImNoYXIiLCJkc2xjYV9nZW5lcmF0ZV9lcnJvcl9yZXBvcnQiLCJlcnJvcnNfY29udGFpbmVyIiwiZHNsY2FfdXBkYXRlX3JlcG9ydF9sb2ciLCJhY3RpdmVFbGVtZW50IiwibmV3T2Zmc2V0Iiwib3V0bGluZUNvbG9yIiwiY2FsbGJhY2tzIiwic2Nyb2xsVG9wIiwia2V5cHJlc3MiLCJtZXRhS2V5IiwiY3RybEtleSIsImRzbGNfYWpheF9zYXZlX2NvbXBvc2VyIiwiZHNsY19oaWRlX2NvbXBvc2VyIiwiZHNsY19zaG93X2NvbXBvc2VyIiwic2VjdGlvblRpdGxlIiwicmVkaXJlY3RfdXJsIiwic3RyX2V4aXRfdGl0bGUiLCJzdHJfZXhpdF9kZXNjciIsImRzbGNfZ2VuZXJhdGVfZmlsdGVycyIsInNsaWRlVG9nZ2xlIiwib3JpZ2luIiwiZHNsY19maWx0ZXJfb3JpZ2luIiwibmV3Q29sb3IiLCJmaWx0ZXJzIiwiZmlsdGVyc0hUTUwiLCJlbHMiLCJkc2xjX3Rvb2dsZV9jb250cm9sIiwiY29udHJvbF9pZCIsImNvbnRyb2wiLCJjb250cm9sX3N0b3JhZ2UiLCJtb2R1bGVfaWQiLCJyZXNwb25zaXZlX3ByZWZpeCIsImFmZmVjdF9vbl9jaGFuZ2VfZWwiLCJhZmZlY3Rfb25fY2hhbmdlX2VsbXRzIiwiYWZmZWN0X29uX2NoYW5nZV9ydWxlIiwiYWZmZWN0X29uX2NoYW5nZV9ydWxlcyIsImNvbnRyb2xfdmFsdWUiLCJjb250cm9sX2RhdGFfZXh0IiwidG9nZ2xlQ2xhc3MiLCJkc2xjX2dldF9jb250cm9sX3ZhbHVlIiwiZGlzYWJsZV9jc3NfcnVsZSIsImRzbGNfY29tYmluZV92YWx1ZV9hbmRfZXh0ZW5zaW9uIiwidG9nZ2xlIiwiaGFzIiwic2VsZWN0b3JDU1MiLCJydWxlQ1NTIiwiY3NzUnVsZXMiLCJ0YXJnZXRfc3R5bHNoZWV0X0lEIiwic3R5bGVzaGVldCIsInNoZWV0IiwiUiIsInNlbGVjdG9yVGV4dCIsImV4dGVuc2lvbiIsImNvbnRyb2xfdHlwZSIsImtleWRvd25fZXZlbnQiLCJkc2xjX2Rpc2FibGVfYmFja3NwYWNlX25hdmlnYXRpb24iLCJkc2xjX25vdGljZV9vbl9yZWZyZXNoIiwiZHNsY19zYXZlX3BhZ2UiLCJkb1ByZXZlbnQiLCJkIiwic3JjRWxlbWVudCIsInRvVXBwZXJDYXNlIiwicmVhZE9ubHkiLCJkaXNhYmxlZCIsIm9mZnNldFBhcmVudCIsInN0cl9yZWZyZXNoX3RpdGxlIiwic3RyX3JlZnJlc2hfZGVzY3IiLCJyZWxvYWQiLCJtYXRjaCIsImVycm9yX3JlcG9ydCIsIlN0b3JhZ2UiLCJoZWFkZXJGb290ZXIiLCJvdmVybGF5IiwibGlua1RvRWRpdCIsImhmVHlwZSIsImVkaXRpbmdMYWJlbCIsImVkaXRpbmdTdWJMYWJlbCIsImh0bWxPYmplY3QiLCJhZGRzbGFzaGVzIiwic3RyIiwiYmFzZW5hbWUiLCJwYXRoIiwidWEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJtc2llIiwiY2hlY2tQYXJhbXMiLCJhcnJheSIsInR5cGVzIiwiaW50ZWdlciIsInBhcmFtIiwiZmxvYXQiLCJzdHJpbmciLCJtYXAiLCJ1dGY4X3RvX2I2NCIsInQiLCJidG9hIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlc2NhcGUiLCJhdG9iIiwicmVkdWNlIiwiX3JlZHVjZSIsImEiLCJiIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwicHJvcGVydHlfbmFtZSIsInByb3BlcnR5X3ZhbHVlIiwibW9kdWxlX2NvZGVfY29udGFpbmVyIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInByb3BlcnR5X2NvbnRhaW5lciIsIm1vZHVsZV9jb2RlIiwic2VjdGlvbl9jb2RlX2NvbnRhaW5lciIsInNlY3Rpb25fY29kZSIsImV2ZW50TmFtZSIsImV2ZW50RGF0YSIsIm1lc3NhZ2UiLCJkZXRhaWxzIiwiZHNsY2FfcHVibGlzaF9ldmVudCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0RBQTBDLGdDQUFnQztBQUMxRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdFQUF3RCxrQkFBa0I7QUFDMUU7QUFDQSx5REFBaUQsY0FBYztBQUMvRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQXlDLGlDQUFpQztBQUMxRSx3SEFBZ0gsbUJBQW1CLEVBQUU7QUFDckk7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBMkIsMEJBQTBCLEVBQUU7QUFDdkQseUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQXNELCtEQUErRDs7QUFFckg7QUFDQTs7O0FBR0E7QUFDQTs7Ozs7Ozs7Ozs7OztBQ2xGQTtB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QTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxzQ0FBc0M7O0FBRXRDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0JBQStCOztBQUUvQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7OztBQUdUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qjs7QUFFeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsK0NBQStDOztBQUUvQztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5Qzs7QUFFekM7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQzs7QUFFL0M7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0U7O0FBRXBFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0NBQXdDOztBQUV4QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUZBQW1GO0FBQ25GO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkIsWUFBWSxPQUFPO0FBQ25CLFlBQVksWUFBWTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQzs7QUFFakM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7OztBQUdMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTCw4REFBOEQ7O0FBRTlEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQ0FBa0M7O0FBRWxDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQLEtBQUs7OztBQUdMO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7O0FBR0w7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFF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QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjs7QUFFckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixnQkFBZ0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7O0FBRXJEOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSCxpQ0FBaUM7QUFDakMsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0IsK0JBQStCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNB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WUFBWTtBQUN4Qjs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVlLHVFQUFRLEVBQUM7QUFDOEMiLCJmaWxlIjoiZWRpdG9yX2JhY2tlbmQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi9qcy9zcmMvZWRpdG9yL2JhY2tlbmQvaW5kZXguanNcIik7XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKlxuICogPSBDT0RFIEdFTkVSQVRJT04gPVxuICpcbiAqIC0gZHNsY19zYXZlX2NvbXBvc2VyICggU2F2ZSB0aGUgUGFnZSBDaGFuZ2VzIClcbiAqIC0gZHNsY19zYXZlX2RyYWZ0X2NvbXBvc2VyICggU2F2ZSB0aGUgY2hhbmdlcyBhcyBkcmFmdCwgbm90IHB1Ymxpc2ggKVxuICogLSBkc2xjX2dlbmVyYXRlX2NvZGUgKCBHZW5lcmF0ZXMgUGFnZSdzIExDIGRhdGEgKVxuICogLSBnZW5lcmF0ZVNlY3Rpb25Db2RlICggR2VuZXJhdGUgTEMgZGF0YSBmb3IgYSBzcGVjaWZpYyByb3cvc2VjdGlvbiApXG4gKiAtIGRzbGNhX2dlbl9jb250ZW50X2Zvcl9zZWFyY2ggKCBHZW5lcmF0ZSBSZWFkYWJsZSBDb250ZW50IEZvciBTZWFyY2ggKVxuICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENPREUgR0VORVJBVElPTiAtIFNhdmUgUGFnZSBDaGFuZ2VzXG4gKi9cbmZ1bmN0aW9uIGRzbGNfc2F2ZV9jb21wb3NlcigpIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfc2F2ZV9jb21wb3NlcicgKTtcblxuXHQvKipcblx0ICogQmVmb3JlIHNhdmluZyBjb2RlIHZpYSBhamF4XG5cdCAqIHJlZnJlc2ggdGhlIHBhZ2Ugc291cmNlIGluIGEgaGlkZGVuICNkc2xjYS1jb2RlXG5cdCAqL1xuXHR3aW5kb3cuZHNsY19nZW5lcmF0ZV9jb2RlKCk7XG5cblx0Ly8gR2VuZXJhdGUgY29udGVudCBmb3Igc2VhcmNoXG5cdGRzbGNhX2dlbl9jb250ZW50X2Zvcl9zZWFyY2goKTtcblxuXHQvLyBWYXJzXG5cdHZhciBjb21wb3NlckNvZGUgPSBqUXVlcnkoJyNkc2xjYS1jb2RlJykudmFsKCksXG5cdGNvbnRlbnRGb3JTZWFyY2ggPSBqUXVlcnkoJyNkc2xjYS1jb250ZW50LWZvci1zZWFyY2gnKS52YWwoKSxcblx0cG9zdElEID0galF1ZXJ5KCcuZHNsY2EtY29udGFpbmVyJykuZGF0YSgncG9zdC1pZCcpO1xuXG5cdC8vIEFwcGx5IGNsYXNzIHRvIGJvZHkgdG8ga25vdyBzYXZpbmcgaXMgaW4gcHJvZ3Jlc3Ncblx0alF1ZXJ5KCdib2R5JykuYWRkQ2xhc3MoJ2RzbGNhLXNhdmluZy1pbi1wcm9ncmVzcycpO1xuXG5cdC8vIFJlcGxhY2UgdGhlIGNoZWNrIGluIHB1Ymxpc2ggYnV0dG9uIHdpdGggYSBsb2FkaW5nIGFuaW1hdGlvblxuXHRqUXVlcnkoJy5kc2xjYS1zYXZlLWNvbXBvc2VyIC5kc2xjYS1pY29uJykucmVtb3ZlQ2xhc3MoJ2RzbGMtaWNvbi1vaycpLmFkZENsYXNzKCdkc2xjLWljb24tc3BpbiBkc2xjLWljb24tc3Bpbm5lcicpO1xuXG5cdC8vIEFqYXggY2FsbCB0byBzYXZlIHRoZSBuZXcgY29udGVudFxuXHRqUXVlcnkuYWpheCh7XG5cdFx0bWV0aG9kOiAnUE9TVCcsXG5cdFx0dHlwZTogJ1BPU1QnLFxuXHRcdHVybDogRFNMQ0FqYXguYWpheHVybCxcblx0XHRkYXRhOiB7XG5cdFx0XHRhY3Rpb24gOiAnZHNsYy1hamF4LXNhdmUtY29tcG9zZXInLFxuXHRcdFx0ZHNsYyA6ICdhY3RpdmUnLFxuXHRcdFx0ZHNsY19wb3N0X2lkIDogcG9zdElELFxuXHRcdFx0ZHNsY19jb2RlIDogY29tcG9zZXJDb2RlLFxuXHRcdFx0ZHNsY19jb250ZW50X2Zvcl9zZWFyY2ggOiBjb250ZW50Rm9yU2VhcmNoXG5cdFx0fSxcblx0XHR0aW1lb3V0OiAzMDAwMFxuXHR9KS5kb25lKGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblxuXHRcdC8vIE9uIHN1Y2Nlc3MgaGlkZSB0aGUgcHVibGlzaCBidXR0b25cblx0XHRpZiAoIHJlc3BvbnNlLnN0YXR1cyA9PSAnc3VjY2VzcycgKSB7XG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1zYXZlLWNvbXBvc2VyJykuZmFkZU91dCgyNTApO1xuXHRcdFx0alF1ZXJ5KCcuZHNsY2Etc2F2ZS1kcmFmdC1jb21wb3NlcicpLmZhZGVPdXQoMjUwKTtcblxuXHRcdFx0Ly8gQ3JlYXRlIG5ldyBjYWNoZSB2ZXJzaW9uIGFmdGVyIGl0J3Mgc2F2ZWQuXG5cdFx0XHRqUXVlcnkoJ2JvZHknKS5hcHBlbmQoICc8aWZyYW1lIGNsYXNzPVwibGJtbi1jYWNoZS1pZnJhbWVcIiBpZD1cImxibW4tY2FjaGUtaWZyYW1lLScgKyBwb3N0SUQgKyAnXCIgc3JjPVwiJysgRFNMQ1NpdGVEYXRhLnNpdGV1cmwgKyAnLz9wPScgKyBwb3N0SUQgKydcIiA+PC9pZnJhbWU+JyApO1xuXG5cdFx0XHRqUXVlcnkoJy5sYm1uLWNhY2hlLWlmcmFtZScpLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsKSB7XG5cdFx0XHRcdGpRdWVyeShlbCkubG9hZChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqUXVlcnkoZWwpLnJlbW92ZSgpO1xuXHRcdFx0XHRcdC8vIENhY2hlIGJ1aWx0IGF0IHRoaXMgcG9pbnQuIFJlbW92ZSBpZnJhbWUuXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cblx0XHQvLyBPbiBmYWlsIHNob3cgYW4gYWxlcnQgbWVzc2FnZVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRhbGVydCggJ1NvbWV0aGluZyB3ZW50IHdyb25nLCBwbGVhc2UgdHJ5IHRvIHNhdmUgYWdhaW4uIEFyZSB5b3Ugc3VyZSB0byBtYWtlIGFueSBjaGFuZ2VzPyBFcnJvciBDb2RlOiAnICsgcmVzcG9uc2Uuc3RhdHVzKTtcblx0XHR9XG5cdH0pLmZhaWwoZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXG5cdFx0aWYgKCByZXNwb25zZS5zdGF0dXNUZXh0ID09ICd0aW1lb3V0JyApIHtcblx0XHRcdGFsZXJ0KCAnVGhlIHJlcXVlc3QgdGltZWQgb3V0IGFmdGVyIDMwIHNlY29uZHMuIFNlcnZlciBkbyBub3QgcmVzcG9uZCBpbiB0aW1lLiBQbGVhc2UgdHJ5IGFnYWluLicgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YWxlcnQoICdTb21ldGhpbmcgd2VudCB3cm9uZy4gUGxlYXNlIHRyeSBhZ2Fpbi4gRXJyb3IgQ29kZTogJyArIHJlc3BvbnNlLnN0YXR1c1RleHQgICk7XG5cdFx0fVxuXHR9KS5hbHdheXMoZnVuY3Rpb24oIHJlc2Vwb25zZSApIHtcblxuXHRcdC8vIFJlcGxhY2UgdGhlIGxvYWRpbmcgYW5pbWF0aW9uIHdpdGggYSBjaGVjayBpY29uXG5cdFx0alF1ZXJ5KCcuZHNsY2Etc2F2ZS1jb21wb3NlciAuZHNsY2EtaWNvbicpLnJlbW92ZUNsYXNzKCdkc2xjLWljb24tc3BpbiBkc2xjLWljb24tc3Bpbm5lcicpLmFkZENsYXNzKCdkc2xjLWljb24tb2snKVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBjbGFzcyBwcmV2aW91c2x5IGFkZGVkIHNvIHdlIGtub3cgc2F2aW5nIGlzIGZpbmlzaGVkXG5cdFx0alF1ZXJ5KCdib2R5JykucmVtb3ZlQ2xhc3MoJ2RzbGNhLXNhdmluZy1pbi1wcm9ncmVzcycpO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDT0RFIEdFTkVSQVRJT04gLSBTYXZlIERyYWZ0XG4gKi9cbmZ1bmN0aW9uIGRzbGNfc2F2ZV9kcmFmdF9jb21wb3NlcigpIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfc2F2ZV9kcmFmdF9jb21wb3NlcicgKTtcblxuXHQvLyBWYXJzXG5cdHZhciBjb21wb3NlckNvZGUgPSBqUXVlcnkoJyNkc2xjYS1jb2RlJykudmFsKCksXG5cdHBvc3RJRCA9IGpRdWVyeSgnLmRzbGNhLWNvbnRhaW5lcicpLmRhdGEoJ3Bvc3QtaWQnKTtcblxuXHQvLyBBcHBseSBjbGFzcyB0byBib2R5IHRvIGtub3cgc2F2aW5nIGlzIGluIHByb2dyZXNzXG5cdGpRdWVyeSgnYm9keScpLmFkZENsYXNzKCdkc2xjYS1zYXZpbmctaW4tcHJvZ3Jlc3MnKTtcblxuXHQvLyBSZXBsYWNlIHRoZSBjaGVjayBpbiBwdWJsaXNoIGJ1dHRvbiB3aXRoIGEgbG9hZGluZyBhbmltYXRpb25cblx0alF1ZXJ5KCcuZHNsY2Etc2F2ZS1kcmFmdC1jb21wb3NlciAuZHNsY2EtaWNvbicpLnJlbW92ZUNsYXNzKCdkc2xjLWljb24tb2snKS5hZGRDbGFzcygnZHNsYy1pY29uLXNwaW4gZHNsYy1pY29uLXNwaW5uZXInKTtcblxuXHQvLyBBamF4IGNhbGwgdG8gc2F2ZSB0aGUgbmV3IGNvbnRlbnRcblx0alF1ZXJ5LnBvc3QoXG5cblx0XHREU0xDQWpheC5hamF4dXJsLFxuXHRcdHtcblx0XHRcdGFjdGlvbiA6ICdkc2xjLWFqYXgtc2F2ZS1kcmFmdC1jb21wb3NlcicsXG5cdFx0XHRkc2xjIDogJ2FjdGl2ZScsXG5cdFx0XHRkc2xjX3Bvc3RfaWQgOiBwb3N0SUQsXG5cdFx0XHRkc2xjX2NvZGUgOiBjb21wb3NlckNvZGUsXG5cdFx0fSxcblx0XHRmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cblx0XHRcdC8vIFJlcGxhY2UgdGhlIGxvYWRpbmcgYW5pbWF0aW9uIHdpdGggYSBjaGVjayBpY29uXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1zYXZlLWRyYWZ0LWNvbXBvc2VyIC5kc2xjYS1pY29uJykucmVtb3ZlQ2xhc3MoJ2RzbGMtaWNvbi1zcGluIGRzbGMtaWNvbi1zcGlubmVyJykuYWRkQ2xhc3MoJ2RzbGMtaWNvbi1zYXZlJylcblxuXHRcdFx0Ly8gT24gc3VjY2VzcyBoaWRlIHRoZSBwdWJsaXNoIGJ1dHRvblxuXHRcdFx0aWYgKCByZXNwb25zZS5zdGF0dXMgPT0gJ3N1Y2Nlc3MnICkge1xuXHRcdFx0XHRqUXVlcnkoJy5kc2xjYS1zYXZlLWRyYWZ0LWNvbXBvc2VyJykuZmFkZU91dCgyNTApO1xuXG5cdFx0XHQvLyBPbiBmYWlsIHNob3cgYW4gYWxlcnQgbWVzc2FnZVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRhbGVydCggJ1NvbWV0aGluZyB3ZW50IHdyb25nLCBwbGVhc2UgdHJ5IHRvIHNhdmUgYWdhaW4uJyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgdGhlIGNsYXNzIHByZXZpb3VzbHkgYWRkZWQgc28gd2Uga25vdyBzYXZpbmcgaXMgZmluaXNoZWRcblx0XHRcdGpRdWVyeSgnYm9keScpLnJlbW92ZUNsYXNzKCdkc2xjYS1zYXZpbmctaW4tcHJvZ3Jlc3MnKTtcblx0XHR9XG5cdCk7XG59XG5cbi8qKlxuICogQ09ERSBHRU5FUkFUSU9OIC0gR2VuZXJhdGUgTEMgRGF0YVxuICogQHBhcmFtIHNlY3Rpb24gaXMgbm90IHJlcXVpcmVkLiBJZiBubyBwYXJhbWV0ZXIgcHJvdmlkZWQgZnVuY3Rpb24gZ2VuZXJhdGVzXG4gKi9cbndpbmRvdy5kc2xjX2dlbmVyYXRlX2NvZGUgPSBmdW5jdGlvbigpIHtcblx0aWYgKCB3aW5kb3cuZHNsY0RlYnVnICkgY29uc29sZS5sb2coICdkc2xjX2dlbmVyYXRlX2NvZGUnICk7XG5cblx0Ly8gVmFyc1xuXHR2YXIgbW9kdWxlQ29kZSA9ICcnLFxuXHRtb2R1bGVfc2l6ZSxcblx0Y29tcG9zZXJDb2RlID0gJycsXG5cdHBhZ2VDb2RlSW5Kc29uID0gJycsXG5cdG1heFBlclJvdyA9IDEyLFxuXHRtYXhQZXJSb3dBID0gMTIsXG5cdGN1cnJQZXJSb3cgPSAwLFxuXHRjdXJyUGVyUm93QSA9IDAsXG5cdG1vZHVsZXNBcmVhU2l6ZSxcblx0bW9kdWxlc0FyZWEsXG5cdG1vZHVsZXNBcmVhTGFzdFN0YXRlLFxuXHRtb2R1bGVzQXJlYUZpcnN0U3RhdGUsXG5cdG1vZHVsZXNTZWN0aW9uLFxuXHRtb2R1bGVzU2VjdGlvbkF0dHMgPSAnJyxcblx0bW9kdWxlc1NlY3Rpb25Kc29uO1xuXG5cdC8qKlxuXHQgKiBHbyB0aHJvdWdoIG1vZHVsZSBhcmVhcyAoZW1wdHkgb3Igbm90IGVtcHR5KVxuXHQgKiBUT0RPOiBPcHRpbWl6ZSBjb2RlIHRvIGdvIHRob3VnaCB0aGUgc2VjdGlvbi9hcmVhIG5lZWRlZCBvbmx5LFxuXHQgKiBub3QgdGhlIHdob2xlIHBhZ2UuXG5cdCAqL1xuXG5cdGpRdWVyeSgnI2RzbGMtbWFpbiAuZHNsYy1tb2R1bGVzLWFyZWEnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5lYWNoKGZ1bmN0aW9uKCl7XG5cblx0XHRpZiAoIGpRdWVyeSgnLmRzbGMtbW9kdWxlLWZyb250JywgdGhpcykubGVuZ3RoICkge1xuXG5cdFx0XHRqUXVlcnkodGhpcykucmVtb3ZlQ2xhc3MoJ2RzbGMtbW9kdWxlcy1hcmVhLWVtcHR5JykuYWRkQ2xhc3MoJ2RzbGMtbW9kdWxlcy1hcmVhLW5vdC1lbXB0eScpO1xuXHRcdFx0alF1ZXJ5KCcuZHNsY2Etbm8tY29udGVudCcsIHRoaXMpLmhpZGUoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGpRdWVyeSh0aGlzKS5yZW1vdmVDbGFzcygnZHNsYy1tb2R1bGVzLWFyZWEtbm90LWVtcHR5JykuYWRkQ2xhc3MoJ2RzbGMtbW9kdWxlcy1hcmVhLWVtcHR5Jyk7XG5cblx0XHRcdGpRdWVyeSgnLmRzbGNhLW5vLWNvbnRlbnQ6bm90KDp2aXNpYmxlKScsIHRoaXMpLnNob3coKS5jc3Moe1xuXHRcdFx0XHQnLXdlYmtpdC1hbmltYXRpb24tbmFtZScgOiAnZHNsY0JvdW5jZUluJyxcblx0XHRcdFx0Jy1tb3otYW5pbWF0aW9uLW5hbWUnIDogJ2RzbGNCb3VuY2VJbicsXG5cdFx0XHRcdCdhbmltYXRpb24tbmFtZScgOiAnZHNsY0JvdW5jZUluJyxcblx0XHRcdFx0J2FuaW1hdGlvbi1kdXJhdGlvbicgOiAnMC42cycsXG5cdFx0XHRcdCctd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbicgOiAnMC42cycsXG5cdFx0XHRcdHBhZGRpbmcgOiAwXG5cdFx0XHR9KS5hbmltYXRlKHsgcGFkZGluZyA6ICczNXB4IDAnIH0sIDMwMCk7XG5cdFx0fVxuXHR9KTtcblxuXHQvKipcblx0ICogR28gdGhyb3VnaCBlYWNoIHJvdyAoZW1wdHkgb3Igbm90IGVtcHR5KVxuXHQgKi9cblxuXHRqUXVlcnkoJyNkc2xjLW1haW4gLmRzbGMtbW9kdWxlcy1zZWN0aW9uJywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkuZWFjaChmdW5jdGlvbigpe1xuXG5cdFx0bW9kdWxlc1NlY3Rpb24gPSBqUXVlcnkodGhpcyk7XG5cblx0XHRtb2R1bGVzU2VjdGlvbkpzb24gPSBnZW5lcmF0ZVNlY3Rpb25Db2RlKCBtb2R1bGVzU2VjdGlvbiApO1xuXG5cdFx0Ly8gVXBkYXRlIEpTT04gaW4gaGlkZGVuIHRleHQgYXJlYSB3aXRoIHVwZGF0ZWQgY29kZS5cblx0XHRtb2R1bGVzU2VjdGlvbi5maW5kKCcuZHNsY2Etc2VjdGlvbi1jb2RlJykudmFsKCBtb2R1bGVzU2VjdGlvbkpzb24gKTtcblxuXHRcdC8vIEFkZCByb3cgY29kZSBpbnRvIHRoZSB0aGUgd2hvbGUgcGFnZSBjb2RlLlxuXHRcdHBhZ2VDb2RlSW5Kc29uID0gcGFnZUNvZGVJbkpzb24gKyBtb2R1bGVzU2VjdGlvbkpzb24gKyAnLCc7XG5cblx0XHQvLyBDbG9zZSByb3cgKCBzZWN0aW9uICkgc2hvcnRjb2RlXG5cdFx0Ly8gY29tcG9zZXJDb2RlID0gY29tcG9zZXJDb2RlICsgJ1svZHNsY19tb2R1bGVzX3NlY3Rpb25dICc7XG5cdH0pO1xuXG5cblx0Ly8gUmVtb3ZlIHRoZSBsYXN0IGNvbW1hIGluIHRoZSBjb2RlLlxuXHRwYWdlQ29kZUluSnNvbiA9IHBhZ2VDb2RlSW5Kc29uLnNsaWNlKDAsIC0xKTtcblxuXHQvLyBwYWdlQ29kZUluSnNvbiA9IHBhZ2VDb2RlSW5Kc29uO1xuXHRwYWdlQ29kZUluSnNvbiA9ICdbJyArIHBhZ2VDb2RlSW5Kc29uICsgJ10nO1xuXG5cdC8vIEFwcGx5IHRoZSBuZXcgY29kZSB2YWx1ZXMgdG8gdGhlIHNldHRpbmcgY29udGFpbmVyc1xuXHRqUXVlcnkoJyNkc2xjYS1jb2RlJykudmFsKHBhZ2VDb2RlSW5Kc29uKTtcblxuXHRqUXVlcnkoJyNkc2xjYS1leHBvcnQtY29kZScpLnZhbChwYWdlQ29kZUluSnNvbik7XG59XG5cblxuLyoqXG4gKiBDT0RFIEdFTkVSQVRJT04gLSBHZW5lcmF0ZSBMQyBEYXRhIGZvciBTZWN0aW9uXG4gKlxuICogQHBhcmFtICB7alF1ZXJ5IE9iamVjdH0gdGhlTW9kdWxlc1NlY3Rpb24galF1ZXJ5IGVsZW1lbnQgZm9yIHRoZSBzZWN0aW9uIHRvIHByb2Nlc3NcbiAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgICAgICAgICAgICAgXHRcdFx0SlNPTiBjb2RlIGZvciB0aGUgc2VjdGlvblxuICovXG4vLyBleC4gZHNsY19nZW5lcmF0ZV9zZWN0aW9uX2NvZGVcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVNlY3Rpb25Db2RlID0gKCB0aGVNb2R1bGVzU2VjdGlvbiApID0+IHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2dlbmVyYXRlU2VjdGlvbkNvZGUnICk7XG5cblx0Ly8gVmFyc1xuXHR2YXIgbW9kdWxlQ29kZSA9ICcnLFxuXHRtb2R1bGVfc2l6ZSxcblx0Y29tcG9zZXJDb2RlID0gJycsXG5cdHBhZ2VDb2RlSW5Kc29uID0gJycsXG5cdG1heFBlclJvdyA9IDEyLFxuXHRtYXhQZXJSb3dBID0gMTIsXG5cdGN1cnJQZXJSb3cgPSAwLFxuXHRjdXJyUGVyUm93QSA9IDAsXG5cdG1vZHVsZXNBcmVhU2l6ZSxcblx0bW9kdWxlc0FyZWEsXG5cdG1vZHVsZXNBcmVhTGFzdFN0YXRlLFxuXHRtb2R1bGVzQXJlYUZpcnN0U3RhdGUsXG5cdG1vZHVsZXNTZWN0aW9uLFxuXHRtb2R1bGVzU2VjdGlvbkF0dHMgPSAnJyxcblx0bW9kdWxlc1NlY3Rpb25Kc29uU3RyaW5nID0gJycsXG5cdG1vZHVsZXNTZWN0aW9uSnNvbjtcblxuXHRtb2R1bGVzU2VjdGlvbiA9IHRoZU1vZHVsZXNTZWN0aW9uO1xuXG5cdC8vIFVwZGF0ZSBkc2xjLW1vZHVsZXMtc2VjdGlvbi0obm90KWVtcHR5IGNsYXNzZXNcblx0aWYgKCBqUXVlcnkoJy5kc2xjLW1vZHVsZXMtYXJlYScsIG1vZHVsZXNTZWN0aW9uKS5sZW5ndGggKSB7XG5cdFx0bW9kdWxlc1NlY3Rpb24ucmVtb3ZlQ2xhc3MoJ2RzbGMtbW9kdWxlcy1zZWN0aW9uLWVtcHR5JykuYWRkQ2xhc3MoJ2RzbGMtbW9kdWxlcy1zZWN0aW9uLW5vdC1lbXB0eScpO1xuXHR9IGVsc2Uge1xuXHRcdG1vZHVsZXNTZWN0aW9uLnJlbW92ZUNsYXNzKCdkc2xjLW1vZHVsZXMtc2VjdGlvbi1ub3QtZW1wdHknKS5hZGRDbGFzcygnZHNsYy1tb2R1bGVzLXNlY3Rpb24tZW1wdHknKTtcblx0fVxuXG5cdC8vIFJlbW92ZSBsYXN0IGFuZCBmaXJzdCBjbGFzc2VzIGZyb20gbW9kdWxlIGFyZWFzIGFuZCBtb2R1bGVzXG5cdGpRdWVyeSgnLmRzbGMtbW9kdWxlcy1hcmVhLmRzbGMtbGFzdC1jb2wsIC5kc2xjLW1vZHVsZXMtYXJlYS5kc2xjLWZpcnN0LWNvbCcsIHRoaXMpLnJlbW92ZUNsYXNzKCdkc2xjLWxhc3QtY29sIGRzbGMtZmlyc3QtY29sJyk7XG5cdGpRdWVyeSgnLmRzbGMtbW9kdWxlLWZyb250LmRzbGMtbGFzdC1jb2wsIC5kc2xjLW1vZHVsZS1mcm9udC5kc2xjLWZpcnN0LWNvbCcsIHRoaXMpLnJlbW92ZUNsYXNzKCdkc2xjLWxhc3QtY29sIGRzbGMtZmlyc3QtY29sJyk7XG5cblx0Ly8gVmFyc1xuXHRjdXJyUGVyUm93QSA9IDA7XG5cblx0Ly8gR2V0IGN1cnJlbnQgSlNPTi5cblx0bW9kdWxlc1NlY3Rpb25Kc29uU3RyaW5nID0gbW9kdWxlc1NlY3Rpb24uZmluZCgnLmRzbGNhLXNlY3Rpb24tY29kZScpLnZhbCgpO1xuXHRtb2R1bGVzU2VjdGlvbkpzb24gPSBKU09OLnBhcnNlKG1vZHVsZXNTZWN0aW9uSnNvblN0cmluZyk7XG5cblx0Ly8gR2VuZXJhdGUgYXR0cmlidXRlcyBmb3IgdGhlIHJvdyBzaG9ydGNvZGVcblx0bW9kdWxlc1NlY3Rpb25BdHRzID0gJyc7XG5cblx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLXNldHRpbmdzIGlucHV0JywgbW9kdWxlc1NlY3Rpb24pLmVhY2goZnVuY3Rpb24oKXtcblxuXHRcdHZhciBjdXJyZW50SW5wdXQgPSBqUXVlcnkodGhpcyk7XG5cdFx0dmFyIGN1cnJlbnRBdHRyS2V5ID0gY3VycmVudElucHV0LmRhdGEoJ2lkJyk7XG5cdFx0dmFyIGN1cnJlbnRBdHRyVmFsID0gY3VycmVudElucHV0LnZhbCgpO1xuXG5cdFx0Ly8gVXBkYXRlIGhpZGRlbiB0ZXh0IGZpZWxkcyB3aXRoIHJvdyBhdHRyaWJ1dGVzLlxuXHRcdG1vZHVsZXNTZWN0aW9uQXR0cyA9IG1vZHVsZXNTZWN0aW9uQXR0cyArIGN1cnJlbnRBdHRyS2V5ICsgJz1cIicgKyBjdXJyZW50QXR0clZhbCArICdcIiAnO1xuXG5cdFx0Ly8gVXBkYXRlIEpTT04gb2JqZWN0LlxuXHRcdG1vZHVsZXNTZWN0aW9uSnNvbltjdXJyZW50QXR0cktleV0gPSBjdXJyZW50QXR0clZhbDtcblx0fSk7XG5cblx0Ly8gRGVsZXRlIGF0dHJpYnV0ZSAnZ2l2ZV9uZXdfaWQnLlxuXHQvLyBJdCBzdXBwb3NlZCB0byBiZSB1c2VkIG9ubHkgb25jZSBhbmQgYnkgdGhpcyB0aW1lIGl0IHdhcyBhbHJlYWR5IGFwcGxpZWQuXG5cdGlmICggIHVuZGVmaW5lZCAhPT0gbW9kdWxlc1NlY3Rpb25Kc29uWydnaXZlX25ld19pZCddICkge1xuXHRcdGRlbGV0ZSBtb2R1bGVzU2VjdGlvbkpzb25bJ2dpdmVfbmV3X2lkJ107XG5cdH1cblxuXHQvLyBQcmVwYXJlIHBsYWNlIGZvciBtb2R1bGUgYXJlYXMuXG5cdG1vZHVsZXNTZWN0aW9uSnNvblsnY29udGVudCddID0gW107XG5cblx0Ly8gT3BlbiB0aGUgbW9kdWxlIHNlY3Rpb24gKCByb3cgKSBzaG9ydGNvZGVcblx0Ly8gY29tcG9zZXJDb2RlID0gY29tcG9zZXJDb2RlICsgJ1tkc2xjX21vZHVsZXNfc2VjdGlvbiAnICsgbW9kdWxlc1NlY3Rpb25BdHRzICsgJ10gJztcblxuXHQvKipcblx0ICogR28gdGhyb3VnaCBlYWNoIGNvbHVtbiBvZiBjdXJyZW50IHJvd1xuXHQgKi9cblx0alF1ZXJ5KCcuZHNsYy1tb2R1bGVzLWFyZWEnLCBtb2R1bGVzU2VjdGlvbikuZWFjaChmdW5jdGlvbigpe1xuXG5cdFx0Ly8gUmVzZXQgd2lkdGggY291bnRlciBmb3IgbW9kdWxlc1xuXHRcdGN1cnJQZXJSb3cgPSAwO1xuXG5cdFx0Ly8gVmFyc1xuXHRcdG1vZHVsZXNBcmVhID0galF1ZXJ5KHRoaXMpO1xuXHRcdG1vZHVsZXNBcmVhU2l6ZSA9IHBhcnNlSW50KCBtb2R1bGVzQXJlYS5kYXRhKCdzaXplJykgKTtcblx0XHRtb2R1bGVzQXJlYUxhc3RTdGF0ZSA9ICdubyc7XG5cdFx0bW9kdWxlc0FyZWFGaXJzdFN0YXRlID0gJ25vJztcblxuXHRcdC8vIEluY3JlbWVudCBhcmVhIGNvbHVtbiBjb3VudGVyXG5cdFx0Y3VyclBlclJvd0EgKz0gbW9kdWxlc0FyZWFTaXplO1xuXG5cdFx0alF1ZXJ5KHRoaXMpLnJlbW92ZUNsYXNzKCdkc2xjLWZpcnN0LWNvbCcpO1xuXHRcdGpRdWVyeSh0aGlzKS5yZW1vdmVDbGFzcygnZHNsYy1sYXN0LWNvbCcpO1xuXG5cdFx0Ly8gSWYgYXJlYSBjb2x1bW4gY291bnRlciBzYW1lIGFzIG1heGltdW1cblx0XHRpZiAoIGN1cnJQZXJSb3dBID09IG1heFBlclJvd0EgKSB7XG5cblx0XHRcdC8vIEFwcGx5IGNsYXNzZXMgdG8gY3VycmVudCBhbmQgbmV4dCBjb2x1bW5cblx0XHRcdGpRdWVyeSh0aGlzKS5hZGRDbGFzcygnZHNsYy1sYXN0LWNvbCcpLm5leHQoJy5kc2xjLW1vZHVsZXMtYXJlYScpLmFkZENsYXNzKCdkc2xjLWZpcnN0LWNvbCcpO1xuXG5cdFx0XHQvLyBSZXNldCBhcmVhIGNvbHVtbiBjb3VudGVyXG5cdFx0XHRjdXJyUGVyUm93QSA9IDA7XG5cblx0XHRcdC8vIFNldCBzaG9ydGNvZGUncyBcImxhc3RcIiBhdHRyaWJ1dGUgdG8gXCJ5ZXNcIlxuXHRcdFx0bW9kdWxlc0FyZWFMYXN0U3RhdGUgPSAneWVzJztcblxuXHRcdC8vIElmIGFyZWEgY29sdW1uIGNvdW50ZXIgYmlnZ2VyIHRoYW4gbWF4aW11bVxuXHRcdH0gZWxzZSBpZiAoIGN1cnJQZXJSb3dBID4gbWF4UGVyUm93QSApIHtcblxuXHRcdFx0Ly8gQXBwbHkgY2xhc3NlcyB0byBjdXJyZW50IGFuZCBwcmV2aW91cyBjb2x1bW5cblx0XHRcdGpRdWVyeSh0aGlzKS5yZW1vdmVDbGFzcygnZHNsYy1sYXN0LWNvbCcpLmFkZENsYXNzKCdkc2xjLWZpcnN0LWNvbCcpO1xuXG5cdFx0XHQvLyBTZXQgYXJlYSBjb2x1bW4gY291bnRlciB0byB0aGUgc2l6ZSBvZiB0aGUgY3VycmVudCBhcmVhXG5cdFx0XHRjdXJyUGVyUm93QSA9IG1vZHVsZXNBcmVhU2l6ZTtcblxuXHRcdFx0Ly8gU2V0IHNob3J0Y29kZSdzIFwiZmlyc3RcIiBhdHRyaWJ1dGUgdG8geWVzXG5cdFx0XHRtb2R1bGVzQXJlYUZpcnN0U3RhdGUgPSAneWVzJztcblx0XHR9XG5cblx0XHQvLyBJZiBhcmVhIGNvbHVtbiBjb3VudGVyIHNhbWUgYXMgY3VycmVudCBhcmVhIHNpemVcblx0XHRpZiAoIGN1cnJQZXJSb3dBID09IG1vZHVsZXNBcmVhU2l6ZSApIHtcblxuXHRcdFx0Ly8gU2V0IHNob3J0Y29kZSdzIFwiZmlyc3RcIiBhdHRyaWJ1dGUgdG8geWVzXG5cdFx0XHRtb2R1bGVzQXJlYUZpcnN0U3RhdGUgPSAneWVzJztcblxuXHRcdFx0Ly8gQXBwbHkgY2xhc3NlcyB0byBjdXJyZW50IGFuZCBwcmV2aW91cyBjb2x1bW5cblx0XHRcdGpRdWVyeSh0aGlzKS5yZW1vdmVDbGFzcygnZHNsYy1sYXN0LWNvbCcpLmFkZENsYXNzKCdkc2xjLWZpcnN0LWNvbCcpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gT3BlbiB0aGUgbW9kdWxlcyBhcmVhICggYXJlYSApIHNob3J0Y29kZVxuXHRcdC8vIGNvbXBvc2VyQ29kZSA9IGNvbXBvc2VyQ29kZSArICdbZHNsY19tb2R1bGVzX2FyZWEgbGFzdD1cIicgKyBtb2R1bGVzQXJlYUxhc3RTdGF0ZSArICdcIiBmaXJzdD1cIicgKyBtb2R1bGVzQXJlYUZpcnN0U3RhdGUgKyAnXCIgc2l6ZT1cIicgKyBtb2R1bGVzQXJlYVNpemUgKyAnXCJdICc7XG5cblx0XHR2YXIgbW9kdWxlQXJlYUpTT04gPSAne1wiZWxlbWVudF90eXBlXCI6XCJtb2R1bGVfYXJlYVwiLFwibGFzdFwiOlwiJyArIG1vZHVsZXNBcmVhTGFzdFN0YXRlICsgJ1wiLFwiZmlyc3RcIjpcIicgKyBtb2R1bGVzQXJlYUZpcnN0U3RhdGUgKyAnXCIsXCJzaXplXCI6XCInICsgbW9kdWxlc0FyZWFTaXplICsgJ1wifSc7XG5cblx0XHQvLyBwYWdlQ29kZUluSnNvbiA9IHBhZ2VDb2RlSW5Kc29uICsgIG1vZHVsZUFyZWFKU09OICsgJywnO1xuXG5cdFx0bW9kdWxlQXJlYUpTT04gPSBKU09OLnBhcnNlKCBtb2R1bGVBcmVhSlNPTiApO1xuXG5cdFx0Ly8gRGVsZXRlIGF0dHJpYnV0ZSAnZ2l2ZV9uZXdfaWQnLlxuXHRcdC8vIEl0IHN1cHBvc2VkIHRvIGJlIHVzZWQgb25seSBvbmNlIGFuZCBieSB0aGlzIHRpbWUgaXQgd2FzIGFscmVhZHkgYXBwbGllZC5cblx0XHRpZiAoICB1bmRlZmluZWQgIT09IG1vZHVsZUFyZWFKU09OWydnaXZlX25ld19pZCddICkge1xuXHRcdFx0ZGVsZXRlIG1vZHVsZUFyZWFKU09OWydnaXZlX25ld19pZCddO1xuXHRcdH1cblxuXHRcdG1vZHVsZUFyZWFKU09OLmNvbnRlbnQgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIEdvIHRocm91Z2ggZWFjaCBtb2R1bGUgb2YgY3VycmVudCBhcmVhXG5cdFx0ICovXG5cblx0XHRqUXVlcnkoJy5kc2xjLW1vZHVsZS1mcm9udCcsIG1vZHVsZXNBcmVhKS5lYWNoKGZ1bmN0aW9uKCl7XG5cblx0XHRcdHZhciBkc2xjX21vZHVsZSA9IGpRdWVyeSh0aGlzKTtcblxuXHRcdFx0Ly8gVmFyc1xuXHRcdFx0bW9kdWxlX3NpemUgPSBwYXJzZUludCggZHNsY19tb2R1bGVbMF0uZ2V0QXR0cmlidXRlKCdkYXRhLWRzbGMtbW9kdWxlLXNpemUnKSApO1xuXHRcdFx0dmFyIG1vZHVsZUxhc3RTdGF0ZSA9ICdubyc7XG5cdFx0XHR2YXIgbW9kdWxlRmlyc3RTdGF0ZSA9ICdubyc7XG5cblx0XHRcdGpRdWVyeSh0aGlzKS5yZW1vdmVDbGFzcygnZHNsYy1maXJzdC1jb2wnKTtcblx0XHRcdGpRdWVyeSh0aGlzKS5yZW1vdmVDbGFzcygnZHNsYy1sYXN0LWNvbCcpO1xuXG5cdFx0XHQvLyBJbmNyZW1lbnQgbW9kdWxlcyBjb2x1bW4gY291bnRlclxuXHRcdFx0Y3VyclBlclJvdyArPSBtb2R1bGVfc2l6ZTtcblxuXHRcdFx0Ly8gSWYgbW9kdWxlcyBjb2x1bW4gY291bnRlciBzYW1lIGFzIG1heGltdW1cblx0XHRcdGlmICggY3VyclBlclJvdyA9PSBtYXhQZXJSb3cgKSB7XG5cblx0XHRcdFx0Ly8gQWRkIGNsYXNzZXMgdG8gY3VycmVudCBhbmQgbmV4dCBtb2R1bGVcblx0XHRcdFx0alF1ZXJ5KHRoaXMpLmFkZENsYXNzKCdkc2xjLWxhc3QtY29sJyk7XG5cdFx0XHRcdGpRdWVyeSh0aGlzKS5uZXh0KCcuZHNsYy1tb2R1bGUtZnJvbnQnKS5hZGRDbGFzcygnZHNsYy1maXJzdC1jb2wnKTtcblxuXHRcdFx0XHQvLyBSZXNldCBtb2R1bGVzIGNvbHVtbiBjb3VudGVyXG5cdFx0XHRcdGN1cnJQZXJSb3cgPSAwO1xuXG5cdFx0XHRcdC8vIFNldCBzaG9ydGNvZGUncyBcImxhc3RcIiBzdGF0ZSB0byBcInllc1wiXG5cdFx0XHRcdG1vZHVsZUxhc3RTdGF0ZSA9ICd5ZXMnO1xuXG5cdFx0XHRcdC8vIFNldCBzaG9yY29kZSdzIFwiZmlyc3RcIiBzdGF0ZSB0byBcInllc1wiXG5cdFx0XHRcdG1vZHVsZUZpcnN0U3RhdGUgPSAneWVzJztcblxuXG5cdFx0XHQvLyBJZiBtb2R1bGVzIGNvbHVtbiBjb3VudGVyIGJpZ2dlciB0aGFuIG1heGltdW1cblx0XHRcdH0gZWxzZSBpZiAoIGN1cnJQZXJSb3cgPiBtYXhQZXJSb3cgKSB7XG5cblx0XHRcdFx0Ly8gQWRkIGNsYXNzZXMgdG8gY3VycmVudCBhbmQgcHJldmlvdXMgbW9kdWxlXG5cdFx0XHRcdGpRdWVyeSh0aGlzKS5yZW1vdmVDbGFzcygnZHNsYy1sYXN0LWNvbCcpLmFkZENsYXNzKCdkc2xjLWZpcnN0LWNvbCcpO1xuXG5cdFx0XHRcdC8vIFNldCBtb2R1bGVzIGNvbHVtbiBjb3VudGVyIHRvIHRoZSBzaXplIG9mIGN1cnJlbnQgbW9kdWxlXG5cdFx0XHRcdGN1cnJQZXJSb3cgPSBtb2R1bGVfc2l6ZTtcblxuXHRcdFx0XHQvLyBTZXQgc2hvcnRjb2RlJ3MgXCJmaXJzdFwiIHN0YXRlIHRvIFwieWVzXCJcblx0XHRcdFx0bW9kdWxlRmlyc3RTdGF0ZSA9ICd5ZXMnO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBtb2R1bGVzIGNvbHVtbiBjb3VudGVyIHNhbWUgYXMgY3VycmVudCBtb2R1bGUgc2l6ZVxuXHRcdFx0aWYgKCBjdXJyUGVyUm93ID09IG1vZHVsZV9zaXplICkge1xuXG5cdFx0XHRcdC8vIFNldCBzaG9ydGNvZGUncyBcImZpcnN0XCIgYXR0cmlidXRlIHRvIHllc1xuXHRcdFx0XHRtb2R1bGVGaXJzdFN0YXRlID0gJ3llcyc7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY2xhc3NlcyB0byBjdXJyZW50IGFuZCBwcmV2aW91cyBjb2x1bW5cblx0XHRcdFx0alF1ZXJ5KHRoaXMpLnJlbW92ZUNsYXNzKCdkc2xjLWxhc3QtY29sJykuYWRkQ2xhc3MoJ2RzbGMtZmlyc3QtY29sJyk7XG5cblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gR2V0IG1vZHVsZSdzIExDIGRhdGFcblx0XHRcdFx0bW9kdWxlQ29kZSA9IGRzbGNfbW9kdWxlWzBdLnF1ZXJ5U2VsZWN0b3IoJy5kc2xjYS1tb2R1bGUtY29kZScpLnZhbHVlO1xuXG5cdFx0XHR9IGNhdGNoKGVycikge1xuXHRcdFx0XHRjb25zb2xlLmluZm8oICdObyBEU0xDIGNvZGUgZm91bmQgaW4gbW9kdWxlOiAnICsgZHNsY19tb2R1bGVbMF0uZ2V0QXR0cmlidXRlKCdpZCcpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggJycgIT09IG1vZHVsZUNvZGUgKSB7XG5cdFx0XHRcdC8vIEFkZCB0aGUgbW9kdWxlIHNob3J0Y29kZSBjb250YWluaW5nIHRoZSBkYXRhXG5cdFx0XHRcdC8vIGNvbXBvc2VyQ29kZSA9IGNvbXBvc2VyQ29kZSArICdbZHNsY19tb2R1bGUgbGFzdD1cIicgKyBtb2R1bGVMYXN0U3RhdGUgKyAnXCJdJyArIG1vZHVsZUNvZGUgKyAnWy9kc2xjX21vZHVsZV0gJztcblxuXHRcdFx0XHR2YXIgbW9kdWxlQ29kZUpTT04gPSBKU09OLnBhcnNlKG1vZHVsZUNvZGUpO1xuXHRcdFx0XHQvLyBBZGQgaWRpY2F0b3IgZm9yIHRoZSBsYXN0IG1vZHVsZSBpbiB0aGUgcm93LlxuXHRcdFx0XHRtb2R1bGVDb2RlSlNPTi5sYXN0ID0gbW9kdWxlTGFzdFN0YXRlO1xuXG5cdFx0XHRcdC8vIFJBVyBDT0RFIENMRUFOVVA6IENsZWFuIHRoZSBtb2R1bGUgY29kZSBmcm9tIGtleXMgd2l0aCBlbXB0eSB2YWx1ZXMuXG5cdFx0XHRcdGpRdWVyeS5lYWNoKG1vZHVsZUNvZGVKU09OLCBmdW5jdGlvbihpbmRleCwgZWwpIHtcblx0XHRcdFx0XHRpZiAoIGZhbHNlID09PSBlbCB8fCAnJyA9PT0gZWwgKSB7XG5cdFx0XHRcdFx0XHRkZWxldGUgbW9kdWxlQ29kZUpTT05baW5kZXhdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggJ2NvbnRlbnQnID09PSBpbmRleCApIHtcblx0XHRcdFx0XHRcdG1vZHVsZUNvZGVKU09OW2luZGV4XSA9IGVsLnJlcGxhY2UoL1xcXFwnL2csIFwiJ1wiKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoICdnaXZlX25ld19pZCcgPT09IGluZGV4ICkge1xuXHRcdFx0XHRcdFx0ZGVsZXRlIG1vZHVsZUNvZGVKU09OW2luZGV4XTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdC8vIFB1dCBvcHRpbWl6ZWQgY29kZSBiYWNrIGludG8gdGhlIGhpZGRlbiB0ZXh0YXJlYS5cblx0XHRcdFx0ZHNsY19tb2R1bGVbMF0ucXVlcnlTZWxlY3RvcignLmRzbGNhLW1vZHVsZS1jb2RlJykudmFsdWUgPSBKU09OLnN0cmluZ2lmeShtb2R1bGVDb2RlSlNPTik7XG5cblx0XHRcdFx0Ly8gQWRkIHRoZSBtb2R1bGUgSlNPTiBhcyBhcnJheSBpdGVtXG5cdFx0XHRcdG1vZHVsZUFyZWFKU09OWydjb250ZW50J10ucHVzaCggbW9kdWxlQ29kZUpTT04gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRml4IGJ1ZyB3aXRoIG1vZHVsZXMgZHVwbGljYXRpb24gaWYgYnJva2VuIG1vZHVsZSBzYXZlZC5cblx0XHRcdG1vZHVsZUNvZGUgPSAnJztcblxuXHRcdH0pO1xuXG5cdFx0bW9kdWxlc1NlY3Rpb25Kc29uWydjb250ZW50J10ucHVzaChtb2R1bGVBcmVhSlNPTik7XG5cblx0XHQvLyBDbG9zZSBhcmVhIHNob3J0Y29kZVxuXHRcdC8vIGNvbXBvc2VyQ29kZSA9IGNvbXBvc2VyQ29kZSArICdbL2RzbGNfbW9kdWxlc19hcmVhXSAnO1xuXHR9KTtcblxuXHR2YXIgZ2VuZXJhdGVkQ29kZSA9IEpTT04uc3RyaW5naWZ5KCBtb2R1bGVzU2VjdGlvbkpzb24gKTtcblxuXHRyZXR1cm4gZ2VuZXJhdGVkQ29kZTtcbn1cblxuLyoqXG4gKiBDT0RFIEdFTkVSQVRJT04gLSBEb2N1bWVudCBSZWFkeVxuICovXG5jb25zdCBzZXRFdmVudExpc3RlbmVycyA9ICgpID0+IHtcblxuXHQvKipcblx0ICogSG9vayAtIFNhdmUgUGFnZVxuXHQgKi9cblx0alF1ZXJ5KGRvY3VtZW50KS5vbiggJ2NsaWNrJywgJy5kc2xjYS1zYXZlLWNvbXBvc2VyLWhvb2snLCBmdW5jdGlvbihlKXtcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0Ly8gSWYgc29tZSBzYXZpbmcgYWN0aW9uIG5vdCBhbHJlYWR5IGluIHByb2dyZXNzXG5cdFx0aWYgKCAhIGpRdWVyeSgnYm9keScpLmhhc0NsYXNzKCdkc2xjYS1tb2R1bGUtc2F2aW5nLWluLXByb2dyZXNzJykgJiYgISBqUXVlcnkoJ2JvZHknKS5oYXNDbGFzcygnZHNsY2Etc2F2aW5nLWluLXByb2dyZXNzJykgKSB7XG5cdFx0XHQvLyBDYWxsIHRoZSBmdW5jdGlvbiB0byBzYXZlXG5cdFx0XHRkc2xjX3NhdmVfY29tcG9zZXIoKTtcblx0XHR9XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiBIb29rIC0gU2F2ZSBEcmFmdFxuXHQgKi9cblx0alF1ZXJ5KGRvY3VtZW50KS5vbiggJ2NsaWNrJywgJy5kc2xjYS1zYXZlLWRyYWZ0LWNvbXBvc2VyLWhvb2snLCBmdW5jdGlvbihlKXtcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHQvLyBJZiBzb21lIHNhdmluZyBhY3Rpb24gbm90IGFscmVhZHkgaW4gcHJvZ3Jlc3Ncblx0XHRpZiAoICEgalF1ZXJ5KCdib2R5JykuaGFzQ2xhc3MoJ2RzbGNhLW1vZHVsZS1zYXZpbmctaW4tcHJvZ3Jlc3MnKSAmJiAhIGpRdWVyeSgnYm9keScpLmhhc0NsYXNzKCdkc2xjYS1zYXZpbmctaW4tcHJvZ3Jlc3MnKSApIHtcblx0XHRcdC8vIENhbGwgdGhlIGZ1bmN0aW9uIHRvIHNhdmVcblx0XHRcdGRzbGNfc2F2ZV9kcmFmdF9jb21wb3NlcigpO1xuXHRcdH1cblx0fSk7XG59XG5cbi8qKlxuKiBPdGhlciAtIEdlbmVyYXRlIFJlYWRhYmxlIENvbnRlbnQgRm9yIFNlYXJjaFxuKi9cblxuZnVuY3Rpb24gZHNsY2FfZ2VuX2NvbnRlbnRfZm9yX3NlYXJjaCgpIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNhX2dlbl9jb250ZW50X2Zvcl9zZWFyY2gnICk7XG5cblx0Ly8gVmFyc1xuXHR2YXIgaG9sZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RzbGNhLWNvbnRlbnQtZm9yLXNlYXJjaCcpO1xuXG5cdGlmIChudWxsID09PSBob2xkZXIpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR2YXIgcHJldkNvbnRlbnQgPSBob2xkZXIudmFsdWU7XG5cdHZhciBjb250ZW50ID0gJyc7XG5cblx0Ly8gR28gdGhyb3VnaCBlYWNoIGNvbnRlbnQgZWxlbWVudFxuXG5cdHZhciBlbGVtZW50cyA9IExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhV2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNkc2xjLW1haW4gLmRzbGMtbW9kdWxlLWZyb250IFtkYXRhLWV4cG9ydGFibGUtY29udGVudF0nKTtcblxuXHRpZiAoIHVuZGVmaW5lZCAhPT0gZWxlbWVudHMgKSB7XG5cdFx0QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlbGVtZW50cywgZnVuY3Rpb24oZWwsIGkpe1xuXHRcdFx0Ly8gZWwgLSBjdXJyZW50IERPTSBlbGVtZW50LCBpIOKAkyBjb3VudGVyXG5cdFx0XHR2YXIgZXh0cmFjdGVkX2h0bWxfY29kZTtcblxuXHRcdFx0aWYgKCBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZXhwb3J0YWJsZS1jb250ZW50JykgIT09ICcnICkge1xuXG5cdFx0XHRcdHZhciB3cmFwcGVyX3RhZyA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1leHBvcnRhYmxlLWNvbnRlbnQnKTtcblx0XHRcdFx0ZXh0cmFjdGVkX2h0bWxfY29kZSA9ICc8JyArIHdyYXBwZXJfdGFnICsgJz4nICsgZWwuaW5uZXJIVE1MICsgJzwvJyArIHdyYXBwZXJfdGFnICsgJz4nO1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRleHRyYWN0ZWRfaHRtbF9jb2RlID0gZWwuaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGV4dHJhY3RlZF9odG1sX2NvZGUgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29udGVudCArPSBleHRyYWN0ZWRfaHRtbF9jb2RlLnJlcGxhY2UoL1xccysvZywgJyAnKS50cmltKCkgKyAnXFxuJztcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8vIFNldCB0aGUgdmFsdWUgb2YgdGhlIGNvbnRlbnQgZmllbGRcblx0aG9sZGVyLnZhbHVlID0gY29udGVudDtcblxuXHQvLyBVc2VkIHRvIHNob3cgdGhlIHB1Ymxpc2ggYnV0dG9uIGZvciBwYWdlcyBtYWRlIGJlZm9yZSB0aGlzIGZlYXR1cmVcblx0aWYgKCBwcmV2Q29udGVudCAhPT0gY29udGVudCApIHtcblxuXHRcdHdpbmRvdy5kc2xjX3Nob3dfcHVibGlzaF9idXR0b24oKTtcblx0fVxufVxuXG4vKipcbiAqIE90aGVyIC0gR2VuZXJhdGUgY29kZSBvZiBlZGl0YWJsZSBjb250ZW50XG4gKi9cbmV4cG9ydCBjb25zdCBlZGl0YWJsZUNvbnRlbnRDb2RlR2VuZXJhdGlvbiA9ICggZHNsY0ZpZWxkICkgPT4ge1xuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2VkaXRhYmxlQ29udGVudENvZGVHZW5lcmF0aW9uJyApO1xuXG5cdC8vIEluIHNvbWUgcmFyZSBjYXNlcyB3ZSBoYXZlIHRoZSBuZXh0IGVycm9yOlxuXHQvLyBUeXBlRXJyb3I6IHVuZGVmaW5lZCBpcyBub3QgYW4gb2JqZWN0IChldmFsdWF0aW5nICdkc2xjRmllbGQuaHRtbCgpLnRyaW0oKS4uLicpXG5cdGlmICggdW5kZWZpbmVkID09PSBkc2xjRmllbGQgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Y29uc3QgZHNsY01vZHVsZSA9IGRzbGNGaWVsZC5jbG9zZXN0KCcuZHNsYy1tb2R1bGUtZnJvbnQnKTtcblx0Y29uc3QgbW9kdWxlRWwgPSBkc2xjTW9kdWxlWzBdO1xuXHRjb25zdCBkc2xjQ29udGVudCA9IGRzbGNGaWVsZC5odG1sKCkudHJpbSgpLnJlcGxhY2UoLzx0ZXh0YXJlYS9nLCAnPGxjdGV4dGFyZWEnKS5yZXBsYWNlKC88XFwvdGV4dGFyZWEvZywgJzwvbGN0ZXh0YXJlYScpO1xuXHRjb25zdCBkc2xjRmllbGRJRCA9IGRzbGNGaWVsZC5kYXRhKCdpZCcpO1xuXG5cdC8vIFVwZGF0ZSBtb2R1bGUgSUQgaW4gcmF3IGJhc2U2NCBjb2RlIChkc2xjX2NvZGUpIG9mIHRoZSBtb2R1bGVcblx0TGl2ZUNvbXBvc2VyLlV0aWxzLnVwZGF0ZV9tb2R1bGVfcHJvcGVydHlfcmF3KCBtb2R1bGVFbCwgZHNsY0ZpZWxkSUQsIGRzbGNDb250ZW50ICk7XG5cdC8vIGRzbGNGaWVsZElEID0gJ2NvbnRlbnQnXG5cdC8vIGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1vcHRpb24tZnJvbnRbZGF0YS1pZD1cIicgKyBkc2xjRmllbGRJRCArICdcIl0nLCBkc2xjTW9kdWxlKS52YWwoIGRzbGNDb250ZW50ICk7XG59XG5cbmV4cG9ydCBjb25zdCBjb2RlR2VuZXJhdGlvbkluaXRKUyA9ICgpID0+IHtcblx0c2V0RXZlbnRMaXN0ZW5lcnMoKTtcbn0iLCIvKipcbiAqIFVJIC0gR2VuZXJhbCAtIEluaXRpYXRlIERyYWcgYW5kIERyb3AgRnVuY3RvbmFsaXR5XG4gKi9cblxuaW1wb3J0IHsgbW9kdWxlT3V0cHV0RGVmYXVsdCB9IGZyb20gXCIuL21vZHVsZS5qc1wiO1xuaW1wb3J0IFNvcnRhYmxlIGZyb20gJ3NvcnRhYmxlanMnO1xuXG5leHBvcnQgY29uc3QgZHJhZ0FuZERyb3BJbml0ID0gKCkgPT4ge1xuXHR2YXIgbW9kdWxlc1NlY3Rpb24sIG1vZHVsZXNBcmVhLCBtb2R1bGVJRCwgbW9kdWxlT3V0cHV0O1xuXG5cdC8vIERyYWcgYW5kIERyb3AgZm9yIG1vZHVsZSBpY29ucyBmcm9tIHRoZSBsaXN0IG9mIG1vZHVsZXNcblx0dmFyIG1vZHVsZXNfbGlzdCA9IGpRdWVyeSgnLmRzbGNhLW1vZHVsZXMgLmRzbGNhLXNlY3Rpb24tc2Nyb2xsZXItY29udGVudCcpOyAvLyBHcm91cHMgdGhhdCBjYW4gaG9sZCBtb2R1bGVzXG5cdC8vIGpRdWVyeShtb2R1bGVzX2xpc3QpLmVhY2goZnVuY3Rpb24gKGksZSkge1xuXG5cdGlmKCBtb2R1bGVzX2xpc3QubGVuZ3RoID09IDAgKSB7XG5cblx0XHRtb2R1bGVzX2xpc3QgPSBbIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnICkgXTtcblx0fVxuXG5cdHZhciBtb2R1bGVzX2xpc3Rfc29ydGFibGUgPSBTb3J0YWJsZS5jcmVhdGUobW9kdWxlc19saXN0WzBdLCB7XG5cdFx0c29ydDogZmFsc2UsIC8vIGRvIG5vdCBhbGxvdyBzb3J0aW5nIGluc2lkZSB0aGUgbGlzdCBvZiBtb2R1bGVzXG5cdFx0Z3JvdXA6IHsgbmFtZTogJ21vZHVsZXMnLCBwdWxsOiAnY2xvbmUnLCBwdXQ6IGZhbHNlIH0sXG5cdFx0YW5pbWF0aW9uOiAxNTAsXG5cdFx0aGFuZGxlOiAnLmRzbGNhLW1vZHVsZScsXG5cdFx0ZHJhZ2dhYmxlOiAnLmRzbGNhLW1vZHVsZScsXG5cdFx0Ly8gZ2hvc3RDbGFzczogJ2RzbGNhLW1vZHVsZS1wbGFjZWhvbGRlcicsXG5cdFx0Y2hvc2VuQ2xhc3M6ICdkc2xjYS1tb2R1bGUtZHJhZ2dpbmcnLFxuXHRcdHNjcm9sbDogdHJ1ZSwgLy8gb3IgSFRNTEVsZW1lbnRcblx0XHRzY3JvbGxTZW5zaXRpdml0eTogMTUwLCAvLyBweCwgaG93IG5lYXIgdGhlIG1vdXNlIG11c3QgYmUgdG8gYW4gZWRnZSB0byBzdGFydCBzY3JvbGxpbmcuXG5cdFx0c2Nyb2xsU3BlZWQ6IDE1LCAvLyBweFxuXG5cblx0XHRzZXREYXRhOiBmdW5jdGlvbiAoZGF0YVRyYW5zZmVyLCBkcmFnRWwpIHtcblx0XHQvL2RyYWdFbCDigJMgY29udGFpbnMgaHRtbCBvZiB0aGUgZHJhZ2dhYmxlIGVsZW1lbnQgbGlrZTpcblx0XHQvLzxkaXYgY2xhc3M9XCJkc2xjYS1tb2R1bGUgZHNsY2Etc2Nyb2xsZXItaXRlbSBkc2xjYS1vcmlnaW4gZHNsY2Etb3JpZ2luLUdlbmVyYWxcIiBkYXRhLWlkPVwiRFNMQ19CdXR0b25cIiBkYXRhLW9yaWdpbj1cIkdlbmVyYWxcIiBkcmFnZ2FibGU9XCJmYWxzZVwiIHN0eWxlPVwiXCI+XG5cblx0XHRcdCAgLy8gZGF0YVRyYW5zZmVyLnNldERhdGEoJ1RleHQnLCBkcmFnRWwudGV4dENvbnRlbnQpO1xuXHRcdFx0ZGF0YVRyYW5zZmVyLnNldERhdGEoTGl2ZUNvbXBvc2VyLlV0aWxzLm1zaWV2ZXJzaW9uKCkgIT09IGZhbHNlID8gJ1RleHQnIDogJ3RleHQvaHRtbCcsIGRyYWdFbC5pbm5lckhUTUwpO1xuXHRcdH0sXG5cblx0XHQvLyBkcmFnZ2luZyBzdGFydGVkXG5cdFx0b25TdGFydDogZnVuY3Rpb24gKC8qKkV2ZW50Ki9ldnQpIHtcblx0XHRcdGV2dC5vbGRJbmRleDsgIC8vIGVsZW1lbnQgaW5kZXggd2l0aGluIHBhcmVudFxuXG5cdFx0XHQvLyBqUXVlcnkoICcuZHNsYy1tb2R1bGVzLWFyZWEnICkuc29ydGFibGUoIFwicmVmcmVzaFBvc2l0aW9uc1wiICk7XG5cdFx0XHRqUXVlcnkoJ2JvZHknKS5yZW1vdmVDbGFzcygnZHNsY2EtbmV3LW1vZHVsZS1kcmFnLW5vdC1pbi1wcm9ncmVzcycpLmFkZENsYXNzKCdkc2xjYS1uZXctbW9kdWxlLWRyYWctaW4tcHJvZ3Jlc3MnKTtcblx0XHRcdGpRdWVyeSgnYm9keScsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLnJlbW92ZUNsYXNzKCdkc2xjYS1uZXctbW9kdWxlLWRyYWctbm90LWluLXByb2dyZXNzJykuYWRkQ2xhc3MoJ2RzbGNhLW5ldy1tb2R1bGUtZHJhZy1pbi1wcm9ncmVzcycpO1xuXHRcdFx0alF1ZXJ5KCcjZHNsYy1oZWFkZXInKS5hZGRDbGFzcygnZHNsY2EtaGVhZGVyLWxvdy16LWluZGV4Jyk7XG5cdFx0fSxcblxuXHRcdC8vIGRyYWdnaW5nIGVuZGVkXG5cdFx0b25FbmQ6IGZ1bmN0aW9uICgvKipFdmVudCovZXZ0KSB7XG5cdFx0XHRldnQub2xkSW5kZXg7ICAvLyBlbGVtZW50J3Mgb2xkIGluZGV4IHdpdGhpbiBwYXJlbnRcblx0XHRcdGV2dC5uZXdJbmRleDsgIC8vIGVsZW1lbnQncyBuZXcgaW5kZXggd2l0aGluIHBhcmVudFxuXG5cdFx0XHR2YXIgaXRlbUVsID0gZXZ0Lml0ZW07ICAvLyBkcmFnZ2VkIEhUTUxcblx0XHRcdGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0Ly8gZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0Ly9yZXR1cm4gZmFsc2U7XG5cblx0XHRcdC8vIFByZXZlbnQgZHJvcCBpbnRvIG1vZHVsZXMgbGlzdGluZ1xuXHRcdFx0aWYoalF1ZXJ5KGl0ZW1FbCkuY2xvc2VzdCgnLmRzbGNhLXNlY3Rpb24tc2Nyb2xsZXItY29udGVudCcpLmxlbmd0aCA+IDApIHJldHVybiBmYWxzZTtcblxuXHRcdFx0alF1ZXJ5KCAnLmRzbGNhLW9wdGlvbnMtaG92ZXJlZCcsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQgKS5yZW1vdmVDbGFzcygnZHNsY2Etb3B0aW9ucy1ob3ZlcmVkJyk7XG5cblx0XHRcdC8vIFZhcnNcblx0XHRcdG1vZHVsZXNBcmVhID0galF1ZXJ5KGl0ZW1FbC5wYXJlbnROb2RlKTsgLy9qUXVlcnkodGhpcyk7XG5cdFx0XHRtb2R1bGVJRCA9IGl0ZW1FbC5kYXRhc2V0LmlkOyAvLyBnZXQgdmFsdWUgb2YgZGF0YS1pZCBhdHRyLlxuXG5cdFx0XHR3aW5kb3cuZHNsY19nZW5lcmF0ZV9jb2RlKCk7XG5cblx0XHRcdGlmICggbW9kdWxlSUQgPT0gJ0RTTENfTV9BJyB8fCBqUXVlcnkoJ2JvZHknKS5oYXNDbGFzcygnZHNsY2EtbW9kdWxlLWRyb3AtaW4tcHJvZ3Jlc3MnKSB8fFxuXHRcdFx0XHRtb2R1bGVzQXJlYS5jbG9zZXN0KCcjZHNsYy1oZWFkZXInKS5sZW5ndGggfHwgbW9kdWxlc0FyZWEuY2xvc2VzdCgnI2RzbGMtZm9vdGVyJykubGVuZ3RoICkge1xuXG5cdFx0XHRcdC8vIG5vdGhpbmdcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRqUXVlcnkoJ2JvZHknKS5hZGRDbGFzcygnZHNsY2EtbW9kdWxlLWRyb3AtaW4tcHJvZ3Jlc3MnKTtcblxuXHRcdFx0XHQvLyBBZGQgcGFkZGluZyB0byBtb2R1bGVzIGFyZWFcblx0XHRcdFx0Lypcblx0XHRcdFx0aWYgKCBtb2R1bGVzQXJlYS5oYXNDbGFzcygnZHNsYy1tb2R1bGVzLWFyZWEtbm90LWVtcHR5JykgKVxuXHRcdFx0XHRcdG1vZHVsZXNBcmVhLmFuaW1hdGUoeyBwYWRkaW5nQm90dG9tIDogNTAgfSwgMTUwKTtcblx0XHRcdFx0Ki9cblxuXHRcdFx0XHQvLyBUT0RPOiBPcHRpbWl6ZSBleHBlbnNpdmUgYWpheCBjYWxsIGluIHRoaXMgZnVuY3Rpb24hXG5cdFx0XHRcdC8vIExvYWQgT3V0cHV0XG5cdFx0XHRcdG1vZHVsZU91dHB1dERlZmF1bHQoIG1vZHVsZUlELCBmdW5jdGlvbiggcmVzcG9uc2UgKXtcblxuXHRcdFx0XHRcdC8vIEFwcGVuZCBDb250ZW50XG5cdFx0XHRcdFx0bW9kdWxlT3V0cHV0ID0gcmVzcG9uc2Uub3V0cHV0O1xuXG5cdFx0XHRcdFx0Ly8gUmVtb3ZlIGV4dHJhIHBhZGRpbmcgZnJvbSBhcmVhXG5cdFx0XHRcdFx0Ly8gbW9kdWxlc0FyZWEuY3NzKHsgcGFkZGluZ0JvdHRvbSA6IDAgfSk7XG5cblx0XHRcdFx0XHQvLyBBZGQgb3V0cHV0XG5cdFx0XHRcdFx0Ly8gVE9ETzogb3B0aW1pemUgalF1ZXJ5IGluIHRoZSBzdHJpbmcgYmVsb3dcblxuXHRcdFx0XHRcdHZhciBkc2xjSnVzdEFkZGVkID0gTGl2ZUNvbXBvc2VyLlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRCdWlsZGVyLlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRIZWxwZXJzLlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpbnNlcnRNb2R1bGUoIG1vZHVsZU91dHB1dCwgalF1ZXJ5KCcuZHNsY2EtbW9kdWxlJywgbW9kdWxlc0FyZWEpICk7XG5cblxuXHRcdFx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5kc2xjX21hc29ucnkoKTtcblx0XHRcdFx0XHRcdGpRdWVyeSgnYm9keScpLnJlbW92ZUNsYXNzKCdkc2xjYS1tb2R1bGUtZHJvcC1pbi1wcm9ncmVzcycpO1xuXHRcdFx0XHRcdH0sIDcwMCApO1xuXG5cdFx0XHRcdFx0Ly8gXCJTaG93XCIgbm8gY29udGVudCB0ZXh0IC8vIE5vdCB1c2VkIGFueW1vcmU/XG5cdFx0XHRcdFx0Ly8galF1ZXJ5KCcuZHNsY2Etbm8tY29udGVudC1wcmltYXJ5JywgbW9kdWxlc0FyZWEgKS5jc3MoeyBvcGFjaXR5IDogMSB9KTtcblxuXHRcdFx0XHRcdC8vIFwiU2hvd1wiIG1vZHVsZXMgYXJlYSBtYW5hZ2VtZW50XG5cdFx0XHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlcy1hcmVhLW1hbmFnZScsIG1vZHVsZXNBcmVhKS5jc3MgKHsgdmlzaWJpbGl0eSA6ICd2aXNpYmxlJyB9KTtcblxuXHRcdFx0XHRcdC8vIEdlbmVyZXRlXG5cdFx0XHRcdFx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFXaW5kb3cuZHNsY19jYXJvdXNlbCgpO1xuXHRcdFx0XHRcdExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhV2luZG93LmRzbGNfdGFicygpO1xuXHRcdFx0XHRcdExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhV2luZG93LmRzbGNfaW5pdF9hY2NvcmRpb24oKTtcblxuXHRcdFx0XHRcdHdpbmRvdy5kc2xjX2dlbmVyYXRlX2NvZGUoKTtcblx0XHRcdFx0XHQvLyBTaG93IHB1Ymxpc2hcblx0XHRcdFx0XHR3aW5kb3cuZHNsY19zaG93X3B1Ymxpc2hfYnV0dG9uKCk7XG5cblx0XHRcdFx0XHQvLyBMaXZlQ29tcG9zZXIuQnVpbGRlci5VSS5pbml0SW5saW5lRWRpdG9ycygpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHQvLyBMb2FkaW5nIGFuaW1hdGlvblxuXG5cdFx0XHRcdC8vIFNob3cgbG9hZGVyIOKAkyBOb3QgdXNlZCBhbnltb3JlLlxuXHRcdFx0XHQvLyBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtbG9hZGluZycsIG1vZHVsZXNBcmVhKS5zaG93KCk7XG5cblx0XHRcdFx0Ly8gQ2hhbmdlIG1vZHVsZSBpY29uIHRvIHRoZSBzcGlubmluZyBsb2FkZXIuXG5cdFx0XHRcdGpRdWVyeShpdGVtRWwpLmZpbmQoJy5kc2xjYS1pY29uJykuYXR0cignY2xhc3MnLCAnJykuYXR0cignY2xhc3MnLCAnZHNsY2EtaWNvbiBkc2xjLWljb24tcmVmcmVzaCBkc2xjLWljb24tc3BpbicpO1xuXG5cblx0XHRcdFx0Ly8gSGlkZSBubyBjb250ZW50IHRleHQgLy8gTm90IHVzZWQgYW55bW9yZT9cblx0XHRcdFx0Ly8galF1ZXJ5KCcuZHNsY2Etbm8tY29udGVudC1wcmltYXJ5JywgbW9kdWxlc0FyZWEpLmNzcyh7IG9wYWNpdHkgOiAwIH0pO1xuXG5cdFx0XHRcdC8vIEhpZGUgbW9kdWxlcyBhcmVhIG1hbmFnZW1lbnRcblx0XHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlcy1hcmVhLW1hbmFnZScsIG1vZHVsZXNBcmVhKS5jc3MgKHsgdmlzaWJpbGl0eSA6ICdoaWRkZW4nIH0pO1xuXG5cdFx0XHRcdC8vIEFuaW1hdGUgbG9hZGluZ1xuXHRcdFx0XHQvKlxuXHRcdFx0XHR2YXIgcmFuZG9tTG9hZGluZ1RpbWUgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMTAwIC0gNTAgKyAxKSArIDUwKSAqIDEwMDtcblx0XHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWxvYWRpbmctaW5uZXInLCBtb2R1bGVzQXJlYSkuY3NzKHsgd2lkdGggOiAwIH0pLmFuaW1hdGUoe1xuXHRcdFx0XHRcdHdpZHRoIDogJzEwMCUnXG5cdFx0XHRcdH0sIHJhbmRvbUxvYWRpbmdUaW1lLCAnbGluZWFyJyApO1xuXHRcdFx0XHQqL1xuXHRcdFx0fVxuXG5cdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5VSS5zdG9wU2Nyb2xsZXIoKTtcblx0XHRcdGpRdWVyeSgnYm9keScpLnJlbW92ZUNsYXNzKCdkc2xjYS1uZXctbW9kdWxlLWRyYWctaW4tcHJvZ3Jlc3MnKS5hZGRDbGFzcygnZHNsY2EtbmV3LW1vZHVsZS1kcmFnLW5vdC1pbi1wcm9ncmVzcycpO1xuXHRcdFx0alF1ZXJ5KCdib2R5JywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkucmVtb3ZlQ2xhc3MoJ2RzbGNhLW5ldy1tb2R1bGUtZHJhZy1pbi1wcm9ncmVzcycpLmFkZENsYXNzKCdkc2xjYS1uZXctbW9kdWxlLWRyYWctbm90LWluLXByb2dyZXNzJyk7XG5cdFx0XHRqUXVlcnkoJyNkc2xjLWhlYWRlcicpLnJlbW92ZUNsYXNzKCdkc2xjYS1oZWFkZXItbG93LXotaW5kZXgnKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudCBpcyBkcm9wcGVkIGludG8gdGhlIGxpc3QgZnJvbSBhbm90aGVyIGxpc3Rcblx0XHRvbkFkZDogZnVuY3Rpb24gKC8qKkV2ZW50Ki9ldnQpIHtcblx0XHRcdHZhciBpdGVtRWwgPSBldnQuaXRlbTsgIC8vIGRyYWdnZWQgSFRNTEVsZW1lbnRcblx0XHRcdGV2dC5mcm9tOyAgLy8gcHJldmlvdXMgbGlzdFxuXHRcdFx0Ly8gKyBpbmRleGVzIGZyb20gb25FbmRcblx0XHRcdC8vIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH0sXG5cblx0XHQvLyBDaGFuZ2VkIHNvcnRpbmcgd2l0aGluIGxpc3Rcblx0XHRvblVwZGF0ZTogZnVuY3Rpb24gKC8qKkV2ZW50Ki9ldnQpIHtcblx0XHRcdHZhciBpdGVtRWwgPSBldnQuaXRlbTsgIC8vIGRyYWdnZWQgSFRNTEVsZW1lbnRcblx0XHRcdC8vICsgaW5kZXhlcyBmcm9tIG9uRW5kXG5cdFx0XHR3aW5kb3cuZHNsY19zaG93X3B1Ymxpc2hfYnV0dG9uKCk7XG5cdFx0XHQvLyBldnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9LFxuXG5cdFx0Ly8gQ2FsbGVkIGJ5IGFueSBjaGFuZ2UgdG8gdGhlIGxpc3QgKGFkZCAvIHVwZGF0ZSAvIHJlbW92ZSlcblx0XHRvblNvcnQ6IGZ1bmN0aW9uICgvKipFdmVudCovZXZ0KSB7XG5cdFx0XHQvLyBzYW1lIHByb3BlcnRpZXMgYXMgb25VcGRhdGVcblx0XHRcdGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0Ly8gZXZ0LnN0b3BQcm9wYWdhdGlvbigpOyByZXR1cm4gZmFsc2U7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0IGludG8gYW5vdGhlciBsaXN0XG5cdFx0b25SZW1vdmU6IGZ1bmN0aW9uICgvKipFdmVudCovZXZ0KSB7XG5cdFx0XHQgIC8vIHNhbWUgcHJvcGVydGllcyBhcyBvblVwZGF0ZVxuXHRcdH0sXG5cblx0XHQvLyBBdHRlbXB0IHRvIGRyYWcgYSBmaWx0ZXJlZCBlbGVtZW50XG5cdFx0b25GaWx0ZXI6IGZ1bmN0aW9uICgvKipFdmVudCovZXZ0KSB7XG5cdFx0XHR2YXIgaXRlbUVsID0gZXZ0Lml0ZW07ICAvLyBIVE1MRWxlbWVudCByZWNlaXZpbmcgdGhlIGBtb3VzZWRvd258dGFwc3RhcnRgIGV2ZW50LlxuXHRcdH0sXG5cblx0XHQvLyBFdmVudCB3aGVuIHlvdSBtb3ZlIGFuIGl0ZW0gaW4gdGhlIGxpc3Qgb3IgYmV0d2VlbiBsaXN0c1xuXHRcdG9uTW92ZTogZnVuY3Rpb24gKC8qKkV2ZW50Ki9ldnQpIHtcblx0XHRcdC8vIEV4YW1wbGU6IGh0dHA6Ly9qc2Jpbi5jb20vdHV5YWZlLzEvZWRpdD9qcyxvdXRwdXRcblx0XHRcdGV2dC5kcmFnZ2VkOyAvLyBkcmFnZ2VkIEhUTUxFbGVtZW50XG5cdFx0XHRldnQuZHJhZ2dlZFJlY3Q7IC8vIFRleHRSZWN0YW5nbGUge2xlZnQsIHRvcCwgcmlnaHQg0LggYm90dG9tfVxuXHRcdFx0ZXZ0LnJlbGF0ZWQ7IC8vIEhUTUxFbGVtZW50IG9uIHdoaWNoIGhhdmUgZ3VpZGVkXG5cdFx0XHRldnQucmVsYXRlZFJlY3Q7IC8vIFRleHRSZWN0YW5nbGVcblx0XHRcdC8vIHJldHVybiBmYWxzZTsg4oCUIGZvciBjYW5jZWxcblx0XHRcdGpRdWVyeSggZXZ0LnRvICkuYWRkQ2xhc3MoJ2RzbGNhLW9wdGlvbnMtaG92ZXJlZCcpO1xuXHRcdH1cblx0fSk7XG59XG4iLCIvKipcbiAqIFRoZSBwbGFjZSB0byBkbyBhbGwgdGhlIGV2ZW50cyBiaW5kaW5ncy5cbiAqL1xuXG5leHBvcnQgY29uc3QgZXZlbnRzSW5pdCA9ICgpID0+e1xuXHQvLyBQYXJlbnQgcGFnZSBldmVudHMuXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0aWYgKCBldmVudC50YXJnZXQubWF0Y2hlcyggJ1tkYXRhLWV2ZW50PVwibW9kYWwtd3lzaXd5Zy1jYW5jZWxcIl0nICkgKSB7XG5cdFx0XHQvLyBDcmVhdGUgYSBuZXcgXCJNb2RhbCBDYW5jZWxcIiBldmVudFxuXHRcdFx0Y29uc3QgbW9kYWxXeXNpd3lnQ2FuY2VsID0gbmV3IEN1c3RvbUV2ZW50KCdtb2RhbFd5c2l3eWdDYW5jZWwnLCB7IGRldGFpbDogZXZlbnQudGFyZ2V0IH0pO1xuXHRcdFx0ZG9jdW1lbnQuZGlzcGF0Y2hFdmVudCggbW9kYWxXeXNpd3lnQ2FuY2VsICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBldmVudC50YXJnZXQubWF0Y2hlcyggJ1tkYXRhLWV2ZW50PVwibW9kYWwtd3lzaXd5Zy1jb25maXJtXCJdJyApICkge1xuXHRcdFx0Ly8gQ3JlYXRlIGEgbmV3IFwiTW9kYWwgQ2FuY2VsXCIgZXZlbnRcblx0XHRcdGNvbnN0IG1vZGFsV3lzaXd5Z0NvbmZpcm0gPSBuZXcgQ3VzdG9tRXZlbnQoJ21vZGFsV3lzaXd5Z0NvbmZpcm0nLCB7IGRldGFpbDogZXZlbnQudGFyZ2V0IH0pO1xuXHRcdFx0ZG9jdW1lbnQuZGlzcGF0Y2hFdmVudCggbW9kYWxXeXNpd3lnQ29uZmlybSApO1xuXHRcdH1cblx0fSwgZmFsc2UpO1xuXG5cdC8vIFByZXZpZXcgaWZyYW1lIGV2ZW50cy5cblx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFXaW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0aWYgKCBldmVudC50YXJnZXQubWF0Y2hlcyggJ1tkYXRhLWV2ZW50PVwibW9kdWxlLWVkaXRcIl0nICkgKSB7XG5cdFx0XHQvLyBDcmVhdGUgYSBuZXcgXCJPcGVuIE1vZHVsZSBFZGl0aW5nXCIgZXZlbnRcblx0XHRcdGNvbnN0IG1vZHVsZUVkaXQgPSBuZXcgQ3VzdG9tRXZlbnQoJ21vZHVsZUVkaXQnLCB7IGRldGFpbDogZXZlbnQudGFyZ2V0IH0pO1xuXHRcdFx0ZG9jdW1lbnQuZGlzcGF0Y2hFdmVudCggbW9kdWxlRWRpdCApO1xuXHRcdH1cblxuXHRcdGlmICggZXZlbnQudGFyZ2V0Lm1hdGNoZXMoICdbZGF0YS1ldmVudD1cIm1vZHVsZS1kdXBsaWNhdGVcIl0nICkgKSB7XG5cdFx0XHQvLyBDcmVhdGUgYSBuZXcgXCJEdXBsaWNhdGUgTW9kdWxlXCIgZXZlbnRcblx0XHRcdGNvbnN0IG1vZHVsZUR1cGxpY2F0ZSA9IG5ldyBDdXN0b21FdmVudCgnbW9kdWxlRHVwbGljYXRlJywgeyBkZXRhaWw6IGV2ZW50LnRhcmdldCB9KTtcblx0XHRcdGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoIG1vZHVsZUR1cGxpY2F0ZSApO1xuXHRcdH1cblxuXHRcdGlmICggZXZlbnQudGFyZ2V0Lm1hdGNoZXMoICdbZGF0YS1ldmVudD1cIm1vZHVsZS1kZWxldGVcIl0nICkgKSB7XG5cdFx0XHQvLyBDcmVhdGUgYSBuZXcgXCJEZWxldGUgTW9kdWxlXCIgZXZlbnRcblx0XHRcdGNvbnN0IG1vZHVsZURlbGV0ZSA9IG5ldyBDdXN0b21FdmVudCgnbW9kdWxlRGVsZXRlJywgeyBkZXRhaWw6IGV2ZW50LnRhcmdldCB9KTtcblx0XHRcdGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoIG1vZHVsZURlbGV0ZSApO1xuXHRcdH1cblxuXHRcdGlmICggZXZlbnQudGFyZ2V0Lm1hdGNoZXMoICcuZHNsY2EtY2hhbmdlLXdpZHRoLW1vZHVsZS1vcHRpb25zIFtkYXRhLXNpemVdJyApICkge1xuXHRcdFx0Ly8gQ3JlYXRlIGEgbmV3IFwiQ2hhbmdlIE1vZHVsZSBXaWR0aFwiIGV2ZW50XG5cdFx0XHRjb25zdCBtb2R1bGVDaGFuZ2VXaWR0aCA9IG5ldyBDdXN0b21FdmVudCgnbW9kdWxlQ2hhbmdlV2lkdGgnLCB7IGRldGFpbDogZXZlbnQudGFyZ2V0IH0pO1xuXHRcdFx0ZG9jdW1lbnQuZGlzcGF0Y2hFdmVudCggbW9kdWxlQ2hhbmdlV2lkdGggKTtcblx0XHR9XG5cblx0XHRpZiAoIGV2ZW50LnRhcmdldC5tYXRjaGVzKCAnW2RhdGEtZXZlbnQ9XCJ3eXNpd3lnLWVkaXRcIl0nICkgKSB7XG5cdFx0XHQvLyBDcmVhdGUgYSBuZXcgXCJNb2R1bGUgV1lTSVdZRyBFZGl0aW5nXCIgZXZlbnRcblx0XHRcdGNvbnN0IHd5c2l3eWdFZGl0ID0gbmV3IEN1c3RvbUV2ZW50KCd3eXNpd3lnRWRpdCcsIHsgZGV0YWlsOiBldmVudC50YXJnZXQgfSk7XG5cdFx0XHRkb2N1bWVudC5kaXNwYXRjaEV2ZW50KCB3eXNpd3lnRWRpdCApO1xuXHRcdH1cblxuXHR9LCBmYWxzZSk7XG59IiwiLyoqXG4gKiBNYWluIGJ1aWxkZXIgZmlsZVxuICovXG5cbmltcG9ydCB7IHRlbXBsYXRlc1BhbmVsSW5pdCB9IGZyb20gJy4vdGVtcGxhdGVzLmpzJztcbmltcG9ydCB7IGZpeENvbnRlbnRlZGl0YWJsZSwga2V5cHJlc3NFdmVudHMgfSBmcm9tICcuL3VpZ2VuZXJhbC5qcyc7XG5pbXBvcnQgeyBDU2VjdGlvbnNDb250YWluZXIgfSBmcm9tICcuL3NlY3Rpb25zY29udGFpbmVyLmNsYXNzLmpzJztcbmltcG9ydCB7IHNldHRpbmdzUGFuZWxJbml0IH0gZnJvbSAnLi9zZXR0aW5ncy5wYW5lbC5qcyc7XG5pbXBvcnQgeyBzZWN0aW9uc0luaXQgfSBmcm9tICcuL3NlY3Rpb25zLmpzJztcbmltcG9ydCB7IGRyYWdBbmREcm9wSW5pdCB9IGZyb20gJy4vZHJhZ25kcm9wLmpzJztcbmltcG9ydCB7IGNvZGVHZW5lcmF0aW9uSW5pdEpTIH0gZnJvbSAnLi9jb2RlZ2VuZXJhdGlvbi5qcyc7XG5pbXBvcnQgeyBpbml0UHJldmlld0FyZWFTY3JvbGxlciB9IGZyb20gJy4vc2Nyb2xsZXIuanMnO1xuaW1wb3J0IHsgdW50aWxzSW5pdEpzIH0gZnJvbSAnLi91dGlscy5jbGFzcy5qcyc7XG5pbXBvcnQgeyBtb2RhbHdpbmRvd0luaXRKUyB9IGZyb20gJy4vbW9kYWx3aW5kb3cuanMnO1xuaW1wb3J0IHsgbW9kdWxlSW5pdEpTIH0gZnJvbSAnLi9tb2R1bGUuanMnO1xuaW1wb3J0IHsgcHJlc2V0c0luaXQgfSBmcm9tIFwiLi9wcmVzZXRzLmpzXCI7XG5pbXBvcnQgeyBldmVudHNJbml0IH0gZnJvbSAnLi9ldmVudHMuanMnO1xuXG5cbnZhciBkc2xjRGVidWcgPSBmYWxzZTtcbi8vIGRzbGNEZWJ1ZyA9IHRydWU7XG5cbi8vIEdsb2JhbCBQbHVnaW4gT2JqZWN0XG53aW5kb3cuTGl2ZUNvbXBvc2VyID0ge1xuXG4gICAgQnVpbGRlcjoge1xuXG4gICAgICAgIEVsZW1lbnRzOiB7fSxcbiAgICAgICAgVUk6IHt9LFxuICAgICAgICBBY3Rpb25zOiB7fSxcbiAgICAgICAgRmxhZ3M6IHt9LFxuICAgICAgICBQcmV2aWV3RnJhbWU6IHt9LFxuICAgICAgICBIZWxwZXJzOiB7fVxuICAgIH0sXG4gICAgUHJvZHVjdGlvbjoge1xuXG4gICAgfSxcbiAgICBVdGlsczoge31cbn07XG5cbihmdW5jdGlvbigpe1xuXG5cdExpdmVDb21wb3Nlci5CdWlsZGVyLkZsYWdzID0ge1xuXG5cdFx0d2luZG93U2Nyb2xsZXI6IGZhbHNlLFxuXHRcdHBhbmVsT3BlbmVkOiBmYWxzZSwgLy8gU2V0dGluZ3MgcGFuZWwgb3BlbmVkXG5cdFx0dWlIaWRkZW46IGZhbHNlLCAvLyBleCBjb21wb3Nlci1oaWRkZW5cblx0XHRtb2RhbE9wZW46IGZhbHNlLFxuXG5cdFx0Ly8gVXNlZCB0byBwcmV2ZW50IG11bHRpcGxlIGNvZGUgZ2VuZXJhdGlvbiB3aGVuXG5cdFx0Ly8gY2FuY2VsbGluZyByb3cgZWRpdHNcblx0XHRnZW5lcmF0ZV9jb2RlX2FmdGVyX3Jvd19jaGFuZ2VkOiB0cnVlXG5cdH07XG5cblx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuQWN0aW9ucyA9IHtcblxuXHRcdHBvc3Rwb25lZF9hY3Rpb25zX3F1ZXVlOiB7fSxcblx0XHRhZGRfcG9zdHBvbmVkX2FjdGlvbjogZnVuY3Rpb24oIGFjdGlvbl9uYW1lICkge1xuXG5cdFx0XHRpZiAoYWN0aW9uX25hbWUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0ICAgcmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlzTmFOICggdGhpcy5wb3N0cG9uZWRfYWN0aW9uc19xdWV1ZVsgYWN0aW9uX25hbWUgXSApICkge1xuXHRcdFx0XHR0aGlzLnBvc3Rwb25lZF9hY3Rpb25zX3F1ZXVlWyBhY3Rpb25fbmFtZSBdID0gMDtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5wb3N0cG9uZWRfYWN0aW9uc19xdWV1ZVsgYWN0aW9uX25hbWUgXSArPSAxO1xuXHRcdH0sXG5cblx0XHRyZWxlYXNlX3Bvc3Rwb25lZF9hY3Rpb25zOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHRqUXVlcnkuZWFjaCggdGhpcy5wb3N0cG9uZWRfYWN0aW9uc19xdWV1ZSwgZnVuY3Rpb24oaW5kZXgsIHZhbHVlKSB7XG5cblx0XHRcdFx0aWYgKCAxIDwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0c2VsZi5wb3N0cG9uZWRfYWN0aW9uc19xdWV1ZVtpbmRleF0gLT0gMTtcblx0XHRcdFx0fSBlbHNlIGlmICggMSA9PSB2YWx1ZSApIHtcblx0XHRcdFx0XHR3aW5kb3dbaW5kZXhdKCk7IC8vIFJ1biBmdW5jdGlvbiB3aXRoIGFjdGlvbiBuYW1lXG5cdFx0XHRcdFx0c2VsZi5wb3N0cG9uZWRfYWN0aW9uc19xdWV1ZVtpbmRleF0gLT0gMTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdC8vIExpdmVDb21wb3Nlci5CdWlsZGVyLkFjdGlvbnMub3B0aW9uc0NoYW5nZWQoKSAtIGlmIGNhbGxpbmcgZnJvbSBwYXJlbnQuXG5cdFx0Ly8gcGFyZW50LkxpdmVDb21wb3Nlci5CdWlsZGVyLkFjdGlvbnMub3B0aW9uc0NoYW5nZWQoKSAtIGlmIGNhbGxpbmcgZnJvbSBpZnJhbWUuXG5cdFx0b3B0aW9uc0NoYW5nZWQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHdpbmRvdy5kc2xjX3Nob3dfcHVibGlzaF9idXR0b24oKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogSW5zZXJ0cyBtb2R1bGUgZml4aW5nIGlubGluZSBzY3JpcHRzIGJ1Z1xuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlSFRNTFxuXHQgKiBAcGFyYW0ge3N0cmluZ30gYWZ0ZXJPYmplY3QgYWZ0ZXIgd2hhdCBtb2R1bGUgc2hvdWxkIGJlIGluc2VydGVkXG5cdCAqXG5cdCAqIEByZXR1cm4ge0RPTX0gaW5zZXJ0ZWQgb2JqZWN0XG5cdCAqL1xuXHRMaXZlQ29tcG9zZXIuQnVpbGRlci5IZWxwZXJzLmluc2VydE1vZHVsZSA9IGZ1bmN0aW9uKCBtb2R1bGVIVE1MLCBhZnRlck9iamVjdCApIHtcblxuXHRcdHZhciBuZXdNb2R1bGUgPSBqUXVlcnkobW9kdWxlSFRNTCksXG5cdFx0XHRhZnRlck9iamVjdCA9IGpRdWVyeShhZnRlck9iamVjdCk7XG5cblx0XHR2YXIgc2NyaXB0cyA9IFtdO1xuXG5cdFx0bmV3TW9kdWxlLmZpbmQoJ3NjcmlwdCcpLmVhY2goZnVuY3Rpb24oKXtcblxuXHRcdFx0c2NyaXB0cy5wdXNoKHRoaXMuaW5uZXJIVE1MKTtcblx0XHRcdHRoaXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzKTtcblx0XHR9KTtcblxuXHRcdC8vIEluc2VydCAndXBkYXRlZCcgbW9kdWxlIG91dHB1dCBhZnRlciBtb2R1bGUgd2UgYXJlIGVkaXRpbmcuXG5cdFx0Ly8gJiYgRGVsZXRlICdvbGQnIGluc3RhbmNlIG9mIHRoZSBtb2R1bGUgd2UgYXJlIGVkaXRpbmcuXG5cdFx0YWZ0ZXJPYmplY3Rcblx0XHRcdC5hZnRlcihuZXdNb2R1bGUpXG5cdFx0XHQucmVtb3ZlKCk7XG5cblx0XHRzY3JpcHRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuXG5cdFx0XHR2YXIgc2NyaXB0ID0gTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudFswXS5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblx0XHRcdHNjcmlwdC5pbm5lckhUTUwgPSBpdGVtO1xuXHRcdFx0c2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcblxuXHRcdFx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudFswXS5nZXRFbGVtZW50QnlJZChuZXdNb2R1bGVbMF0uaWQpLmFwcGVuZENoaWxkKHNjcmlwdCk7XG5cdFx0fSk7XG5cblx0XHRzY3JpcHRzID0gbnVsbDtcblx0XHRhZnRlck9iamVjdCA9IG51bGw7XG5cblx0XHRyZXR1cm4gbmV3TW9kdWxlO1xuXHR9XG59KCkpO1xuXG4vKiogV2FpdCB0aWxsIHRpbnlNQ0UgbG9hZGVkICovXG53aW5kb3cucHJldmlld0FyZWFUaW55TUNFTG9hZGVkID0gZnVuY3Rpb24oIHdpbmRvd09iaiApe1xuXHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdyA9IHdpbmRvd09iajtcblx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCA9IGpRdWVyeSh3aW5kb3dPYmouZG9jdW1lbnQpO1xuXG5cdC8vIERpc2FibGUgV1AgYWRtaW4gYmFyIGluIGVkaXRpbmcgbW9kZVxuXHRqUXVlcnkoJyN3cGFkbWluYmFyJywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkucmVtb3ZlKCk7XG5cblx0Ly8gTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuVUkuaW5pdElubGluZUVkaXRvcnMoKTtcblx0Zml4Q29udGVudGVkaXRhYmxlKCk7XG5cblx0dGVtcGxhdGVzUGFuZWxJbml0KCk7XG5cdHNldHRpbmdzUGFuZWxJbml0KCk7XG5cblx0c2VjdGlvbnNJbml0KCk7XG5cblx0dmFyIG1haW5EcmFnZ2FibGUgPSBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50LmZpbmQoXCIjZHNsYy1tYWluXCIpLmVxKDApWzBdO1xuXHRuZXcgQ1NlY3Rpb25zQ29udGFpbmVyKCBtYWluRHJhZ2dhYmxlICk7XG5cblx0alF1ZXJ5KGRvY3VtZW50KS50cmlnZ2VyKCdlZGl0b3JGcmFtZUxvYWRlZCcpO1xuXHRkcmFnQW5kRHJvcEluaXQoKTtcblx0Y29kZUdlbmVyYXRpb25Jbml0SlMoKTtcblx0d2luZG93LmRzbGNfZ2VuZXJhdGVfY29kZSgpO1xuXG5cdC8vIENhdGNoIGtleXByZXNzIGV2ZW50cyAoZnJvbSBib3RoIHBhcmVudCBhbmQgaWZyYW1lKSB0byBhZGQga2V5Ym9hcmQgc3VwcG9ydFxuXHRrZXlwcmVzc0V2ZW50cygpO1xuXHRpbml0UHJldmlld0FyZWFTY3JvbGxlcigpO1xuXHRtb2RhbHdpbmRvd0luaXRKUygpO1xuXHRtb2R1bGVJbml0SlMoKTtcblx0dW50aWxzSW5pdEpzKCk7XG5cdHByZXNldHNJbml0KCk7XG5cdGV2ZW50c0luaXQoKTtcbn07XG5cbi8vIERpc2FibGUgdGhlIHByb21wdCAoIGFyZSB5b3Ugc3VyZSApIG9uIHJlZnJlc2hcbndpbmRvdy5vbmJlZm9yZXVubG9hZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuIiwiLyoqXG4gKiBNb2RhbCBXaW5kb3cgQ2xhc3MgZmlsZVxuICovXG5cbi8qKlxuICogU2hvd3MgbW9kYWwgd2luZG93XG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtc1xuICogQHBhcmFtcy50aXRsZSAgICAgICAgIHtzdHJpbmd9IC0gbW9kYWwgd2luZG93IHRpdGxlXG4gKiBAcGFyYW1zLmNvbnRlbnQgICAgICAge3N0cmluZ30tIG1vZGFsIHdpbmRvdyBkZXNjcmlwdGlvblxuICogQHBhcmFtcy5jb25maXJtICAgICAgIHtmdW5jdGlvbn0gLSBtb2RhbCB3aW5kb3cgY29uZmlybSBhY3Rpb25cbiAqIEBwYXJhbXMuY2FuY2VsICAgICAgICB7ZnVuY3Rpb259IC0gbW9kYWwgd2luZG93IGNhbmNlbCBhY3Rpb25cbiAqIEBwYXJhbXMuY2FuY2VsX3RpdGxlICB7c3RyaW5nfSAtIG1vZGFsIHdpbmRvdyBjYW5jZWwgdGl0bGVcbiAqIEBwYXJhbXMuY29uZmlybV90aXRsZSB7c3RyaW5nfSAtIG1vZGFsIHdpbmRvdyBjb25maXJtIHRpdGxlXG4gKiBAcGFyYW1zLm9rX3RpdGxlIHtzdHJpbmd9IC0gbW9kYWwgd2luZG93IE9LIHRpdGxlXG4gKi9cbmV4cG9ydCBjb25zdCBDTW9kYWxXaW5kb3cgPSBmdW5jdGlvbihwYXJhbXMpIHtcblxuICAgIGlmKCB0eXBlb2YgcGFyYW1zICE9ICdvYmplY3QnIHx8IExpdmVDb21wb3Nlci5CdWlsZGVyLkZsYWdzLm1vZGFsT3BlbiA9PT0gdHJ1ZSApIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIC8vIFNob3cgTW9kYWwgV2luZG93XG4gICAgdmFyIG1vZGFsV2luZG93V3JhcCA9ICc8ZGl2IGNsYXNzPVwiZHNsY2EtcHJvbXB0LW1vZGFsIGRzbGNhLXByb21wdC1tb2RhbC1hY3RpdmVcIj4nICtcbiAgICAnPGRpdiBjbGFzcz1cImRzbGNhLXByb21wdC1tb2RhbC1jb250ZW50XCI+PGRpdiBjbGFzcz1cImRzbGNhLXByb21wdC1tb2RhbC1tc2dcIj4nICtcbiAgICAgJzxzcGFuIGNsYXNzPVwiZHNsY2EtcHJvbXB0LW1vZGFsLXRpdGxlXCI+JyArIHBhcmFtcy50aXRsZSArICc8L3NwYW4+JyArXG4gICAgICAnPHNwYW4gY2xhc3M9XCJkc2xjYS1wcm9tcHQtbW9kYWwtZGVzY3JcIj4nICsgcGFyYW1zLmNvbnRlbnQgKyAnPC9zcGFuPjwvZGl2Pic7XG5cbiAgICAgIHZhciBtb2RhbFdpbmRvd0FjdGlvbnMgPSAnJztcblxuICAgIGlmIChwYXJhbXMuY29uZmlybSB8fCBwYXJhbXMuY2FuY2VsKSB7XG5cbiAgICAgICAgbW9kYWxXaW5kb3dBY3Rpb25zID0gJzxkaXYgY2xhc3M9XCJkc2xjYS1wcm9tcHQtbW9kYWwtYWN0aW9uc1wiPicgK1xuICAgICAgICAnPGEgaHJlZj1cIiNcIiBjbGFzcz1cImRzbGNhLXByb21wdC1tb2RhbC1jb25maXJtLWhvb2tcIj48c3BhbiBjbGFzcz1cImRzbGMtaWNvbiBkc2xjLWljb24tb2tcIj4nICtcbiAgICAgICAgJzwvc3Bhbj4nICsgKHBhcmFtcy5jb25maXJtX3RpdGxlID8gcGFyYW1zLmNvbmZpcm1fdGl0bGUgOiAnQ29uZmlybScpICsgJzwvYT48c3BhbiBjbGFzcz1cImRzbGNhLXByb21wdC1tb2RhbC1jYW5jZWwtaG9va1wiPjxzcGFuIGNsYXNzPVwiZHNsYy1pY29uIGRzbGMtaWNvbi1yZW1vdmVcIj4nICtcbiAgICAgICAgJzwvc3Bhbj4nICsgKHBhcmFtcy5jYW5jZWxfdGl0bGUgPyBwYXJhbXMuY2FuY2VsX3RpdGxlIDogJ0NhbmNlbCcpICsnPC9zcGFuPjwvZGl2Pic7XG4gICAgfSBlbHNlIHtcblxuICAgICAgICBtb2RhbFdpbmRvd0FjdGlvbnMgPSAnPGRpdiBjbGFzcz1cImRzbGNhLXByb21wdC1tb2RhbC1hY3Rpb25zXCI+JyArXG4gICAgICAgICc8YSBocmVmPVwiI1wiIGNsYXNzPVwiZHNsY2EtcHJvbXB0LW1vZGFsLWNvbmZpcm0taG9va1wiPjxzcGFuIGNsYXNzPVwiZHNsYy1pY29uIGRzbGMtaWNvbi1va1wiPicgK1xuICAgICAgICAnPC9zcGFuPicgKyAocGFyYW1zLm9rX3RpdGxlID8gcGFyYW1zLm9rX3RpdGxlIDogJ09LJykgKyAnPC9hPjwvZGl2Pic7XG4gICAgfVxuXG4gICAgbW9kYWxXaW5kb3dXcmFwICs9IG1vZGFsV2luZG93QWN0aW9ucyArICc8L2Rpdj4nO1xuICAgIG1vZGFsV2luZG93V3JhcCA9IGpRdWVyeShtb2RhbFdpbmRvd1dyYXApO1xuXG4gICAgaWYgKHR5cGVvZiBwYXJhbXMuY29uZmlybSAhPSAnZnVuY3Rpb24nKSBwYXJhbXMuY29uZmlybSA9IGZ1bmN0aW9uKCl7fTtcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5jYW5jZWwgIT0gJ2Z1bmN0aW9uJykgcGFyYW1zLmNhbmNlbCA9IGZ1bmN0aW9uKCl7fTtcblxuICAgIC8vIENvbmZpcm0gaGFuZGxlciAoZnVuY3Rpb24pXG5cbiAgICBtb2RhbFdpbmRvd1dyYXAuZmluZCgnLmRzbGNhLXByb21wdC1tb2RhbC1jb25maXJtLWhvb2snKVxuICAgIC5jbGljayhmdW5jdGlvbihlKVxuICAgIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBtb2RhbFdpbmRvd1dyYXAuZmluZCgnLmRzbGNhLXByb21wdC1tb2RhbC1jb250ZW50JykuYW5pbWF0ZSh7XG4gICAgICAgICAgICB0b3A6ICc1NSUnXG4gICAgICAgIH0sIDQwMCk7XG5cbiAgICAgICAgbW9kYWxXaW5kb3dXcmFwLmFuaW1hdGUoXG4gICAgICAgICAgICB7b3BhY2l0eTogMH0sXG4gICAgICAgICAgICA0MDAsXG4gICAgICAgICAgICBmdW5jdGlvbigpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGFyYW1zLmNvbmZpcm0oKTtcbiAgICAgICAgICAgICAgICBMaXZlQ29tcG9zZXIuQnVpbGRlci5GbGFncy5tb2RhbE9wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBqUXVlcnkodGhpcykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgLy8g4oCTIG1vdmVkIGhlcmUgYXMgaXQgcHJldmVudCBzb21lIEpTIHRvIGdldCB2YWx1ZSBvbiB0aW1lXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuXG4gICAgLy8gQ2FuY2VsIGhhbmRsZXIgKGZ1bmN0aW9uKVxuXG4gICAgbW9kYWxXaW5kb3dXcmFwLmZpbmQoJy5kc2xjYS1wcm9tcHQtbW9kYWwtY2FuY2VsLWhvb2snKVxuICAgIC5jbGljayhmdW5jdGlvbihlKXtcblxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIG1vZGFsV2luZG93V3JhcC5maW5kKCcuZHNsY2EtcHJvbXB0LW1vZGFsLWNvbnRlbnQnKS5hbmltYXRlKHtcbiAgICAgICAgICAgIHRvcDogJzU1JSdcbiAgICAgICAgfSwgNDAwKTtcblxuICAgICAgICBtb2RhbFdpbmRvd1dyYXAuYW5pbWF0ZShcbiAgICAgICAgICAgIHtvcGFjaXR5OiAwfSxcbiAgICAgICAgICAgIDQwMCxcbiAgICAgICAgICAgIGZ1bmN0aW9uKClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBqUXVlcnkodGhpcykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuRmxhZ3MubW9kYWxPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcGFyYW1zLmNhbmNlbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcblxuICAgIG1vZGFsV2luZG93V3JhcC5oaWRlKCk7XG4gICAgalF1ZXJ5KFwiYm9keVwiKS5hcHBlbmQobW9kYWxXaW5kb3dXcmFwKTtcblxuICAgIG1vZGFsV2luZG93V3JhcC5jc3Moe29wYWNpdHk6IDB9KS5zaG93KCkuYW5pbWF0ZSh7XG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgfSwgNDAwKTtcblxuICAgIC8vIEFuaW1hdGUgbW9kYWxcbiAgICBtb2RhbFdpbmRvd1dyYXAuZmluZCgnLmRzbGNhLXByb21wdC1tb2RhbC1jb250ZW50JykuY3NzKHt0b3A6ICc1NSUnfSkuYW5pbWF0ZSh7XG4gICAgICAgIHRvcDogJzUwJSdcbiAgICB9LCA0MDApO1xuXG4gICAgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuRmxhZ3MubW9kYWxPcGVuID0gdHJ1ZTtcbn0iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKlxuICogPSBVSSAtIE1PREFMID1cbiAqIE5vdGU6IFVzZWQgZm9yIHRoZSB0ZW1wbGF0ZXMgc2F2ZS9leHBvcnQvaW1wb3J0IGFuZCBpY29uc1xuICpcbiAqIC0gZHNsY19zaG93X21vZGFsICggU2hvdyBNb2RhbCApXG4gKiAtIGRzbGNfaGlkZV9tb2RhbCAoIEhpZGUgTW9kYWwgKVxuICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IGVkaXRhYmxlQ29udGVudENvZGVHZW5lcmF0aW9uIH0gZnJvbSBcIi4vY29kZWdlbmVyYXRpb24uanNcIjtcblxuLyoqXG4gKiBNT0RBTCAtIFNob3dcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaG9vayAtIEJ1dHRvbiB0aGF0IHdhcyBjbGlja2VkIHRvIG9wZW4gbW9kYWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2RhbCAtIENTUyBhZGRyZXNzIG9mIHRoZSBtb2RhbCwgbGlrZSAnLm1vZGFsLWljb25zJ1xuICovXG5cbmZ1bmN0aW9uIGRzbGNfc2hvd19tb2RhbCggaG9vaywgbW9kYWwgKSB7XG5cblx0aWYgKCB0eXBlb2YgZHNsY0RlYnVnICE9PSAndW5kZWZpbmVkJyAmJiBkc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfc2hvd19tb2RhbCcgKTtcblxuXHRpZiAoIGpRdWVyeSgnLmRzbGNhLW1vZGFsOnZpc2libGUnKS5sZW5ndGggKSB7XG5cdFx0Ly8gSWYgYSBtb2RhbCBhbHJlYWR5IHZpc2liaWxlIGhpZGUgaXRcblx0XHRoaWRlTW9kYWwoICcnLCBqUXVlcnkoJy5kc2xjYS1tb2RhbDp2aXNpYmxlJykgKTtcblx0fVxuXG5cdC8vIFZhcnNcblx0dmFyIG1vZGFsID0galF1ZXJ5KG1vZGFsKTtcblxuXHQvLyBDYWxjIHBvcHVwIGhlaWdodFxuXHR2YXIgY29udGFpbmVySGVpZ2h0ID0galF1ZXJ5KCcuZHNsY2EtY29udGFpbmVyJykuaGVpZ2h0KCk7XG5cdG1vZGFsLm91dGVySGlkZSh7XG5cdFx0Y2xiazogZnVuY3Rpb24oKXtcblxuXHRcdFx0aGlkZU1vZGFsKCAnJywgalF1ZXJ5KCcuZHNsY2EtbW9kYWw6dmlzaWJsZScpICk7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBWYXJzICggQ2FsYyBPZmZzZXQgKVxuXHR2YXIgcG9zaXRpb24gPSBqUXVlcnkoaG9vaykucG9zaXRpb24oKSxcblx0ZGlmZiA9IG1vZGFsLm91dGVyV2lkdGgoKSAvIDIgLSBob29rLm91dGVyV2lkdGgoKSAvIDIsXG5cdG9mZnNldCA9IHBvc2l0aW9uLmxlZnQgLSBkaWZmO1xuXG5cdC8vIFNob3cgTW9kYWxcblx0bW9kYWwuY3NzKHsgbGVmdCA6IG9mZnNldCB9KTtcblx0alF1ZXJ5KFwiLmRzbGNhLXByb21wdC1tb2RhbC1jdXN0b21cIikuaW5zZXJ0QWZ0ZXIoIG1vZGFsICk7XG5cdGlmICggalF1ZXJ5KFwiLmRzbGNhLXByb21wdC1tb2RhbC1jdXN0b21cIikubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkoXCIuZHNsY2EtcHJvbXB0LW1vZGFsLWN1c3RvbVwiKS5mYWRlSW4oKTtcblx0fVxuXHRtb2RhbC5hZGRDbGFzcygnZHNsY2EtbW9kYWwtb3BlbicpLnNob3coKTtcblxuXHQvLyBBbmltYXRlIE1vZGFsXG5cdC8vIG1vZGFsLmNzcyh7XG5cdFx0Ly8gJy13ZWJraXQtYW5pbWF0aW9uLW5hbWUnIDogJ2RzbGNCb3VuY2VJbicsXG5cdFx0Ly8gJy1tb3otYW5pbWF0aW9uLW5hbWUnIDogJ2RzbGNCb3VuY2VJbicsXG5cdFx0Ly8gJ2FuaW1hdGlvbi1uYW1lJyA6ICdkc2xjQm91bmNlSW4nLFxuXHRcdC8vICdhbmltYXRpb24tZHVyYXRpb24nIDogJzAuNnMnLFxuXHRcdC8vICctd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbicgOiAnMC42cydcblx0Ly8gfSkuZmFkZUluKDYwMCk7XG59XG5cbi8qKlxuICogTU9EQUwgLSBIaWRlXG4gKi9cblxuIC8vIGV4LiBkc2xjX2hpZGVfbW9kYWxcbmV4cG9ydCBjb25zdCBoaWRlTW9kYWwgPSAoIGhvb2ssIG1vZGFsICkgPT4ge1xuXG5cdGlmICggdHlwZW9mIGRzbGNEZWJ1ZyAhPT0gJ3VuZGVmaW5lZCcgJiYgZHNsY0RlYnVnICkgY29uc29sZS5sb2coICdoaWRlTW9kYWwnICk7XG5cblx0Ly8gVmFyc1xuXHR2YXIgbW9kYWwgPSBqUXVlcnkobW9kYWwpO1xuXG5cdC8vIEhpZGUgKCB3aXRoIGFuaW1hdGlvbiApXG5cdG1vZGFsLm91dGVySGlkZSggJ2Rlc3Ryb3knICk7XG5cdG1vZGFsLmhpZGUoKTtcblx0aWYgKCBqUXVlcnkoXCIuZHNsY2EtcHJvbXB0LW1vZGFsLWN1c3RvbVwiKS5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeShcIi5kc2xjYS1wcm9tcHQtbW9kYWwtY3VzdG9tXCIpLmZhZGVPdXQoKTtcblx0fVxuXHRtb2RhbC5yZW1vdmVDbGFzcygnZHNsY2EtbW9kYWwtb3BlbicpO1xuXHQvKlxuXHRtb2RhbC5jc3Moe1xuXHRcdCctd2Via2l0LWFuaW1hdGlvbi1uYW1lJyA6ICdkc2xjQm91bmNlT3V0Jyxcblx0XHQnLW1vei1hbmltYXRpb24tbmFtZScgOiAnZHNsY0JvdW5jZU91dCcsXG5cdFx0J2FuaW1hdGlvbi1uYW1lJyA6ICdkc2xjQm91bmNlT3V0Jyxcblx0XHQnYW5pbWF0aW9uLWR1cmF0aW9uJyA6ICcwLjZzJyxcblx0XHQnLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb24nIDogJzAuNnMnXG5cdH0pLmZhZGVPdXQoNjAwKTtcblx0Ki9cblxufVxuXG4vLyBIaWRlIGlmIGNsaWNrZWQgb3V0c2lkZSBvZiBtb2RhbFxuLypqUXVlcnkoZG9jdW1lbnQpLm1vdXNldXAoZnVuY3Rpb24gKGUpIHtcblx0XHR2YXIgY29udGFpbmVyID0galF1ZXJ5KFwiLmRzbGNhLW1vZGFsLW9wZW5cIik7XG5cblx0XHRpZiAoIWNvbnRhaW5lci5pcyhlLnRhcmdldCkgLy8gaWYgdGhlIHRhcmdldCBvZiB0aGUgY2xpY2sgaXNuJ3QgdGhlIGNvbnRhaW5lci4uLlxuXHRcdCYmIGNvbnRhaW5lci5oYXMoZS50YXJnZXQpLmxlbmd0aCA9PT0gMCkgLy8gLi4uIG5vciBhIGRlc2NlbmRhbnQgb2YgdGhlIGNvbnRhaW5lclxuXHRcdHtcblx0XHRjb250YWluZXIuaGlkZSgpO1xuXHRcdH1cbn0pOyovXG5cbi8qKlxuICogTU9EQUwgLSBEb2N1bWVudCBSZWFkeVxuICovXG5cbmpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oJCl7XG5cblx0LyoqXG5cdCAqIEhvb2sgLSBTaG93IE1vZGFsXG5cdCAqL1xuXG5cdGpRdWVyeShkb2N1bWVudCkub24oICdjbGljaycsICcuZHNsY2Etb3Blbi1tb2RhbC1ob29rJywgZnVuY3Rpb24oZSl7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdHZhciBtb2RhbCA9IGpRdWVyeSh0aGlzKS5kYXRhKCdtb2RhbCcpO1xuXHRcdGRzbGNfc2hvd19tb2RhbCggalF1ZXJ5KHRoaXMpLCBtb2RhbCApO1xuXHR9KTtcblxuXHQvKipcblx0ICogSG9vayAtIEhpZGUgTW9kYWxcblx0ICovXG5cblx0alF1ZXJ5KGRvY3VtZW50KS5vbiggJ2NsaWNrJywgJy5kc2xjYS1jbG9zZS1tb2RhbC1ob29rJywgZnVuY3Rpb24oZSl7XG5cblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRpZiAoICEgalF1ZXJ5KHRoaXMpLmhhc0NsYXNzKCdkc2xjYS1hY3Rpb24tZGlzYWJsZWQnKSApIHtcblxuXHRcdFx0dmFyIG1vZGFsID0galF1ZXJ5KHRoaXMpLmRhdGEoJ21vZGFsJyk7XG5cdFx0XHRoaWRlTW9kYWwoIGpRdWVyeSh0aGlzKSwgbW9kYWwgKTtcblx0XHR9XG5cdH0pO1xuXG59KTtcblxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKlxuICogNSkgPSBVSSAtIFBST01QVCBNT0RBTCA9XG4gKlxuICogLSBkc2xjX2pzX2NvbmZpcm1cbiAqIC0gZHNsY19qc19jb25maXJtX2Nsb3NlXG4gKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuZnVuY3Rpb24gZHNsY19qc19jb25maXJtKCBkc2xjSUQsIGRzbGNDb250ZW50LCBkc2xjVGFyZ2V0ICkge1xuXG5cdGlmICggdHlwZW9mIGRzbGNEZWJ1ZyAhPT0gJ3VuZGVmaW5lZCcgJiYgZHNsY0RlYnVnICkgY29uc29sZS5sb2coICdkc2xjX2pzX2NvbmZpcm0nICk7XG5cblx0Ly8gQWRkIFwiYWN0aXZlXCIgY2xhc3Ncblx0alF1ZXJ5KCcuZHNsY2EtcHJvbXB0LW1vZGFsJykuYWRkQ2xhc3MoJ2RzbGNhLXByb21wdC1tb2RhbC1hY3RpdmUnKTtcblxuXHQvLyBBZGQgdGhlIElEIG9mIGN1cnJlbnQgZXZlbnRcblx0alF1ZXJ5KCcuZHNsY2EtcHJvbXB0LW1vZGFsJykuZGF0YSggJ2lkJywgZHNsY0lEICk7XG5cdGpRdWVyeSgnLmRzbGNhLXByb21wdC1tb2RhbCcpLmRhdGEoICd0YXJnZXQnLCBkc2xjVGFyZ2V0ICk7XG5cblx0Ly8gQWRkIG1vZGFsIGNvbnRlbnRcblx0alF1ZXJ5KCcuZHNsY2EtcHJvbXB0LW1vZGFsLW1zZycpLmh0bWwoIGRzbGNDb250ZW50ICk7XG5cblx0Ly8gU2hvdyBtb2RhbFxuXHRqUXVlcnkoJy5kc2xjYS1wcm9tcHQtbW9kYWwnKS5jc3MoeyBvcGFjaXR5IDogMCB9KS5zaG93KCkuYW5pbWF0ZSh7XG5cdFx0b3BhY2l0eSA6IDEsXG5cdH0sIDQwMCk7XG5cblx0Ly8gQW5pbWF0ZSBtb2RhbFxuXHRqUXVlcnkoJy5kc2xjYS1wcm9tcHQtbW9kYWwtY29udGVudCcpLmNzcyh7IHRvcCA6ICc1NSUnIH0pLmFuaW1hdGUoe1xuXHRcdHRvcCA6ICc1MCUnXG5cdH0sIDQwMCk7XG59XG5cbi8vIGV4LiBkc2xjX2pzX2NvbmZpcm1fY2xvc2VcbmV4cG9ydCBjb25zdCBjb25maXJtQ2xvc2UgPSAoKSA9PiB7XG5cblx0aWYgKCB0eXBlb2YgZHNsY0RlYnVnICE9PSAndW5kZWZpbmVkJyAmJiBkc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfanNfY29uZmlybV9jbG9zZScgKTtcblxuXHQvLyBSZW1vdmUgXCJhY3RpdmVcIiBjbGFzc1xuXHRqUXVlcnkoJy5kc2xjYS1wcm9tcHQtbW9kYWwnKS5yZW1vdmVDbGFzcygnZHNsY2EtcHJvbXB0LW1vZGFsLWFjdGl2ZScpO1xuXG5cdC8vIEhpZGUgbW9kYWxcblx0alF1ZXJ5KCcuZHNsY2EtcHJvbXB0LW1vZGFsJykuYW5pbWF0ZSh7XG5cdFx0b3BhY2l0eSA6IDAsXG5cdH0sIDQwMCwgZnVuY3Rpb24oKXtcblx0XHRqUXVlcnkodGhpcykuaGlkZSgpO1xuXHRcdGpRdWVyeSgnLmRzbGNhLXByb21wdC1tb2RhbC1jYW5jZWwtaG9vaycpLnNob3coKTtcblx0XHRqUXVlcnkoJy5kc2xjYS1wcm9tcHQtbW9kYWwtY29uZmlybS1ob29rJykuaHRtbCgnPHNwYW4gY2xhc3M9XCJkc2xjLWljb24gZHNsYy1pY29uLW9rXCI+PC9zcGFuPicgKyBEU0xDU3RyaW5nLnN0cl9jb25maXJtKTtcblx0fSk7XG5cblx0alF1ZXJ5KCcuZHNsY2EtcHJvbXB0LW1vZGFsLWNvbnRlbnQnKS5hbmltYXRlKHtcblx0XHR0b3AgOiAnNTUlJ1xuXHR9LCA0MDApO1xuXG59XG5cbi8qKlxuICogSG9vayAtIENvbmZpcm0gb24gRW50ZXIsIENhbmNlbCBvbiBFc2NcbiAqL1xuXG53aW5kb3cuZHNsY19tb2RhbF9rZXlwcmVzc19ldmVudHMgPSBmdW5jdGlvbiBkc2xjX21vZGFsX2tleXByZXNzX2V2ZW50cyhlKSB7XG5cblx0Ly8gRW50ZXIgKCBjb25maXJtIClcblx0aWYoIGUud2hpY2ggPT0gMTMgKSB7XG5cdFx0aWYgKCBqUXVlcnkoJy5kc2xjYS1wcm9tcHQtbW9kYWwtYWN0aXZlJykubGVuZ3RoICkge1xuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtcHJvbXB0LW1vZGFsLWNvbmZpcm0taG9vaycpLnRyaWdnZXIoJ2NsaWNrJyk7XG5cdFx0fVxuXG5cdC8vIEVzY2FwZSAoIGNhbmNlbCApXG5cdH0gZWxzZSBpZiAoIGUud2hpY2ggPT0gMjcgKSB7XG5cdFx0aWYgKCBqUXVlcnkoJy5kc2xjYS1wcm9tcHQtbW9kYWwtYWN0aXZlJykubGVuZ3RoICkge1xuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtcHJvbXB0LW1vZGFsLWNhbmNlbC1ob29rJykudHJpZ2dlcignY2xpY2snKTtcblx0XHR9XG5cdH1cblxufVxuXG4vKipcbiAqIFVJIC0gUFJPTVBUIE1PREFMIC0gRG9jdW1lbnQgUmVhZHlcbiAqL1xuXG5qUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCQpe1xuXG5cdGpRdWVyeShkb2N1bWVudCkub24oICdjbGljaycsICcuZHNsY2EtcHJvbXB0LW1vZGFsLWNhbmNlbC1ob29rJywgZnVuY3Rpb24oZSl7XG5cblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHR2YXIgZHNsY0FjdGlvbiA9IGpRdWVyeSgnLmRzbGNhLXByb21wdC1tb2RhbCcpLmRhdGEoJ2lkJyk7XG5cdFx0dmFyIGRzbGNUYXJnZXQgPSBqUXVlcnkoJy5kc2xjYS1wcm9tcHQtbW9kYWwnKS5kYXRhKCd0YXJnZXQnKTtcblxuXHRcdGlmICggZHNsY0FjdGlvbiA9PSAnZWRpdF9pbl9wcm9ncmVzcycgKSB7XG5cblx0XHRcdC8vLyBNT1ZFRFxuXHRcdFx0ZHNsY19tb2R1bGVfb3B0aW9uc19jYW5jZWxfY2hhbmdlcyggZnVuY3Rpb24oKXtcblx0XHRcdFx0ZHNsY1RhcmdldC50cmlnZ2VyKCdjbGljaycpO1xuXHRcdFx0fSk7XG5cblx0XHR9IGVsc2UgaWYgKCBkc2xjQWN0aW9uID09ICdkZWxldGVfbW9kdWxlJyApIHtcblxuXHRcdH1cblxuXHRcdGNvbmZpcm1DbG9zZSgpO1xuXHRcdGpRdWVyeSgnLmRzbGNhLXByb21wdC1tb2RhbCcpLmRhdGEoICdpZCcsICcnICk7XG5cblx0fSk7XG5cblx0alF1ZXJ5KGRvY3VtZW50KS5vbiggJ2NsaWNrJywgJy5kc2xjYS1wcm9tcHQtbW9kYWwtY29uZmlybS1ob29rJywgZnVuY3Rpb24oZSl7XG5cblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHR2YXIgZHNsY0FjdGlvbiA9IGpRdWVyeSgnLmRzbGNhLXByb21wdC1tb2RhbCcpLmRhdGEoJ2lkJyk7XG5cdFx0dmFyIGRzbGNUYXJnZXQgPSBqUXVlcnkoJy5kc2xjYS1wcm9tcHQtbW9kYWwnKS5kYXRhKCd0YXJnZXQnKTtcblx0XHR2YXIgY2xvc2VBdEVuZCA9IHRydWU7XG5cblx0XHRpZiAoICBkc2xjQWN0aW9uID09ICdlZGl0X2luX3Byb2dyZXNzJyApIHtcblxuXHRcdFx0Ly8vIE1PVkVEXG5cdFx0XHRkc2xjX21vZHVsZV9vcHRpb25zX2NvbmZpcm1fY2hhbmdlcyggZnVuY3Rpb24oKXtcblx0XHRcdFx0ZHNsY1RhcmdldC50cmlnZ2VyKCdjbGljaycpO1xuXHRcdFx0fSk7XG5cblx0XHR9IGVsc2UgaWYgKCBkc2xjQWN0aW9uID09ICdkaXNhYmxlX2xjJyApIHtcblxuXHRcdFx0d2luZG93LmxvY2F0aW9uID0gZHNsY1RhcmdldDtcblxuXHRcdH0gZWxzZSBpZiAoICdkZWxldGVfbW9kdWxlJyA9PT0gZHNsY0FjdGlvbiApIHtcblxuXHRcdFx0Ly8vIE1PVkVEXG5cdFx0XHR2YXIgbW9kdWxlID0gZHNsY1RhcmdldC5jbG9zZXN0KCcuZHNsYy1tb2R1bGUtZnJvbnQnKTtcblx0XHRcdGRzbGNfbW9kdWxlX2RlbGV0ZSggbW9kdWxlICk7XG5cblx0XHR9IGVsc2UgaWYgKCAnZGVsZXRlX21vZHVsZXNfYXJlYScgPT09IGRzbGNBY3Rpb24gKSB7XG5cblx0XHRcdHZhciBtb2R1bGVzQXJlYSA9IGRzbGNUYXJnZXQuY2xvc2VzdCgnLmRzbGMtbW9kdWxlcy1hcmVhJyk7XG5cdFx0XHR2YXIgcGFyZW50U2VjdGlvbkNvbnRhaW5lciA9IG1vZHVsZXNBcmVhLmNsb3Nlc3QoJy5kc2xjLW1vZHVsZXMtc2VjdGlvbi1pbm5lcicpO1xuXHRcdFx0ZHNsY19tb2R1bGVzX2FyZWFfZGVsZXRlKCBtb2R1bGVzQXJlYSApO1xuXG5cdFx0fSBlbHNlIGlmICggZHNsY0FjdGlvbiA9PSAnZGVsZXRlX21vZHVsZXNfc2VjdGlvbicgKSB7XG5cblx0XHRcdC8vLyBNT1ZFRFxuXHRcdFx0ZHNsY19yb3dfZGVsZXRlKCBkc2xjVGFyZ2V0LmNsb3Nlc3QoJy5kc2xjLW1vZHVsZXMtc2VjdGlvbicpICk7XG5cblx0XHR9IGVsc2UgaWYgKCBkc2xjQWN0aW9uID09ICdleHBvcnRfbW9kdWxlc19zZWN0aW9uJyApIHtcblxuXHRcdH0gZWxzZSBpZiAoIGRzbGNBY3Rpb24gPT0gJ2ltcG9ydF9tb2R1bGVzX3NlY3Rpb24nICkge1xuXG5cdFx0XHQvLy8gTU9WRURcblx0XHRcdGRzbGNfcm93X2ltcG9ydCggalF1ZXJ5KCcuZHNsY2EtcHJvbXB0LW1vZGFsIHRleHRhcmVhJykudmFsKCkgKTtcblx0XHRcdGpRdWVyeSgnLmRzbGNhLXByb21wdC1tb2RhbC1jb25maXJtLWhvb2sgc3BhbicpLmNzcyh7IG9wYWNpdHkgOiAwIH0pO1xuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtcHJvbXB0LW1vZGFsLWNvbmZpcm0taG9vayAuZHNsY2EtbG9hZGluZycpLnNob3coKTtcblx0XHRcdGNsb3NlQXRFbmQgPSBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoIGNsb3NlQXRFbmQgKSB7XG5cdFx0XHRjb25maXJtQ2xvc2UoKTtcblx0XHR9XG5cblx0XHRqUXVlcnkoJy5kc2xjYS1wcm9tcHQtbW9kYWwnKS5kYXRhKCAnaWQnLCAnJyApO1xuXHR9KTtcblxufSk7XG5cbi8qKlxuICogRE9OJ1QgTU9WRSBUSEUgRlVOQ1RJT04gQkVMTE9XIE9VVCBPRiBUSElTIEZJTEUhXG4gKiBIaWRlIGVsZW1lbnQgd2hlbiBjbGljayBvbiBhbm90aGVyIGVsZW1lbnQgb24gdGhlIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLm91dGVySGlkZSA9IGZ1bmN0aW9uKHBhcmFtcykge1xuXHR2YXIgJCA9IGpRdWVyeTtcblx0cGFyYW1zID0gcGFyYW1zID8gcGFyYW1zIDoge307XG5cblx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdGlmICggJ2Rlc3Ryb3knID09IHBhcmFtcyApIHtcblxuXHRcdGpRdWVyeShkb2N1bWVudCkudW5iaW5kKCdjbGljay5vdXRlcl9oaWRlJyk7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0alF1ZXJ5KGRvY3VtZW50KS5iaW5kKCdjbGljay5vdXRlcl9oaWRlJywgZnVuY3Rpb24oZSkge1xuXG5cdFx0aWYgKGpRdWVyeShlLnRhcmdldCkuY2xvc2VzdChzZWxmKS5sZW5ndGggPT0gMCAmJlxuXHRcdFx0ZS50YXJnZXQgIT0gc2VsZiAmJlxuXHRcdFx0JC5pbkFycmF5KGpRdWVyeShlLnRhcmdldClbMF0sIGpRdWVyeShwYXJhbXMuY2xpY2tPYmopKSA9PSAtMSAmJlxuXHRcdFx0alF1ZXJ5KHNlbGYpLmNzcygnZGlzcGxheScpICE9ICdub25lJ1xuXHRcdClcblx0XHR7XG5cdFx0XHRpZihwYXJhbXMuY2xiaylcblx0XHRcdHtcblx0XHRcdFx0cGFyYW1zLmNsYmsoKTtcblx0XHRcdH1lbHNle1xuXHRcdFx0XHRqUXVlcnkoc2VsZikuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbi8qKlxuICogQ2FuY2VsIGNoYW5nZXMgaW4gc3RhbmRhcmQgV1AgRWRpdG9yIChUaW55TUNFKSBXWVNJV1lHXG4gKi9cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdtb2RhbFd5c2l3eWdDYW5jZWwnLCBmdW5jdGlvbiAoIGN1c3RvbUV2ZW50ICkge1xuXHRqUXVlcnkoJy5kc2xjYS13cC1lZGl0b3InKS5oaWRlKCk7XG5cdGpRdWVyeSgnLmRzbGNhLXd5c2l3eWctYWN0aXZlJywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCApLnJlbW92ZUNsYXNzKCdkc2xjYS13eXNpd3lnLWFjdGl2ZScpO1xufSk7XG5cbi8qKlxuICogQ29uZmlybSBjaGFuZ2VzIGluIHN0YW5kYXJkIFdQIEVkaXRvciAoVGlueU1DRSkgV1lTSVdZR1xuICovXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAnbW9kYWxXeXNpd3lnQ29uZmlybScsIGZ1bmN0aW9uICggY3VzdG9tRXZlbnQgKSB7XG5cdHZhciBtb2R1bGUgPSBqUXVlcnkoJy5kc2xjYS13eXNpd3lnLWFjdGl2ZScsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQgKS5jbG9zZXN0KCcuZHNsYy1tb2R1bGUtZnJvbnQnKTtcblxuXHRpZiggdHlwZW9mIHRpbnltY2UgIT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRpZiAoIGpRdWVyeSgnI3dwLWRzbGNhd3BlZGl0b3Itd3JhcCcpLmhhc0NsYXNzKCd0bWNlLWFjdGl2ZScpICkge1xuXHRcdFx0dmFyIGVkaXRvciA9IHRpbnltY2UuZ2V0KCAnZHNsY2F3cGVkaXRvcicgKTtcblx0XHRcdHZhciBjb250ZW50ID0gZWRpdG9yLmdldENvbnRlbnQoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBqUXVlcnkoJyNkc2xjYXdwZWRpdG9yJykudmFsKCk7XG5cdFx0fVxuXG5cdFx0Y29udGVudCA9IGNvbnRlbnQudHJpbSgpO1xuXHRcdGpRdWVyeSgnLmRzbGNhLXdwLWVkaXRvcicpLmhpZGUoKTtcblx0XHRqUXVlcnkoJy5kc2xjYS13eXNpd3lnLWFjdGl2ZScsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQgKS5odG1sKCBjb250ZW50ICk7XG5cblx0XHRpZiAoIG1vZHVsZS5oYXNDbGFzcygnZHNsYy1tb2R1bGUtaGFuZGxlLWxpa2UtYWNjb3JkaW9uJykgKSB7XG5cdFx0XHRqUXVlcnkoJy5kc2xjYS13eXNpd3lnLWFjdGl2ZScsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQgKS5zaWJsaW5ncygnLmRzbGNhLWVkaXRhYmxlLWNvbnRlbnQnKS5odG1sKCBjb250ZW50ICk7XG5cdFx0XHRqUXVlcnkoJy5kc2xjYS13eXNpd3lnLWFjdGl2ZScsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQgKS5zaWJsaW5ncygnLmRzbGNhLWFjY29yZGlvbi1wbGFpbi1jb250ZW50JykudmFsKCBjb250ZW50ICk7XG5cdFx0XHR2YXIgZHNsY0FjY29yZGlvbiA9IG1vZHVsZS5maW5kKCcuZHNsYy1hY2NvcmRpb24nKTtcblx0XHRcdExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhV2luZG93LmRzbGNfYWNjb3JkaW9uX2dlbmVyYXRlX2NvZGUoIGRzbGNBY2NvcmRpb24gKTtcblx0XHR9IGVsc2UgaWYgKCBtb2R1bGUuaGFzQ2xhc3MoJ2RzbGMtbW9kdWxlLWhhbmRsZS1saWtlLXRhYnMnKSApIHtcblx0XHRcdGpRdWVyeSgnLmRzbGNhLXd5c2l3eWctYWN0aXZlJywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCApLnNpYmxpbmdzKCcuZHNsY2EtZWRpdGFibGUtY29udGVudCcpLmh0bWwoIGNvbnRlbnQgKTtcblx0XHRcdGpRdWVyeSgnLmRzbGNhLXd5c2l3eWctYWN0aXZlJywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCApLnNpYmxpbmdzKCcuZHNsY2EtdGFiLXBsYWluLWNvbnRlbnQnKS52YWwoIGNvbnRlbnQgKTtcblx0XHRcdHZhciBkc2xjVGFicyA9IG1vZHVsZS5maW5kKCcuZHNsYy10YWJzJyk7XG5cdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5kc2xjX3RhYnNfZ2VuZXJhdGVfY29kZSggZHNsY1RhYnMgKTtcblx0XHR9XG5cblx0XHRlZGl0YWJsZUNvbnRlbnRDb2RlR2VuZXJhdGlvbiggalF1ZXJ5KCcuZHNsY2Etd3lzaXd5Zy1hY3RpdmUnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50ICkgKTtcblx0XHRqUXVlcnkoJy5kc2xjYS13eXNpd3lnLWFjdGl2ZScsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQgKS5yZW1vdmVDbGFzcygnZHNsY2Etd3lzaXd5Zy1hY3RpdmUnKTtcblx0fSBlbHNlIHtcblx0XHRjb25zb2xlLmluZm8oICdMaXZlIENvbXBvc2VyOiBUaW55TUNFIGlzIHVuZGVmaW5lZC4nICk7XG5cdH1cbn0pO1xuXG5leHBvcnQgY29uc3QgbW9kYWx3aW5kb3dJbml0SlMgPSAoKSA9PiB7XG5cbn1cbiIsIi8qKlxuICogIEJ1aWxkZXIgbW9kdWxlIGZ1bmN0aW9ucyAmIGhvb2tzXG4gKlxuICogICA9IE1PRFVMRVMgPVxuICpcbiAqIC0gZHNsY19tb2R1bGVfZGVsZXRlICggRGVsZXRlcyBhIG1vZHVsZSApXG4gKiAtIG1vZHVsZUR1cGxpY2F0ZSAoIENvcGllcyBhIG1vZHVsZSApXG4gKiAtIGRzbGNfbW9kdWxlX3dpZHRoX3NldCAoIFNldHMgYSB3aWR0aCB0byBtb2R1bGUgKVxuICogLSBkc2xjX21vZHVsZV9vcHRpb25zX3Nob3cgKCBTaG93IG1vZHVsZSBvcHRpb25zIClcbiAqIC0gZHNsY19tb2R1bGVfb3B0aW9uc19zZWN0aW9uX2ZpbHRlciAoIEZpbHRlciBvcHRpb25zIHNlY3Rpb24gKVxuICogLSBkc2xjX21vZHVsZV9vcHRpb25zX2hpZGVzaG93X3RhYnMgKCBIaWRlIHNob3cgdGFicyBiYXNlZCBvbiBvcHRpb24gY2hvaWNlcyApXG4gKiAtIGRzbGNfbW9kdWxlX29wdGlvbnNfY29uZmlybV9jaGFuZ2VzICggQ29uZmlybSBjaGFuZ2VzIClcbiAqIC0gZHNsY19tb2R1bGVfb3B0aW9uc19jYW5jZWxfY2hhbmdlcyAoIENhbmNlbCBjaGFuZ2VzIClcbiAqIC0gZHNsY19tb2R1bGVfb3B0aW9uc190b29sdGlwICggSGVscGVyIHRvb2x0aXBzIGZvciBvcHRpb25zIClcbiAqIC0gZHNsY19tb2R1bGVfb3B0aW9uc19mb250ICggQWN0aW9ucyBmb3IgZm9udCBvcHRpb24gdHlwZSApXG4gKiAtIGRzbGNfbW9kdWxlX29wdGlvbnNfaWNvbiAoIEFjdGlvbnMgZm9yIGljb24gZm9udCBvcHRpb24gdHlwZSApXG4gKiAtIGRzbGNfbW9kdWxlX29wdGlvbnNfaWNvbl9yZXR1cm5pZCAoRmlsbCBpY29uIG9wdGlvbiB0eXBlIHdpdGggc2VsZWN0ZWQgaWNvbiBJRC9uYW1lKVxuICogLSBkc2xjX21vZHVsZV9vcHRpb25zX3RleHRfYWxpZ24gKCBBY3Rpb25zIGZvciB0ZXh0IGFsaWduIG9wdGlvbiB0eXBlIClcbiAqIC0gZHNsY19tb2R1bGVfb3B0aW9uc19jaGVja2JveCAoIEFjdGlvbnMgZm9yIGNoZWNrYm94IG9wdGlvbiB0eXBlIClcbiAqIC0gZHNsY19tb2R1bGVfb3B0aW9uc19ib3hfc2hhZG93ICggQWN0aW9ucyBmb3IgYm94IHNoYWRvdyBvcHRpb24gdHlwZSApXG4gKiAtIGRzbGNfbW9kdWxlc19vcHRpb25zX2JveF9zaGFkb3dfY29sb3IgKCBJbml0aWF0ZSBjb2xvcnBpY2tlciBmb3IgYm94IHNoYWRvdylcbiAqIC0gZHNsY19tb2R1bGVfb3B0aW9uc190ZXh0X3NoYWRvdyAoIEFjdGlvbnMgZm9yIHRleHQgc2hhZG93IG9wdGlvbiB0eXBlIClcbiAqIC0gZHNsY19tb2R1bGVzX29wdGlvbnNfdGV4dF9zaGFkb3dfY29sb3IgKCBJbml0aWF0ZSBjb2xvcnBpY2tlciBmb3IgdGV4dCBzaGFkb3cpXG4gKiAtIGRzbGNfbW9kdWxlX29wdGlvbnNfY29sb3IgKCBBY3Rpb25zIGZvciBjb2xvciBvcHRpb24gdHlwZSApXG4gKiAtIGRzbGNfbW9kdWxlX291dHB1dF9kZWZhdWx0ICggR2V0IG1vZHVsZSBvdXRwdXQgd2l0aCBkZWZhdWx0IHNldHRpbmdzIClcbiAqIC0gZHNsY19tb2R1bGVfb3V0cHV0X2FsdGVyZWQgKCBHZXQgbW9kdWxlIG91dHB1dCB3aGVuIHNldHRpbmdzIGFsdGVyZWQgKVxuICpcbiAqL1xuXG5pbXBvcnQgeyBDTW9kYWxXaW5kb3cgfSBmcm9tICcuL21vZGFsd2luZG93LmNsYXNzLmpzJztcbmltcG9ydCB7IGhpZGVQdWJsaXNoQnV0dG9uLCBzaG93U2VjdGlvbiB9IGZyb20gJy4vdWlnZW5lcmFsLmpzJztcbmltcG9ydCBhbmltZSBmcm9tICdhbmltZWpzJztcbmltcG9ydCB7IGVkaXRhYmxlQ29udGVudENvZGVHZW5lcmF0aW9uIH0gZnJvbSBcIi4vY29kZWdlbmVyYXRpb24uanNcIjtcblxuXG52YXIgYWN0aW9uQXZhaWwgPSBmdW5jdGlvbigpIHtcblxuXHRpZiAoIExpdmVDb21wb3Nlci5CdWlsZGVyLkZsYWdzLnBhbmVsT3BlbmVkICkge1xuXHRcdExpdmVDb21wb3Nlci5CdWlsZGVyLlVJLnNoYWtlUGFuZWxDb25maXJtQnV0dG9uKCk7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogSG9vayAtIER1cGxpY2F0ZSBNb2R1bGVcbiAqL1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW9kdWxlRHVwbGljYXRlJywgZnVuY3Rpb24gKGN1c3RvbUV2ZW50KSB7XG5cdGNvbnN0IGVsQ2xpY2tlZCA9IGN1c3RvbUV2ZW50LmRldGFpbDsgIC8vIGN1c3RvbUV2ZW50LmRldGFpbCAtIGlzIGVsZW1lbnQgYmVpbmcgY2xpY2tlZCBwYXNzZWQgYXMgYWRkaXRpb25hbCBkYXRhIGluIHRoZSBldmVudC5cblxuXHQvLyBDaGVjayBpZiBhY3Rpb24gY2FuIGJlIGZpcmVkXG5cdGlmICggISBhY3Rpb25BdmFpbCgpICkgcmV0dXJuIGZhbHNlO1xuXG5cdGlmICggISBlbENsaWNrZWQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkc2xjYS1hY3Rpb24tZGlzYWJsZWQnKSApIHtcblx0XHRtb2R1bGVEdXBsaWNhdGUoIGVsQ2xpY2tlZC5jbG9zZXN0KCcuZHNsYy1tb2R1bGUtZnJvbnQnKSApO1xuXHR9XG59KTtcblxuLyoqXG4gKiBIb29rIC0gTW9kdWxlIERlbGV0ZVxuICovXG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdtb2R1bGVEZWxldGUnLCBmdW5jdGlvbiAoY3VzdG9tRXZlbnQpIHtcblx0Y29uc3QgZWxDbGlja2VkID0gY3VzdG9tRXZlbnQuZGV0YWlsOyAgLy8gY3VzdG9tRXZlbnQuZGV0YWlsIC0gaXMgZWxlbWVudCBiZWluZyBjbGlja2VkIHBhc3NlZCBhcyBhZGRpdGlvbmFsIGRhdGEgaW4gdGhlIGV2ZW50LlxuXG5cdC8vIENoZWNrIGlmIGFjdGlvbiBjYW4gYmUgZmlyZWRcblx0aWYgKCAhIGFjdGlvbkF2YWlsKCkgKSByZXR1cm4gZmFsc2U7XG5cblx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdGlmICggISBlbENsaWNrZWQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkc2xjYS1hY3Rpb24tZGlzYWJsZWQnKSApIHtcblxuXHRcdENNb2RhbFdpbmRvdyh7XG5cdFx0XHR0aXRsZTogRFNMQ1N0cmluZy5zdHJfZGVsX21vZHVsZV90aXRsZSxcblx0XHRcdGNvbnRlbnQ6IERTTENTdHJpbmcuc3RyX2RlbF9tb2R1bGVfZGVzY3IsXG5cdFx0XHRjb25maXJtOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHR2YXIgbW9kdWxlID0gZWxDbGlja2VkLmNsb3Nlc3QoJy5kc2xjLW1vZHVsZS1mcm9udCcpO1xuXHRcdFx0XHRkc2xjX21vZHVsZV9kZWxldGUoIG1vZHVsZSApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59KTtcblxuLyoqXG4gKiBIb29rIC0gRWRpdCBNb2R1bGUgT24gQ2xpY2sgKCBEaXNwbGF5IE9wdGlvbnMgUGFuZWwgKVxuICovXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb2R1bGVFZGl0JywgZnVuY3Rpb24gKGN1c3RvbUV2ZW50KSB7XG5cdGNvbnN0IGVsQ2xpY2tlZCA9IGN1c3RvbUV2ZW50LmRldGFpbDsgIC8vIGN1c3RvbUV2ZW50LmRldGFpbCAtIGlzIGVsZW1lbnQgYmVpbmcgY2xpY2tlZCBwYXNzZWQgYXMgYWRkaXRpb25hbCBkYXRhIGluIHRoZSBldmVudC5cblx0Y29uc3QgY3VycmVudE1vZHVsZUVsID0gZWxDbGlja2VkLmNsb3Nlc3QoJy5kc2xjLW1vZHVsZS1mcm9udCcpO1xuXHRjb25zdCBjdXJyZW50TW9kdWxlSWQgPSBjdXJyZW50TW9kdWxlRWwuZGF0YXNldC5tb2R1bGU7XG5cblx0Y29uc3QgZWxFZGl0aW5nID0gTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFXaW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRzbGNhLW1vZHVsZS1iZWluZy1lZGl0ZWQnKTtcblx0Y29uc3Qgcm93X2VkaXRlZCA9IGpRdWVyeSgnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1iZWluZy1lZGl0ZWQnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5sZW5ndGg7XG5cblx0Ly8vIElmIHNldHRpbmdzIHBhbmVsIG9wZW5lZCAtIGRvIG5vdCBwcm9jZWVkLlxuXHRpZiAoIExpdmVDb21wb3Nlci5CdWlsZGVyLkZsYWdzLnVpSGlkZGVuIHx8ICggbnVsbCAhPT0gZWxFZGl0aW5nICYmIGVsRWRpdGluZy5sZW5ndGggPiAwICkgfHwgcm93X2VkaXRlZCA+IDAgKSB7XG5cdFx0aWYgKCBlbEVkaXRpbmcgIT0gY3VycmVudE1vZHVsZUVsICkge1xuXHRcdFx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuVUkuc2hha2VQYW5lbENvbmZpcm1CdXR0b24oKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0dW5tYXJrTW9kdWxlc0JlaW5nRWRpdGVkKCk7XG5cblx0Ly8gQWRkIHRoZSBcImJlaW5nIGVkaXRlZFwiIGNsYXNzIHRvIGN1cnJlbnQgbW9kdWxlXG5cdGN1cnJlbnRNb2R1bGVFbC5jbGFzc0xpc3QuYWRkKCdkc2xjYS1tb2R1bGUtYmVpbmctZWRpdGVkJyk7XG5cdC8vIENhbGwgdGhlIGZ1bmN0aW9uIHRvIGRpc3BsYXkgb3B0aW9uc1xuXHRkc2xjX21vZHVsZV9vcHRpb25zX3Nob3coIGN1cnJlbnRNb2R1bGVJZCApO1xuXHQvLyBDb3ZlciB1cCBvdGhlciBtb2R1bGVzIHdpdGggc2VtaSB0cmFuc3AgY292ZXJcblx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFXaW5kb3cuZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdtb2R1bGUtZWRpdGluZy1pbi1wcm9ncmVzcycpO1xufSk7XG5cbi8qKlxuICogSG9vayAtIEVkaXQgTW9kdWxlIE9uIENsaWNrICggRGlzcGxheSBPcHRpb25zIFBhbmVsICkgLSBGaXhlZDogaHR0cHM6Ly9naXRodWIuY29tL2xpdmUtY29tcG9zZXIvbGl2ZS1jb21wb3Nlci1wYWdlLWJ1aWxkZXIvaXNzdWVzLzg5NVxuICovXG5cbmNvbnN0IGFkanVzdFppbmRleCA9ICgpID0+IHtcblx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudC5vbigge1xuXHRcdG1vdXNlZW50ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLW1hbmFnZScsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLmNzcyhcInotaW5kZXhcIiwgXCI5OTk5OFwiKTtcblx0XHR9LFxuXHRcdG1vdXNlbGVhdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLW1hbmFnZScsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLmNzcyhcInotaW5kZXhcIiwgXCI5OTk5OTlcIik7XG5cdFx0fSxcblx0fSwgJy5kc2xjYS1jaGFuZ2Utd2lkdGgtbW9kdWxlLWhvb2ssIC5kc2xjLW1vZHVsZS1mcm9udCAuZHNsY2EtbW9kdWxlLW1hbmFnZScpO1xufVxuXG4vKipcbiAqIEhvb2sgLSBTZXQgTW9kdWxlIFdpZHRoXG4gKi9cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW9kdWxlQ2hhbmdlV2lkdGgnLCBmdW5jdGlvbiAoIGN1c3RvbUV2ZW50ICkge1xuXHRjb25zdCBlbENsaWNrZWQgPSBjdXN0b21FdmVudC5kZXRhaWw7ICAvLyBjdXN0b21FdmVudC5kZXRhaWwgLSBpcyBlbGVtZW50IGJlaW5nIGNsaWNrZWQgcGFzc2VkIGFzIGFkZGl0aW9uYWwgZGF0YSBpbiB0aGUgZXZlbnQuXG5cdGNvbnN0IGN1cnJlbnRNb2R1bGVFbCA9IGVsQ2xpY2tlZC5jbG9zZXN0KCcuZHNsYy1tb2R1bGUtZnJvbnQnKTtcblxuXHRpZiAoICEgZWxDbGlja2VkLmNsYXNzTGlzdC5jb250YWlucygnZHNsY2EtYWN0aW9uLWRpc2FibGVkJykgKSB7XG5cdFx0dmFyIG9sZFNpemUgPSBjdXJyZW50TW9kdWxlRWwuZGF0YXNldC5kc2xjTW9kdWxlU2l6ZTtcblx0XHR2YXIgbmV3U2l6ZSA9IGVsQ2xpY2tlZC5kYXRhc2V0LnNpemU7XG5cblx0XHQvLyBTdGFydCBleHBlbnNpdmUgZnVuY3Rpb24gb25seSBpZiB0aGUgdmFsdWUgY2hhbmdlZC5cblx0XHRpZiAoICBOdW1iZXIob2xkU2l6ZSkgIT09IE51bWJlcihuZXdTaXplKSApIHtcblx0XHRcdGRzbGNfbW9kdWxlX3dpZHRoX3NldCggY3VycmVudE1vZHVsZUVsLCBuZXdTaXplICk7XG5cdFx0fVxuXHR9XG5cbn0pO1xuXG4vKipcbiAqIEhvb2sgLSBTaG93IGNvZGUgZm9yIGFsdGVyaW5nIG1vZHVsZSdzIGRlZmF1bHRzXG4gKi9cbi8qXG5GSVhJVFxuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudC5vbiggJ2NsaWNrJywgJy5kc2xjYS1tb2R1bGUtZ2V0LWRlZmF1bHRzLWhvb2snLCBmdW5jdGlvbigpe1xuXG5cdC8vIFZhcnNcblx0dmFyIG1vZHVsZSA9IGpRdWVyeSh0aGlzKS5jbG9zZXN0KCcuZHNsYy1tb2R1bGUtZnJvbnQnKTtcblx0dmFyIGNvZGUgPSBkc2xjX2RtX2dldF9kZWZhdWx0cyggbW9kdWxlICk7XG5cblx0Ly8gR2VuZXJhdGUgbW9kYWwncyB0ZXh0XG5cdHZhciBtZXNzYWdlID0gJzxzcGFuIGNsYXNzPVwiZHNsY2EtcHJvbXB0LW1vZGFsLXRpdGxlXCI+TW9kdWxlIERlZmF1bHRzPC9zcGFuPidcblx0XHQrICc8c3BhbiBjbGFzcz1cImRzbGNhLXByb21wdC1tb2RhbC1kZXNjclwiPlRoZSBjb2RlIGJlbGxvdyBpcyB1c2VkIHRvIGFsdGVyIHRoZSBkZWZhdWx0cy48L3NwYW4+J1xuXHRcdCsgJzx0ZXh0YXJlYT48L3RleHRhcmVhPjxicj48YnI+JztcblxuXHQvLyBIaWRlIG1vZGFsJ3MgY2FuY2VsIGJ1dHRvblxuXHRqUXVlcnkoJy5kc2xjYS1wcm9tcHQtbW9kYWwtY2FuY2VsLWhvb2snKS5oaWRlKCk7XG5cblx0Ly8gU2hvdyBjb25maXJtIGJ1dHRvbiBhbmQgY2hhbmdlIGl0IHRvIFwiT0tcIlxuXHRqUXVlcnkoJy5kc2xjYS1wcm9tcHQtbW9kYWwtY29uZmlybS1ob29rJykuaHRtbCgnPHNwYW4gY2xhc3M9XCJkc2xjLWljb24gZHNsYy1pY29uLW9rXCI+PC9zcGFuPk9LJyk7XG5cblx0Ly8gU2hvdyB0aGUgbW9kYWwgcHJvbXB0XG5cdGRzbGNfanNfY29uZmlybSggJ2Rldl9tb2RlX2dldF9kZWZhdWx0JywgbWVzc2FnZSwgbW9kdWxlICk7XG59KTsgKi9cblxuLyoqXG4gKiBIb29rIC0gUmVmcmVzaCBNb2R1bGVcbiAqIFdlIGhhdmUgJ3JlZnJlc2gnIGljb24gb24gYmxvZyBwb3N0cyBncmlkIGFuZCBvdGhlciBwb3N0LWJhc2VkIG1vZHVsZXMuXG4gKiBJdCdzIHZpc2libGUgb25seSB3aGVuIHRoZXJlIGFyZSBubyBwb3N0cyB0byByZW5kZXIuXG4gKi9cbi8qXG5GSVhJVFxuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudC5vbiggJ2NsaWNrJywgJy5kc2xjYS1yZWZyZXNoLW1vZHVsZS1ob29rJywgZnVuY3Rpb24oZSl7XG5cblx0alF1ZXJ5KHRoaXMpLmNzcyh7XG5cdFx0Jy13ZWJraXQtYW5pbWF0aW9uLW5hbWUnIDogJ2RzbGNSb3RhdGUnLFxuXHRcdCctbW96LWFuaW1hdGlvbi1uYW1lJyA6ICdkc2xjUm90YXRlJyxcblx0XHQnYW5pbWF0aW9uLW5hbWUnIDogJ2RzbGNSb3RhdGUnLFxuXHRcdCdhbmltYXRpb24tZHVyYXRpb24nIDogJzAuNnMnLFxuXHRcdCctd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbicgOiAnMC42cycsXG5cdFx0J2FuaW1hdGlvbi1pdGVyYXRpb24tY291bnQnIDogJ2luZmluaXRlJyxcblx0XHQnLXdlYmtpdC1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50JyA6ICdpbmZpbml0ZSdcblx0fSk7XG5cdGpRdWVyeSh0aGlzKS5jbG9zZXN0KCcuZHNsYy1tb2R1bGUtZnJvbnQnKS5hZGRDbGFzcygnZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcpO1xuXHRtb2R1bGVPdXRwdXRBbHRlcmVkKCBmdW5jdGlvbigpIHtcblxuXHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1iZWluZy1lZGl0ZWQnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5yZW1vdmVDbGFzcygnZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcpO1xuXHR9KTtcbn0pOyAqL1xuXG4vKipcbiAqIFNob3cgV1lTSVdZR1xuICovXG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3d5c2l3eWdFZGl0JywgZnVuY3Rpb24gKCBjdXN0b21FdmVudCApIHtcblx0Y29uc3QgZWxDbGlja2VkID0gY3VzdG9tRXZlbnQuZGV0YWlsOyAgLy8gY3VzdG9tRXZlbnQuZGV0YWlsIC0gaXMgZWxlbWVudCBiZWluZyBjbGlja2VkIHBhc3NlZCBhcyBhZGRpdGlvbmFsIGRhdGEgaW4gdGhlIGV2ZW50LlxuXHRjb25zdCBjdXJyZW50TW9kdWxlRWwgPSBlbENsaWNrZWQuY2xvc2VzdCgnLmRzbGMtbW9kdWxlLWZyb250Jyk7XG5cblx0Ly8gY29uc3QgZWRpdGFibGVFbCA9IGVsQ2xpY2tlZC5xdWVyeVNlbGVjdG9yKCcuZHNsY2EtZWRpdGFibGUtY29udGVudCcpO1xuXHRjb25zdCBpZFRvRWRpdCA9IGVsQ2xpY2tlZC5kYXRhc2V0LmlkVG9FZGl0O1xuXG5cdGNvbnN0IGVkaXRhYmxlRWwgPSBjdXJyZW50TW9kdWxlRWwucXVlcnlTZWxlY3RvcignW2RhdGEtZWRpdC1pZD1cIicgKyBpZFRvRWRpdCArICdcIl0nKTtcblx0bGV0IGNvbnRlbnQgPSAnJztcblxuXHRpZiAoICdURVhUQVJFQSc9PT0gZWRpdGFibGVFbC50YWdOYW1lIHx8ICdJTlBVVCc9PT0gZWRpdGFibGVFbC50YWdOYW1lICkge1xuXHRcdGNvbnRlbnQgPSBlZGl0YWJsZUVsLnZhbHVlO1xuXHR9IGVsc2Uge1xuXHRcdGNvbnRlbnQgPSBlZGl0YWJsZUVsLmlubmVySFRNTDtcblx0fVxuXG5cdGlmICggdW5kZWZpbmVkID09PSBjb250ZW50ICkge1xuXHRcdGNvbnRlbnQgPSAnJztcblx0fVxuXG5cdGlmICggY29udGVudC50cmltKCkubGVuZ3RoICkge1xuXHRcdC8vIEV4dHJhY3QgQ29udGVudCBmb3IgY3VycmVudCB0YWIvYWNjb3JkaW9uOlxuXHRcdC8qIGlmICggY3VycmVudE1vZHVsZUVsLmNsYXNzTGlzdC5jb250YWlucygnZHNsYy1tb2R1bGUtaGFuZGxlLWxpa2UtYWNjb3JkaW9uJykgfHwgY3VycmVudE1vZHVsZUVsLmNsYXNzTGlzdC5jb250YWlucygnZHNsYy1tb2R1bGUtaGFuZGxlLWxpa2UtdGFicycpICkge1xuXHRcdFx0Y29uc3QgZnVsbF9jb250ZW50X2FyciA9IGNvbnRlbnQuc3BsaXQoJyhkc2xjX3NlcCknKTtcblx0XHRcdGlmICggZnVsbF9jb250ZW50X2Fyci5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnQgPSBmdWxsX2NvbnRlbnRfYXJyW2lkVG9FZGl0XS50cmltKCk7XG5cdFx0XHR9XG5cdFx0fSAqL1xuXG5cdFx0Y29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvPGxjdGV4dGFyZWEvZywgJzx0ZXh0YXJlYScpLnJlcGxhY2UoLzxcXC9sY3RleHRhcmVhL2csICc8L3RleHRhcmVhJyk7XG5cdH1cblxuXHQvLyBSZXN0b3JlIHNob3J0Y29kZXMgcHJlc2VudGF0aW9uLlxuXHRpZiAoIGNvbnRlbnQuaW5jbHVkZXMoICclJyApICkge1xuXHRcdGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoLyVcXChcXCglL2csICdbJyk7XG5cdFx0Y29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvJVxcKVxcKSUvZywgJ10nKTtcblx0XHRjb250ZW50ID0gY29udGVudC5yZXBsYWNlKC8lXFwoJS9nLCAnWycpO1xuXHRcdGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoLyVcXCklL2csICddJyk7XG5cdFx0Y29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvJVxceyUvZywgJ1snKTtcblx0XHRjb250ZW50ID0gY29udGVudC5yZXBsYWNlKC8lXFx9JS9nLCAnXScpO1xuXHR9XG5cblx0Y29udGVudCA9IGNvbnRlbnQudHJpbSgpO1xuXG5cdC8vIEZpbGwgVGlueU1DRSBlZGl0b3Igd2l0aCBleHRyYWN0ZWQgYWJvdmUgY29udGVudC5cblx0aWYgKCB0eXBlb2YgdGlueW1jZSAhPSAndW5kZWZpbmVkJyApIHtcblx0XHR2YXIgZWRpdG9yID0gdGlueW1jZS5nZXQoICdkc2xjYXdwZWRpdG9yJyApO1xuXG5cdFx0aWYgKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd3AtZHNsY2F3cGVkaXRvci13cmFwJykuY2xhc3NMaXN0LmNvbnRhaW5zKCd0bWNlLWFjdGl2ZScpICkge1xuXHRcdFx0ZWRpdG9yLnNldENvbnRlbnQoIGNvbnRlbnQsIHtmb3JtYXQgOiAnaHRtbCd9ICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkc2xjYXdwZWRpdG9yJykudmFsdWUgPSBjb250ZW50O1xuXHRcdH1cblxuXHRcdGlmICggISBjdXJyZW50TW9kdWxlRWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdkc2xjYS1tb2R1bGUtYmVpbmctZWRpdGVkJykgKSB7XG5cdFx0XHRjdXJyZW50TW9kdWxlRWwucXVlcnlTZWxlY3RvcignLmRzbGNhLW1vZHVsZS1lZGl0LWhvb2snKS5jbGljaygpO1xuXHRcdH1cblxuXHRcdGpRdWVyeSgnLmRzbGNhLXdwLWVkaXRvcicpLnNob3coKTtcblx0XHRlZGl0YWJsZUVsLmNsYXNzTGlzdC5hZGQoJ2RzbGNhLXd5c2l3eWctYWN0aXZlJyk7XG5cdFx0alF1ZXJ5KCcjZHNsY2F3cGVkaXRvcl9pZnIsICNkc2xjYXdwZWRpdG9yJykuY3NzKHsgaGVpZ2h0IDogalF1ZXJ5KCcuZHNsY2Etd3AtZWRpdG9yJykuaGVpZ2h0KCkgLSAzMDAgfSk7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc29sZS5pbmZvKCAnTGl2ZSBDb21wb3NlcjogVGlueU1DRSBpcyB1bmRlZmluZWQuJyApO1xuXHR9XG59KTtcblxuLy8gRWRpdGFibGUgQ29udGVudHMuXG5jb25zdCBlZGl0YWJsZUNvbnRlbnRUZXh0RXZlbnRzID0gKCkgPT4ge1xuXG5cdC8vIFByZXZpZXcgaWZyYW1lIGV2ZW50cy5cblx0LyogTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFXaW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uIChldmVudCkge1xuXHRcdC8vIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0aWYgKCBldmVudC50YXJnZXQubWF0Y2hlcyggJ1tkYXRhLWV2ZW50PVwibW9kdWxlLWVkaXRcIl0nICkgKSB7XG5cblx0XHR9XG5cdH0pO1xuICovXG4vKiBcdExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhV2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0Ly8gZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRpZiAoIGV2ZW50LnRhcmdldC5tYXRjaGVzKCAnW2RhdGEtZXZlbnQ9XCJtb2R1bGUtZWRpdFwiXScgKSApIHtcblxuXHRcdH1cblx0fSk7XG4gKi9cblx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudC5vbignYmx1cicsICcuZHNsY2EtZWRpdGFibGUtY29udGVudCcsIGZ1bmN0aW9uKCkge1xuXHRcdGlmICggISBMaXZlQ29tcG9zZXIuQnVpbGRlci5GbGFncy51aUhpZGRlbiAmJiBqUXVlcnkodGhpcykuZGF0YSgndHlwZScpID09ICdzaW1wbGUnICkge1xuXHRcdFx0ZWRpdGFibGVDb250ZW50Q29kZUdlbmVyYXRpb24oIGpRdWVyeSh0aGlzKSApO1xuXHRcdH1cblx0fSkub24oICdwYXN0ZScsICcuZHNsY2EtZWRpdGFibGUtY29udGVudDpub3QoLmlubGluZS1lZGl0b3IpJywgZnVuY3Rpb24oKXtcblx0XHRpZiAoICEgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuRmxhZ3MudWlIaWRkZW4gICYmIGpRdWVyeSh0aGlzKS5kYXRhKCd0eXBlJykgPT0gJ3NpbXBsZScgKSB7XG5cdFx0XHR2YXIgZHNsY1JlYWxJbnB1dCA9IGpRdWVyeSh0aGlzKTtcblxuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRpZiAoIGRzbGNSZWFsSW5wdXQuZGF0YSgndHlwZScpID09ICdzaW1wbGUnICkge1xuXHRcdFx0XHRcdGRzbGNSZWFsSW5wdXQuaHRtbCggZHNsY1JlYWxJbnB1dC50ZXh0KCkgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlZGl0YWJsZUNvbnRlbnRDb2RlR2VuZXJhdGlvbiggZHNsY1JlYWxJbnB1dCApO1xuXHRcdFx0fSwgMTAwKTtcblx0XHR9XG5cdH0pLm9uKCdmb2N1cycsICcuZHNsY2EtZWRpdGFibGUtY29udGVudCcsIGZ1bmN0aW9uKCkge1xuXHRcdGlmICggalF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLmxlbmd0aCA+IDAgJiYgISBqUXVlcnkodGhpcykuY2xvc2VzdCgnLmRzbGMtbW9kdWxlLWZyb250JykuaGFzQ2xhc3MoJ2RzbGNhLW1vZHVsZS1iZWluZy1lZGl0ZWQnKSApIHtcblx0XHRcdGpRdWVyeSh0aGlzKS50cmlnZ2VyKCdibHVyJyk7XG5cdFx0fVxuXHR9KS5vbigna2V5dXAnLCAnLmRzbGNhLWVkaXRhYmxlLWNvbnRlbnQnLCBmdW5jdGlvbigpe1xuXHRcdGlmICggalF1ZXJ5KHRoaXMpLmRhdGEoJ3R5cGUnKSA9PSAnc2ltcGxlJyApe1xuXHRcdFx0alF1ZXJ5KHRoaXMpLmNsb3Nlc3QoJy5kc2xjLW1vZHVsZS1mcm9udCcpLmFkZENsYXNzKCdkc2xjYS1tb2R1bGUtY2hhbmdlLW1hZGUnKTtcblx0XHR9XG5cdH0pO1xufVxuXG5cblxuLyoqXG4gKiBNT0RVTEVTIC0gRGVsZXRlIGEgTW9kdWxlXG4gKi9cbmZ1bmN0aW9uIGRzbGNfbW9kdWxlX2RlbGV0ZSggbW9kdWxlICkge1xuXG5cdGlmICggd2luZG93LmRzbGNEZWJ1ZyApIGNvbnNvbGUubG9nKCAnZHNsY19kZWxldGVfbW9kdWxlJyApO1xuXHRzaG93U2VjdGlvbiggJy5kc2xjYS1tb2R1bGVzJyApO1xuXG5cdGFuaW1lKHtcblx0XHR0YXJnZXRzOiBtb2R1bGUsXG5cdFx0ZWFzaW5nOiAnZWFzZU91dEV4cG8nLFxuXHRcdHNjYWxlOiAwLFxuXHRcdG9wYWNpdHk6IDAsXG5cdFx0ZHVyYXRpb246IDM1MCxcblx0XHRkZWxheTogMCxcblx0XHRlbmREZWxheTogMCxcblx0XHRjb21wbGV0ZTogZnVuY3Rpb24oYW5pbSkge1xuXHRcdFx0Ly8gUmVtb3ZlIG1vZHVsZSwgcmVnZW5lcmF0ZSBjb2RlLCBzaG93IHB1Ymxpc2ggYnV0dG9uXG5cdFx0XHRtb2R1bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbW9kdWxlICk7XG5cdFx0XHR3aW5kb3cuZHNsY19nZW5lcmF0ZV9jb2RlKCk7XG5cdFx0XHR3aW5kb3cuZHNsY19zaG93X3B1Ymxpc2hfYnV0dG9uKCk7XG5cdFx0fVxuXHQgIH0pO1xufVxuXG5jb25zdCB1bm1hcmtNb2R1bGVzQmVpbmdFZGl0ZWQgPSAoKSA9PiB7XG5cdC8vIFJlbW92ZSBiZWluZyBlZGl0ZWQgY2xhc3MgaWYgc29tZSBtb2R1bGUgaXMgYmVpbmcgZWRpdGVkLlxuXHRjb25zdCBlbEVkaXRpbmcgPSBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcpO1xuXHRpZiAoIG51bGwgIT09IGVsRWRpdGluZyApIHtcblx0XHRlbEVkaXRpbmcuY2xhc3NMaXN0LnJlbW92ZSgnZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcpO1xuXHR9XG59XG5cbi8qKlxuICogTW9kdWxlcyAtIENvcHkgYSBNb2R1bGVcbiAqL1xuZnVuY3Rpb24gbW9kdWxlRHVwbGljYXRlKCBtb2R1bGUgKSB7XG5cdGlmICggd2luZG93LmRzbGNEZWJ1ZyApIGNvbnNvbGUubG9nKCAnZHNsY19jb3B5X21vZHVsZScgKTtcblx0dW5tYXJrTW9kdWxlc0JlaW5nRWRpdGVkKCk7XG5cblx0Ly8gRHVwbGljYXRlIHRoZSBtb2R1bGUgYW5kIGFwcGVuZCBpdCB0byB0aGUgc2FtZSBhcmVhXG5cdHZhciBtb2R1bGVfbmV3ID0gbW9kdWxlLmNsb25lTm9kZSh0cnVlKTtcblxuXHRqUXVlcnkoIG1vZHVsZV9uZXcgKS5hcHBlbmRUbyggbW9kdWxlLmNsb3Nlc3QoICcuZHNsYy1tb2R1bGVzLWFyZWEnICkgKS5jc3Moe1xuXHRcdCctd2Via2l0LWFuaW1hdGlvbi1uYW1lJyA6ICdub25lJyxcblx0XHQnLW1vei1hbmltYXRpb24tbmFtZScgOiAnbm9uZScsXG5cdFx0J2FuaW1hdGlvbi1uYW1lJyA6ICdub25lJyxcblx0XHQnYW5pbWF0aW9uLWR1cmF0aW9uJyA6ICcwJyxcblx0XHQnLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb24nIDogJzAnLFxuXHRcdG9wYWNpdHkgOiAwLFxuXHRcdHRvcDogLTUwXG5cdH0pLmFkZENsYXNzKCdkc2xjYS1tb2R1bGUtYmVpbmctZWRpdGVkJyk7XG5cblx0Ly8gR2VuZXJhdGUgbmV3IElEIGZvciB0aGUgbmV3IG1vZHVsZSBhbmQgY2hhbmdlIGl0IGluIEhUTUwvQ1NTIG9mIHRoZSBtb2R1bGUuXG5cdGdldE5ld01vZHVsZUlkKCBtb2R1bGVfbmV3ICk7XG5cblx0Ly8gTW9kdWxlIGZ1bGx5IGNsb25lZC4gRmluaXNoIHRoZSBwcm9jZXNzLlxuXHQvLyBOZWVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbiB0byB1cGRhdGUgbGFzdCBjb2x1bW4gY2xhc3MgZm9yIHRoZSBtb2R1bGVzLlxuXHR3aW5kb3cuZHNsY19nZW5lcmF0ZV9jb2RlKCk7XG5cblx0Ly8gRmFkZSBpbiB0aGUgbW9kdWxlXG5cdGFuaW1lKHtcblx0XHR0YXJnZXRzOiBtb2R1bGVfbmV3LFxuXHRcdGVhc2luZzogJ2Vhc2VPdXRFeHBvJyxcblx0XHQvLyBzY2FsZTogMCxcblx0XHR0b3A6IDAsXG5cdFx0b3BhY2l0eTogMSxcblx0XHRkdXJhdGlvbjogNDAwLFxuXHRcdGRlbGF5OiAwLFxuXHRcdGVuZERlbGF5OiAwLFxuXHRcdGNvbXBsZXRlOiBmdW5jdGlvbihhbmltKSB7XG5cdFx0XHRtb2R1bGVfbmV3LmNsYXNzTGlzdC5yZW1vdmUoICdkc2xjYS1tb2R1bGUtYmVpbmctZWRpdGVkJyApO1xuXHRcdH1cblx0fSk7XG5cblx0d2luZG93LmRzbGNfc2hvd19wdWJsaXNoX2J1dHRvbigpO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIG5ldyBJRCBmb3IgdGhlIG1vZHVsZSBwcm92aWRlZFxuICpcbiAqIFNlYXJjaC9SZXBsYWNlIG9sZCBtb2R1bGUgSUQgd2l0aCBuZXcgb25lIGluIEhUTUwvQ1NTIG9mIHRoZSBtb2R1bGUuXG4gKlxuICogQHBhcmFtIERPTSBtb2R1bGUgTW9kdWxlIHRoYXQgbmVlZHMgSUQgdXBkYXRlZCAobmV3IElEKS5cbiAqIEByZXR1cm4gdm9pZFxuICovXG5leHBvcnQgY29uc3QgZ2V0TmV3TW9kdWxlSWQgPSAoIG1vZHVsZUVsICkgPT4ge1xuXG5cdC8vIFZhcnNcblx0dmFyIGRzbGNfbW9kdWxlX2lkID0gTGl2ZUNvbXBvc2VyLlV0aWxzLmdldF91bmlxdWVfaWQoKTsgLy8gR2VuZXJhdGUgbmV3IG1vZHVsZSBJRC5cblx0dmFyIGRzbGNfbW9kdWxlX2lkX29yaWdpbmFsID0gbW9kdWxlRWwuZ2V0QXR0cmlidXRlKCAnaWQnICk7IC8vIE9yaWdpbmFsIE1vZHVsZSBJRC5cblxuXHQvLyBVcGRhdGUgbW9kdWxlIElEIGluIGRhdGEgYXR0cmlidXRlXG5cdG1vZHVsZUVsLnNldEF0dHJpYnV0ZSggJ2RhdGEtbW9kdWxlLWlkJywgZHNsY19tb2R1bGVfaWQgKTtcblx0Ly8gVXBkYXRlIG1vZHVsZSBJRCBpbiBpZCBhdHRyaWJ1dGUgb2YgZWxlbWVudFxuXHRtb2R1bGVFbC5zZXRBdHRyaWJ1dGUoICdpZCcsICdkc2xjLW1vZHVsZS0nICsgZHNsY19tb2R1bGVfaWQgKTtcblxuXHQvKipcblx0ICogU2VhcmNoL1JlcGxhY2UgbW9kdWxlIGlkIGluIHRoZSBpbmxpbmUgQ1NTXG5cdCAqL1xuXHR2YXIgaW5saW5lX2Nzc19lbCA9IG1vZHVsZUVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCAnc3R5bGUnIClbMF07XG5cdHZhciBpbmxpbmVfY3NzX2NvZGUgPSBpbmxpbmVfY3NzX2VsLnRleHRDb250ZW50O1xuXHQvLyBVcGRhdGUgaWQgYXR0cmlidXRlIGZvciA8c3R5bGU+IGVsZW1lbnQgd2l0aCBuZXcgdmFsdWVcblx0aW5saW5lX2Nzc19lbC5zZXRBdHRyaWJ1dGUoICdpZCcsICcjY3NzLWZvci1kc2xjLW1vZHVsZS0nICsgZHNsY19tb2R1bGVfaWQgKTtcblx0Ly8gU2VhcmNoL1JlcGxhY2UgYWxsIG9jY3VycmVuY2VzIG9mIG1vZHVsZSBJRCBpbiBpbmxpbmUgQ1NTXG5cdGlubGluZV9jc3NfY29kZSA9IGlubGluZV9jc3NfY29kZS5zcGxpdCggZHNsY19tb2R1bGVfaWRfb3JpZ2luYWwgKS5qb2luKCAnZHNsYy1tb2R1bGUtJyArIGRzbGNfbW9kdWxlX2lkICk7XG5cdC8vIFB1dCBDU1MgY29kZSBiYWNrIGludG8gPHN0eWxlPiBlbGVtZW50XG5cdGlubGluZV9jc3NfZWwudGV4dENvbnRlbnQgPSBpbmxpbmVfY3NzX2NvZGU7XG5cblxuXHQvLyBVcGRhdGUgbW9kdWxlIElEIGluIHJhdyBiYXNlNjQgY29kZSAoZHNsY19jb2RlKSBvZiB0aGUgbW9kdWxlXG5cdExpdmVDb21wb3Nlci5VdGlscy51cGRhdGVfbW9kdWxlX3Byb3BlcnR5X3JhdyggbW9kdWxlRWwsICdtb2R1bGVfaW5zdGFuY2VfaWQnLCBkc2xjX21vZHVsZV9pZCApO1xufVxuXG4vKipcbiAqIE1PRFVMRVMgLSBTZXQgV2lkdGhcbiAqL1xuZnVuY3Rpb24gZHNsY19tb2R1bGVfd2lkdGhfc2V0KCBtb2R1bGVFbCwgbmV3X3dpZHRoICkge1xuXG5cdGlmICggd2luZG93LmRzbGNEZWJ1ZyApIGNvbnNvbGUubG9nKCAnZHNsY19tb2R1bGVfd2lkdGhfc2V0JyApO1xuXG5cdC8vIEdlbmVyYXRlIG5ldyBjb2x1bW4gY2xhc3Ncblx0dmFyIG5ld0NsYXNzID0gJ2RzbGMtJyArIG5ld193aWR0aCArICctY29sJztcblxuXHQvLyBBZGQgbmV3IGNvbHVtbiBjbGFzcyBhbmQgY2hhbmdlIHNpemUgXCJkYXRhXCJcblx0alF1ZXJ5KCBtb2R1bGVFbCApXG5cdFx0LnJlbW92ZUNsYXNzKCdkc2xjLTEtY29sIGRzbGMtMi1jb2wgZHNsYy0zLWNvbCBkc2xjLTQtY29sIGRzbGMtNS1jb2wgZHNsYy02LWNvbCBkc2xjLTctY29sIGRzbGMtOC1jb2wgZHNsYy05LWNvbCBkc2xjLTEwLWNvbCBkc2xjLTExLWNvbCBkc2xjLTEyLWNvbCcpXG5cdFx0LmFkZENsYXNzKG5ld0NsYXNzKVxuXHRcdC5kYXRhKCdkc2xjLW1vZHVsZS1zaXplJywgbmV3X3dpZHRoKTtcblx0XHQvLy5hZGRDbGFzcygnZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcpOyDigJMgRGVwcmVjYXRlZFxuXG5cdC8vIENoYW5nZSBtb2R1bGUgc2l6ZSBpbiBlbGVtZW50IGF0dHJpYnV0ZVxuXHRtb2R1bGVFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZHNsYy1tb2R1bGUtc2l6ZScsbmV3X3dpZHRoKTtcblxuXHQvLyBVcGRhdGUgbW9kdWxlIHNpemUgaW4gcmF3IGJhc2U2NCBjb2RlIChkc2xjX2NvZGUpIG9mIHRoZSBtb2R1bGVcblx0TGl2ZUNvbXBvc2VyLlV0aWxzLnVwZGF0ZV9tb2R1bGVfcHJvcGVydHlfcmF3KCBtb2R1bGVFbCwgJ2RzbGNfbV9zaXplJywgbmV3X3dpZHRoICk7XG5cblx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFXaW5kb3cuZHNsY19tYXNvbnJ5KCk7XG5cblx0d2luZG93LmRzbGNfZ2VuZXJhdGVfY29kZSgpO1xuXHR3aW5kb3cuZHNsY19zaG93X3B1Ymxpc2hfYnV0dG9uKCk7XG59XG5cbi8qKlxuICogTU9EVUxFUyAtIFNob3cgbW9kdWxlIG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gZHNsY19tb2R1bGVfb3B0aW9uc19zaG93KCBtb2R1bGVJRCApIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfbW9kdWxlX29wdGlvbnNfc2hvdycgKTtcblxuXHRpZiAoIHVuZGVmaW5lZCA9PT0gbW9kdWxlSUQgKSB7XG5cdFx0Y29uc29sZS53YXJuKCAnTm8gbW9kdWxlIElEIGRlZmluZWQgaW4gZHNsY19tb2R1bGVfb3B0aW9uc19zaG93IGZ1bmN0aW9uLicgKVxuXHR9XG5cblx0Ly8gVmFyc1xuXHR2YXIgZHNsY01vZHVsZSA9IGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1iZWluZy1lZGl0ZWQnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KSxcblx0ZHNsY01vZHVsZU9wdGlvbnMgPSBqUXVlcnkoICcuZHNsY2EtbW9kdWxlLW9wdGlvbnMtZnJvbnQgdGV4dGFyZWEnLCBkc2xjTW9kdWxlICksXG5cdGRzbGNEZWZhdWx0U2VjdGlvbiA9IGpRdWVyeSgnLmRzbGNhLWhlYWRlcicpLmRhdGEoJ2RlZmF1bHQtc2VjdGlvbicpLFxuXHRwc2V1ZG9QYW5lbCA9IGpRdWVyeShqUXVlcnkoJyNwc2V1ZG8tcGFuZWwnKS5odG1sKCkpO1xuXG5cdGpRdWVyeShcIiN3cHdyYXBcIikuYXBwZW5kKHBzZXVkb1BhbmVsKTtcblxuXHQvLyBTZXR0aW5ncyBhcnJheSBmb3IgdGhlIEFqYXggY2FsbFxuXHR2YXIgZHNsY1NldHRpbmdzID0ge307XG5cdGRzbGNTZXR0aW5nc1snYWN0aW9uJ10gPSAnZHNsYy1hamF4LWRpc3BsYXktbW9kdWxlLW9wdGlvbnMnO1xuXHRkc2xjU2V0dGluZ3NbJ2RzbGMnXSA9ICdhY3RpdmUnO1xuXHRkc2xjU2V0dGluZ3NbJ2RzbGNfbW9kdWxlX2lkJ10gPSBtb2R1bGVJRDtcblx0ZHNsY1NldHRpbmdzWydkc2xjX3Bvc3RfaWQnXSA9IGpRdWVyeSgnLmRzbGNhLWNvbnRhaW5lcicpLmRhdGEoJ2RhdGEtcG9zdC1pZCcpO1xuXHRkc2xjU2V0dGluZ3MuZHNsY191cmxfdmFycyA9IExpdmVDb21wb3Nlci5VdGlscy5nZXRfcGFnZV9wYXJhbXMoKTtcblxuXHQvLyBHbyB0aHJvdWdoIGVhY2ggb3B0aW9uIHRvIGZpbGwgZHNsY1NldHRpbmdzIGFycmF5XG5cdC8vIHdpdGggY3VycmVudCBtb2R1bGUgc2V0dGluZyB2YWx1ZXNcblx0ZHNsY01vZHVsZU9wdGlvbnMuZWFjaChmdW5jdGlvbigpe1xuXG5cdFx0Ly8gVmFyc1xuXHRcdHZhciBkc2xjT3B0aW9uID0galF1ZXJ5KHRoaXMpLFxuXHRcdGRzbGNPcHRpb25JRCA9IGRzbGNPcHRpb24uZGF0YSgnaWQnKSxcblx0XHRkc2xjT3B0aW9uVmFsdWUgPSBkc2xjT3B0aW9uLnZhbCgpO1xuXG5cdFx0aWYgKCBkc2xjT3B0aW9uVmFsdWUuaW5jbHVkZXMoICclJyApICkge1xuXHRcdFx0Ly8gUmVzdG9yZSBzaG9ydGNvZGVzLlxuXHRcdFx0ZHNsY09wdGlvblZhbHVlID0gZHNsY09wdGlvblZhbHVlLnJlcGxhY2UoLyVcXChcXCglL2csICdbJyk7XG5cdFx0XHRkc2xjT3B0aW9uVmFsdWUgPSBkc2xjT3B0aW9uVmFsdWUucmVwbGFjZSgvJVxcKVxcKSUvZywgJ10nKTtcblx0XHRcdGRzbGNPcHRpb25WYWx1ZSA9IGRzbGNPcHRpb25WYWx1ZS5yZXBsYWNlKC8lXFwoJS9nLCAnWycpO1xuXHRcdFx0ZHNsY09wdGlvblZhbHVlID0gZHNsY09wdGlvblZhbHVlLnJlcGxhY2UoLyVcXCklL2csICddJyk7XG5cdFx0XHRkc2xjT3B0aW9uVmFsdWUgPSBkc2xjT3B0aW9uVmFsdWUucmVwbGFjZSgvJVxceyUvZywgJ1snKTtcblx0XHRcdGRzbGNPcHRpb25WYWx1ZSA9IGRzbGNPcHRpb25WYWx1ZS5yZXBsYWNlKC8lXFx9JS9nLCAnXScpO1xuXHRcdH1cblxuXHRcdC8vIEFkZCBvcHRpb24gSUQgYW5kIHZhbHVlIHRvIHRoZSBzZXR0aW5ncyBhcnJheVxuXHRcdGRzbGNTZXR0aW5nc1tkc2xjT3B0aW9uSURdID0gZHNsY09wdGlvblZhbHVlO1xuXHR9KTtcblxuXHQvLyBIaWRlIHRoZSBzYXZlL2NhbmNlbCBhY3Rpb25zIGZvciB0ZXh0IGVkaXRvciBhbmQgc2hvdyBub3RpZmljYXRpb25cblx0alF1ZXJ5KCcuZHNsY2Etd3AtZWRpdG9yLWFjdGlvbnMnKS5oaWRlKCk7XG5cdGpRdWVyeSgnLmRzbGNhLXdwLWVkaXRvci1ub3RpZmljYXRpb24nKS5zaG93KCk7XG5cblx0Ly8gSGlkZSB0aGUgcHVibGlzaCBidXR0b25cblx0aGlkZVB1Ymxpc2hCdXR0b24oKTtcblxuXHQvLyBMaXZlQ29tcG9zZXIuQnVpbGRlci5VSS5pbml0SW5saW5lRWRpdG9ycygpO1xuXG5cdC8vIFNldCB1cCBiYWNrdXBcblx0dmFyIG1vZHVsZUJhY2t1cCA9IGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1vcHRpb25zLWZyb250JywgZHNsY01vZHVsZSkuY2hpbGRyZW4oKS5jbG9uZSgpO1xuXHRMaXZlQ29tcG9zZXIuQnVpbGRlci5tb2R1bGVCYWNrdXAgPSBtb2R1bGVCYWNrdXA7XG5cblx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuRmxhZ3MucGFuZWxPcGVuZWQgPSB0cnVlO1xuXG5cdC8vIFNob3cgcHNldWRvIHNldHRpbmdzIHBhbmVsXG5cdHBzZXVkb1BhbmVsLnNob3coKTtcblx0cHNldWRvUGFuZWwuYWRkQ2xhc3MoJ3Nob3cnKTtcblxuXHQvLyBBSkFYIGNhbGwgdG8gZ2V0IG9wdGlvbnMgSFRNTFxuXHRqUXVlcnkucG9zdChcblx0XHREU0xDQWpheC5hamF4dXJsLFxuXHRcdGRzbGNTZXR0aW5ncyxcblx0XHRmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cblx0XHRcdC8vIEhpZGUgcHNldWRvIHBhbmVsXG5cdFx0XHRwc2V1ZG9QYW5lbC5yZW1vdmUoKTtcblxuXHRcdFx0Ly8gU2hvdyBlZGl0IHNlY3Rpb25cblx0XHRcdHNob3dTZWN0aW9uKCcuZHNsY2EtbW9kdWxlLWVkaXQnKTtcblxuXHRcdFx0Ly8gQWRkIHRoZSBvcHRpb25zXG5cdFx0XHRpZiAoICEgalF1ZXJ5KCdib2R5JykuaGFzQ2xhc3MoJ3J0bCcpICkge1xuXG5cdFx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtaW5uZXInKS5odG1sKCByZXNwb25zZS5vdXRwdXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy1pbm5lcicpLmh0bWwoIHJlc3BvbnNlLm91dHB1dCApO1xuXHRcdFx0fVxuXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYnMnKS5odG1sKCByZXNwb25zZS5vdXRwdXRfdGFicyApO1xuXG5cblx0XHRcdHZhciBzZWN0aW9uc1VzZWQgPSBbXTsgLy8g4oCTIEFycmF5IHdpdGggdGFiIGlkcyB0byBzaG93IGZvciBjdXJyZW50IG1vZHVsZS5cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBHbyB0aHJvdWdoIGVhY2ggb3B0aW9uIGFuZCBjaGVjayBpdHMgdGFiIHByb3BlcnR5LlxuXHRcdFx0ICogRmlsbCBzZWN0aW9uc1VzZWQgYXJyYXkgd2l0aCBpZHMgb2YgdGhlIHRhYnMgdG8gZGlzcGxheS5cblx0XHRcdCAqIFdlIGRvbid0IHdhbnQgdG8gZGlzcGxheSB0YWJzIHdpdGggbm8gb3B0aW9ucyBpbnNpZGUuXG5cdFx0XHQgKi9cblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtaW5uZXIgLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbicpLmVhY2goZnVuY3Rpb24oKXtcblx0XHRcdFx0dmFyIGN1cnJlbnRPcHRpb25TZWN0aW9uID0galF1ZXJ5KHRoaXMpLmRhdGEoJ3NlY3Rpb24nKTtcblxuXHRcdFx0XHQvLyBDaGVjayBpZiB0aGlzIHNlY3Rpb24gaXMgaW4gdGhlIGxpc3Qgb2YgdGFicyB0byBzaG93LlxuXHRcdFx0XHRpZiAoIHNlY3Rpb25zVXNlZC5pbmRleE9mKGN1cnJlbnRPcHRpb25TZWN0aW9uKSA9PSAtMSApIHtcblx0XHRcdFx0XHRzZWN0aW9uc1VzZWQucHVzaChjdXJyZW50T3B0aW9uU2VjdGlvbik7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR2YXIgdGFic190b3RhbCA9IHNlY3Rpb25zVXNlZC5sZW5ndGg7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGFic190b3RhbDsgaSsrKSB7XG5cdFx0XHRcdC8vIFNob3cgdGhlIHRhYnMgdXNlZCBieSB0aGUgY3VycmVudCBtb2R1bGUuXG5cdFx0XHRcdGpRdWVyeSgnLmRzbGNhLWhlYWRlciAuZHNsY2Etb3B0aW9ucy1maWx0ZXItaG9va1tkYXRhLXNlY3Rpb249XCInICsgc2VjdGlvbnNVc2VkW2ldICsgJ1wiXScpLnNob3coKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyB0aGUgZmlsdGVyIGhvb2tzXG5cdFx0XHQvLyBqUXVlcnkoJy5kc2xjYS1oZWFkZXIgLmRzbGNhLW9wdGlvbnMtZmlsdGVyLWhvb2snKS5zaG93KCk7XG5cblx0XHRcdC8vIFRyaWdnZXIgY2xpY2sgb24gZmlyc3QgZmlsdGVyIGhvb2tcblx0XHRcdGlmICggalF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uW2RhdGEtc2VjdGlvbj1cIicgKyBkc2xjRGVmYXVsdFNlY3Rpb24gKyAnXCJdJykubGVuZ3RoICkge1xuXHRcdFx0XHRqUXVlcnkoJy5kc2xjYS1oZWFkZXIgLmRzbGNhLW9wdGlvbnMtZmlsdGVyLWhvb2tbZGF0YS1zZWN0aW9uPVwiJyArIGRzbGNEZWZhdWx0U2VjdGlvbiArICdcIl0nKS5zaG93KCk7XG5cdFx0XHRcdGpRdWVyeSgnLmRzbGNhLWhlYWRlciAuZHNsY2Etb3B0aW9ucy1maWx0ZXItaG9va1tkYXRhLXNlY3Rpb249XCInICsgZHNsY0RlZmF1bHRTZWN0aW9uICsgJ1wiXScpLnRyaWdnZXIoJ2NsaWNrJyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoJy5kc2xjYS1oZWFkZXIgLmRzbGNhLW9wdGlvbnMtZmlsdGVyLWhvb2s6Zmlyc3QnKS5oaWRlKCk7XG5cdFx0XHRcdGpRdWVyeSgnLmRzbGNhLWhlYWRlciAuZHNsY2Etb3B0aW9ucy1maWx0ZXItaG9vazpmaXJzdCcpLm5leHQoJy5kc2xjYS1vcHRpb25zLWZpbHRlci1ob29rJykudHJpZ2dlcignY2xpY2snKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyB0aGUgc2F2ZS9jYW5jZWwgYWN0aW9uc1xuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtYWN0aW9ucycpLnNob3coKTtcblxuXHRcdFx0Ly8gU2hvdyB0aGUgc2F2ZS9jYW5jZWwgYWN0aW9ucyBmb3IgdGV4dCBlZGl0b3IgYW5kIGhpZGUgbm90aWZpY2F0aW9uXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS13cC1lZGl0b3Itbm90aWZpY2F0aW9uJykuaGlkZSgpO1xuXHRcdFx0alF1ZXJ5KCcuZHNsY2Etd3AtZWRpdG9yLWFjdGlvbnMnKS5zaG93KCk7XG5cblx0XHRcdC8vIEhpZGUgdGhlIHNlY3Rpb24gaG9va3Ncblx0XHRcdGpRdWVyeSgnLmRzbGNhLWhlYWRlciAuZHNsY2EtZ28tdG8tc2VjdGlvbi1ob29rJykuaGlkZSgpO1xuXG5cdFx0XHQvLyBIaWRlIHRoZSByb3cgc2F2ZS9jYW5jZWwgYWN0aW9uc1xuXHRcdFx0alF1ZXJ5KCcuZHNsY2Etcm93LWVkaXQtYWN0aW9ucycpLmhpZGUoKTtcblxuXHRcdFx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuVUkubG9hZE9wdGlvbnNEZXBzKCk7XG5cdFx0fVxuXHQpO1xufVxuXG4vKipcbiAqIE1PRFVMRVMgLSBNb2R1bGUgb3V0cHV0IGRlZmF1bHQgc2V0dGluZ3NcbiAqL1xuZXhwb3J0IGNvbnN0IG1vZHVsZU91dHB1dERlZmF1bHQgPSAoIGRzbGNfbW9kdWxlX2lkLCBjYWxsYmFjayApID0+IHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ21vZHVsZU91dHB1dERlZmF1bHQnICk7XG5cblx0alF1ZXJ5LnBvc3QoXG5cblx0XHREU0xDQWpheC5hamF4dXJsLFxuXHRcdHtcblx0XHRcdGFjdGlvbiA6ICdkc2xjLWFqYXgtYWRkLW1vZHVsZScsXG5cdFx0XHRkc2xjIDogJ2FjdGl2ZScsXG5cdFx0XHRkc2xjX21vZHVsZV9pZCA6IGRzbGNfbW9kdWxlX2lkLCAvLyBleC4gRFNMQ19CdXR0b25cblx0XHRcdGRzbGNfcG9zdF9pZCA6IGpRdWVyeSgnLmRzbGNhLWNvbnRhaW5lcicpLmRhdGEoJ3Bvc3QtaWQnKSxcblx0XHRcdGRzbGNfdXJsX3ZhcnM6IExpdmVDb21wb3Nlci5VdGlscy5nZXRfcGFnZV9wYXJhbXMoKSxcblx0XHRcdGRzbGNfbmV3X21vZHVsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0ZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXG5cdFx0XHRjYWxsYmFjayhyZXNwb25zZSk7XG5cdFx0fVxuXHQpO1xufVxuXG4vKipcbiAqIE1PRFVMRVMgLSBSZWRyYXcgbW9kdWxlIG91dHB1dCB3aGVuIHNldHRpbmdzIGFsdGVyZWRcbiAqL1xuZXhwb3J0IGNvbnN0IG1vZHVsZU91dHB1dEFsdGVyZWQgPSAoIGNhbGxiYWNrICkgPT4ge1xuXG5cdGlmICggd2luZG93LmRzbGNEZWJ1ZyApIGNvbnNvbGUubG9nKCAnbW9kdWxlT3V0cHV0QWx0ZXJlZCcgKTtcblxuXHRjYWxsYmFjayA9IHR5cGVvZiBjYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcgPyBjYWxsYmFjayA6IGZhbHNlO1xuXG5cdHZhciBkc2xjTW9kdWxlID0galF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLFxuXHRkc2xjX21vZHVsZV9pZCA9IGRzbGNNb2R1bGUuZGF0YSgnbW9kdWxlJyksXG5cdGRzbGNNb2R1bGVPcHRpb25zID0galF1ZXJ5KCAnLmRzbGNhLW1vZHVsZS1vcHRpb25zLWZyb250IHRleHRhcmVhJywgZHNsY01vZHVsZSApLFxuXHRkc2xjTW9kdWxlSW5zdGFuY2VJRCA9IGRzbGNNb2R1bGUuZGF0YSgnbW9kdWxlLWlkJyk7XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlIGNvZGVcblx0ICovXG5cblx0dmFyIGRzbGNTZXR0aW5ncyA9IHt9O1xuXG5cdGRzbGNTZXR0aW5nc1snYWN0aW9uJ10gPSAnZHNsYy1hamF4LWFkZC1tb2R1bGUnO1xuXHRkc2xjU2V0dGluZ3NbJ2RzbGMnXSA9ICdhY3RpdmUnO1xuXHRkc2xjU2V0dGluZ3NbJ2RzbGNfbW9kdWxlX2lkJ10gPSBkc2xjX21vZHVsZV9pZDtcblx0ZHNsY1NldHRpbmdzWydkc2xjX21vZHVsZV9pbnN0YW5jZV9pZCddID0gZHNsY01vZHVsZUluc3RhbmNlSUQ7XG5cdGRzbGNTZXR0aW5nc1snZHNsY19wb3N0X2lkJ10gPSBqUXVlcnkoJy5kc2xjYS1jb250YWluZXInKS5kYXRhKCdwb3N0LWlkJyk7XG5cblx0aWYgKCBkc2xjTW9kdWxlLmhhc0NsYXNzKCdkc2xjYS1wcmVsb2FkLXByZXNldCcpIClcblx0XHRkc2xjU2V0dGluZ3NbJ2RzbGNfcHJlbG9hZF9wcmVzZXQnXSA9ICdlbmFibGVkJztcblx0ZWxzZVxuXHRcdGRzbGNTZXR0aW5nc1snZHNsY19wcmVsb2FkX3ByZXNldCddID0gJ2Rpc2FibGVkJztcblxuXHRkc2xjTW9kdWxlLnJlbW92ZUNsYXNzKCdkc2xjYS1wcmVsb2FkLXByZXNldCcpO1xuXG5cdGRzbGNNb2R1bGVPcHRpb25zLmVhY2goZnVuY3Rpb24oKXtcblxuXHRcdHZhciBkc2xjT3B0aW9uID0galF1ZXJ5KHRoaXMpO1xuXHRcdHZhciBkc2xjT3B0aW9uSUQgPSBkc2xjT3B0aW9uLmRhdGEoJ2lkJyk7XG5cdFx0dmFyIGRzbGNPcHRpb25WYWx1ZSA9IGRzbGNPcHRpb24udmFsKCk7XG5cblx0XHRkc2xjU2V0dGluZ3NbZHNsY09wdGlvbklEXSA9IGRzbGNPcHRpb25WYWx1ZTtcblxuXHR9KTtcblxuXHRkc2xjU2V0dGluZ3MuZHNsY191cmxfdmFycyA9IExpdmVDb21wb3Nlci5VdGlscy5nZXRfcGFnZV9wYXJhbXMoKTtcblxuXHQvKipcblx0ICogQ2FsbCBBSkFYIGZvciBwcmV2aWV3XG5cdCAqL1xuXHRqUXVlcnkucG9zdChcblxuXHRcdERTTENBamF4LmFqYXh1cmwsIGRzbGNTZXR0aW5ncyxcblx0XHRmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cblx0XHRcdHZhciBuZXdNb2R1bGUgPSBMaXZlQ29tcG9zZXIuXG5cdFx0XHRcdFx0XHRcdFx0QnVpbGRlci5cblx0XHRcdFx0XHRcdFx0XHRIZWxwZXJzLlxuXHRcdFx0XHRcdFx0XHRcdGluc2VydE1vZHVsZSggcmVzcG9uc2Uub3V0cHV0LCBkc2xjTW9kdWxlICk7XG5cblx0XHRcdG5ld01vZHVsZS5hZGRDbGFzcygnZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcpO1xuXG5cdFx0XHRyZXNwb25zZSA9IG51bGw7XG5cdFx0XHRuZXdNb2R1bGUgPSBudWxsO1xuXG5cdFx0XHQvLyBUT0RPOiBBZGQgbmV3IHBvc3Rwb25lZCBhY3Rpb24gdG8gcnVuIGFmdGVyIGFsbCBkb25lXG5cblx0XHRcdC8vIHdpbmRvdy5kc2xjX3Nob3dfcHVibGlzaF9idXR0b24oKTtcblx0XHRcdExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhV2luZG93LmRzbGNfY2Fyb3VzZWwoKTtcblxuXHRcdFx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFXaW5kb3cuZHNsY19tYXNvbnJ5KCk7XG5cblx0XHRcdExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhV2luZG93LmRzbGNfdGFicygpO1xuXHRcdFx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFXaW5kb3cuZHNsY19pbml0X2FjY29yZGlvbigpO1xuXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQ3JlYXRlIEN1c3RvbSBFdmVudC9Ib29rXG5cdFx0XHQgKlxuXHRcdFx0ICogVGhpcmQtcGFydHkgZGV2ZWxvcGVycyBzaG91bGQgdXNlIGl0IGxpa2UgdGhpczpcblx0XHRcdCAqIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb2R1bGVPdXRwdXRBbHRlcmVkJywgZnVuY3Rpb24gKGUpIHtcblx0XHRcdCAqIFx0Li4uLlxuXHRcdFx0ICogfSwgZmFsc2UpO1xuXHRcdFx0ICovXG5cdFx0XHR2YXIgZXZlbnQgPSBuZXcgRXZlbnQoJ21vZHVsZU91dHB1dEFsdGVyZWQnKTtcblx0XHRcdC8vIERpc3BhdGNoIHRoZSBldmVudC5cblx0XHRcdExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhV2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXG5cdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRjYWxsYmFjayggcmVzcG9uc2UgKTtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59XG5cbi8qKlxuICogTU9EVUxFUyAtIFJlbG9hZCBhIHNwZWNpZmljIG1vZHVsZVxuICovXG5mdW5jdGlvbiBkc2xjX21vZHVsZV9vdXRwdXRfcmVsb2FkKCBkc2xjTW9kdWxlLCBjYWxsYmFjayApIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfbW9kdWxlX291dHB1dF9yZWxvYWQnICk7XG5cblx0Y2FsbGJhY2sgPSB0eXBlb2YgY2FsbGJhY2sgIT09ICd1bmRlZmluZWQnID8gY2FsbGJhY2sgOiBmYWxzZTtcblxuXHR2YXIgZHNsY19tb2R1bGVfaWQgPSBkc2xjTW9kdWxlLmRhdGEoJ21vZHVsZScpLFxuXHRkc2xjTW9kdWxlT3B0aW9ucyA9IGpRdWVyeSggJy5kc2xjYS1tb2R1bGUtb3B0aW9ucy1mcm9udCB0ZXh0YXJlYScsIGRzbGNNb2R1bGUgKSxcblx0ZHNsY01vZHVsZUluc3RhbmNlSUQgPSBkc2xjTW9kdWxlLmRhdGEoJ21vZHVsZS1pZCcpO1xuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZSBjb2RlXG5cdCAqL1xuXG5cdHZhciBkc2xjU2V0dGluZ3MgPSB7fTtcblxuXHRkc2xjU2V0dGluZ3NbJ2FjdGlvbiddID0gJ2RzbGMtYWpheC1hZGQtbW9kdWxlJztcblx0ZHNsY1NldHRpbmdzWydkc2xjJ10gPSAnYWN0aXZlJztcblx0ZHNsY1NldHRpbmdzWydkc2xjX21vZHVsZV9pZCddID0gZHNsY19tb2R1bGVfaWQ7XG5cdGRzbGNTZXR0aW5nc1snZHNsY19tb2R1bGVfaW5zdGFuY2VfaWQnXSA9IGRzbGNNb2R1bGVJbnN0YW5jZUlEO1xuXHRkc2xjU2V0dGluZ3NbJ2RzbGNfcG9zdF9pZCddID0galF1ZXJ5KCcuZHNsY2EtY29udGFpbmVyJykuZGF0YSgncG9zdC1pZCcpO1xuXHRkc2xjU2V0dGluZ3NbJ2RzbGNfcHJlbG9hZF9wcmVzZXQnXSA9ICdlbmFibGVkJztcblx0ZHNsY01vZHVsZS5yZW1vdmVDbGFzcygnZHNsY2EtcHJlbG9hZC1wcmVzZXQnKTtcblxuXHRkc2xjTW9kdWxlT3B0aW9ucy5lYWNoKGZ1bmN0aW9uKCl7XG5cblx0XHR2YXIgZHNsY09wdGlvbiA9IGpRdWVyeSh0aGlzKTtcblx0XHR2YXIgZHNsY09wdGlvbklEID0gZHNsY09wdGlvbi5kYXRhKCdpZCcpO1xuXHRcdHZhciBkc2xjT3B0aW9uVmFsdWUgPSBkc2xjT3B0aW9uLnZhbCgpO1xuXG5cdFx0ZHNsY1NldHRpbmdzW2RzbGNPcHRpb25JRF0gPSBkc2xjT3B0aW9uVmFsdWU7XG5cblx0fSk7XG5cblx0LyoqXG5cdCAqIExvYWRlclxuXHQgKi9cblxuXHRkc2xjTW9kdWxlLmFwcGVuZCgnPGRpdiBjbGFzcz1cImRzbGNhLW1vZHVsZS1yZWxvYWRpbmdcIj48c3BhbiBjbGFzcz1cImRzbGNhLWljb24gZHNsYy1pY29uLXNwaW4gZHNsYy1pY29uLXJlZnJlc2hcIj48L3NwYW4+PC9kaXY+Jyk7XG5cblx0LyoqXG5cdCAqIENhbGwgQUpBWCBmb3IgcHJldmlld1xuXHQgKi9cblx0alF1ZXJ5LnBvc3QoXG5cblx0XHREU0xDQWpheC5hamF4dXJsLCBkc2xjU2V0dGluZ3MsXG5cdFx0ZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXG5cdFx0XHRkc2xjTW9kdWxlLmFmdGVyKHJlc3BvbnNlLm91dHB1dCkubmV4dCgpLmFkZENsYXNzKCdkc2xjYS1tb2R1bGUtYmVpbmctZWRpdGVkJyk7XG5cdFx0XHRkc2xjTW9kdWxlLnJlbW92ZSgpO1xuXHRcdFx0d2luZG93LmRzbGNfZ2VuZXJhdGVfY29kZSgpO1xuXHRcdFx0d2luZG93LmRzbGNfc2hvd19wdWJsaXNoX2J1dHRvbigpO1xuXG5cdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5kc2xjX2Nhcm91c2VsKCk7XG5cdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5kc2xjX21hc29ucnkoKTtcblxuXHRcdFx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFXaW5kb3cuZHNsY190YWJzKCk7XG5cdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5kc2xjX2luaXRfYWNjb3JkaW9uKCk7XG5cblx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cblx0XHRcdFx0Y2FsbGJhY2soIHJlc3BvbnNlICk7XG5cdFx0XHR9XG5cblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1iZWluZy1lZGl0ZWQnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5yZW1vdmVDbGFzcygnZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcpO1xuXHRcdH1cblx0KTtcbn1cblxuLyoqXG4gKiBPdGhlciAtIEdldCBBbHRlciBNb2R1bGUgRGVmYXVsdHMgQ29kZVxuICovXG5mdW5jdGlvbiBkc2xjX2RtX2dldF9kZWZhdWx0cyggbW9kdWxlICkge1xuXG5cdGlmICggd2luZG93LmRzbGNEZWJ1ZyApIGNvbnNvbGUubG9nKCAnZHNsY19kbV9nZXRfZGVmYXVsdHMnICk7XG5cblx0Ly8gVGhlIG1vZHVsZSBjb2RlIHZhbHVlXG5cdHZhciBvcHRpb25zQ29kZSA9IG1vZHVsZS5maW5kKCcuZHNsY2EtbW9kdWxlLWNvZGUnKS52YWwoKTtcblxuXHQvLyBBamF4IGNhbGwgdG8gZ2V0IHRoZSBwbGFpbiBQSFAgY29kZVxuXHRqUXVlcnkucG9zdChcblx0XHREU0xDQWpheC5hamF4dXJsLFxuXHRcdHtcblx0XHRcdGFjdGlvbiA6ICdkc2xjLWFqYXgtZG0tbW9kdWxlLWRlZmF1bHRzJyxcblx0XHRcdGRzbGMgOiAnYWN0aXZlJyxcblx0XHRcdGRzbGNfbW9kdWxlc19vcHRpb25zIDogb3B0aW9uc0NvZGVcblx0XHR9LFxuXHRcdGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblxuXHRcdFx0Ly8gQXBwbHkgdGhlIHBsYWluIFBIUCBjb2RlIHRvIHRoZSB0ZXh0YXJlYVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtcHJvbXB0LW1vZGFsIHRleHRhcmVhJykudmFsKCByZXNwb25zZS5vdXRwdXQgKTtcblx0XHR9XG5cdCk7XG59XG5cbi8qKlxuICogRGVwcmVjYXRlZCBGdW5jdGlvbnMgYW5kIEZhbGxiYWNrc1xuICovXG5mdW5jdGlvbiBkc2xjX2NvcHlfbW9kdWxlKCBtb2R1bGUgKSB7IG1vZHVsZUR1cGxpY2F0ZSggbW9kdWxlICk7IH1cbmZ1bmN0aW9uIGRzbGNfZGlzcGxheV9tb2R1bGVfb3B0aW9ucyggbW9kdWxlSUQgKSB7IGRzbGNfbW9kdWxlX29wdGlvbnNfc2hvdyggbW9kdWxlSUQgKTsgfVxuZnVuY3Rpb24gZHNsY19wcmV2aWV3X2NoYW5nZSggY2FsbGJhY2sgKSB7IG1vZHVsZU91dHB1dEFsdGVyZWQoIGNhbGxiYWNrICk7IH1cbmZ1bmN0aW9uIGRzbGNfcmVsb2FkX21vZHVsZSggbW9kdWxlSUQsIGNhbGxiYWNrICkgeyBkc2xjX21vZHVsZV9vdXRwdXRfcmVsb2FkKCBtb2R1bGVJRCwgY2FsbGJhY2sgKTsgfVxuXG5leHBvcnQgY29uc3QgbW9kdWxlSW5pdEpTID0gKCkgPT4ge1xuXHRhZGp1c3RaaW5kZXgoKTtcblx0ZWRpdGFibGVDb250ZW50VGV4dEV2ZW50cygpO1xufSIsIi8qKlxuICogRFNMQ19Nb2R1bGVBcmVhIGNsYXNzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgU29ydGFibGUgZnJvbSAnc29ydGFibGVqcyc7XG5cbmV4cG9ydCBjb25zdCBNb2R1bGVBcmVhID0gZnVuY3Rpb24oZWxlbSkge1xuXG5cdHZhciBzZWxmID0gdGhpcztcblx0dGhpcy5zZWN0aW9uID0galF1ZXJ5KGVsZW0pLmNsb3Nlc3QoJy5kc2xjLW1vZHVsZXMtc2VjdGlvbicpO1xuXHR0aGlzLmVsZW0gPSBlbGVtO1xuXG5cdC8qKiBTZXQgb2JzZXJ2ZXIgdG8gY2hhbmdlIGVsZW1zIGNsYXNzICovXG5cdHRoaXMub2JzZXJ2ZXIgPSBuZXcgbXFNdXRhdGlvbk9ic2VydmVyKGVsZW0sIGZ1bmN0aW9uKCl7XG5cblx0XHR2YXIgY2xhc3NMaXN0ID0gc2VsZi5lbGVtLmNsYXNzTGlzdDtcblxuXHRcdGlmIChlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5kc2xjLW1vZHVsZS1mcm9udCcpLmxlbmd0aCA9PSAwKSB7XG5cblx0XHRcdGNsYXNzTGlzdC5hZGQoJ2RzbGMtbW9kdWxlcy1hcmVhLWVtcHR5Jyk7XG5cdFx0XHRjbGFzc0xpc3QucmVtb3ZlKCdkc2xjLW1vZHVsZXMtYXJlYS1ub3QtZW1wdHknKTtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjbGFzc0xpc3QucmVtb3ZlKCdkc2xjLW1vZHVsZXMtYXJlYS1lbXB0eScpO1xuXHRcdFx0Y2xhc3NMaXN0LmFkZCgnZHNsYy1tb2R1bGVzLWFyZWEtbm90LWVtcHR5Jyk7XG5cdFx0fVxuXHR9LCB7Y2hpbGRMaXN0OiB0cnVlfSk7XG5cblx0LyoqXG5cdCAqIE1ha2UgTU9EVUxFUyBpbnNpZGUgdGhlIE1vZHVsZXMgQXJlYSBkcmFnZ2FibGUvc29ydGFibGVcblx0ICovXG5cdHRoaXMuc29ydGFibGUgPSBTb3J0YWJsZS5jcmVhdGUoZWxlbSwge1xuXHRcdGdyb3VwOiAnbW9kdWxlcycsXG5cdFx0YW5pbWF0aW9uOiAzNTAsXG5cdFx0aGFuZGxlOiAnLmRzbGNhLW1vdmUtbW9kdWxlLWhvb2snLFxuXHRcdGRyYWdnYWJsZTogJy5kc2xjLW1vZHVsZS1mcm9udCcsXG5cdFx0Z2hvc3RDbGFzczogJ2RzbGNhLW1vZHVsZS1naG9zdCcsXG5cdFx0Y2hvc2VuQ2xhc3M6ICdkc2xjYS1tb2R1bGUtZHJhZ2dpbmcnLFxuXHRcdHNjcm9sbDogdHJ1ZSwgLy8gb3IgSFRNTEVsZW1lbnRcblx0XHRzY3JvbGxTZW5zaXRpdml0eTogMTUwLCAvLyBweCwgaG93IG5lYXIgdGhlIG1vdXNlIG11c3QgYmUgdG8gYW4gZWRnZSB0byBzdGFydCBzY3JvbGxpbmcuXG5cdFx0c2Nyb2xsU3BlZWQ6IDE1LCAvLyBweFxuXG5cdFx0c2V0RGF0YTogZnVuY3Rpb24gKGRhdGFUcmFuc2ZlciwgZHJhZ0VsKSB7XG5cblx0XHQgIGRhdGFUcmFuc2Zlci5zZXREYXRhKCBMaXZlQ29tcG9zZXIuVXRpbHMubXNpZXZlcnNpb24oKSAhPT0gZmFsc2UgPyAnVGV4dCcgOiAndGV4dC9odG1sJywgZHJhZ0VsLmlubmVySFRNTCk7XG5cdFx0fSxcblxuXHRcdC8vIGRyYWdnaW5nIHN0YXJ0ZWRcblx0XHRvblN0YXJ0OiBmdW5jdGlvbiAoZXZ0KSB7XG5cblx0XHRcdGV2dC5vbGRJbmRleDsgIC8vIGVsZW1lbnQgaW5kZXggd2l0aGluIHBhcmVudFxuXG5cdFx0XHRqUXVlcnkoJ2JvZHknKS5yZW1vdmVDbGFzcygnZHNsY2EtZHJhZy1ub3QtaW4tcHJvZ3Jlc3MnKS5hZGRDbGFzcygnZHNsY2EtZHJhZy1pbi1wcm9ncmVzcycpO1xuXHRcdFx0alF1ZXJ5KCdib2R5JywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFXaW5kb3cuZG9jdW1lbnQpLnJlbW92ZUNsYXNzKCdkc2xjYS1kcmFnLW5vdC1pbi1wcm9ncmVzcycpLmFkZENsYXNzKCdkc2xjYS1kcmFnLWluLXByb2dyZXNzJyk7XG5cdFx0fSxcblx0XHQvLyBkcmFnZ2luZyBlbmRlZFxuXG5cdFx0b25FbmQ6IGZ1bmN0aW9uIChldnQpIHtcblxuXHRcdFx0ZXZ0Lm9sZEluZGV4OyAgLy8gZWxlbWVudCdzIG9sZCBpbmRleCB3aXRoaW4gcGFyZW50XG5cdFx0XHRldnQubmV3SW5kZXg7ICAvLyBlbGVtZW50J3MgbmV3IGluZGV4IHdpdGhpbiBwYXJlbnRcblxuXHRcdFx0ZXZ0LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdHdpbmRvdy5kc2xjX2dlbmVyYXRlX2NvZGUoKTtcblx0XHRcdExpdmVDb21wb3Nlci5CdWlsZGVyLlVJLnN0b3BTY3JvbGxlcigpO1xuXHRcdFx0alF1ZXJ5KCdib2R5JykucmVtb3ZlQ2xhc3MoJ2RzbGNhLWRyYWctaW4tcHJvZ3Jlc3MnKS5hZGRDbGFzcygnZHNsY2EtZHJhZy1ub3QtaW4tcHJvZ3Jlc3MnKTtcblx0XHRcdGpRdWVyeSgnYm9keScsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhV2luZG93LmRvY3VtZW50KS5yZW1vdmVDbGFzcygnZHNsY2EtZHJhZy1pbi1wcm9ncmVzcycpLmFkZENsYXNzKCdkc2xjYS1kcmFnLW5vdC1pbi1wcm9ncmVzcycpO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50IGlzIGRyb3BwZWQgaW50byB0aGUgbGlzdCBmcm9tIGFub3RoZXIgbGlzdFxuXHRcdG9uQWRkOiBmdW5jdGlvbiAoZXZ0KSB7XG5cblx0XHRcdHZhciBpdGVtRWwgPSBldnQuaXRlbTsgIC8vIGRyYWdnZWQgSFRNTEVsZW1lbnRcblx0XHRcdGV2dC5mcm9tOyAgLy8gcHJldmlvdXMgbGlzdFxuXG5cdFx0XHQvLyBJZiBjb250YWluZXIvY29sdW1uL21vZHVsZXMgYXJlYSBkcm9wZWQuXG5cdFx0XHRpZiAoIGpRdWVyeShpdGVtRWwpLmRhdGEoJ2lkJykgPT0gJ0RTTENfTV9BJyApIHtcblxuXHRcdFx0XHRkc2xjX21vZHVsZXNfYXJlYV9hZGQoIGpRdWVyeShzZWxmLnNlY3Rpb24pLmZpbmQoJy5kc2xjLW1vZHVsZXMtc2VjdGlvbi13cmFwcGVyIC5kc2xjLW1vZHVsZXMtc2VjdGlvbi1pbm5lcicpICk7XG5cdFx0XHRcdGl0ZW1FbC5yZW1vdmUoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gKyBpbmRleGVzIGZyb20gb25FbmRcblx0XHRcdC8vIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0Ly8gZXZ0LnN0b3BQcm9wYWdhdGlvbigpOyByZXR1cm4gZmFsc2U7XG5cdFx0fSxcblxuXHRcdC8vIENoYW5nZWQgc29ydGluZyB3aXRoaW4gbGlzdFxuXHRcdG9uVXBkYXRlOiBmdW5jdGlvbiAoZXZ0KSB7XG5cdFx0XHR2YXIgaXRlbUVsID0gZXZ0Lml0ZW07ICAvLyBkcmFnZ2VkIEhUTUxFbGVtZW50XG5cdFx0XHQvLyArIGluZGV4ZXMgZnJvbSBvbkVuZFxuXHRcdFx0Ly8gZXZ0LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHQvLyBldnQuc3RvcFByb3BhZ2F0aW9uKCk7IHJldHVybiBmYWxzZTtcblxuXHRcdFx0d2luZG93LmRzbGNfc2hvd19wdWJsaXNoX2J1dHRvbigpO1xuXHRcdH0sXG5cblx0XHQvLyBDYWxsZWQgYnkgYW55IGNoYW5nZSB0byB0aGUgbGlzdCAoYWRkIC8gdXBkYXRlIC8gcmVtb3ZlKVxuXHRcdG9uU29ydDogZnVuY3Rpb24gKGV2dCkge1xuXHRcdFx0Ly8gc2FtZSBwcm9wZXJ0aWVzIGFzIG9uVXBkYXRlXG5cdFx0XHQvLyBldnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdC8vIGV2dC5zdG9wUHJvcGFnYXRpb24oKTsgcmV0dXJuIGZhbHNlO1xuXG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0IGludG8gYW5vdGhlciBsaXN0XG5cdFx0b25SZW1vdmU6IGZ1bmN0aW9uIChldnQpIHtcblx0XHQgIC8vIHNhbWUgcHJvcGVydGllcyBhcyBvblVwZGF0ZVxuXHRcdH0sXG5cblx0XHQvLyBBdHRlbXB0IHRvIGRyYWcgYSBmaWx0ZXJlZCBlbGVtZW50XG5cdFx0b25GaWx0ZXI6IGZ1bmN0aW9uIChldnQpIHtcblx0XHRcdHZhciBpdGVtRWwgPSBldnQuaXRlbTsgIC8vIEhUTUxFbGVtZW50IHJlY2VpdmluZyB0aGUgYG1vdXNlZG93bnx0YXBzdGFydGAgZXZlbnQuXG5cdFx0fSxcblxuXHRcdC8vIEV2ZW50IHdoZW4geW91IG1vdmUgYW4gaXRlbSBpbiB0aGUgbGlzdCBvciBiZXR3ZWVuIGxpc3RzXG5cdFx0b25Nb3ZlOiBmdW5jdGlvbiAoZXZ0KSB7XG5cdFx0XHQvLyBFeGFtcGxlOiBodHRwOi8vanNiaW4uY29tL3R1eWFmZS8xL2VkaXQ/anMsb3V0cHV0XG5cdFx0XHRldnQuZHJhZ2dlZDsgLy8gZHJhZ2dlZCBIVE1MRWxlbWVudFxuXHRcdFx0ZXZ0LmRyYWdnZWRSZWN0OyAvLyBUZXh0UmVjdGFuZ2xlIHtsZWZ0LCB0b3AsIHJpZ2h0INC4IGJvdHRvbX1cblx0XHRcdGV2dC5yZWxhdGVkOyAvLyBIVE1MRWxlbWVudCBvbiB3aGljaCBoYXZlIGd1aWRlZFxuXHRcdFx0ZXZ0LnJlbGF0ZWRSZWN0OyAvLyBUZXh0UmVjdGFuZ2xlXG5cdFx0XHQvLyByZXR1cm4gZmFsc2U7IOKAlCBmb3IgY2FuY2VsXG5cblxuXHRcdFx0Ly8gQWRkIGhlcmUgdGhlIGZ1bmN0aW9uIHRvIHVwZGF0ZSB1bmRlcmx5aW5nIGNsYXNzXG5cdFx0XHRpZiAoIGpRdWVyeSgnLmRzbGMtbW9kdWxlcy1hcmVhLWVtcHR5JykuZmluZCgnLmRzbGMtbW9kdWxlLWZyb250JykubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRqUXVlcnkodGhpcykucmVtb3ZlQ2xhc3MoJ2RzbGMtbW9kdWxlcy1hcmVhLWVtcHR5JykuYWRkQ2xhc3MoJ2RzbGMtbW9kdWxlcy1hcmVhLW5vdC1lbXB0eScpO1xuXG5cdFx0XHRcdGpRdWVyeSgnLmRzbGNhLW5vLWNvbnRlbnQ6bm90KDp2aXNpYmxlKScsIHRoaXMpLnNob3coKS5jc3Moe1xuXHRcdFx0XHRcdCctd2Via2l0LWFuaW1hdGlvbi1uYW1lJyA6ICdkc2xjQm91bmNlSW4nLFxuXHRcdFx0XHRcdCctbW96LWFuaW1hdGlvbi1uYW1lJyA6ICdkc2xjQm91bmNlSW4nLFxuXHRcdFx0XHRcdCdhbmltYXRpb24tbmFtZScgOiAnZHNsY0JvdW5jZUluJyxcblx0XHRcdFx0XHQnYW5pbWF0aW9uLWR1cmF0aW9uJyA6ICcwLjZzJyxcblx0XHRcdFx0XHQnLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb24nIDogJzAuNnMnLFxuXHRcdFx0XHRcdHBhZGRpbmcgOiAwXG5cdFx0XHRcdH0pLmFuaW1hdGUoeyBwYWRkaW5nIDogJzM1cHggMCcgfSwgMzAwLCBmdW5jdGlvbigpe1xuXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Ly8gTWFyayBtb2R1bGUgYXJlYSBhcyBpbml0aWFsaXplZFxuXHRqUXVlcnkoIGVsZW0gKS5hdHRyKCdkYXRhLWpzaW5pdCcsICdpbml0aWFsaXplZCcpO1xuXG5cdC8qKiBTb3J0IG9wdGlvbiBzZXR0ZXIgKi9cblx0alF1ZXJ5KGRvY3VtZW50KS5vbignTEMuc29ydGFibGVPZmYnLCBmdW5jdGlvbigpe1xuXG5cdFx0c2VsZi5zb3J0YWJsZSAmJiBzZWxmLnNvcnRhYmxlLm9wdGlvbiAmJiBzZWxmLnNvcnRhYmxlLm9wdGlvbignZGlzYWJsZWQnLCB0cnVlKTtcblx0fSk7XG5cblx0alF1ZXJ5KGRvY3VtZW50KS5vbignTEMuc29ydGFibGVPbicsIGZ1bmN0aW9uKCl7XG5cblx0XHRzZWxmLnNvcnRhYmxlICYmIHNlbGYuc29ydGFibGUub3B0aW9uICYmIHNlbGYuc29ydGFibGUub3B0aW9uKCdkaXNhYmxlZCcsIGZhbHNlKTtcblx0fSk7XG59XG4iLCIvKipcbiAqIEZ1bmN0aW9ucyBwb3dlcmluZyBNb2R1bGUgQXJlYXMgZnVuY3Rpb25hbGl0eVxuICpcbiAqID0gQVJFQVMgKCBNT0RVTEUgQVJFQVMgKSA9XG4gKlxuICogLSBBY3Rpb25zL0V2ZW50cyAoRHVwbGljYXRlLCBDaGFuZ2UgV2lkdGgsIERlbGV0ZSwgLi4uKVxuICogLSBkc2xjX21vZHVsZXNfYXJlYV9hZGQgKCBBZGRzIGEgbmV3IG1vZHVsZXMgYXJlYSApXG4gKiAtIGRzbGNfbW9kdWxlc19hcmVhX2RlbGV0ZSAoIERlbGV0ZXMgbW9kdWxlcyBhcmVhIClcbiAqIC0gZHNsY19tb2R1bGVzX2FyZWFfd2lkdGhfc2V0ICggU2V0cyBzcGVjaWZpYyB3aWR0aCB0byB0aGUgbW9kdWxlcyBhcmVhIClcbiAqIC0gZHNsY19jb3B5X21vZHVsZXNfYXJlYSAoIENvcGllcyBtb2R1bGVzIGFyZWEgKVxuICpcbiAqL1xuXG5pbXBvcnQgeyBkcmFnQW5kRHJvcEluaXQgfSBmcm9tICcuL2RyYWduZHJvcC5qcyc7XG5pbXBvcnQgeyBhZGRTZWN0aW9uIH0gZnJvbSAnLi9zZWN0aW9ucy5qcyc7XG5pbXBvcnQgeyBNb2R1bGVBcmVhIH0gZnJvbSAnLi9tb2R1bGVhcmVhLmNsYXNzLmpzJztcbmltcG9ydCB7IENNb2RhbFdpbmRvdyB9IGZyb20gJy4vbW9kYWx3aW5kb3cuY2xhc3MuanMnO1xuaW1wb3J0IHsgc2hvd1NlY3Rpb24gfSBmcm9tICcuL3VpZ2VuZXJhbC5qcyc7XG5pbXBvcnQgeyBnZXROZXdNb2R1bGVJZCB9IGZyb20gXCIuL21vZHVsZS5qc1wiO1xuXG5cbi8qKlxuICogTW9kdWxlIEFyZWEgQWN0aW9ucyAoRHVwbGljYXRlLCBDaGFuZ2UgV2lkdGgsIERlbGV0ZSwgLi4uKVxuICpcbiAqIEF0dGFjaCB0aGVzZSBhY3Rpb25zIG9uY2UgdGhlIGVkaXRpbmcgaUZyYW1lIGxvYWRlZC5cbiAqL1xuXG47alF1ZXJ5KGRvY3VtZW50KS5vbignZWRpdG9yRnJhbWVMb2FkZWQnLCBmdW5jdGlvbigpe1xuXG5cdGZ1bmN0aW9uIGluaXRfc29ydGFibGVzKCkge1xuXG5cdFx0dmFyIGVsID0galF1ZXJ5KCcuZHNsYy1tb2R1bGVzLWFyZWEnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KTsgLy8gR3JvdXBzIHRoYXQgY2FuIGhvbGQgbW9kdWxlc1xuXG5cdFx0alF1ZXJ5KGVsKS5lYWNoKGZ1bmN0aW9uIChpLGUpIHtcblxuXHRcdFx0bmV3IE1vZHVsZUFyZWEoZSk7XG5cdFx0fSk7XG5cdH1cblxuXG5cdHZhciBhY3Rpb25BdmFpbCA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0aWYgKCBMaXZlQ29tcG9zZXIuQnVpbGRlci5GbGFncy5wYW5lbE9wZW5lZCApIHtcblxuXHRcdFx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuVUkuc2hha2VQYW5lbENvbmZpcm1CdXR0b24oKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBY3Rpb24gLSBBdXRvbWF0aWNhbGx5IEFkZCBhIFJvdyBpZiBFbXB0eVxuXHQgKi9cblx0aWYgKCAhIGpRdWVyeSggJyNkc2xjLW1haW4gLmRzbGMtbW9kdWxlcy1zZWN0aW9uJywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkubGVuZ3RoICYmICEgalF1ZXJ5KCAnI2RzbGNhLXR1dC1wYWdlJywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkubGVuZ3RoICkge1xuXG5cdFx0YWRkU2VjdGlvbiggaW5pdF9zb3J0YWJsZXMoKSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0aW5pdF9zb3J0YWJsZXMoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBIb29rIC0gQ29weSBNb2R1bGUgQXJlYVxuXHQgKi9cblx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudC5vbiggJ2NsaWNrJywgJy5kc2xjYS1jb3B5LW1vZHVsZXMtYXJlYS1ob29rJywgZnVuY3Rpb24oZSl7XG5cblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHQvLyBDaGVjayBpZiBhY3Rpb24gY2FuIGJlIGZpcmVkXG5cdFx0aWYgKCAhYWN0aW9uQXZhaWwoKSApIHJldHVybiBmYWxzZTtcblxuXHRcdGlmICggISBqUXVlcnkodGhpcykuaGFzQ2xhc3MoJ2RzbGNhLWFjdGlvbi1kaXNhYmxlZCcpICkge1xuXG5cdFx0XHR2YXIgbW9kdWxlc0FyZWEgPSBqUXVlcnkodGhpcykuY2xvc2VzdCgnLmRzbGMtbW9kdWxlcy1hcmVhJyk7XG5cdFx0XHRkc2xjX2NvcHlfbW9kdWxlc19hcmVhKCBtb2R1bGVzQXJlYSApO1xuXHRcdH1cblx0fSk7XG5cblx0LyoqXG5cdCAqIEhvb2sgLSBEZWxldGUgTW9kdWxlIEFyZWFcblx0ICovXG5cdExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQub24oICdjbGljaycsICcuZHNsY2EtZGVsZXRlLW1vZHVsZXMtYXJlYS1ob29rJywgZnVuY3Rpb24oZSl7XG5cblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHQvLyBDaGVjayBpZiBhY3Rpb24gY2FuIGJlIGZpcmVkXG5cdFx0aWYgKCAhYWN0aW9uQXZhaWwoKSApIHJldHVybiBmYWxzZTtcblxuXHRcdGlmICggISBqUXVlcnkodGhpcykuaGFzQ2xhc3MoJ2RzbGNhLWFjdGlvbi1kaXNhYmxlZCcpICkge1xuXG5cdFx0XHQvLyBDaGVjayBpZiBjdXJyZW50IG1vZHVsZXMgYXJlYSBpcyBlbXB0eS5cblx0XHRcdHZhciBtb2R1bGVzQXJlYUVtcHR5ID0galF1ZXJ5KHRoaXMpLmNsb3Nlc3QoJy5kc2xjLW1vZHVsZXMtYXJlYScpLmhhc0NsYXNzKCdkc2xjLW1vZHVsZXMtYXJlYS1lbXB0eScpO1xuXG5cdFx0XHRpZiAoICEgbW9kdWxlc0FyZWFFbXB0eSApIHtcblxuXHRcdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSh0aGlzKTtcblxuXHRcdFx0XHRDTW9kYWxXaW5kb3coe1xuXG5cdFx0XHRcdFx0dGl0bGU6IERTTENTdHJpbmcuc3RyX2RlbF9hcmVhX3RpdGxlLFxuXHRcdFx0XHRcdGNvbnRlbnQ6IERTTENTdHJpbmcuc3RyX2RlbF9hcmVhX2Rlc2NyLFxuXHRcdFx0XHRcdGNvbmZpcm06IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHR2YXIgbW9kdWxlc0FyZWEgPSBzZWxmLmNsb3Nlc3QoJy5kc2xjLW1vZHVsZXMtYXJlYScpO1xuXHRcdFx0XHRcdFx0ZHNsY19tb2R1bGVzX2FyZWFfZGVsZXRlKCBtb2R1bGVzQXJlYSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0Ly8gU2hvdyBjb25maXJtYXRpb24gbW9kYWwgb25seSBpZiB0aGUgbW9kdWxlIGFyZWEgaXNuJ3QgZW1wdHkuXG5cdFx0XHRcdC8qZHNsY19qc19jb25maXJtKCAnZGVsZXRlX21vZHVsZXNfYXJlYScsICc8c3BhbiBjbGFzcz1cImRzbGNhLXByb21wdC1tb2RhbC10aXRsZVwiPicgKyBEU0xDU3RyaW5nLnN0cl9kZWxfYXJlYV90aXRsZSArXG5cdFx0XHRcdFx0Jzwvc3Bhbj48c3BhbiBjbGFzcz1cImRzbGNhLXByb21wdC1tb2RhbC1kZXNjclwiPicgKyBEU0xDU3RyaW5nLnN0cl9kZWxfYXJlYV9kZXNjciArICc8L3NwYW4+JywgalF1ZXJ5KHRoaXMpICk7Ki9cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmFyIG1vZHVsZXNBcmVhID0galF1ZXJ5KHRoaXMpLmNsb3Nlc3QoJy5kc2xjLW1vZHVsZXMtYXJlYScpO1xuXHRcdFx0XHQvLyBEZWxldGUgbW9kdWxlIGFyZWEgd2l0aG91dCBhc2tpbmcgYW55dGhpbmcuXG5cdFx0XHRcdGRzbGNfZGVsZXRlX21vZHVsZXNfYXJlYSggbW9kdWxlc0FyZWEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiBIb29rIC0gU2V0IFdpZHRoIG9mIHRoZSBNb2R1bGUgQXJlYVxuXHQgKi9cblx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudC5vbiggJ2NsaWNrJywgJy5kc2xjYS1jaGFuZ2Utd2lkdGgtbW9kdWxlcy1hcmVhLW9wdGlvbnMgc3BhbicsIGZ1bmN0aW9uKCl7XG5cdFx0Ly8gQ2hlY2sgaWYgYWN0aW9uIGNhbiBiZSBmaXJlZFxuXHRcdGlmICggIWFjdGlvbkF2YWlsKCkgKSByZXR1cm4gZmFsc2U7XG5cblx0XHRpZiAoICEgalF1ZXJ5KHRoaXMpLmhhc0NsYXNzKCdkc2xjYS1hY3Rpb24tZGlzYWJsZWQnKSApIHtcblx0XHRcdHZhciBtb2R1bGVBcmVhSlEgPSBqUXVlcnkodGhpcykuY2xvc2VzdCgnLmRzbGMtbW9kdWxlcy1hcmVhJyk7XG5cdFx0XHR2YXIgb2xkU2l6ZSA9IG1vZHVsZUFyZWFKUS5kYXRhKCdzaXplJyk7XG5cdFx0XHR2YXIgbmV3U2l6ZSA9IGpRdWVyeSh0aGlzKS5kYXRhKCdzaXplJyk7XG5cblx0XHRcdC8vIFN0YXJ0IGV4cGVuc2l2ZSBmdW5jdGlvbiBvbmx5IGlmIHRoZSB2YWx1ZSBjaGFuZ2VkLlxuXHRcdFx0aWYgKCAgTnVtYmVyKG9sZFNpemUpICE9PSBOdW1iZXIobmV3U2l6ZSkgKSB7XG5cdFx0XHRcdGRzbGNfbW9kdWxlc19hcmVhX3dpZHRoX3NldCggbW9kdWxlQXJlYUpRLCBuZXdTaXplICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHQvKipcblx0ICogQWN0aW9uIC0gU2hvdy9IaWRlIFdpZHRoIE9wdGlvbnMgUG9wdXAgZm9yIHRoZSBNb2R1bGUgQXJlYVxuXHQgKi9cblx0LyogTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudC5vbiggJ2NsaWNrJywgJy5kc2xjYS1jaGFuZ2Utd2lkdGgtbW9kdWxlcy1hcmVhLWhvb2snLCBmdW5jdGlvbihlKXtcblxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdC8vIENoZWNrIGlmIGFjdGlvbiBjYW4gYmUgZmlyZWRcblx0XHRpZiAoICEgYWN0aW9uQXZhaWwoKSApIHJldHVybiBmYWxzZTtcblxuXHRcdGlmICggISBqUXVlcnkodGhpcykuaGFzQ2xhc3MoJ2RzbGNhLWFjdGlvbi1kaXNhYmxlZCcpICkge1xuXG5cdFx0XHQvLyBJcyB2aXNpYmxlXG5cdFx0XHRpZiAoIGpRdWVyeSgnLmRzbGNhLWNoYW5nZS13aWR0aC1tb2R1bGVzLWFyZWEtb3B0aW9uczp2aXNpYmxlJywgdGhpcykubGVuZ3RoICkge1xuXG5cdFx0XHRcdC8vIEhpZGVcblx0XHRcdFx0alF1ZXJ5KCcuZHNsY2EtY2hhbmdlLXdpZHRoLW1vZHVsZXMtYXJlYS1vcHRpb25zJywgdGhpcykuaGlkZSgpO1xuXG5cdFx0XHQvLyBJcyBoaWRkZW5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gU2hvd1xuXHRcdFx0XHRqUXVlcnkoJy5kc2xjYS1jaGFuZ2Utd2lkdGgtbW9kdWxlcy1hcmVhLW9wdGlvbnMnLCB0aGlzKS5zaG93KCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTsgKi9cbi8qIFxuXHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50Lm9uKCAnbW91c2VsZWF2ZScsICcuZHNsY2EtY2hhbmdlLXdpZHRoLW1vZHVsZXMtYXJlYS1vcHRpb25zJywgZnVuY3Rpb24oZSl7XG5cblx0XHQvLyBIaWRlIHdpZHRoIHNlbGVjaXRvbiBwYW5lbC5cblx0XHRqUXVlcnkodGhpcykuaGlkZSgpO1xuXHR9KTtcbiAqL1xuXHQvKipcblx0ICogSG9vayAtIEFkZCBNb2R1bGVzIEFyZWFcblx0ICogVE9ETzogV2hlcmUgd2UgdXNlIGl0PyBEZWxldGUgbWF5YmU/XG5cdCAqL1xuXHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50Lm9uKCAnY2xpY2snLCAnLmRzbGNhLWFkZC1tb2R1bGVzLWFyZWEtaG9vaycsIGZ1bmN0aW9uKGUpe1xuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdC8vIENoZWNrIGlmIGFjdGlvbiBjYW4gYmUgZmlyZWRcblx0XHRpZiAoICFhY3Rpb25BdmFpbCgpICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0ZHNsY19tb2R1bGVzX2FyZWFfYWRkKCBqUXVlcnkodGhpcykuY2xvc2VzdCgnLmRzbGMtbW9kdWxlcy1zZWN0aW9uJykuZmluZCgnLmRzbGMtbW9kdWxlcy1zZWN0aW9uLWlubmVyJykgKTtcblx0fSk7XG5cbn0pO1xuXG4vKipcbiAqIEFSRUFTIC0gQWRkIE5ld1xuICovXG5cbmZ1bmN0aW9uIGRzbGNfbW9kdWxlc19hcmVhX2FkZCggcm93ICkge1xuXG5cdGlmICggd2luZG93LmRzbGNEZWJ1ZyApIGNvbnNvbGUubG9nKCAnZHNsY19hZGRfbW9kdWxlc19hcmVhJyApO1xuXG5cdC8vIEFkZCBjbGFzcyB0byBib2R5IHNvIHdlIGtub3cgaXQncyBpbiBwcm9ncmVzc1xuXHQvLyBqUXVlcnkoJ2JvZHknLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5hZGRDbGFzcygnZHNsY2EtYW5pbS1pbi1wcm9ncmVzcycpO1xuXG5cdHZhciBvdXRwdXQgPSAnPGRpdiBjbGFzcz1cImRzbGMtbW9kdWxlcy1hcmVhIGRzbGMtbW9kdWxlcy1hcmVhLWRuZCBkc2xjLWNvbCBkc2xjLTEyLWNvbCBkc2xjLW1vZHVsZXMtYXJlYS1lbXB0eSBcIiBkYXRhLXNpemU9XCIxMlwiPicrXG5cdCc8ZGl2IGNsYXNzPVwiZHNsY2EtbW9kdWxlcy1hcmVhLW1hbmFnZVwiPiA8ZGl2IGNsYXNzPVwiZHNsY2EtbW9kdWxlcy1hcmVhLW1hbmFnZS1pbm5lclwiPicrXG5cdCc8c3BhbiBjbGFzcz1cImRzbGNhLW1hbmFnZS1hY3Rpb24gZHNsY2EtY29weS1tb2R1bGVzLWFyZWEtaG9va1wiIHRpdGxlPVwiRHVwbGljYXRlXCIgPjxzcGFuIGNsYXNzPVwiZHNsY2EtaWNvbiBkc2xjLWljb24tY29weVwiPicrXG5cdCc8L3NwYW4+PC9zcGFuPiA8c3BhbiBjbGFzcz1cImRzbGNhLW1hbmFnZS1hY3Rpb24gZHNsY2EtbW92ZS1tb2R1bGVzLWFyZWEtaG9va1wiIHRpdGxlPVwiRHJhZyB0byBtb3ZlXCIgPicrXG5cdCc8c3BhbiBjbGFzcz1cImRzbGNhLWljb24gZHNsYy1pY29uLW1vdmVcIj48L3NwYW4+PC9zcGFuPicrXG5cdCc8c3BhbiBjbGFzcz1cImRzbGNhLW1hbmFnZS1hY3Rpb24gZHNsY2EtY2hhbmdlLXdpZHRoLW1vZHVsZXMtYXJlYS1ob29rXCIgdGl0bGU9XCJDaGFuZ2Ugd2lkdGhcIiA+Jytcblx0JzxzcGFuIGNsYXNzPVwiZHNsY2EtaWNvbiBkc2xjLWljb24tY29sdW1uc1wiPjwvc3Bhbj4gPGRpdiBjbGFzcz1cImRzbGNhLWNoYW5nZS13aWR0aC1tb2R1bGVzLWFyZWEtb3B0aW9uc1wiPicrXG5cdCc8c3Bhbj5Db250YWluZXIgV2lkdGg8L3NwYW4+PHNwYW4gZGF0YS1zaXplPVwiMVwiPjEvMTI8L3NwYW4+PHNwYW4gZGF0YS1zaXplPVwiMlwiPjIvMTI8L3NwYW4+Jytcblx0JzxzcGFuIGRhdGEtc2l6ZT1cIjNcIj4zLzEyPC9zcGFuPjxzcGFuIGRhdGEtc2l6ZT1cIjRcIj40LzEyPC9zcGFuPiA8c3BhbiBkYXRhLXNpemU9XCI1XCI+NS8xMjwvc3Bhbj48c3BhbiBkYXRhLXNpemU9XCI2XCI+Ni8xMjwvc3Bhbj4nK1xuXHQnPHNwYW4gZGF0YS1zaXplPVwiN1wiPjcvMTI8L3NwYW4+PHNwYW4gZGF0YS1zaXplPVwiOFwiPjgvMTI8L3NwYW4+IDxzcGFuIGRhdGEtc2l6ZT1cIjlcIj45LzEyPC9zcGFuPjxzcGFuIGRhdGEtc2l6ZT1cIjEwXCI+MTAvMTI8L3NwYW4+Jytcblx0JzxzcGFuIGRhdGEtc2l6ZT1cIjExXCI+MTEvMTI8L3NwYW4+PHNwYW4gZGF0YS1zaXplPVwiMTJcIj4xMi8xMjwvc3Bhbj4gPC9kaXY+IDwvc3Bhbj4nK1xuXHQnPHNwYW4gY2xhc3M9XCJkc2xjYS1tYW5hZ2UtYWN0aW9uIGRzbGNhLWRlbGV0ZS1tb2R1bGVzLWFyZWEtaG9va1wiIHRpdGxlPVwiRGVsZXRlXCIgPjxzcGFuIGNsYXNzPVwiZHNsY2EtaWNvbiBkc2xjLWljb24tcmVtb3ZlXCI+PC9zcGFuPjwvc3Bhbj4gPC9kaXY+IDwvZGl2PicrXG5cdCc8L2Rpdj4nO1xuXG5cblx0Ly8gQXBwZW5kIG5ldyBhcmVhIGFuZCBhbmltYXRlXG5cdGpRdWVyeSggb3V0cHV0ICkuYXBwZW5kVG8oIHJvdyApLmNzcyh7IGhlaWdodCA6IDAgfSkuYW5pbWF0ZSh7XG5cdFx0aGVpZ2h0IDogOTlcblx0fSwgMzAwLCBmdW5jdGlvbigpe1xuXHRcdGpRdWVyeSh0aGlzKS5jc3MoeyBoZWlnaHQgOiAnYXV0bycgfSk7XG5cdH0pLmFkZENsYXNzKCdkc2xjYS1pbml0LWFuaW1hdGlvbicpO1xuXG5cblx0Ly8gUmUtaW5pdGlhbGl6ZSBhbGwgdGhlIGVtcHR5IGFyZWFzIG9uIHRoZSBwYWdlXG5cdHZhciBlbXB0eU1vZHVsZUFyZWFzID0galF1ZXJ5KCcuZHNsYy1tb2R1bGVzLWFyZWEtZW1wdHknLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KTtcblxuXHRqUXVlcnkoZW1wdHlNb2R1bGVBcmVhcykuZWFjaChmdW5jdGlvbiAoaSxlKSB7XG5cblx0XHRuZXcgTW9kdWxlQXJlYShlKTtcblx0fSk7XG5cblx0Ly8gQ2FsbCBvdGhlciBmdW5jdGlvbnNcblx0ZHJhZ0FuZERyb3BJbml0KCk7XG5cdHdpbmRvdy5kc2xjX2dlbmVyYXRlX2NvZGUoKTtcblx0d2luZG93LmRzbGNfc2hvd19wdWJsaXNoX2J1dHRvbigpO1xuXG5cdC8vIFJlbW92ZSBjbGFzcyBmcm9tIGJvZHkgc28gd2Uga25vdyBpdCdzIGRvbmVcblx0Ly8galF1ZXJ5KCdib2R5JywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkucmVtb3ZlQ2xhc3MoJ2RzbGNhLWFuaW0taW4tcHJvZ3Jlc3MnKTtcbn1cblxuLyoqXG4gKiBBUkVBUyAtIERlbGV0ZVxuICovXG5cbmZ1bmN0aW9uIGRzbGNfbW9kdWxlc19hcmVhX2RlbGV0ZSggYXJlYSApIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfZGVsZXRlX21vZHVsZXNfYXJlYScgKTtcblxuXHQvLyBWYXJzXG5cdHZhciBtb2R1bGVzU2VjdGlvbiA9IGFyZWEuY2xvc2VzdCgnLmRzbGMtbW9kdWxlcy1zZWN0aW9uJykuZmluZCgnLmRzbGMtbW9kdWxlcy1zZWN0aW9uLWlubmVyJyksXG5cdGRzbGNEZWxldGVTZWN0aW9uVG9vID0gZmFsc2U7XG5cblx0Ly8gQWRkIGEgY2xhc3MgdG8gdGhlIGFyZWEgc28gd2Uga25vdyBpdCdzIGJlaW5nIGRlbGV0ZWRcblx0YXJlYS5hZGRDbGFzcygnZHNsY2EtbW9kdWxlcy1hcmVhLWJlaW5nLWRlbGV0ZWQnKTtcblxuXHQvLyBJZiBpdCdzIHRoZSBsYXN0IGFyZWEgaW4gdGhlIHJvdyBkZWxldGUgc2VjdGlvbiBhcyB3ZWxsXG5cdGlmICggbW9kdWxlc1NlY3Rpb24uZmluZCgnLmRzbGMtbW9kdWxlcy1hcmVhJykubGVuZ3RoIDwgMiApIHtcblx0XHRkc2xjRGVsZXRlU2VjdGlvblRvbyA9IHRydWU7XG5cdH1cblxuXHQvLyBJZiBhIG1vZHVsZSBpbiB0aGUgYXJlYSBpcyBiZWluZyBlZGl0ZWRcblx0aWYgKCBhcmVhLmZpbmQoJy5kc2xjYS1tb2R1bGUtYmVpbmctZWRpdGVkJykubGVuZ3RoICkge1xuXG5cdFx0Ly8gSGlkZSB0aGUgZmlsdGVyIGhvb2tzXG5cdFx0alF1ZXJ5KCcuZHNsY2EtaGVhZGVyIC5kc2xjYS1vcHRpb25zLWZpbHRlci1ob29rJywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkuaGlkZSgpO1xuXG5cdFx0Ly8gSGlkZSB0aGUgc2F2ZS9jYW5jZWwgYWN0aW9uc1xuXHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWFjdGlvbnMnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5oaWRlKCk7XG5cblx0XHQvLyBTaG93IHRoZSBzZWN0aW9uIGhvb2tzXG5cdFx0alF1ZXJ5KCcuZHNsY2EtaGVhZGVyIC5kc2xjYS1nby10by1zZWN0aW9uLWhvb2snLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5zaG93KCk7XG5cblx0XHQvLyBTaG93IHRoZSBtb2R1bGVzIGxpc3Rpbmdcblx0XHRzaG93U2VjdGlvbignLmRzbGNhLW1vZHVsZXMnKTtcblxuXHR9XG5cblx0Ly8gU2V0IGEgdGltZW91dCBzbyB3ZSBoYW5kbGUgZGVsZXRpb24gYWZ0ZXIgYW5pbWF0aW9uIGVuZHNcblx0c2V0VGltZW91dCggZnVuY3Rpb24oKXtcblxuXHRcdC8vIERlbGV0ZSBzZWN0aW9uIGlmIG5vIG1vcmUgbW9kdWxlIGFyZWFzIGluc2lkZS5cblx0XHRpZiAoIGRzbGNEZWxldGVTZWN0aW9uVG9vICkge1xuXG5cdFx0XHR2YXIgcGFyZW50U2VjdGlvbkNvbnRhaW5lciA9IGFyZWEuY2xvc2VzdCgnLmRzbGMtbW9kdWxlcy1zZWN0aW9uLWlubmVyJyk7XG5cdFx0XHQvLyBkc2xjX21vZHVsZXNfYXJlYV9hZGQoIG1vZHVsZXNTZWN0aW9uICk7XG5cblx0XHRcdC8vIERvbid0IGRlbGV0ZSBsYXRlc3QgbW9kdWxlIGFyZWEgaW4gdGhlIGxhdGVzdCBzZWN0aW9uIG9uIHRoZSBwYWdlXG5cdFx0XHRpZiAoMiA8PSBhcmVhLmNsb3Nlc3QoJyNkc2xjLW1haW4nKS5maW5kKCcuZHNsYy1tb2R1bGVzLXNlY3Rpb24nKS5sZW5ndGggKSB7XG5cblx0XHRcdFx0ZHNsY19yb3dfZGVsZXRlKCBhcmVhLmNsb3Nlc3QoJy5kc2xjLW1vZHVsZXMtc2VjdGlvbicpICk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIFJlbW92ZSB0aGUgYXJlYVxuXHRcdFx0XHRhcmVhLnJlbW92ZSgpO1xuXHRcdFx0XHQvLyBDcmVhdGUgbmV3IGVtcHR5IGFyZWEgaW4gY3VycmVudCBtb2R1bGUgc2VjdGlvblxuXHRcdFx0XHRkc2xjX21vZHVsZXNfYXJlYV9hZGQoIG1vZHVsZXNTZWN0aW9uICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBhcmVhXG5cdFx0YXJlYS5yZW1vdmUoKTtcblxuXHRcdC8vIENhbGwgb3RoZXIgZnVuY3Rpb25zXG5cdFx0d2luZG93LmRzbGNfZ2VuZXJhdGVfY29kZSgpO1xuXHRcdHdpbmRvdy5kc2xjX3Nob3dfcHVibGlzaF9idXR0b24oKTtcblx0fSwgOTAwICk7XG5cblx0Ly8gQW5pbWF0aW9uXG5cdGFyZWEuY3NzKHtcblx0XHQnLXdlYmtpdC1hbmltYXRpb24tbmFtZScgOiAnZHNsY0JvdW5jZU91dCcsXG5cdFx0Jy1tb3otYW5pbWF0aW9uLW5hbWUnIDogJ2RzbGNCb3VuY2VPdXQnLFxuXHRcdCdhbmltYXRpb24tbmFtZScgOiAnZHNsY0JvdW5jZU91dCcsXG5cdFx0J2FuaW1hdGlvbi1kdXJhdGlvbicgOiAnMC42cycsXG5cdFx0Jy13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uJyA6ICcwLjZzJyxcblx0XHQnb3ZlcmZsb3cnIDogJ2hpZGRlbidcblx0fSkuYW5pbWF0ZSh7XG5cdFx0b3BhY2l0eSA6IDBcblx0fSwgNjAwKS5hbmltYXRlKHtcblx0XHRoZWlnaHQgOiAwLFxuXHRcdG1hcmdpbkJvdHRvbSA6IDBcblx0fSwgMzAwLCBmdW5jdGlvbigpe1xuXHRcdGFyZWEucmVtb3ZlKCk7XG5cdFx0d2luZG93LmRzbGNfZ2VuZXJhdGVfY29kZSgpO1xuXHRcdHdpbmRvdy5kc2xjX3Nob3dfcHVibGlzaF9idXR0b24oKTtcblx0fSk7XG59XG5cbi8qKlxuICogQVJFQVMgLSBDb3B5XG4gKi9cblxuZnVuY3Rpb24gZHNsY19tb2R1bGVzX2FyZWFfY29weSggYXJlYSApIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfY29weV9tb2R1bGVzX2FyZWEnICk7XG5cblx0Ly8gVmFyc1xuXHR2YXIgZHNsY19tb2R1bGVJRCxcblx0bW9kdWxlc1NlY3Rpb24gPSBhcmVhLmNsb3Nlc3QoJy5kc2xjLW1vZHVsZXMtc2VjdGlvbicpLmZpbmQoJy5kc2xjLW1vZHVsZXMtc2VjdGlvbi1pbm5lcicpO1xuXG5cdC8vIENvcHkgdGhlIGFyZWEgYW5kIGFwcGVuZCB0byB0aGUgcm93XG5cdHZhciBkc2xjX21vZHVsZXNBcmVhQ2xvbmVkID0gYXJlYS5jbG9uZSgpLmFwcGVuZFRvKG1vZHVsZXNTZWN0aW9uKTtcblxuXHRuZXcgTW9kdWxlQXJlYShkc2xjX21vZHVsZXNBcmVhQ2xvbmVkWzBdKTtcblxuXHQvLyBUcmlnZ2VyIG1vdXNlbGVhdmUgKCBzbyB0aGUgYWN0aW9ucyB0aGF0IHNob3cgb24gaG92ZXIgZ28gYXdheSApXG5cdGRzbGNfbW9kdWxlc0FyZWFDbG9uZWQuZmluZCgnLmRzbGNhLW1vZHVsZXMtYXJlYS1tYW5hZ2UnKS50cmlnZ2VyKCdtb3VzZWxlYXZlJyk7XG5cblx0Ly8gQXBwbHkgY29ycmVjdCBkYXRhIHNpemUgYW5kIGdldCByaWQgb2YgYW5pbWF0aW9uc1xuXHRkc2xjX21vZHVsZXNBcmVhQ2xvbmVkLmRhdGEoJ3NpemUnLCBhcmVhLmRhdGEoJ3NpemUnKSApLmZpbmQoJy5kc2xjLW1vZHVsZS1mcm9udCcpLmNzcyh7XG5cdFx0Jy13ZWJraXQtYW5pbWF0aW9uLW5hbWUnIDogJ25vbmUnLFxuXHRcdCctbW96LWFuaW1hdGlvbi1uYW1lJyA6ICdub25lJyxcblx0XHQnYW5pbWF0aW9uLW5hbWUnIDogJ25vbmUnLFxuXHRcdCdhbmltYXRpb24tZHVyYXRpb24nIDogJzAnLFxuXHRcdCctd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbicgOiAnMCcsXG5cdFx0b3BhY2l0eSA6IDBcblxuXHQvLyBHbyB0aHJvdWdoIGVhY2ggbW9kdWxlIGluIHRoZSBhcmVhXG5cdH0pLmVhY2goZnVuY3Rpb24oKXtcblxuXHRcdHZhciBkc2xjX21vZHVsZSA9IGpRdWVyeSh0aGlzKTtcblxuXHRcdC8vR2VuZXJhdGUgbmV3IElEIGZvciB0aGUgbmV3IG1vZHVsZSBhbmQgY2hhbmdlIGl0IGluIEhUTUwvQ1NTIG9mIHRoZSBtb2R1bGUuXG5cdFx0Z2V0TmV3TW9kdWxlSWQoIGRzbGNfbW9kdWxlWzBdICk7XG5cblx0XHQvLyBSZW1vdmUgXCJkc2xjYS1tb2R1bGUtYmVpbmctZWRpdGVkXCIgY2xhc3MgZm9ybSBhbnkgZWxlbWVudFxuXHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1iZWluZy1lZGl0ZWQnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5yZW1vdmVDbGFzcygnZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcpO1xuXG5cdFx0Ly8gTmVlZCB0byBjYWxsIHRoaXMgZnVuY3Rpb24gdG8gdXBkYXRlIGxhc3QgY29sdW1uIGNsYXNzIGZvciB0aGUgbW9kdWxlcy5cblx0XHR3aW5kb3cuZHNsY19nZW5lcmF0ZV9jb2RlKCk7XG5cblx0XHQvLyBTaG93IGJhY2sgbmV3IGNyZWF0ZWQgbW9kdWxlXG5cdFx0ZHNsY19tb2R1bGUuYW5pbWF0ZSh7XG5cdFx0XHRvcGFjaXR5IDogMVxuXHRcdH0sIDMwMCk7XG5cblx0fSk7XG5cblx0Ly8gQ2FsbCBvdGhlciBmdW5jdGlvbnNcblx0ZHJhZ0FuZERyb3BJbml0KCk7XG5cdHdpbmRvdy5kc2xjX3Nob3dfcHVibGlzaF9idXR0b24oKTtcblxuXHQvLyBOZWVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbiB0byB1cGRhdGUgbGFzdCBjb2x1bW4gY2xhc3MgZm9yIHRoZSBtb2R1bGUgYXJlYXMuXG5cdHdpbmRvdy5kc2xjX2dlbmVyYXRlX2NvZGUoKTtcblxuXG59XG5cbi8qKlxuICogQVJFQVMgLSBTZXQgV2lkdGhcbiAqL1xuZnVuY3Rpb24gZHNsY19tb2R1bGVzX2FyZWFfd2lkdGhfc2V0KCBhcmVhLCBuZXdXaWR0aCApIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfbW9kdWxlc19hcmVhX3dpZHRoX3NldCcgKTtcblxuXHQvLyBHZW5lcmF0ZSBuZXcgY2xhc3MgYmFzZWQgb24gd2lkdGhcblx0dmFyIG5ld0NsYXNzID0gJ2RzbGMtJyArIG5ld1dpZHRoICsgJy1jb2wnO1xuXG5cdC8vIFJlbW92ZSB3aWR0aCBjbGFzc2VzLCBhZGQgbmV3IHdpZHRoIGNsYXNzIGFuZCBzZXQgdGhlIGRhdGEtc2l6ZSBhdHRyXG5cdGFyZWFcblx0XHQucmVtb3ZlQ2xhc3MoJ2RzbGMtMS1jb2wgZHNsYy0yLWNvbCBkc2xjLTMtY29sIGRzbGMtNC1jb2wgZHNsYy01LWNvbCBkc2xjLTYtY29sIGRzbGMtNy1jb2wgZHNsYy04LWNvbCBkc2xjLTktY29sIGRzbGMtMTAtY29sIGRzbGMtMTEtY29sIGRzbGMtMTItY29sJylcblx0XHQuYWRkQ2xhc3MobmV3Q2xhc3MpXG5cdFx0LmRhdGEoJ3NpemUnLCBuZXdXaWR0aCk7XG5cblx0Ly8gQ2FsbCBvdGhlciBmdW5jdGlvbnNcblx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFXaW5kb3cuZHNsY19tYXNvbnJ5KCk7XG5cblx0aWYgKCBMaXZlQ29tcG9zZXIuQnVpbGRlci5GbGFncy5wYW5lbE9wZW5lZCApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR3aW5kb3cuZHNsY19nZW5lcmF0ZV9jb2RlKCk7XG5cdHdpbmRvdy5kc2xjX3Nob3dfcHVibGlzaF9idXR0b24oKTtcblxufVxuXG4vKipcbiAqIENoZWNrIE1vZHVsZSBBcmVhcyBpbml0aWFsaXphdGlvblxuICpcbiAqIEByZXR1cm4gdm9pZFxuICovXG5leHBvcnQgY29uc3QgbW9kdWxlYXJlYXNJbml0SlMgPSAoKSA9PiB7XG5cblx0Ly8gU2VsZWN0IGFsbCB0aGUgbW9kdWxlIGFyZWFzIGZvcm0gdGhlIG1haW4gc2VjdGlvbiBvZiB0aGUgcGFnZVxuXHRqUXVlcnkoICcjZHNsYy1tYWluIC5kc2xjLW1vZHVsZXMtYXJlYScsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQgKS5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdC8vIENoZWNrIGlmIGFsbCB0aGUgbW9kdWxlIGFyZWFzIGhhdmUgZGF0YSBhdHRyaWJ1dGUgJ2pzaW5pdCcgc2V0IHRvICdpbml0aWFsaXplZCc/XG5cdFx0aWYgKCBqUXVlcnkoIHRoaXMgKS5kYXRhKCdqc2luaXQnKSAhPT0gJ2luaXRpYWxpemVkJyApIHtcblxuXHRcdFx0Ly8gSW5pdGlhbGl6ZSBhbGwgdGhlIG1vZHVsZSBhcmVhcyB3aXRob3V0ICdqc2luaXQnIGF0dHJpYnV0ZSFcblx0XHRcdG5ldyBNb2R1bGVBcmVhKCB0aGlzICk7XG5cdFx0fVxuXHR9ICk7XG5cbn1cblxuLyoqXG4gKiBEZXByZWNhdGVkIEZ1bmN0aW9ucyBhbmQgRmFsbGJhY2tzXG4gKi9cblxuZnVuY3Rpb24gZHNsY19hZGRfbW9kdWxlc19hcmVhKCByb3cgKSB7IGRzbGNfbW9kdWxlc19hcmVhX2FkZCggcm93ICk7IH1cbmZ1bmN0aW9uIGRzbGNfZGVsZXRlX21vZHVsZXNfYXJlYSggYXJlYSApIHsgZHNsY19tb2R1bGVzX2FyZWFfZGVsZXRlKCBhcmVhICk7IH1cbmZ1bmN0aW9uIGRzbGNfY29weV9tb2R1bGVzX2FyZWEoIGFyZWEgKSB7IGRzbGNfbW9kdWxlc19hcmVhX2NvcHkoIGFyZWEgKTsgfVxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuKlxuKiA9IE1PRFVMRSBQUkVTRVRTID1cbipcbiogLSBkc2xjX3VwZGF0ZV9wcmVzZXQgKCBVcGRhdGUgU3R5bGluZyBQcmVzZXQgKVxuKlxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNb2R1bGUgUHJlc2V0cyAtIFVwZGF0ZVxuICovXG5leHBvcnQgY29uc3QgdXBkYXRlUHJlc2V0ID0gKCkgPT4ge1xuXG5cdGlmICggd2luZG93LmRzbGNEZWJ1ZyApIGNvbnNvbGUubG9nKCAndXBkYXRlUHJlc2V0JyApO1xuXG5cdC8vIFZhcnNcblx0dmFyIG1vZHVsZSA9IGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1iZWluZy1lZGl0ZWQnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KSxcblx0cHJlc2V0TmFtZSA9IG1vZHVsZS5maW5kKCcuZHNsY2EtbW9kdWxlLW9wdGlvbi1mcm9udFtkYXRhLWlkPVwiY3NzX2xvYWRfcHJlc2V0XCJdJykudmFsKCksXG5cdHByZXNldENvZGUgPSBtb2R1bGUuZmluZCgnLmRzbGNhLW1vZHVsZS1jb2RlJykudmFsKCksXG5cdG1vZHVsZUlEID0gbW9kdWxlLmRhdGEoJ21vZHVsZScpO1xuXG5cdC8vIElmIHByZXNldCB2YWx1ZSBub3QgXCJub25lXCJcblx0aWYgKCAnbm9uZScgIT09IHByZXNldE5hbWUgJiYgJycgIT09IHByZXNldE5hbWUgKSB7XG5cblx0XHQvLyBBSkFYIENhbGwgdG8gU2F2ZSBQcmVzZXRcblx0XHRqUXVlcnkucG9zdChcblxuXHRcdFx0RFNMQ0FqYXguYWpheHVybCxcblx0XHRcdHtcblx0XHRcdFx0YWN0aW9uIDogJ2RzbGMtYWpheC1zYXZlLXByZXNldCcsXG5cdFx0XHRcdGRzbGNfcHJlc2V0X25hbWUgOiBwcmVzZXROYW1lLFxuXHRcdFx0XHRkc2xjX3ByZXNldF9jb2RlIDogcHJlc2V0Q29kZSxcblx0XHRcdFx0ZHNsY19tb2R1bGVfaWQgOiBtb2R1bGVJRFxuXHRcdFx0fSxcblx0XHRcdGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblxuXHRcdFx0XHRpZiAoIHJlc3BvbnNlLnByZXNldF9zZXR0aW5nID09ICdlbmFibGVkJyApIHtcblxuXHRcdFx0XHRcdC8vIFJlbG9hZCBhbGwgbW9kdWxlcyB3aXRoIHRoZSBzYW1lIHByZXNldFxuXHRcdFx0XHRcdGpRdWVyeSgnLmRzbGMtbW9kdWxlLWZyb250Om5vdCgjJyArIG1vZHVsZS5hdHRyKCdpZCcpICsgJylbZGF0YS1tb2R1bGU9XCInICsgbW9kdWxlLmRhdGEoJ21vZHVsZScpICtcblx0XHRcdFx0XHRcdCdcIl1bZGF0YS1kc2xjLXByZXNldD1cIicgKyBtb2R1bGUuZGF0YSgnZHNsYy1wcmVzZXQnKSArICdcIl0nLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50ICkuZWFjaChmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0ZHNsY19tb2R1bGVfb3V0cHV0X3JlbG9hZCggalF1ZXJ5KHRoaXMpICk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHQpO1xuXHR9XG59XG5cbi8qKlxuICogTW9kdWxlIFByZXNldHMgLSBEb2N1bWVudCBSZWFkeVxuICovXG5qUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCQpe1xuXG5cdC8qKlxuXHQgKiBBY3Rpb24gLSBTYXZlIHByZXNldFxuXHQgKi9cblxuXHRqUXVlcnkoZG9jdW1lbnQpLm9uKCAna2V5cHJlc3MnLCAnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkW25hbWU9XCJjc3Nfc2F2ZV9wcmVzZXRcIl0nLCBmdW5jdGlvbihlKXtcblxuXHRcdC8vIEVudGVyIEtleSBQcmVzc2VkXG5cdFx0aWYgKCBlLndoaWNoID09IDEzICkge1xuXG5cdFx0XHQvLyBWYXJzXG5cdFx0XHR2YXIgcHJlc2V0TmFtZSA9IGpRdWVyeSh0aGlzKS52YWwoKSxcblx0XHRcdHByZXNldElEID0gcHJlc2V0TmFtZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCAnLScpO1xuXG5cdFx0XHQvLyBBZGQgY2xhc3MgdG8gYm9keSB0aGF0IGEgbmV3IHByZXNldCBpcyBhZGRlZFxuXHRcdFx0alF1ZXJ5KCdib2R5JykuYWRkQ2xhc3MoJ2RzbGNhLW5ldy1wcmVzZXQtYWRkZWQnKTtcblxuXHRcdFx0Ly8gQXBwZW5kIHRoZSBuZXcgcHJlc2V0IHRvIHRoZSBcIkxvYWQgUHJlc2V0XCIgb3B0aW9uIGFuZCB0cmlnZ2VyIGNoYW5nZVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGRbbmFtZT1cImNzc19sb2FkX3ByZXNldFwiXScpLmFwcGVuZCgnPG9wdGlvbiB2YWx1ZT1cIicgKyBwcmVzZXRJRCArICdcIj4nICsgcHJlc2V0SUQgKyAnPC9vcHRpb24+JykudmFsKCBwcmVzZXRJRCApLnRyaWdnZXIoJ2NoYW5nZScpO1xuXG5cdFx0XHQvLyBFcmFzZSB2YWx1ZSBmcm9tIHRoZSBcIlNhdmUgUHJlc2V0XCIgb3B0aW9uXG5cdFx0XHRqUXVlcnkodGhpcykudmFsKCcnKTtcblxuXHRcdFx0alF1ZXJ5KCcuZHNsYy1kZWxldGUtcHJlc2V0JykucmVtb3ZlQ2xhc3MoJ2RzbGMtZGVsZXRlLXByZXNldC1oaWRlJyk7XG5cdFx0fVxuXHR9KTtcblxuXHQvKipcblx0ICogQWN0aW9uIC0gUHJlc2V0IHZhbHVlIGNoYW5nZWRcblx0ICovXG5cblx0alF1ZXJ5KGRvY3VtZW50KS5vbiggJ2NoYW5nZScsICcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGRbbmFtZT1cImNzc19sb2FkX3ByZXNldFwiXScsIGZ1bmN0aW9uKGUpe1xuXHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1iZWluZy1lZGl0ZWQnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5hZGRDbGFzcygnZHNsY2EtcHJlbG9hZC1wcmVzZXQnKTtcblx0fSk7XG5cblx0LyoqXG5cdCAqIEFjdGlvbiAtIERlbGV0ZSBQcmVzZXRcblx0ICovXG5cblx0alF1ZXJ5KGRvY3VtZW50KS5vbiggJ2NsaWNrJywgJy5kc2xjLWRlbGV0ZS1wcmVzZXQnLCBmdW5jdGlvbihlKXtcblxuXHRcdC8vIFZhcnNcblx0XHR2YXIgbW9kdWxlID0galF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLFxuXHRcdHByZXNldE5hbWUgPSBtb2R1bGUuZmluZCgnLmRzbGNhLW1vZHVsZS1vcHRpb24tZnJvbnRbZGF0YS1pZD1cImNzc19sb2FkX3ByZXNldFwiXScpLnZhbCgpLFxuXHRcdG1vZHVsZUlEID0gbW9kdWxlLmRhdGEoJ21vZHVsZScpO1xuXG5cdFx0Ly8gSWYgcHJlc2V0IHZhbHVlIG5vdCBcIm5vbmVcIlxuXHRcdGlmICggJ25vbmUnICE9PSBwcmVzZXROYW1lICYmICcnICE9PSBwcmVzZXROYW1lICkge1xuXG5cdFx0XHQvLyBBSkFYIENhbGwgdG8gU2F2ZSBQcmVzZXRcblx0XHRcdGpRdWVyeS5wb3N0KFxuXG5cdFx0XHRcdERTTENBamF4LmFqYXh1cmwsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRhY3Rpb24gOiAnZHNsYy1hamF4LWRlbGV0ZS1wcmVzZXQnLFxuXHRcdFx0XHRcdGRzbGNfcHJlc2V0X25hbWUgOiBwcmVzZXROYW1lLFxuXHRcdFx0XHRcdGRzbGNfbW9kdWxlX2lkIDogbW9kdWxlSURcblx0XHRcdFx0fSxcblx0XHRcdFx0ZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXG5cdFx0XHRcdFx0ZHNsY19tb2R1bGVfb3B0aW9uc19zaG93KG1vZHVsZUlEKTtcblx0XHRcdFx0fVxuXHRcdFx0KTtcblx0XHR9XG5cdH0pO1xufSk7XG5cblxuZXhwb3J0IGNvbnN0IHByZXNldHNJbml0ID0gKCkgPT4ge1xuXG59IiwiXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKlxuICogPSBVSSAtIFNDUk9MTEVSID1cbiAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbi8qKlxuICogU0NST0xMRVIgLSBEb2N1bWVudCBSZWFkeVxuICovXG5qUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCQpe1xuXG5cdHZhciBzY3JvbGxlclBsdWdpbiA9IGZ1bmN0aW9uKGNvbnRhaW5lcil7XG5cblx0XHQvKipcblx0XHQgKiBTY3JvbGwgbGlzdCBvZiBtb2R1bGVzIHdpdGggYSBtb3VzZSB3aGVlbC5cblx0XHQgKi9cblx0XHR2YXIgZGVsdGFLb2VmID0gLjc1O1xuXHRcdHZhciBpbmNyZW1lbnQgPSA1MDA7XG5cdFx0dmFyIHNjcm9sbGluYyA9IDEwMDtcblx0XHR2YXIgc2Nyb2xsZXIgPSBqUXVlcnkoJy5kc2xjYS1zZWN0aW9uLXNjcm9sbGVyJywgY29udGFpbmVyKTtcblx0XHR2YXIgc2Nyb2xsSW5uZXIgPSBqUXVlcnkoJy5kc2xjYS1zZWN0aW9uLXNjcm9sbGVyLWlubmVyJywgY29udGFpbmVyKVswXTtcblxuXHRcdHNjcm9sbGVyLm9uKCAnd2hlZWwnLCBmdW5jdGlvbihldmVudCkge1xuXG5cdFx0XHRzY3JvbGxfdG8oIGV2ZW50Lm9yaWdpbmFsRXZlbnQuZGVsdGFZIHx8IGV2ZW50Lm9yaWdpbmFsRXZlbnQuZGVsdGFYICk7XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9KTtcblxuXHRcdC8qKlxuXHRcdCAqIFNjcm9sbCB0byBkZWx0YVxuXHRcdCAqXG5cdFx0ICogQHBhcmFtICB7aW50fSBkZWx0YVxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIHNjcm9sbF90byhkZWx0YSkge1xuXG5cdFx0XHRpZiAoZGVsdGEgPCAwICkge1xuXG5cdFx0XHRcdGRlbHRhID0gLXNjcm9sbGluYztcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZGVsdGEgPSBzY3JvbGxpbmM7XG5cdFx0XHR9XG5cblx0XHRcdGRlbHRhID0gZGVsdGEgKiBkZWx0YUtvZWY7XG5cblx0XHRcdHZhciBsaXN0V2lkdGggPSBzY3JvbGxlci5maW5kKCcuZHNsY2Etc2VjdGlvbi1zY3JvbGxlci1jb250ZW50Jykud2lkdGgoKTtcblx0XHRcdHZhciBjb250ZW50V2lkdGggPSBzY3JvbGxlci53aWR0aCgpO1xuXG5cdFx0XHRpZiAoIGxpc3RXaWR0aCA8PSBjb250ZW50V2lkdGggKSByZXR1cm4gZmFsc2U7XG5cblx0XHRcdHZhciBzY3JvbGxNYXggPSBsaXN0V2lkdGggLSBjb250ZW50V2lkdGggKyAxMDtcblxuXHRcdFx0ZGVsdGEgPSBwYXJzZUludChzY3JvbGxJbm5lci5zdHlsZS5sZWZ0IHx8IDApIC0gZGVsdGE7XG5cdFx0XHRkZWx0YSA9IGRlbHRhID49IDAgPyAwIDogZGVsdGE7XG5cdFx0XHRkZWx0YSA9IGRlbHRhIDw9IC1zY3JvbGxNYXggPyAtc2Nyb2xsTWF4IDogZGVsdGE7XG5cblx0XHRcdHNjcm9sbElubmVyLnN0eWxlLmxlZnQgPSBkZWx0YSArICdweCc7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogSG9vayAtIFNjcm9sbGVyIFByZXZcblx0XHQgKi9cblx0XHRqUXVlcnkoJy5kc2xjYS1zZWN0aW9uLXNjcm9sbGVyLXByZXYnLCBjb250YWluZXIpLmNsaWNrKGZ1bmN0aW9uKGUpe1xuXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRzY3JvbGxfdG8oIC1pbmNyZW1lbnQgKTtcblx0XHR9KTtcblxuXHRcdC8qKlxuXHRcdCAqIEhvb2sgLSBTY3JvbGxlciBOZXh0XG5cdFx0ICovXG5cdFx0alF1ZXJ5KCcuZHNsY2Etc2VjdGlvbi1zY3JvbGxlci1uZXh0JywgY29udGFpbmVyKS5jbGljayhmdW5jdGlvbihlKXtcblxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0c2Nyb2xsX3RvKCBpbmNyZW1lbnQgKTtcblx0XHR9KTtcblxuXHRcdGpRdWVyeSh3aW5kb3cpLmxvYWQoZnVuY3Rpb24oKXtcblxuXHRcdFx0Ly8gSW5pdGlhdGUgc2Nyb2xsZXIgb24gd2luZG93IHJlc2l6ZVxuXHRcdFx0alF1ZXJ5KHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCl7XG5cblx0XHRcdFx0c2Nyb2xsX3RvKCAwICk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdHNjcm9sbGVyUGx1Z2luKGpRdWVyeSgnLmRzbGNhLXNlY3Rpb24uZHNsY2EtbW9kdWxlcycpKTtcblx0c2Nyb2xsZXJQbHVnaW4oalF1ZXJ5KCcuZHNsY2Etc2VjdGlvbi5kc2xjYS10ZW1wbGF0ZXMtbG9hZCcpKTtcbn0pO1xuXG4vKiogU2Nyb2xsIHByZXZpZXcgYXJlYSB3aGVuIG1vdXNlIGFyZSBvbiBzb21lIGRpc3RhbnQgb2YgZWRnZSAqL1xuZXhwb3J0IGNvbnN0IGluaXRQcmV2aWV3QXJlYVNjcm9sbGVyID0gKCkgPT4ge1xuXG5cdHZhciBweEluVGlrID0gNTtcblx0dmFyIHRpbWVyVGlrID0gNjtcblx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuRmxhZ3Mud2luZG93U2Nyb2xsZXIgPSBmYWxzZTtcblxuXHQvKiogU3RvcCBzY3JvbGwgaWYgd2l0aGluIGFyZWFzICovXG5cdGpRdWVyeShMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5vbignZHJhZ2xlYXZlJywnLmxjLXNjcm9sbC10b3AtYXJlYSwgLmxjLXNjcm9sbC1ib3R0b20tYXJlYScsIGZ1bmN0aW9uKGUpIHtcblxuXHRcdExpdmVDb21wb3Nlci5CdWlsZGVyLlVJLnN0b3BTY3JvbGxlcigpO1xuXHR9KTtcblxuXHQvKiogU2Nyb2xsIGJvdHRvbSAqL1xuXHRqUXVlcnkoTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkub24oJ2RyYWdlbnRlciBkcmFnb3ZlcicsJy5sYy1zY3JvbGwtYm90dG9tLWFyZWEnLCBmdW5jdGlvbihlKSB7XG5cblx0XHRpZiggTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuRmxhZ3Mud2luZG93U2Nyb2xsZXIgIT09IGZhbHNlICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0TGl2ZUNvbXBvc2VyLlV0aWxzLnB1Ymxpc2goJ0xDLnNvcnRhYmxlT2ZmJywge30pO1xuXG5cdFx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuRmxhZ3Mud2luZG93U2Nyb2xsZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpe1xuXG5cdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5zY3JvbGxCeSgwICwgcHhJblRpayk7XG5cdFx0fSwgdGltZXJUaWspO1xuXHR9KTtcblxuXHQvKiogU2Nyb2xsIHRvcCAqL1xuXHRqUXVlcnkoTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkub24oJ2RyYWdlbnRlcicsJy5sYy1zY3JvbGwtdG9wLWFyZWEnLCBmdW5jdGlvbihlKSB7XG5cblx0XHRpZiggTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuRmxhZ3Mud2luZG93U2Nyb2xsZXIgIT09IGZhbHNlICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0TGl2ZUNvbXBvc2VyLlV0aWxzLnB1Ymxpc2goJ0xDLnNvcnRhYmxlT2ZmJywge30pO1xuXG5cdFx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuRmxhZ3Mud2luZG93U2Nyb2xsZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpe1xuXG5cdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5zY3JvbGxCeSgwICwgLXB4SW5UaWspO1xuXHRcdH0sIHRpbWVyVGlrKTtcblx0fSk7XG5cblx0LyoqIFN0b3Agc2Nyb2xsIGlmIGNsaWNrIG9yIGRyYWcgZW5kZWQgKi9cblx0alF1ZXJ5KExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLm9uKCdkcmFnZW5kIG1vdXNldXAnLCAnYm9keScsIGZ1bmN0aW9uKGUpIHtcblxuXHRcdExpdmVDb21wb3Nlci5CdWlsZGVyLkZsYWdzLndpbmRvd1Njcm9sbGVyICYmIExpdmVDb21wb3Nlci5CdWlsZGVyLlVJLnN0b3BTY3JvbGxlcigpO1xuXHR9KTtcbn07XG5cbi8qKiBXaW5kb3cgWS1zY3JvbGxlciAqL1xualF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigkKXtcblxuXHRpbml0UHJldmlld0FyZWFTY3JvbGxlcigpO1xuXHQvKipcblx0ICogU3RvcHMgc2Nyb2xsZXIgZnVuY3Rpb25cblx0ICovXG5cdExpdmVDb21wb3Nlci5CdWlsZGVyLlVJLnN0b3BTY3JvbGxlciA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0TGl2ZUNvbXBvc2VyLlV0aWxzLnB1Ymxpc2goJ0xDLnNvcnRhYmxlT24nLCB7fSk7XG5cblx0XHRjbGVhckludGVydmFsKExpdmVDb21wb3Nlci5CdWlsZGVyLkZsYWdzLndpbmRvd1Njcm9sbGVyKTtcblx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5GbGFncy53aW5kb3dTY3JvbGxlciA9IGZhbHNlO1xuXHR9XG5cblx0alF1ZXJ5KFwiI3Njcm9sbGVyLXN0b3BwZXJcIikub24oJ2RyYWdvdmVyJywgZnVuY3Rpb24oKXtcblxuXHRcdExpdmVDb21wb3Nlci5CdWlsZGVyLlVJLnN0b3BTY3JvbGxlcigpO1xuXHR9KTtcbn0pOyIsIi8qKlxuICogQnVpbGRlciBzZWN0aW9uIGNsYXNzXG4gKi9cblxuZXhwb3J0IGNvbnN0IFNlY3Rpb24gPSBjbGFzc3tcblxuXHRjb25zdHJ1Y3RvciAoZWxlbSkge1xuXHRcdHRoaXMuc29ydGFibGU7XG5cdFx0dGhpcy5zb3J0YWJsZUNvbnRhaW5lciA9IGpRdWVyeSggZWxlbSApLmZpbmQoJy5kc2xjLW1vZHVsZXMtc2VjdGlvbi13cmFwcGVyIC5kc2xjLW1vZHVsZXMtc2VjdGlvbi1pbm5lcicpLmVxKDApWzBdO1xuXG5cdFx0dGhpcy5pbml0U29ydGFibGUoZWxlbSk7XG5cdFx0dGhpcy5pbml0RHJvcGFibGUoZWxlbSk7XG5cdFx0dGhpcy5yZWFjdFRvU29ydGFibGVPbk9mZigpO1xuXG5cdFx0Ly8gTWFyayBzZWN0aW9uIGFzIGluaXRpYWxpemVkXG5cdFx0alF1ZXJ5KCBlbGVtICkuYXR0cignZGF0YS1qc2luaXQnLCAnaW5pdGlhbGl6ZWQnKTtcblx0fVxuXG5cblxuXHRpbml0RHJvcGFibGUoZWxlbSkge1xuXHRcdGpRdWVyeSggZWxlbSApLmRyb3BwYWJsZSh7XG5cdFx0XHRkcm9wOiBmdW5jdGlvbiggZXZlbnQsIHVpICkge1xuXHRcdFx0XHR2YXIgbW9kdWxlc1NlY3Rpb24gPSBqUXVlcnkodGhpcykuZmluZCgnLmRzbGMtbW9kdWxlcy1zZWN0aW9uLWlubmVyJyk7XG5cdFx0XHRcdHZhciBtb2R1bGVJRCA9IHVpLmRyYWdnYWJsZS5kYXRhKCAnaWQnICk7XG5cdFx0XHRcdGlmICggbW9kdWxlSUQgPT0gJ0RTTENfTV9BJyApIHtcblx0XHRcdFx0XHRkc2xjX21vZHVsZXNfYXJlYV9hZGQoIG1vZHVsZXNTZWN0aW9uICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdGluaXRTb3J0YWJsZShlbGVtKSB7XG5cblx0XHR0aGlzLnNvcnRhYmxlID0galF1ZXJ5KCB0aGlzLnNvcnRhYmxlQ29udGFpbmVyICkuc29ydGFibGUoe1xuXHRcdFx0Y29ubmVjdFdpdGg6ICcuZHNsYy1tb2R1bGVzLXNlY3Rpb24taW5uZXInLFxuXHRcdFx0aXRlbXM6IFwiLmRzbGMtbW9kdWxlcy1hcmVhLWRuZFwiLFxuXHRcdFx0aGFuZGxlOiAnLmRzbGNhLW1vdmUtbW9kdWxlcy1hcmVhLWhvb2s6bm90KFwiLmRzbGNhLWFjdGlvbi1kaXNhYmxlZFwiKScsXG5cdFx0XHRwbGFjZWhvbGRlcjogJ2RzbGNhLW1vZHVsZXMtYXJlYS1wbGFjZWhvbGRlcicsXG5cdFx0XHRjdXJzb3JBdDogeyB0b3A6IDAsIGxlZnQ6IDAgfSxcblx0XHRcdHRvbGVyYW5jZSA6ICdpbnRlcnNlY3QnLFxuXHRcdFx0c2Nyb2xsOiB0cnVlLFxuXHRcdFx0c2Nyb2xsU2Vuc2l0aXZpdHk6IDEwMCxcblx0XHRcdHNjcm9sbFNwZWVkIDogMTUsXG5cdFx0XHRzb3J0OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggXCJ1aS1zdGF0ZS1kZWZhdWx0XCIgKTtcblx0XHRcdH0sXG5cdFx0XHRvdmVyOiBmdW5jdGlvbiAoZSwgdWkpIHtcblxuXHRcdFx0XHR2YXIgZHNsY1NlY3Rpb24gPSB1aS5wbGFjZWhvbGRlci5jbG9zZXN0KCcuZHNsYy1tb2R1bGVzLXNlY3Rpb24nKTtcblxuXHRcdFx0XHRqUXVlcnkoZHNsY1NlY3Rpb24pLnJlbW92ZUNsYXNzKCdkc2xjLW1vZHVsZXMtc2VjdGlvbi1lbXB0eScpLmFkZENsYXNzKCdkc2xjLW1vZHVsZXMtc2VjdGlvbi1ub3QtZW1wdHknKTtcblxuXHRcdFx0XHRkc2xjU2VjdGlvbi5zaWJsaW5ncygnLmRzbGMtbW9kdWxlcy1zZWN0aW9uJykuZWFjaCggZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeSgnLmRzbGMtbW9kdWxlcy1hcmVhOm5vdCgudWktc29ydGFibGUtaGVscGVyKScsIGpRdWVyeSh0aGlzKSkubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5KHRoaXMpLnJlbW92ZUNsYXNzKCdkc2xjLW1vZHVsZXMtc2VjdGlvbi1lbXB0eScpLmFkZENsYXNzKCdkc2xjLW1vZHVsZXMtc2VjdGlvbi1ub3QtZW1wdHknKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0alF1ZXJ5KHRoaXMpLnJlbW92ZUNsYXNzKCdkc2xjLW1vZHVsZXMtc2VjdGlvbi1ub3QtZW1wdHknKS5hZGRDbGFzcygnZHNsYy1tb2R1bGVzLXNlY3Rpb24tZW1wdHknKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSxcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0KGpRdWVyeShzZWxmLmVsZW0pLmZpbmQoJy5kc2xjLW1vZHVsZXMtYXJlYScpLmxlbmd0aCA9PSAwKSAmJiBkc2xjX21vZHVsZXNfYXJlYV9hZGQoalF1ZXJ5KHNvcnRhYmxlQ29udGFpbmVyKSk7XG5cdFx0XHR9LFxuXHRcdFx0dXBkYXRlOiBmdW5jdGlvbiAoZSwgdWkpIHtcblxuXHRcdFx0XHR3aW5kb3cuZHNsY19nZW5lcmF0ZV9jb2RlKCk7XG5cdFx0XHRcdHdpbmRvdy5kc2xjX3Nob3dfcHVibGlzaF9idXR0b24oKTtcblx0XHRcdH0sXG5cdFx0XHRzdGFydDogZnVuY3Rpb24oZSwgdWkpe1xuXG5cdFx0XHRcdC8vIFBsYWNlaG9sZGVyXG5cdFx0XHRcdHVpLnBsYWNlaG9sZGVyLmh0bWwoJzxzcGFuIGNsYXNzPVwiZHNsY2EtcGxhY2Vob2xkZXItaGVscC10ZXh0XCI+PHNwYW4gY2xhc3M9XCJkc2xjYS1wbGFjZWhvbGRlci1oZWxwLXRleHQtaW5uZXJcIj4nICsgRFNMQ1N0cmluZy5zdHJfYXJlYV9oZWxwZXJfdGV4dCArICc8L3NwYW4+PC9zcGFuPicpO1xuXHRcdFx0XHRpZiAoICEgalF1ZXJ5KHVpLml0ZW0pLmhhc0NsYXNzKCdkc2xjLTEyLWNvbCcpICkge1xuXHRcdFx0XHRcdHVpLnBsYWNlaG9sZGVyLndpZHRoKHVpLml0ZW0ud2lkdGgoKSAtIDEwKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHVpLnBsYWNlaG9sZGVyLndpZHRoKHVpLml0ZW0ud2lkdGgoKSkuY3NzKHsgbWFyZ2luIDogMCB9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBkcmFnIGluIHByb2dyZXNzIGNsYXNzXG5cdFx0XHRcdGpRdWVyeSgnYm9keScpLnJlbW92ZUNsYXNzKCdkc2xjYS1kcmFnLW5vdC1pbi1wcm9ncmVzcycpLmFkZENsYXNzKCdkc2xjYS1kcmFnLWluLXByb2dyZXNzIGRzbGNhLW1vZHVsZXMtYXJlYS1kcmFnLWluLXByb2dyZXNzJyk7XG5cblx0XHRcdFx0Ly8gUmVmcmVzaCBwb3NpdGlvbnNcblx0XHRcdFx0alF1ZXJ5KCAnLmRzbGMtbW9kdWxlcy1zZWN0aW9uLWlubmVyJyApLnNvcnRhYmxlKCBcInJlZnJlc2hQb3NpdGlvbnNcIiApO1xuXG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oZSwgdWkpe1xuXG5cdFx0XHRcdExpdmVDb21wb3Nlci5CdWlsZGVyLlVJLnN0b3BTY3JvbGxlcigpO1xuXHRcdFx0XHRqUXVlcnkoJ2JvZHknKS5yZW1vdmVDbGFzcygnZHNsY2EtZHJhZy1pbi1wcm9ncmVzcyBkc2xjYS1tb2R1bGVzLWFyZWEtZHJhZy1pbi1wcm9ncmVzcycpLmFkZENsYXNzKCdkc2xjYS1kcmFnLW5vdC1pbi1wcm9ncmVzcycpO1xuXHRcdFx0XHRqUXVlcnkoJy5kc2xjYS1hbmltLW9wYWNpdHktZHJvcCcpLnJlbW92ZUNsYXNzKCdkc2xjYS1hbmltLW9wYWNpdHktZHJvcCcpO1xuXHRcdFx0fSxcblx0XHRcdGNoYW5nZTogZnVuY3Rpb24oIGUsIHVpICkge1xuXG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0fVxuXG5cdHJlYWN0VG9Tb3J0YWJsZU9uT2ZmKCkge1xuXHRcdHNlbGYgPSB0aGlzLnNvcnRhYmxlO1xuXG5cdFx0LyoqIFNvcnQgb3B0aW9uIHNldHRlciAqL1xuXHRcdGpRdWVyeShkb2N1bWVudCkub24oJ0xDLnNvcnRhYmxlT2ZmJywgZnVuY3Rpb24oKXtcblx0XHRcdGlmICggdW5kZWZpbmVkICE9PSBzZWxmLnNvcnRhYmxlKCBcImluc3RhbmNlXCIgKSApIHtcblx0XHRcdFx0c2VsZi5zb3J0YWJsZSgnb3B0aW9uJywnZGlzYWJsZWQnLCB0cnVlKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGpRdWVyeShkb2N1bWVudCkub24oJ0xDLnNvcnRhYmxlT24nLCBmdW5jdGlvbigpe1xuXHRcdFx0aWYgKCB1bmRlZmluZWQgIT09IHNlbGYuc29ydGFibGUoIFwiaW5zdGFuY2VcIiApICkge1xuXHRcdFx0XHRzZWxmLnNvcnRhYmxlKCdvcHRpb24nLCdkaXNhYmxlZCcsIGZhbHNlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufSIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqXG4gKiA9IFJPV1MgPVxuICpcbiAqIC0gZHNsY19yb3dfYWRkICggQWRkIE5ldyApXG4gKiAtIGRzbGNfcm93X2RlbGV0ZSAoIERlbGV0ZSApXG4gKiAtIGRzbGNfcm93X2VkaXQgKCBFZGl0IClcbiAqIC0gZHNsY19yb3dfZWRpdF9zbGlkZXJfaW5pdCAoIEVkaXQgLSBJbml0aWF0ZSBTbGlkZXIgKVxuICogLSBkc2xjX3Jvd19lZGl0X2NhbmNlbCAoIEVkaXQgLSBDYW5jZWwgQ2hhbmdlcyApXG4gKiAtIGRzbGNfcm93X2VkaXRfY29uZmlybSAoIEVkaXQgLSBDb25maXJtIENoYW5nZXMgKVxuICogLSBkc2xjX3Jvd19jb3B5ICggQ29weSApXG4gKiAtIGRzbGNfcm93X2ltcG9ydCAoIEltcG9ydCApXG4gKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cblxuaW1wb3J0IHsgU2VjdGlvbiB9IGZyb20gJy4vc2VjdGlvbi5jbGFzcy5qcyc7XG5pbXBvcnQgeyBkcmFnQW5kRHJvcEluaXQgfSBmcm9tICcuL2RyYWduZHJvcC5qcyc7XG5pbXBvcnQgeyBtb2R1bGVhcmVhc0luaXRKUyB9IGZyb20gJy4vbW9kdWxlYXJlYS5qcyc7XG5pbXBvcnQgeyBNb2R1bGVBcmVhIH0gZnJvbSAnLi9tb2R1bGVhcmVhLmNsYXNzLmpzJztcbmltcG9ydCB7IENNb2RhbFdpbmRvdyB9IGZyb20gJy4vbW9kYWx3aW5kb3cuY2xhc3MuanMnO1xuaW1wb3J0IHsgaGlkZVB1Ymxpc2hCdXR0b24sIHNob3dTZWN0aW9uIH0gZnJvbSAnLi91aWdlbmVyYWwuanMnO1xuaW1wb3J0IHsgZ2V0TmV3TW9kdWxlSWQgfSBmcm9tIFwiLi9tb2R1bGUuanNcIjtcbmltcG9ydCB7IGdlbmVyYXRlU2VjdGlvbkNvZGUgfSBmcm9tIFwiLi9jb2RlZ2VuZXJhdGlvbi5qc1wiO1xuaW1wb3J0IHsgY29uZmlybUNsb3NlIH0gZnJvbSBcIi4vbW9kYWx3aW5kb3cuanNcIjtcblxuY29uc3Qgc2VjdGlvbnNFdmVudHNJbml0ID0gKCkgPT4ge1xuXHR2YXIgJCA9IGpRdWVyeTtcblxuXHR2YXIgYWN0aW9uQXZhaWwgPSBmdW5jdGlvbigpIHtcblxuXHRcdGlmICggTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuRmxhZ3MucGFuZWxPcGVuZWQgKSB7XG5cblx0XHRcdExpdmVDb21wb3Nlci5CdWlsZGVyLlVJLnNoYWtlUGFuZWxDb25maXJtQnV0dG9uKCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRqUXVlcnkoXCIuZHNsYy1tb2R1bGVzLXNlY3Rpb25cIiwgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkuZWFjaChmdW5jdGlvbigpe1xuXHRcdG5ldyBTZWN0aW9uKHRoaXMpO1xuXHR9KTtcblxuXHQvKipcblx0ICogSG9vayAtIERlbGV0ZSBSb3dcblx0ICovXG5cdExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQub24oICdjbGljaycsICcuZHNsY2EtZGVsZXRlLW1vZHVsZXMtc2VjdGlvbi1ob29rJywgZnVuY3Rpb24oZSl7XG5cblx0XHQvLyBDaGVjayBpZiBhY3Rpb24gY2FuIGJlIGZpcmVkXG5cdFx0aWYgKCAhYWN0aW9uQXZhaWwoKSApIHJldHVybiBmYWxzZTtcblxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoICEgalF1ZXJ5KHRoaXMpLmhhc0NsYXNzKCdkc2xjYS1hY3Rpb24tZGlzYWJsZWQnKSApIHtcblxuXHRcdFx0Q01vZGFsV2luZG93KHtcblx0XHRcdFx0dGl0bGU6IERTTENTdHJpbmcuc3RyX2RlbF9yb3dfdGl0bGUsXG5cdFx0XHRcdGNvbnRlbnQ6IERTTENTdHJpbmcuc3RyX2RlbF9yb3dfZGVzY3IsXG5cdFx0XHRcdGNvbmZpcm06IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0ZHNsY19yb3dfZGVsZXRlKCBqUXVlcnkoc2VsZikuY2xvc2VzdCgnLmRzbGMtbW9kdWxlcy1zZWN0aW9uJykgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSlcblxuXHRcdC8qXHRkc2xjX2pzX2NvbmZpcm0oICdkZWxldGVfbW9kdWxlc19zZWN0aW9uJywgJzxzcGFuIGNsYXNzPVwiZHNsY2EtcHJvbXB0LW1vZGFsLXRpdGxlXCI+JyArIERTTENTdHJpbmcuc3RyX2RlbF9yb3dfdGl0bGUgK1xuXHRcdFx0XHQnPC9zcGFuPjxzcGFuIGNsYXNzPVwiZHNsY2EtcHJvbXB0LW1vZGFsLWRlc2NyXCI+JyArIERTTENTdHJpbmcuc3RyX2RlbF9yb3dfZGVzY3IgKyAnPC9zcGFuPicsIGpRdWVyeSh0aGlzKSApOyovXG5cdFx0fVxuXHR9KTtcblxuXHQvKipcblx0ICogSG9vayAtIEltcG9ydCBSb3dcblx0ICovXG5cdExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQub24oICdjbGljaycsICcuZHNsY2EtaW1wb3J0LW1vZHVsZXMtc2VjdGlvbi1ob29rJywgZnVuY3Rpb24oZSkge1xuXG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgYWN0aW9uIGNhbiBiZSBmaXJlZFxuXHRcdGlmICggIWFjdGlvbkF2YWlsKCkgKSByZXR1cm4gZmFsc2U7XG5cblx0XHRpZiAoICEgalF1ZXJ5KHRoaXMpLmhhc0NsYXNzKCdkc2xjYS1hY3Rpb24tZGlzYWJsZWQnKSApIHtcblxuXHRcdFx0Q01vZGFsV2luZG93KHtcblx0XHRcdFx0dGl0bGU6IERTTENTdHJpbmcuc3RyX2ltcG9ydF9yb3dfdGl0bGUsXG5cdFx0XHRcdGNvbnRlbnQ6IERTTENTdHJpbmcuc3RyX2ltcG9ydF9yb3dfZGVzY3IgKyAnPGJyPjxicj48dGV4dGFyZWE+PC90ZXh0YXJlYT4nLFxuXHRcdFx0XHRjb25maXJtOiBmdW5jdGlvbigpe1xuXHRcdFx0XHRcdGRzbGNfcm93X2ltcG9ydCggalF1ZXJ5KCcuZHNsY2EtcHJvbXB0LW1vZGFsIHRleHRhcmVhJykudmFsKCkgKTtcblx0XHRcdFx0XHRqUXVlcnkoJy5kc2xjYS1wcm9tcHQtbW9kYWwtY29uZmlybS1ob29rIHNwYW4nKS5jc3MoeyBvcGFjaXR5IDogMCB9KTtcblx0XHRcdFx0XHRqUXVlcnkoJy5kc2xjYS1wcm9tcHQtbW9kYWwtY29uZmlybS1ob29rIC5kc2xjYS1sb2FkaW5nJykuc2hvdygpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRjb25maXJtX3RpdGxlOiBEU0xDU3RyaW5nLnN0cl9pbXBvcnRcblx0XHRcdH0pO1xuXG5cdFx0XHQvKmpRdWVyeSgnLmRzbGNhLXByb21wdC1tb2RhbC1jb25maXJtLWhvb2snKS5odG1sKCc8c3BhbiBjbGFzcz1cImRzbGMtaWNvbiBkc2xjLWljb24tb2tcIj48L3NwYW4+PHNwYW4+JyArIERTTENTdHJpbmcuc3RyX2ltcG9ydCArXG5cdFx0XHRcdCc8L3NwYW4+PGRpdiBjbGFzcz1cImRzbGNhLWxvYWRpbmcgZm9sbG93aW5nQmFsbHNHV3JhcFwiPjxkaXYgY2xhc3M9XCJmb2xsb3dpbmdCYWxsc0dfMSBmb2xsb3dpbmdCYWxsc0dcIj48L2Rpdj4nK1xuXHRcdFx0XHQnPGRpdiBjbGFzcz1cImZvbGxvd2luZ0JhbGxzR18yIGZvbGxvd2luZ0JhbGxzR1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJmb2xsb3dpbmdCYWxsc0dfMyBmb2xsb3dpbmdCYWxsc0dcIj48L2Rpdj48ZGl2IGNsYXNzPVwiZm9sbG93aW5nQmFsbHNHXzQgZm9sbG93aW5nQmFsbHNHXCI+PC9kaXY+PC9kaXY+Jyk7XG5cblx0XHRcdGRzbGNfanNfY29uZmlybSggJ2ltcG9ydF9tb2R1bGVzX3NlY3Rpb24nLCAnPHNwYW4gY2xhc3M9XCJkc2xjYS1wcm9tcHQtbW9kYWwtdGl0bGVcIj4nICsgRFNMQ1N0cmluZy5zdHJfaW1wb3J0X3Jvd190aXRsZSArXG5cdFx0XHRcdCc8L3NwYW4+PHNwYW4gY2xhc3M9XCJkc2xjYS1wcm9tcHQtbW9kYWwtZGVzY3JcIj4nICsgRFNMQ1N0cmluZy5zdHJfaW1wb3J0X3Jvd19kZXNjciArICcgPGJyPjxicj48dGV4dGFyZWE+PC90ZXh0YXJlYT48L3NwYW4+JywgalF1ZXJ5KHRoaXMpICk7Ki9cblx0XHR9XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiBIb29rIC0gRXhwb3J0IFJvd1xuXHQgKi9cblx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudC5vbiggJ2NsaWNrJywgJy5kc2xjYS1leHBvcnQtbW9kdWxlcy1zZWN0aW9uLWhvb2snLCBmdW5jdGlvbihlKSB7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgYWN0aW9uIGNhbiBiZSBmaXJlZFxuXHRcdGlmICggIWFjdGlvbkF2YWlsKCkgKSByZXR1cm4gZmFsc2U7XG5cblx0XHRpZiAoICEgalF1ZXJ5KHRoaXMpLmhhc0NsYXNzKCdkc2xjYS1hY3Rpb24tZGlzYWJsZWQnKSApIHtcblx0XHRcdGpRdWVyeSgnLmRzbGNhLXByb21wdC1tb2RhbC1jYW5jZWwtaG9vaycpLmhpZGUoKTtcblx0XHRcdGpRdWVyeSgnLmRzbGNhLXByb21wdC1tb2RhbC1jb25maXJtLWhvb2snKS5odG1sKCc8c3BhbiBjbGFzcz1cImRzbGMtaWNvbiBkc2xjLWljb24tb2tcIj48L3NwYW4+JyArIERTTENTdHJpbmcuc3RyX29rKTtcblxuXHRcdFx0Q01vZGFsV2luZG93KHtcblx0XHRcdFx0dGl0bGU6IERTTENTdHJpbmcuc3RyX2V4cG9ydF9yb3dfdGl0bGUsXG5cdFx0XHRcdGNvbnRlbnQ6IERTTENTdHJpbmcuc3RyX2V4cG9ydF9yb3dfZGVzY3IgKyAnPGJyPjxicj48dGV4dGFyZWE+JyArICdbJyArIGdlbmVyYXRlU2VjdGlvbkNvZGUoIGpRdWVyeSh0aGlzKS5jbG9zZXN0KCcuZHNsYy1tb2R1bGVzLXNlY3Rpb24nKSApICsgJ10nICsgJzwvdGV4dGFyZWE+PC9zcGFuPidcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBkc2xjX2pzX2NvbmZpcm0oICdleHBvcnRfbW9kdWxlc19zZWN0aW9uJywgJzxzcGFuIGNsYXNzPVwiZHNsY2EtcHJvbXB0LW1vZGFsLXRpdGxlXCI+JyArIERTTENTdHJpbmcuc3RyX2V4cG9ydF9yb3dfdGl0bGUgK1xuXHRcdFx0Ly8gXHQnPC9zcGFuPjxzcGFuIGNsYXNzPVwiZHNsY2EtcHJvbXB0LW1vZGFsLWRlc2NyXCI+JyArIERTTENTdHJpbmcuc3RyX2V4cG9ydF9yb3dfZGVzY3IgKyAnIDxicj48YnI+PHRleHRhcmVhPjwvdGV4dGFyZWE+PC9zcGFuPicsIGpRdWVyeSh0aGlzKSApO1xuXHRcdFx0Ly8galF1ZXJ5KCcuZHNsY2EtcHJvbXB0LW1vZGFsIHRleHRhcmVhJykudmFsKCBkc2xjX2dlbmVyYXRlX3NlY3Rpb25fY29kZSggalF1ZXJ5KHRoaXMpLmNsb3Nlc3QoJy5kc2xjLW1vZHVsZXMtc2VjdGlvbicpICkgKTtcblx0XHR9XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiBIb29rIC0gQ29weSBSb3dcblx0ICovXG5cdExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQub24oICdjbGljaycsICcuZHNsY2EtY29weS1tb2R1bGVzLXNlY3Rpb24taG9vaycsIGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgYWN0aW9uIGNhbiBiZSBmaXJlZFxuXHRcdGlmICggIWFjdGlvbkF2YWlsKCkgKSByZXR1cm4gZmFsc2U7XG5cblx0XHRpZiAoICEgalF1ZXJ5KHRoaXMpLmhhc0NsYXNzKCdkc2xjYS1hY3Rpb24tZGlzYWJsZWQnKSApIHtcblxuXHRcdFx0ZHNsY19yb3dfY29weSggalF1ZXJ5KHRoaXMpLmNsb3Nlc3QoJy5kc2xjLW1vZHVsZXMtc2VjdGlvbicpICk7XG5cdFx0fVxuXHR9KTtcblxuXHQvKipcblx0ICogSG9vayAtIEFkZCBSb3dcblx0ICovXG5cdExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQub24oICdjbGljaycsICcuZHNsY2EtYWRkLW1vZHVsZXMtc2VjdGlvbi1ob29rJywgZnVuY3Rpb24oZSl7XG5cblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHQvLyBDaGVjayBpZiBhY3Rpb24gY2FuIGJlIGZpcmVkXG5cdFx0aWYgKCAhYWN0aW9uQXZhaWwoKSApIHJldHVybiBmYWxzZTtcblxuXHRcdHZhciBidXR0b24gPSBqUXVlcnkodGhpcyk7XG5cblx0XHRpZiAoICEgalF1ZXJ5KHRoaXMpLmhhc0NsYXNzKCdkc2xjYS1hY3Rpb24tZGlzYWJsZWQnKSApIHtcblxuXHRcdFx0Ly8gQWRkIGEgbG9hZGluZyBhbmltYXRpb25cblx0XHRcdGJ1dHRvbi5maW5kKCcuZHNsY2EtaWNvbicpLnJlbW92ZUNsYXNzKCdkc2xjLWljb24tYWxpZ24tanVzdGlmeScpLmFkZENsYXNzKCdkc2xjLWljb24tc3Bpbm5lciBkc2xjLWljb24tc3BpbicpO1xuXG5cdFx0XHQvLyBBZGQgYSByb3dcblx0XHRcdGFkZFNlY3Rpb24oIGZ1bmN0aW9uKCl7XG5cdFx0XHRcdGJ1dHRvbi5maW5kKCcuZHNsY2EtaWNvbicpLnJlbW92ZUNsYXNzKCdkc2xjLWljb24tc3Bpbm5lciBkc2xjLWljb24tc3BpbicpLmFkZENsYXNzKCdkc2xjLWljb24tYWxpZ24tanVzdGlmeScpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXHQvKipcblx0ICogSG9vayAtIEVkaXQgUm93XG5cdCAqL1xuXHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50Lm9uKCAnY2xpY2snLCAnLmRzbGNhLWVkaXQtbW9kdWxlcy1zZWN0aW9uLWhvb2snLCBmdW5jdGlvbigpe1xuXG5cdFx0Ly8gQ2hlY2sgaWYgYWN0aW9uIGNhbiBiZSBmaXJlZFxuXHRcdGlmICggIWFjdGlvbkF2YWlsKCkgKSByZXR1cm4gZmFsc2U7XG5cblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHR2YXIgbW9kdWxlX2VkaXRlZCA9IGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1iZWluZy1lZGl0ZWQnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5sZW5ndGg7XG5cdFx0dmFyIHJvd19lZGl0ZWQgPSBqUXVlcnkoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tYmVpbmctZWRpdGVkJywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkubGVuZ3RoO1xuXG5cdFx0Ly8vIElmIHNldHRpbmdzIHBhbmVsIG9wZW5lZCAtIGZpbmlzaCBmdW5jXG5cdFx0aWYgKCBMaXZlQ29tcG9zZXIuQnVpbGRlci5GbGFncy51aUhpZGRlbiB8fCBtb2R1bGVfZWRpdGVkID4gMCB8fCByb3dfZWRpdGVkID4gMCApIHJldHVybiBmYWxzZTtcblxuXHRcdC8vIElmIG5vdCBkaXNhYmxlZCAoIGRpc2FibGluZyB1c2VkIGZvciB0dXRvcmlhbCApXG5cdFx0aWYgKCAhIGpRdWVyeSh0aGlzKS5oYXNDbGFzcygnZHNsY2EtYWN0aW9uLWRpc2FibGVkJykgKSB7XG5cblx0XHRcdC8vIFRyaWdnZXIgdGhlIGZ1bmN0aW9uIHRvIGVkaXRcblx0XHRcdGRzbGNfcm93X2VkaXQoIGpRdWVyeSh0aGlzKS5jbG9zZXN0KCcuZHNsYy1tb2R1bGVzLXNlY3Rpb24nKSApO1xuXHRcdH1cblxuXHRcdGpRdWVyeSgnYm9keScsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLmFkZENsYXNzKCdzZWN0aW9uLWVkaXRpbmctaW4tcHJvZ3Jlc3MnKTtcblx0fSk7XG59XG5cbi8qKlxuICogUm93IC0gQWRkIE5ld1xuICovXG5leHBvcnQgY29uc3QgYWRkU2VjdGlvbiA9ICggY2FsbGJhY2sgKSA9PiB7XG5cblx0aWYgKCB3aW5kb3cuZHNsY0RlYnVnICkgY29uc29sZS5sb2coICdkc2xjX3Jvd19hZGQnICk7XG5cblx0Y2FsbGJhY2sgPSB0eXBlb2YgY2FsbGJhY2sgIT09ICd1bmRlZmluZWQnID8gY2FsbGJhY2sgOiBmYWxzZTtcblxuXHR2YXIgZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblx0dmFyIGJyb3dzZXJDYWNoZVRtcCA9IHNlc3Npb25TdG9yYWdlO1xuXG5cdHZhciBuZXdSb3cgPSBqUXVlcnkoKTtcblx0dmFyIGNhY2hlZEFqYXhSZXF1ZXN0ID0gYnJvd3NlckNhY2hlVG1wLmdldEl0ZW0oICdjYWNoZS1kc2xjLWFqYXgtYWRkLW1vZHVsZXMtc2VjdGlvbicgKTtcblxuXHQvLyBJZiBvcHRpb24gJ2xjX3NlY3Rpb25fcGFkZGluZ192ZXJ0aWNhbCcgd2FzIHVwZGF0ZS5cblx0aWYgKCBudWxsICE9PSBjYWNoZWRBamF4UmVxdWVzdCApIHtcblx0XHR2YXIgY3VycmVudF92YWx1ZSwgY2FjaGVfY3VyZW50X3ZhbHVlO1xuXG5cdFx0Y3VycmVudF92YWx1ZSA9IERTTENNYWluT3B0aW9ucy5zZWN0aW9uX3BhZGRpbmdfdmVydGljYWw7XG5cdFx0Y2FjaGVfY3VyZW50X3ZhbHVlID0galF1ZXJ5KGNhY2hlZEFqYXhSZXF1ZXN0KS5maW5kKCdpbnB1dFtkYXRhLWlkPVwicGFkZGluZ1wiXScpLnZhbCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50X3ZhbHVlICE9PSBjYWNoZV9jdXJlbnRfdmFsdWUgKSB7XG5cdFx0XHRicm93c2VyQ2FjaGVUbXAucmVtb3ZlSXRlbSgnY2FjaGUtZHNsYy1hamF4LWFkZC1tb2R1bGVzLXNlY3Rpb24nKTtcblx0XHRcdGNhY2hlZEFqYXhSZXF1ZXN0ID0gbnVsbDtcblx0XHR9XG5cdH1cblxuXHQvLyBJZiBubyBjYWNoZSBmb3IgY3VycmVudCBBamF4IHJlcXVlc3QuXG5cdGlmICggbnVsbCA9PT0gY2FjaGVkQWpheFJlcXVlc3QgKSB7XG5cblx0XHQvLyBBSkFYIFJlcXVlc3Rcblx0XHRqUXVlcnkucG9zdChcblxuXHRcdFx0RFNMQ0FqYXguYWpheHVybCxcblx0XHRcdHtcblx0XHRcdFx0YWN0aW9uIDogJ2RzbGMtYWpheC1hZGQtbW9kdWxlcy1zZWN0aW9uJyxcblx0XHRcdFx0ZHNsYyA6ICdhY3RpdmUnXG5cdFx0XHR9LFxuXHRcdFx0ZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXG5cdFx0XHRcdC8vIG5ld1JvdyA9IGpRdWVyeShyZXNwb25zZS5vdXRwdXQpO1xuXHRcdFx0XHRicm93c2VyQ2FjaGVUbXAuc2V0SXRlbSggJ2NhY2hlLWRzbGMtYWpheC1hZGQtbW9kdWxlcy1zZWN0aW9uJywgcmVzcG9uc2Uub3V0cHV0ICk7XG5cblx0XHRcdFx0bmV3Um93ID0gZHNsY19yb3dfYWZ0ZXJfYWRkKCByZXNwb25zZS5vdXRwdXQgKTtcblxuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkgeyBjYWxsYmFjaygpOyB9XG5cdFx0XHRcdHJldHVybiBkZWZlcjtcblx0XHRcdH1cblx0XHQpO1xuXG5cdH0gZWxzZSB7XG5cdFx0Ly8gVGhlcmUgaXMgY2FjaGVkIHZlcnNpb24gb2YgQUpBWCByZXF1ZXN0LlxuXHRcdC8vIG5ld1JvdyA9IGpRdWVyeShjYWNoZWRBamF4UmVxdWVzdCk7XG5cblx0XHRuZXdSb3cgPSBkc2xjX3Jvd19hZnRlcl9hZGQoIGNhY2hlZEFqYXhSZXF1ZXN0ICk7XG5cblx0XHRpZiAoIGNhbGxiYWNrICkgeyBjYWxsYmFjaygpOyB9XG5cdFx0cmV0dXJuIGRlZmVyO1xuXHR9XG59XG5cbi8qKlxuICogRmluaXNoIG5ldyByb3cgY3JlYXRpb24gcHJvY2Vzcy5cbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IG5ld1Jvd0hUTUwgSFRNTCBjb2RlIG9mIHRoZSBuZXcgcm93LlxuICogQHJldHVybiB7alF1ZXJ5fSAgICAgICAgICAgIE5ldyBST1cgalF1ZXJ5IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZHNsY19yb3dfYWZ0ZXJfYWRkKCBuZXdSb3dIVE1MICkge1xuXG5cdHZhciBuZXdSb3cgPSBqUXVlcnkobmV3Um93SFRNTCk7XG5cblx0Ly8gQXBwZW5kIG5ldyByb3dcblx0bmV3Um93LmFwcGVuZFRvKExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQuZmluZChcIiNkc2xjLW1haW5cIikpO1xuXG5cdC8vIENhbGwgb3RoZXIgZnVuY3Rpb25zXG5cdGRyYWdBbmREcm9wSW5pdCgpO1xuXHR3aW5kb3cuZHNsY19nZW5lcmF0ZV9jb2RlKCk7XG5cdHdpbmRvdy5kc2xjX3Nob3dfcHVibGlzaF9idXR0b24oKTtcblxuXHRuZXcgU2VjdGlvbihuZXdSb3cpO1xuXHRuZXcgTW9kdWxlQXJlYSggbmV3Um93LmZpbmQoJy5kc2xjLW1vZHVsZXMtYXJlYScpLmVxKDApWzBdICk7XG5cblx0bmV3Um93LmZpbmQoJy5kc2xjLW1vZHVsZXMtYXJlYScpLmFkZENsYXNzKCdkc2xjLW1vZHVsZXMtYXJlYS1lbXB0eSBkc2xjLWxhc3QtY29sJyk7XG5cblx0cmV0dXJuIG5ld1Jvdztcbn1cblxuLyoqXG4gKiBSb3cgLSBEZWxldGVcbiAqL1xuZnVuY3Rpb24gZHNsY19yb3dfZGVsZXRlKCByb3cgKSB7XG5cblx0aWYgKCB3aW5kb3cuZHNsY0RlYnVnICkgY29uc29sZS5sb2coICdkc2xjX3Jvd19kZWxldGUnICk7XG5cblx0Ly8gSWYgdGhlIHJvdyBpcyBiZWluZyBlZGl0ZWRcblx0aWYgKCByb3cuZmluZCgnLmRzbGNhLW1vZHVsZS1iZWluZy1lZGl0ZWQnKSApIHtcblxuXHRcdC8vIEhpZGUgdGhlIGZpbHRlciBob29rc1xuXHRcdGpRdWVyeSgnLmRzbGNhLWhlYWRlciAuZHNsY2Etb3B0aW9ucy1maWx0ZXItaG9vaycpLmhpZGUoKTtcblxuXHRcdC8vIEhpZGUgdGhlIHNhdmUvY2FuY2VsIGFjdGlvbnNcblx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1hY3Rpb25zJykuaGlkZSgpO1xuXG5cdFx0Ly8gU2hvdyB0aGUgc2VjdGlvbiBob29rc1xuXHRcdGpRdWVyeSgnLmRzbGNhLWhlYWRlciAuZHNsY2EtZ28tdG8tc2VjdGlvbi1ob29rJykuc2hvdygpO1xuXG5cdFx0c2hvd1NlY3Rpb24oJy5kc2xjYS1tb2R1bGVzJyk7XG5cblx0fVxuXG5cdC8vIFJlbW92ZSByb3dcblx0cm93LnRyaWdnZXIoJ21vdXNlbGVhdmUnKS5yZW1vdmUoKTtcblxuXHQvLyBDYWxsIG90aGVyIGZ1bmN0aW9uc1xuXHR3aW5kb3cuZHNsY19nZW5lcmF0ZV9jb2RlKCk7XG5cdHdpbmRvdy5kc2xjX3Nob3dfcHVibGlzaF9idXR0b24oKTtcbn1cblxuLyoqXG4gKiBSb3cgLSBFZGl0XG4gKi9cbmZ1bmN0aW9uIGRzbGNfcm93X2VkaXQoIHJvdyApIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfcm93X2VkaXQnICk7XG5cblx0Ly8gVmFycyB3ZSB3aWxsIHVzZVxuXHR2YXIgZHNsY01vZHVsZXNTZWN0aW9uT3B0cywgZHNsY1ZhbDtcblxuXHQvLyBTZXQgZWRpdGluZyBjbGFzc1xuXHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtYmVpbmctZWRpdGVkJywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkucmVtb3ZlQ2xhc3MoJ2RzbGNhLW1vZHVsZS1iZWluZy1lZGl0ZWQnKTtcblx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWJlaW5nLWVkaXRlZCcsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLnJlbW92ZUNsYXNzKCdkc2xjYS1tb2R1bGVzLXNlY3Rpb24tYmVpbmctZWRpdGVkJykucmVtb3ZlQ2xhc3MoJ2RzbGNhLW1vZHVsZXMtc2VjdGlvbi1jaGFuZ2UtbWFkZScpO1xuXHRyb3cuYWRkQ2xhc3MoJ2RzbGNhLW1vZHVsZXMtc2VjdGlvbi1iZWluZy1lZGl0ZWQnKTtcblxuXHQvLyBIaWRlIHRoZSBzZWN0aW9uIGhvb2tzXG5cdGpRdWVyeSgnLmRzbGNhLWhlYWRlciAuZHNsY2EtZ28tdG8tc2VjdGlvbi1ob29rJykuaGlkZSgpO1xuXG5cdC8vIFNob3cgdGhlIHN0eWxpbmcvcmVzcG9uc2l2ZSB0YWJzXG5cdGpRdWVyeSgnLmRzbGNhLXJvdy1vcHRpb25zLWZpbHRlci1ob29rW2RhdGEtc2VjdGlvbj1cInN0eWxpbmdcIl0sIC5kc2xjYS1yb3ctb3B0aW9ucy1maWx0ZXItaG9va1tkYXRhLXNlY3Rpb249XCJyZXNwb25zaXZlXCJdJykuc2hvdygpO1xuXHRqUXVlcnkoJy5kc2xjYS1yb3ctb3B0aW9ucy1maWx0ZXItaG9va1tkYXRhLXNlY3Rpb249XCJzdHlsaW5nXCJdJykudHJpZ2dlcignY2xpY2snKTtcblxuXHQvLyBIaWRlIHRoZSBmaWx0ZXIgaG9va3Ncblx0alF1ZXJ5KCcuZHNsY2EtaGVhZGVyIC5kc2xjYS1vcHRpb25zLWZpbHRlci1ob29rJykuaGlkZSgpO1xuXG5cdC8vIEhpZGUgdGhlIHNhdmUvY2FuY2VsIGFjdGlvbnNcblx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtYWN0aW9ucycpLmhpZGUoKTtcblxuXHQvLyBTaG93IHRoZSBzYXZlL2NhbmNlbCBhY3Rpb25zXG5cdGpRdWVyeSgnLmRzbGNhLXJvdy1lZGl0LWFjdGlvbnMnKS5zaG93KCk7XG5cblx0Ly8gU2V0IGN1cnJlbnQgdmFsdWVzXG5cdGpRdWVyeSgnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1lZGl0LWZpZWxkJykuZWFjaChmdW5jdGlvbigpe1xuXG5cblx0XHQvKipcblx0XHQgKiBUZW1wb3JhcnkgbWlncmF0aW9uIGZyb20gJ3dyYXBwZWQnIHZhbHVlIHRvICd3cmFwcGVyJyBpbiBST1cgdHlwZSBzZWxlY3RvclxuXHRcdCAqIFRPRE86IGRlbGV0ZSB0aGlzIGJsb2NrIGluIGEgZmV3IHZlcnNpb25zIGFzIHByb2JsZW0gZG8gbm90IGV4aXN0cyBvbiBuZXcgaW5zdGFsbHNcblx0XHQgKlxuXHRcdCAqIEBzaW5jZSB2ZXIgMS4xXG5cdFx0ICovXG5cdFx0aWYgKCAndHlwZScgPT09IGpRdWVyeSh0aGlzKS5kYXRhKCdpZCcpICkge1xuXG5cdFx0XHRpZiAoICcnID09PSBqUXVlcnkoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tYmVpbmctZWRpdGVkIC5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tc2V0dGluZ3MgaW5wdXRbZGF0YS1pZD1cInR5cGVcIl0nLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS52YWwoKSB8fFxuXHRcdFx0XHQgICd3cmFwcGVkJyA9PT0galF1ZXJ5KCcuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWJlaW5nLWVkaXRlZCAuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLXNldHRpbmdzIGlucHV0W2RhdGEtaWQ9XCJ0eXBlXCJdJywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkudmFsKCkgKSB7XG5cdFx0XHRcdGpRdWVyeSgnc2VsZWN0W2RhdGEtaWQ9XCJ0eXBlXCJdJykudmFsKCd3cmFwcGVyJykuY2hhbmdlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkodGhpcykuZGF0YSgnaWQnKSA9PSAnYm9yZGVyLXRvcCcgKSB7XG5cblx0XHRcdGlmICggalF1ZXJ5KCcuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWJlaW5nLWVkaXRlZCAuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLXNldHRpbmdzIGlucHV0W2RhdGEtaWQ9XCJib3JkZXJcIl0nLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS52YWwoKS5pbmRleE9mKCd0b3AnKSA+PSAwICkge1xuXHRcdFx0XHRqUXVlcnkodGhpcykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuXHRcdFx0XHRqUXVlcnkodGhpcykuc2libGluZ3MoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1vcHRpb24tY2hlY2tib3gtaG9vaycpLmZpbmQoJy5kc2xjYS1pY29uJykucmVtb3ZlQ2xhc3MoJ2RzbGMtaWNvbi1jaGVjay1lbXB0eScpLmFkZENsYXNzKCdkc2xjLWljb24tY2hlY2snKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSh0aGlzKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuXHRcdFx0XHRqUXVlcnkodGhpcykuc2libGluZ3MoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1vcHRpb24tY2hlY2tib3gtaG9vaycpLmZpbmQoJy5kc2xjYS1pY29uJykucmVtb3ZlQ2xhc3MoJ2RzbGMtaWNvbi1jaGVjaycpLmFkZENsYXNzKCdkc2xjLWljb24tY2hlY2stZW1wdHknKTtcblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeSh0aGlzKS5kYXRhKCdpZCcpID09ICdib3JkZXItcmlnaHQnICkge1xuXG5cdFx0XHRpZiAoIGpRdWVyeSgnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1iZWluZy1lZGl0ZWQgLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1zZXR0aW5ncyBpbnB1dFtkYXRhLWlkPVwiYm9yZGVyXCJdJywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkudmFsKCkuaW5kZXhPZigncmlnaHQnKSA+PSAwICkge1xuXHRcdFx0XHRqUXVlcnkodGhpcykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuXHRcdFx0XHRqUXVlcnkodGhpcykuc2libGluZ3MoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1vcHRpb24tY2hlY2tib3gtaG9vaycpLmZpbmQoJy5kc2xjYS1pY29uJykucmVtb3ZlQ2xhc3MoJ2RzbGMtaWNvbi1jaGVjay1lbXB0eScpLmFkZENsYXNzKCdkc2xjLWljb24tY2hlY2snKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSh0aGlzKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuXHRcdFx0XHRqUXVlcnkodGhpcykuc2libGluZ3MoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1vcHRpb24tY2hlY2tib3gtaG9vaycpLmZpbmQoJy5kc2xjYS1pY29uJykucmVtb3ZlQ2xhc3MoJ2RzbGMtaWNvbi1jaGVjaycpLmFkZENsYXNzKCdkc2xjLWljb24tY2hlY2stZW1wdHknKTtcblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeSh0aGlzKS5kYXRhKCdpZCcpID09ICdib3JkZXItYm90dG9tJyApIHtcblxuXHRcdFx0aWYgKCBqUXVlcnkoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tYmVpbmctZWRpdGVkIC5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tc2V0dGluZ3MgaW5wdXRbZGF0YS1pZD1cImJvcmRlclwiXScsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLnZhbCgpLmluZGV4T2YoJ2JvdHRvbScpID49IDAgKSB7XG5cdFx0XHRcdGpRdWVyeSh0aGlzKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XG5cdFx0XHRcdGpRdWVyeSh0aGlzKS5zaWJsaW5ncygnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1lZGl0LW9wdGlvbi1jaGVja2JveC1ob29rJykuZmluZCgnLmRzbGNhLWljb24nKS5yZW1vdmVDbGFzcygnZHNsYy1pY29uLWNoZWNrLWVtcHR5JykuYWRkQ2xhc3MoJ2RzbGMtaWNvbi1jaGVjaycpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KHRoaXMpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG5cdFx0XHRcdGpRdWVyeSh0aGlzKS5zaWJsaW5ncygnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1lZGl0LW9wdGlvbi1jaGVja2JveC1ob29rJykuZmluZCgnLmRzbGNhLWljb24nKS5yZW1vdmVDbGFzcygnZHNsYy1pY29uLWNoZWNrJykuYWRkQ2xhc3MoJ2RzbGMtaWNvbi1jaGVjay1lbXB0eScpO1xuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggalF1ZXJ5KHRoaXMpLmRhdGEoJ2lkJykgPT0gJ2JvcmRlci1sZWZ0JyApIHtcblxuXHRcdFx0aWYgKCBqUXVlcnkoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tYmVpbmctZWRpdGVkIC5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tc2V0dGluZ3MgaW5wdXRbZGF0YS1pZD1cImJvcmRlclwiXScsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLnZhbCgpLmluZGV4T2YoJ2xlZnQnKSA+PSAwICkge1xuXHRcdFx0XHRqUXVlcnkodGhpcykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuXHRcdFx0XHRqUXVlcnkodGhpcykuc2libGluZ3MoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1vcHRpb24tY2hlY2tib3gtaG9vaycpLmZpbmQoJy5kc2xjYS1pY29uJykucmVtb3ZlQ2xhc3MoJ2RzbGMtaWNvbi1jaGVjay1lbXB0eScpLmFkZENsYXNzKCdkc2xjLWljb24tY2hlY2snKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSh0aGlzKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuXHRcdFx0XHRqUXVlcnkodGhpcykuc2libGluZ3MoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1vcHRpb24tY2hlY2tib3gtaG9vaycpLmZpbmQoJy5kc2xjYS1pY29uJykucmVtb3ZlQ2xhc3MoJ2RzbGMtaWNvbi1jaGVjaycpLmFkZENsYXNzKCdkc2xjLWljb24tY2hlY2stZW1wdHknKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKCBqUXVlcnkodGhpcykuaGFzQ2xhc3MoJ2RzbGNhLW1vZHVsZXMtc2VjdGlvbi1lZGl0LWZpZWxkLWNoZWNrYm94JykgKSB7XG5cblx0XHRcdGlmICggalF1ZXJ5KCcuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWJlaW5nLWVkaXRlZCAuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLXNldHRpbmdzIGlucHV0W2RhdGEtaWQ9XCInICsgalF1ZXJ5KHRoaXMpLmRhdGEoJ2lkJykgKyAnXCJdJywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkudmFsKCkuaW5kZXhPZiggalF1ZXJ5KHRoaXMpLmRhdGEoJ3ZhbCcpICkgPj0gMCApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaWJsaW5ncygnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1lZGl0LW9wdGlvbi1jaGVja2JveC1ob29rJykuZmluZCgnLmRzbGNhLWljb24nKS5yZW1vdmVDbGFzcygnZHNsYy1pY29uLWNoZWNrLWVtcHR5JykuYWRkQ2xhc3MoJ2RzbGMtaWNvbi1jaGVjaycpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2libGluZ3MoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1vcHRpb24tY2hlY2tib3gtaG9vaycpLmZpbmQoJy5kc2xjYS1pY29uJykucmVtb3ZlQ2xhc3MoJ2RzbGMtaWNvbi1jaGVjaycpLmFkZENsYXNzKCdkc2xjLWljb24tY2hlY2stZW1wdHknKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRqUXVlcnkodGhpcykudmFsKCBqUXVlcnkoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tYmVpbmctZWRpdGVkIC5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tc2V0dGluZ3MgaW5wdXRbZGF0YS1pZD1cIicgKyBqUXVlcnkodGhpcykuZGF0YSgnaWQnKSArICdcIl0nLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50ICkudmFsKCkudHJpbSgpLnJlcGxhY2UoJyUoJScsICdbJykucmVwbGFjZSgnJSklJywgJ10nKSApO1xuXG5cdFx0XHRpZiAoIGpRdWVyeSggdGhpcyApLmhhc0NsYXNzKCAnZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWVkaXQtZmllbGQtY29sb3JwaWNrZXInICkgKSB7XG5cblx0XHRcdFx0dmFyIF90aGlzID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmNsb3Nlc3QoICcuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWVkaXQtb3B0aW9uJyApXG5cdFx0XHRcdFx0XHQuZmluZCggJy5zcC1wcmV2aWV3LWlubmVyJyApXG5cdFx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoJ3NwLWNsZWFyLWRpc3BsYXknKVxuXHRcdFx0XHRcdFx0LmNzcyh7ICdiYWNrZ3JvdW5kLWNvbG9yJyA6IF90aGlzLnZhbCgpIH0pO1xuXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmNzcyh7ICdiYWNrZ3JvdW5kLWNvbG9yJyA6IF90aGlzLnZhbCgpIH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWVkaXQtZmllbGQtdXBsb2FkJykuZWFjaChmdW5jdGlvbigpe1xuXG5cdFx0dmFyIGRzbGNQYXJlbnQgPSBqUXVlcnkodGhpcykuY2xvc2VzdCgnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1lZGl0LW9wdGlvbicpO1xuXG5cdFx0aWYgKCBqUXVlcnkodGhpcykudmFsKCkgJiYgalF1ZXJ5KHRoaXMpLnZhbCgpICE9PSAnZGlzYWJsZWQnICkge1xuXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1maWVsZC1pbWFnZS1hZGQtaG9vaycsIGRzbGNQYXJlbnQgKS5oaWRlKCk7XG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1maWVsZC1pbWFnZS1yZW1vdmUtaG9vaycsIGRzbGNQYXJlbnQgKS5zaG93KCk7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWVkaXQtZmllbGQtaW1hZ2UtcmVtb3ZlLWhvb2snLCBkc2xjUGFyZW50ICkuaGlkZSgpO1xuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWVkaXQtZmllbGQtaW1hZ2UtYWRkLWhvb2snLCBkc2xjUGFyZW50ICkuc2hvdygpO1xuXHRcdH1cblx0fSk7XG5cblx0Ly8gSW5pdGlhdGUgbnVtZXJpYyBvcHRpb24gc2xpZGVyc1xuXHQvLyBkc2xjX3Jvd19lZGl0X3NsaWRlcl9pbml0KCk7XG5cblx0Ly8gU2hvdyBvcHRpb25zIG1hbmFnZW1lbnRcblx0c2hvd1NlY3Rpb24oJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdCcpO1xuXG5cdExpdmVDb21wb3Nlci5CdWlsZGVyLkZsYWdzLnBhbmVsT3BlbmVkID0gdHJ1ZTtcblxuXHQvLyBIaWRlIHRoZSBwdWJsaXNoIGJ1dHRvblxuXHRoaWRlUHVibGlzaEJ1dHRvbigpO1xufVxuXG4vKipcbiAqIFJvdyAtIEVkaXQgLSBDYW5jZWwgQ2hhbmdlc1xuICovXG5mdW5jdGlvbiBkc2xjX3Jvd19lZGl0X2NhbmNlbCggY2FsbGJhY2sgKSB7XG5cblx0aWYgKCB3aW5kb3cuZHNsY0RlYnVnICkgY29uc29sZS5sb2coICdkc2xjX3Jvd19jYW5jZWxfY2hhbmdlcycgKTtcblxuXHRjYWxsYmFjayA9IHR5cGVvZiBjYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcgPyBjYWxsYmFjayA6IGZhbHNlO1xuXG5cdC8vIFRpbWUgdG8gZ2VuZXJhdGUgY29kZSBvcHRpbWl6ZWQge0hBQ0t9XG5cdExpdmVDb21wb3Nlci5CdWlsZGVyLkZsYWdzLmdlbmVyYXRlX2NvZGVfYWZ0ZXJfcm93X2NoYW5nZWQgPSBmYWxzZTtcblxuXHQvLyBSZWNvdmVyIG9yaWdpbmFsIGRhdGEgZnJvbSBkYXRhLWRlZiBhdHRyaWJ1dGUgZm9yIGVhY2ggY29udHJvbFxuXHRqUXVlcnkoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tYmVpbmctZWRpdGVkIC5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tc2V0dGluZ3MgaW5wdXQnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5lYWNoKGZ1bmN0aW9uKCl7XG5cblx0XHRqUXVlcnkodGhpcykudmFsKCBqUXVlcnkodGhpcykuZGF0YSgnZGVmJykgKTtcblxuXHRcdC8vIEZpcmUgY2hhbmdlIGZvciBldmVyeSBST1cgY29udHJvbCwgc28gaXQgcmVkcmF3IGxpbmtlZCBDU1MgcHJvcGVydGllc1xuXHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1lZGl0LWZpZWxkW2RhdGEtaWQ9XCInICsgalF1ZXJ5KHRoaXMpLmRhdGEoJ2lkJykgKyAnXCJdJykudmFsKCBqUXVlcnkodGhpcykuZGF0YSgnZGVmJykgKS50cmlnZ2VyKCdjaGFuZ2UnKTtcblx0fSk7XG5cblx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuRmxhZ3MuZ2VuZXJhdGVfY29kZV9hZnRlcl9yb3dfY2hhbmdlZCA9IHRydWU7XG5cdHdpbmRvdy5kc2xjX2dlbmVyYXRlX2NvZGUoKTtcblx0d2luZG93LmRzbGNfc2hvd19wdWJsaXNoX2J1dHRvbigpO1xuXG5cdHNob3dTZWN0aW9uKCcuZHNsY2EtbW9kdWxlcycpO1xuXG5cdC8vIEhpZGUgdGhlIHNhdmUvY2FuY2VsIGFjdGlvbnNcblx0alF1ZXJ5KCcuZHNsY2Etcm93LWVkaXQtYWN0aW9ucycpLmhpZGUoKTtcblxuXHQvLyBIaWRlIHRoZSBzdHlsaW5nL3Jlc3BvbnNpdmUgdGFic1xuXHRqUXVlcnkoJy5kc2xjYS1yb3ctb3B0aW9ucy1maWx0ZXItaG9vaycpLmhpZGUoKTtcblxuXHQvLyBTaG93IHRoZSBzZWN0aW9uIGhvb2tzXG5cdGpRdWVyeSgnLmRzbGNhLWhlYWRlciAuZHNsY2EtZ28tdG8tc2VjdGlvbi1ob29rJykuc2hvdygpO1xuXG5cdC8vIFNob3cgdGhlIHB1Ymxpc2ggYnV0dG9uXG5cdGRzbGNfc2hvd19wdWJsaXNoX2J1dHRvbjtcblxuXHQvLyBSZW1vdmUgYmVpbmcgZWRpdGVkIGNsYXNzXG5cdGpRdWVyeSgnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1iZWluZy1lZGl0ZWQnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5yZW1vdmVDbGFzcygnZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWJlaW5nLWVkaXRlZCBkc2xjYS1tb2R1bGVzLXNlY3Rpb24tY2hhbmdlLW1hZGUnKTtcblxuXHRpZiAoIGNhbGxiYWNrICkgeyBjYWxsYmFjaygpOyB9XG5cblx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuRmxhZ3MucGFuZWxPcGVuZWQgPSBmYWxzZTtcblx0alF1ZXJ5KFwiYm9keVwiLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5yZW1vdmVDbGFzcygnc2VjdGlvbi1lZGl0aW5nLWluLXByb2dyZXNzJyk7XG5cbn1cblxuLyoqXG4gKiBSb3cgLSBFZGl0IC0gQ29uZmlybSBDaGFuZ2VzXG4gKi9cbmZ1bmN0aW9uIGRzbGNfcm93X2VkaXRfY29uZmlybSggY2FsbGJhY2sgKSB7XG5cblx0aWYgKCB3aW5kb3cuZHNsY0RlYnVnICkgY29uc29sZS5sb2coICdkc2xjX2NvbmZpcm1fcm93X2NoYW5nZXMnICk7XG5cblx0Y2FsbGJhY2sgPSB0eXBlb2YgY2FsbGJhY2sgIT09ICd1bmRlZmluZWQnID8gY2FsbGJhY2sgOiBmYWxzZTtcblxuXHRqUXVlcnkoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tYmVpbmctZWRpdGVkIC5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tc2V0dGluZ3MgaW5wdXQnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5lYWNoKGZ1bmN0aW9uKCl7XG5cblx0XHRqUXVlcnkodGhpcykuZGF0YSggJ2RlZicsIGpRdWVyeSh0aGlzKS52YWwoKSApO1xuXHR9KTtcblxuXHRzaG93U2VjdGlvbignLmRzbGNhLW1vZHVsZXMnKTtcblxuXHQvLyBIaWRlIHRoZSBzYXZlL2NhbmNlbCBhY3Rpb25zXG5cdGpRdWVyeSgnLmRzbGNhLXJvdy1lZGl0LWFjdGlvbnMnKS5oaWRlKCk7XG5cblx0Ly8gSGlkZSB0aGUgc3R5bGluZy9yZXNwb25zaXZlIHRhYnNcblx0alF1ZXJ5KCcuZHNsY2Etcm93LW9wdGlvbnMtZmlsdGVyLWhvb2snKS5oaWRlKCk7XG5cblx0Ly8gU2hvdyB0aGUgc2VjdGlvbiBob29rc1xuXHRqUXVlcnkoJy5kc2xjYS1oZWFkZXIgLmRzbGNhLWdvLXRvLXNlY3Rpb24taG9vaycpLnNob3coKTtcblxuXHQvLyBSZW1vdmUgYmVpbmcgZWRpdGVkIGNsYXNzXG5cdGpRdWVyeSgnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1iZWluZy1lZGl0ZWQnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5yZW1vdmVDbGFzcygnZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWJlaW5nLWVkaXRlZCBkc2xjYS1tb2R1bGVzLXNlY3Rpb24tY2hhbmdlLW1hZGUnKTtcblxuXHR3aW5kb3cuZHNsY19nZW5lcmF0ZV9jb2RlKCk7XG5cblx0Ly8gU2hvdyB0aGUgcHVibGlzaCBidXR0b25cblx0d2luZG93LmRzbGNfc2hvd19wdWJsaXNoX2J1dHRvbigpO1xuXG5cdGlmICggY2FsbGJhY2sgKSB7IGNhbGxiYWNrKCk7IH1cblxuXHRMaXZlQ29tcG9zZXIuQnVpbGRlci5GbGFncy5wYW5lbE9wZW5lZCA9IGZhbHNlO1xuXHRqUXVlcnkoXCJib2R5XCIsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLnJlbW92ZUNsYXNzKCdzZWN0aW9uLWVkaXRpbmctaW4tcHJvZ3Jlc3MnKTtcbn1cblxuLyoqXG4gKiBSb3cgLSBDb3B5XG4gKi9cbmZ1bmN0aW9uIGRzbGNfcm93X2NvcHkoIHJvdyApIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfcm93X2NvcHknICk7XG5cblx0Ly8gVmFycyB0aGF0IHdpbGwgYmUgdXNlZFxuXHR2YXIgZHNsY19tb2R1bGVfaWQsXG5cdGRzbGNNb2R1bGVzU2VjdGlvbkNsb25lZCxcblx0ZHNsY01vZHVsZTtcblxuXHQvLyBDbG9uZSB0aGUgcm93XG5cdGRzbGNNb2R1bGVzU2VjdGlvbkNsb25lZCA9IHJvdy5jbG9uZSgpLmFwcGVuZFRvKCBqUXVlcnkoJyNkc2xjLW1haW4nLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50ICkgKTtcblxuXHQvLyBNYXJrIG5ldyBST1cgYXMgTk9OIGluaXRpYWxpemVkXG5cdGRzbGNNb2R1bGVzU2VjdGlvbkNsb25lZFswXS5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtanNpbml0Jyk7XG5cblx0Ly8gR28gdGhyb3VnaCBlYWNoIGFyZWEgb2YgdGhlIG5ldyByb3cgYW5kIGFwcGx5IGNvcnJlY3QgZGF0YS1zaXplXG5cdC8vIE1hcmsgZWFjaCBtb2R1bGUgYXJlYSBpbnNpZGUgYXMgTk9OIGluaXRpYWxpemVkICgyKVxuXHRkc2xjTW9kdWxlc1NlY3Rpb25DbG9uZWQuZmluZCgnLmRzbGMtbW9kdWxlcy1hcmVhJykuZWFjaChmdW5jdGlvbigpe1xuXHRcdHZhciBkc2xjSW5kZXggPSBqUXVlcnkodGhpcykuaW5kZXgoKTtcblx0XHRqUXVlcnkodGhpcykuZGF0YSgnc2l6ZScsIHJvdy5maW5kKCcuZHNsYy1tb2R1bGVzLWFyZWE6ZXEoICcgKyBkc2xjSW5kZXggKyAnICknKS5kYXRhKCdzaXplJykgKTtcblxuXHRcdHRoaXMucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWpzaW5pdCcpOyAvLyAoMilcblx0fSk7XG5cblx0bmV3IFNlY3Rpb24oZHNsY01vZHVsZXNTZWN0aW9uQ2xvbmVkKTtcblxuXHQvKipcblx0ICogUmUtcmVuZGVyIG1vZHVsZXMgaW5zaWRlIG9mIHRoZSBuZXcgUk9XXG5cdCAqL1xuXG5cdC8vIFJlbW92ZSBhbmltYXRpb25zIGFuZCB0ZW1wb3JhcnkgaGlkZSBtb2R1bGVzIGluc2lkZVxuXHRkc2xjTW9kdWxlc1NlY3Rpb25DbG9uZWQuZmluZCgnLmRzbGMtbW9kdWxlLWZyb250JykuY3NzKHtcblx0XHQnLXdlYmtpdC1hbmltYXRpb24tbmFtZScgOiAnbm9uZScsXG5cdFx0Jy1tb3otYW5pbWF0aW9uLW5hbWUnIDogJ25vbmUnLFxuXHRcdCdhbmltYXRpb24tbmFtZScgOiAnbm9uZScsXG5cdFx0J2FuaW1hdGlvbi1kdXJhdGlvbicgOiAnMCcsXG5cdFx0Jy13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uJyA6ICcwJyxcblx0XHRvcGFjaXR5IDogMFxuXG5cdC8vIEdvIHRocm91Z2ggZWFjaCBtb2R1bGUgaW5zaWRlIHRoZSBuZXcgUk9XXG5cdH0pLmVhY2goZnVuY3Rpb24oKXtcblxuXHRcdC8vIEN1cnJlbnQgbW9kdWxlXG5cdFx0dmFyIGRzbGNfbW9kdWxlID0galF1ZXJ5KHRoaXMpO1xuXG5cdFx0Ly9HZW5lcmF0ZSBuZXcgSUQgZm9yIHRoZSBuZXcgbW9kdWxlIGFuZCBjaGFuZ2UgaXQgaW4gSFRNTC9DU1Mgb2YgdGhlIG1vZHVsZS5cblx0XHRnZXROZXdNb2R1bGVJZCggZHNsY19tb2R1bGVbMF0gKTtcblxuXHRcdC8vIENoZWNrIGluaXQgZm9yIHJvd3MgYW5kIG1vZHVsZSBhcmVhc1xuXHRcdHNlY3Rpb25zSW5pdEpTKCk7XG5cdFx0bW9kdWxlYXJlYXNJbml0SlMoKTtcblxuXHRcdC8vIFRPRE86IHRoZSBuZXh0IGZ1bmN0aW9uIGNvbnRhaW5zIEFKQVggY2FsbC4gSXQgbmVlZHMgb3B0aW1pemF0aW9uLlxuXHRcdHdpbmRvdy5kc2xjX2dlbmVyYXRlX2NvZGUoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFJlLWluaXQgZHJhZyBhbmQgZHJvcCBmcm9tIG1vZHVsZXMgbGlzdCBpbnRvIG1vZHVsZXMgYXJlYXMuXG5cdFx0ICogTmVlZCB0aGlzIGZ1bmN0aW9uLCBzbyB3ZSBjYW4gZHJvcCBuZXcgbW9kdWxlcyBvbiB0aGUgY2xvbmVkIGFyZWFzLlxuXHRcdCAqL1xuXHRcdGRyYWdBbmREcm9wSW5pdCgpO1xuXG5cdFx0Ly8gUmVtb3ZlIFwiZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZFwiIGNsYXNzIGZvcm0gYW55IGVsZW1lbnRcblx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtYmVpbmctZWRpdGVkJywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkucmVtb3ZlQ2xhc3MoJ2RzbGNhLW1vZHVsZS1iZWluZy1lZGl0ZWQnKTtcblxuXHRcdC8vIFNob3cgYmFjayBuZXcgY3JlYXRlZCBtb2R1bGVcblx0XHRkc2xjX21vZHVsZS5hbmltYXRlKHtcblx0XHRcdG9wYWNpdHkgOiAxXG5cdFx0fSwgMzAwKTtcblxuXHRcdHdpbmRvdy5kc2xjX3Nob3dfcHVibGlzaF9idXR0b24oKTtcblx0fSk7XG5cblx0Ly8gR2VuZXJhdGUgbmV3IElEIGZvciB0aGUgbmV3IHNlY3Rpb24uXG5cdGRzbGNfc2VjdGlvbl9uZXdfaWQoIGRzbGNNb2R1bGVzU2VjdGlvbkNsb25lZFswXSApO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIG5ldyBJRCBmb3IgdGhlIHNlY3Rpb24gcHJvdmlkZWRcbiAqXG4gKlxuICogQHBhcmFtIERPTSBzZWN0aW9uIHRoYXQgbmVlZHMgSUQgdXBkYXRlZCAobmV3IElEKS5cbiAqIEByZXR1cm4gdm9pZFxuICovXG5mdW5jdGlvbiBkc2xjX3NlY3Rpb25fbmV3X2lkKCBzZWN0aW9uICkge1xuXG5cdGlmICggd2luZG93LmRzbGNEZWJ1ZyApIGNvbnNvbGUubG9nKCAnZHNsY19zZWN0aW9uX25ld19pZCcgKTtcblxuXHR2YXIgZHNsY19zZWN0aW9uX2lkID0gTGl2ZUNvbXBvc2VyLlV0aWxzLmdldF91bmlxdWVfaWQoKTsgLy8gR2VuZXJhdGUgbmV3IHNlY3Rpb24gSUQuXG5cblx0Ly8gVXBkYXRlIHNlY3Rpb24gSUQgaW4gZGF0YSBhdHRyaWJ1dGVcblx0c2VjdGlvbi5zZXRBdHRyaWJ1dGUoICdkYXRhLXNlY3Rpb24taWQnLCBkc2xjX3NlY3Rpb25faWQgKTtcblxuXHQvLyBVcGRhdGUgc2VjdGlvbiBJRCBpbiByYXcgYmFzZTY0IGNvZGUgKGRzbGNfY29kZSkgb2YgdGhlIHNlY3Rpb25cblx0TGl2ZUNvbXBvc2VyLlV0aWxzLnVwZGF0ZV9zZWN0aW9uX3Byb3BlcnR5X3Jhdyggc2VjdGlvbiwgJ3NlY3Rpb25faW5zdGFuY2VfaWQnLCBkc2xjX3NlY3Rpb25faWQgKTtcbn1cblxuXG4vKipcbiAqIFJvdyAtIEltcG9ydFxuICovXG5mdW5jdGlvbiBkc2xjX3Jvd19pbXBvcnQoIHJvd0NvZGUgKSB7XG5cblx0aWYgKCB3aW5kb3cuZHNsY0RlYnVnICkgY29uc29sZS5sb2coICdkc2xjX3Jvd19pbXBvcnQnICk7XG5cblx0Ly8gQUpBWCBDYWxsXG5cdGpRdWVyeS5wb3N0KFxuXG5cdFx0RFNMQ0FqYXguYWpheHVybCxcblx0XHR7XG5cdFx0XHRhY3Rpb24gOiAnZHNsYy1hamF4LWltcG9ydC1tb2R1bGVzLXNlY3Rpb24nLFxuXHRcdFx0ZHNsYyA6ICdhY3RpdmUnLFxuXHRcdFx0ZHNsY19tb2R1bGVzX3NlY3Rpb25fY29kZSA6IHJvd0NvZGVcblx0XHR9LFxuXHRcdGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblxuXHRcdFx0Ly8gQ2xvc2UgdGhlIGltcG9ydCBwb3B1cC9tb2RhbFxuXHRcdFx0Y29uZmlybUNsb3NlKCk7XG5cblx0XHRcdC8vIEFkZCB0aGUgbmV3IHNlY3Rpb25cblx0XHRcdGpRdWVyeSgnI2RzbGMtbWFpbicsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLmFwcGVuZCggcmVzcG9uc2Uub3V0cHV0ICk7XG5cblx0XHRcdC8vIENhbGwgb3RoZXIgZnVuY3Rpb25zXG5cdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5kc2xjX2JnX3ZpZGVvKCk7XG5cdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5kc2xjX2Nhcm91c2VsKCk7XG5cdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5kc2xjX21hc29ucnkoKTtcblxuXHRcdFx0Ly8gQ2hlY2sgaW5pdCBmb3Igcm93cyBhbmQgbW9kdWxlIGFyZWFzXG5cdFx0XHRzZWN0aW9uc0luaXRKUygpO1xuXHRcdFx0bW9kdWxlYXJlYXNJbml0SlMoKTtcblxuXHRcdFx0ZHJhZ0FuZERyb3BJbml0KCk7XG5cdFx0XHR3aW5kb3cuZHNsY19nZW5lcmF0ZV9jb2RlKCk7XG5cblx0XHRcdHdpbmRvdy5kc2xjX3Nob3dfcHVibGlzaF9idXR0b24oKTtcblx0XHR9XG5cdCk7XG59XG5cbi8qKlxuICogRGVwcmVjYXRlZCBGdW5jdGlvbnMgYW5kIEZhbGxiYWNrc1xuICovXG5cbmZ1bmN0aW9uIGRzbGNfYWRkX21vZHVsZXNfc2VjdGlvbigpIHsgYWRkU2VjdGlvbigpOyB9XG5mdW5jdGlvbiBkc2xjX2RlbGV0ZV9tb2R1bGVzX3NlY3Rpb24oIHJvdyAgKSB7IGRzbGNfcm93X2RlbGV0ZSggcm93ICk7IH1cbmZ1bmN0aW9uIGRzbGNfZWRpdF9tb2R1bGVzX3NlY3Rpb24oIHJvdyApIHsgZHNsY19yb3dfZWRpdCggcm93ICk7IH1cbmZ1bmN0aW9uIGRzbGNfY29weV9tb2R1bGVzX3NlY3Rpb24oIHJvdyApIHsgZHNsY19yb3dfY29weSggcm93ICk7IH1cbmZ1bmN0aW9uIGRzbGNfaW1wb3J0X21vZHVsZXNfc2VjdGlvbiggcm93Q29kZSApIHsgZHNsY19yb3dfaW1wb3J0KCByb3dDb2RlICk7IH1cblxuLyoqXG4gKiBDaGVjayBST1dzIGluaXRpYWxpemF0aW9uXG4gKlxuICogQHJldHVybiB2b2lkXG4gKi9cbmV4cG9ydCBjb25zdCBzZWN0aW9uc0luaXRKUyA9ICgpID0+IHtcblxuXHQvLyBTZWxlY3QgYWxsIHRoZSBST1dzIGZvcm0gdGhlIG1haW4gc2VjdGlvbiBvZiB0aGUgcGFnZVxuXHRqUXVlcnkoICcjZHNsYy1tYWluIC5kc2xjLW1vZHVsZXMtc2VjdGlvbicsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQgKS5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdC8vIENoZWNrIGlmIGFsbCB0aGUgcm93cyBoYXZlIGRhdGEgYXR0cmlidXRlICdqc2luaXQnIHNldCB0byAnaW5pdGlhbGl6ZWQnP1xuXHRcdGlmICggalF1ZXJ5KCB0aGlzICkuZGF0YSgnanNpbml0JykgIT09ICdpbml0aWFsaXplZCcgKSB7XG5cblx0XHRcdC8vIEluaXRpYWxpemUgYWxsIHRoZSByb3dzIHdpdGhvdXQgJ2pzaW5pdCcgYXR0cmlidXRlIVxuXHRcdFx0bmV3IFNlY3Rpb24oIHRoaXMgKTtcblx0XHR9XG5cdH0gKTtcblxufVxuXG5leHBvcnQgY29uc3Qgc2VjdGlvbnNJbml0ID0gKCkgPT4ge1xuXHRzZWN0aW9uc0luaXRKUygpO1xuXHRzZWN0aW9uc0V2ZW50c0luaXQoKTtcblxuXHQvKipcblx0ICogSG9vayAtIENvbmZpcm0gUm93IENoYW5nZXNcblx0ICovXG5cdGpRdWVyeShkb2N1bWVudCkub24oICdjbGljaycsICcuZHNsY2Etcm93LWVkaXQtc2F2ZScsIGZ1bmN0aW9uKCl7XG5cblx0XHRkc2xjX3Jvd19lZGl0X2NvbmZpcm0oKTtcblxuXHRcdGpRdWVyeShcIi5kc2xjYS1jdXJyZW50bHktZWRpdGluZ1wiKS5yZW1vdmVBdHRyKCdzdHlsZScpO1xuXHRcdGpRdWVyeSgnLmRzbGNhLXJvdy1vcHRpb25zLWZpbHRlci1ob29rLmRzbGNhLWFjdGl2ZScpLnJlbW92ZUNsYXNzKCdkc2xjYS1hY3RpdmUnKTtcblx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5kc2xjX3Jlc3BvbnNpdmVfY2xhc3NlcyggdHJ1ZSApO1xuXHR9KTtcblxuXHQvKipcblx0ICogSG9vayAtIENhbmNlbCBSb3cgQ2hhbmdlc1xuXHQgKi9cblx0alF1ZXJ5KGRvY3VtZW50KS5vbiggJ2NsaWNrJywgJy5kc2xjYS1yb3ctZWRpdC1jYW5jZWwnLCBmdW5jdGlvbigpe1xuXG5cdFx0ZHNsY19yb3dfZWRpdF9jYW5jZWwoKTtcblxuXHRcdGpRdWVyeShcIi5kc2xjYS1jdXJyZW50bHktZWRpdGluZ1wiKS5yZW1vdmVBdHRyKCdzdHlsZScpO1xuXHRcdGpRdWVyeSgnLmRzbGNhLXJvdy1vcHRpb25zLWZpbHRlci1ob29rLmRzbGNhLWFjdGl2ZScpLnJlbW92ZUNsYXNzKCdkc2xjYS1hY3RpdmUnKTtcblx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5kc2xjX3Jlc3BvbnNpdmVfY2xhc3NlcyggdHJ1ZSApO1xuXHR9KTtcbn0iLCIvKipcbiAqIFNlY3Rpb25zIGNvbnRhaW5lciBjbGFzc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGNvbnN0IENTZWN0aW9uc0NvbnRhaW5lciA9IGNsYXNze1xuXG5cdGNvbnN0cnVjdG9yIChlbGVtKSB7XG5cdFx0dGhpcy5zb3J0YWJsZTtcblxuXHRcdHRoaXMuaW5pdFNvcnRhYmxlKGVsZW0pO1xuXHRcdHRoaXMucmVhY3RUb1NvcnRhYmxlT25PZmYoKTtcblx0fVxuXG5cblx0aW5pdFNvcnRhYmxlKGVsZW0pIHtcblx0XHR0aGlzLnNvcnRhYmxlID0gd2luZG93LmpRdWVyeShlbGVtKS5zb3J0YWJsZSh7XG5cdFx0XHRpdGVtczogXCIuZHNsYy1tb2R1bGVzLXNlY3Rpb24tZG5kXCIsXG5cdFx0XHRoYW5kbGU6ICcuZHNsY2EtbW92ZS1tb2R1bGVzLXNlY3Rpb24taG9vazpub3QoXCIuZHNsY2EtYWN0aW9uLWRpc2FibGVkXCIpJyxcblx0XHRcdHBsYWNlaG9sZGVyOiAnZHNsY2EtbW9kdWxlcy1zZWN0aW9uLXBsYWNlaG9sZGVyJyxcblx0XHRcdHRvbGVyYW5jZSA6ICdpbnRlcnNlY3QnLFxuXHRcdFx0Y3Vyc29yQXQ6IHsgYm90dG9tOiAxMCB9LFxuXHRcdFx0YXhpczogJ3knLFxuXHRcdFx0c2Nyb2xsOiB0cnVlLFxuXHRcdFx0c2Nyb2xsU2Vuc2l0aXZpdHk6IDE0MCxcblx0XHRcdHNjcm9sbFNwZWVkIDogNSxcblx0XHRcdHNvcnQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCBcInVpLXN0YXRlLWRlZmF1bHRcIiApO1xuXHRcdFx0fSxcblx0XHRcdHVwZGF0ZTogZnVuY3Rpb24gKGUsIHVpKSB7XG5cblx0XHRcdFx0d2luZG93LmRzbGNfc2hvd19wdWJsaXNoX2J1dHRvbigpO1xuXHRcdFx0fSxcblx0XHRcdHN0YXJ0OiBmdW5jdGlvbihlLCB1aSl7XG5cblx0XHRcdFx0alF1ZXJ5KCdib2R5JykucmVtb3ZlQ2xhc3MoJ2RzbGNhLWRyYWctbm90LWluLXByb2dyZXNzJykuYWRkQ2xhc3MoJ2RzbGNhLWRyYWctaW4tcHJvZ3Jlc3MnKTtcblx0XHRcdFx0alF1ZXJ5KCdib2R5JywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkucmVtb3ZlQ2xhc3MoJ2RzbGNhLWRyYWctbm90LWluLXByb2dyZXNzJykuYWRkQ2xhc3MoJ2RzbGNhLWRyYWctaW4tcHJvZ3Jlc3MnKTtcblx0XHRcdFx0dWkucGxhY2Vob2xkZXIuaHRtbCgnPHNwYW4gY2xhc3M9XCJkc2xjYS1wbGFjZWhvbGRlci1oZWxwLXRleHRcIj48c3BhbiBjbGFzcz1cImRzbGNhLXBsYWNlaG9sZGVyLWhlbHAtdGV4dC1pbm5lclwiPicgKyBEU0xDU3RyaW5nLnN0cl9yb3dfaGVscGVyX3RleHQgKyAnPC9zcGFuPjwvc3Bhbj4nKTtcblx0XHRcdFx0alF1ZXJ5KCAnLmRzbGMtY29udGVudCcgKS5zb3J0YWJsZSggXCJyZWZyZXNoUG9zaXRpb25zXCIgKTtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbihlLCB1aSl7XG5cblx0XHRcdFx0d2luZG93LmRzbGNfZ2VuZXJhdGVfY29kZSgpO1xuXG5cdFx0XHRcdExpdmVDb21wb3Nlci5CdWlsZGVyLlVJLnN0b3BTY3JvbGxlcigpO1xuXHRcdFx0XHRqUXVlcnkoJ2JvZHknLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5yZW1vdmVDbGFzcygnZHNsY2EtZHJhZy1pbi1wcm9ncmVzcycpLmFkZENsYXNzKCdkc2xjYS1kcmFnLW5vdC1pbi1wcm9ncmVzcycpO1xuXHRcdFx0XHRqUXVlcnkoJ2JvZHknKS5yZW1vdmVDbGFzcygnZHNsY2EtZHJhZy1pbi1wcm9ncmVzcycpLmFkZENsYXNzKCdkc2xjYS1kcmFnLW5vdC1pbi1wcm9ncmVzcycpO1xuXHRcdFx0XHRqUXVlcnkoJy5kc2xjYS1hbmltLW9wYWNpdHktZHJvcCcpLnJlbW92ZUNsYXNzKCdkc2xjYS1hbmltLW9wYWNpdHktZHJvcCcpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0cmVhY3RUb1NvcnRhYmxlT25PZmYoKSB7XG5cdFx0c2VsZiA9IHRoaXMuc29ydGFibGU7XG5cblx0XHQvKiogU29ydCBvcHRpb24gc2V0dGVyICovXG5cdFx0alF1ZXJ5KGRvY3VtZW50KS5vbignTEMuc29ydGFibGVPZmYnLCBmdW5jdGlvbigpe1xuXHRcdFx0aWYgKCB1bmRlZmluZWQgIT09IHNlbGYuc29ydGFibGUoIFwiaW5zdGFuY2VcIiApICkge1xuXHRcdFx0XHRzZWxmLnNvcnRhYmxlKCdvcHRpb24nLCdkaXNhYmxlZCcsIHRydWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0alF1ZXJ5KGRvY3VtZW50KS5vbignTEMuc29ydGFibGVPbicsIGZ1bmN0aW9uKCl7XG5cdFx0XHRpZiAoIHVuZGVmaW5lZCAhPT0gc2VsZi5zb3J0YWJsZSggXCJpbnN0YW5jZVwiICkgKSB7XG5cdFx0XHRcdHNlbGYuc29ydGFibGUoJ29wdGlvbicsJ2Rpc2FibGVkJywgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cbn0iLCIvKipcbiAqIEJ1aWxkZXIgc2V0dGluZ3MgcGFuZWwgZnVuY3Rpb25zIHByb3ZpZGluZyB3b3JrIHdpdGggbW9kdWxlc1xuICovXG5pbXBvcnQgeyBzaG93U2VjdGlvbiB9IGZyb20gJy4vdWlnZW5lcmFsLmpzJztcbmltcG9ydCB7IG1vZHVsZU91dHB1dEFsdGVyZWQgfSBmcm9tICcuL21vZHVsZS5qcyc7XG5pbXBvcnQgeyB1cGRhdGVQcmVzZXQgfSBmcm9tIFwiLi9wcmVzZXRzLmpzXCI7XG5pbXBvcnQgeyBoaWRlTW9kYWwgfSBmcm9tIFwiLi9tb2RhbHdpbmRvdy5qc1wiO1xuXG52YXIgZHNsY1JlZ3VsYXJGb250c0FycmF5ID0gd2luZG93LkRTTENGb250cy5yZWd1bGFyO1xudmFyIGRzbGNHb29nbGVGb250c0FycmF5ID0gd2luZG93LkRTTENGb250cy5nb29nbGU7XG52YXIgZHNsY0FsbEZvbnRzQXJyYXkgPSBkc2xjUmVndWxhckZvbnRzQXJyYXkuY29uY2F0KCBkc2xjR29vZ2xlRm9udHNBcnJheSApO1xuXG4vLyBTZXQgY3VycmVudC9kZWZhdWx0IGljb25zIHNldFxudmFyIGRzbGNJY29uc0N1cnJlbnRTZXQgPSB3aW5kb3cuRFNMQ0ljb25zLmZvbnRhd2Vzb21lO1xuXG4vKipcbiAqIE1vZHVsZXMgLSBEb2N1bWVudCBSZWFkeVxuICovXG5cbmpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oJCl7XG5cdGRzbGNfbW9kdWxlX29wdGlvbnNfdG9vbHRpcCgpO1xuXHRkc2xjX21vZHVsZV9vcHRpb25zX2ZvbnQoKTtcblx0ZHNsY19tb2R1bGVfb3B0aW9uc19pY29uKCk7XG5cdGRzbGNfbW9kdWxlX29wdGlvbnNfaWNvbl9yZXR1cm5pZCgpXG5cdGRzbGNfbW9kdWxlX29wdGlvbnNfdGV4dF9hbGlnbigpO1xuXHRkc2xjX21vZHVsZV9vcHRpb25zX2NoZWNrYm94KCk7XG5cdGRzbGNfbW9kdWxlX29wdGlvbnNfYm94X3NoYWRvdygpO1xuXHRkc2xjX21vZHVsZV9vcHRpb25zX3RleHRfc2hhZG93KCk7XG5cblx0LyogSW5pdGlhdGUgYWxsIHRoZSBjb2xvciBwaWNrZXIgY29udHJvbHMgb24gdGhlIG1vZHVsZS9zZWN0aW9uIG9wdGlvbnMgcGFuZWwuICovXG5cdHZhciBkc2xjYV9vcHRpb25zX3dpdGhfY29sb3JwaWNrZXIgPSAnJztcblx0ZHNsY2Ffb3B0aW9uc193aXRoX2NvbG9ycGlja2VyICs9ICcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtY29sb3JwaWNrZXInO1xuXHRkc2xjYV9vcHRpb25zX3dpdGhfY29sb3JwaWNrZXIgKz0gJywgLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1lZGl0LWZpZWxkLWNvbG9ycGlja2VyJztcblx0ZHNsY2Ffb3B0aW9uc193aXRoX2NvbG9ycGlja2VyICs9ICcsIC5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24tYm94LXNoYWRvdy1jb2xvcic7XG5cdGRzbGNhX29wdGlvbnNfd2l0aF9jb2xvcnBpY2tlciArPSAnLCAuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uLXRleHQtc2hhZG93LWNvbG9yJztcblxuXHQvLyBJbml0IGNvbG9yIHBpY2tlciBvbiBjbGljayBvbmx5IHRvIG5vdCBwb2x1dGUgRE9NIHdpdGggdW53YW50ZWQgZWxlbWVudHMuXG5cdC8vIEl0IHdpbGwgZmlyZSBvbmx5IG9uY2UgKGZpcnN0IHRpbWUpIGFzIGNvbG9yIHBpY2tlciB0aGVuIHB1dCBpdCdzIG93biBsaXN0ZW5lcnMuXG5cdGpRdWVyeShkb2N1bWVudCkub24oJ2NsaWNrJywgZHNsY2Ffb3B0aW9uc193aXRoX2NvbG9ycGlja2VyLCBmdW5jdGlvbigpIHtcblxuXHRcdC8vIENhbGwgdGhlIGNvbG9yIHBpY2tlciBpbml0IGZ1bmN0aW9uLlxuXHRcdGRzbGNfbW9kdWxlX29wdGlvbnNfY29sb3IoIHRoaXMgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGUgY29sb3IgcGlja2VyIHBvcHVwIGFwcGVhcnMgaW4gdGhlIHJpZ2h0IHBsYWNlLlxuXHRcdHZhciB3cmFwcGVyID0galF1ZXJ5KCB0aGlzICkuY2xvc2VzdCgnLmRzbGNhLWNvbG9yLW9wdGlvbicpO1xuXHRcdHZhciBvcHRpb25zUGFuZWwgPSBqUXVlcnkoICcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy1pbm5lcicpO1xuXHRcdHZhciBjb2xvcnBpY2tlciA9IHdyYXBwZXIuZmluZCgnLndwLXBpY2tlci1ob2xkZXInKTtcblx0XHR2YXIgb2Zmc2V0ID0gd3JhcHBlci5vZmZzZXQoKTtcblx0XHR2YXIgb2Zmc2V0UG9wdXAgPSBvZmZzZXQubGVmdCArIDE1O1xuXHRcdHZhciB3aW5kb1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG5cdFx0dmFyIHBvcHVwV2lkdGggPSAyNjA7XG5cblx0XHRpZiAoIHdpbmRvV2lkdGggPCBvZmZzZXRQb3B1cCArIHBvcHVwV2lkdGggKSB7XG5cdFx0XHRvZmZzZXRQb3B1cCA9IHdpbmRvV2lkdGggLSBwb3B1cFdpZHRoO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgcmlnaHQgcG9zaXRpb24gZm9yIHRoZSBjb2xvciBwaWNrZXIgcG9wdXAgb24gZmlyc3QgY2xpY2suXG5cdFx0Y29sb3JwaWNrZXIuY3NzKCdsZWZ0Jywgb2Zmc2V0UG9wdXAgKyAncHgnICk7XG5cblx0XHQvLyBVcGRhdGUgcG9zaXRpb24gbGVmdCBmb3IgdGhlIGNvbG9yIHBpY2tlciBvbiBvcHRpb25zIHNjcm9sbC5cblx0XHRqUXVlcnkob3B0aW9uc1BhbmVsKS5vbignc2Nyb2xsJywgZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdG9mZnNldCA9IHdyYXBwZXIub2Zmc2V0KCk7XG5cdFx0XHR2YXIgb2Zmc2V0UG9wdXAgPSBvZmZzZXQubGVmdCArIDE1O1xuXHRcdFx0dmFyIHdpbmRvV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcblx0XHRcdHZhciBwb3B1cFdpZHRoID0gMjYwO1xuXG5cdFx0XHRpZiAoIHdpbmRvV2lkdGggPCBvZmZzZXRQb3B1cCArIHBvcHVwV2lkdGggKSB7XG5cdFx0XHRcdG9mZnNldFBvcHVwID0gd2luZG9XaWR0aCAtIHBvcHVwV2lkdGg7XG5cdFx0XHR9XG5cblx0XHRcdGNvbG9ycGlja2VyLmNzcygnbGVmdCcsIG9mZnNldFBvcHVwICsgJ3B4JyApO1xuXHRcdH0pO1xuXHR9KTtcblxuXHQvKiBJbml0aWF0ZSBhbGwgdGhlIHNsaWRlciBjb250cm9scyBvbiB0aGUgbW9kdWxlIG9wdGlvbnMgcGFuZWwuICovXG5cdGpRdWVyeSgnLmRzbGNhLWNvbnRhaW5lcicpLm9uKCdtb3VzZWVudGVyJywgJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24tc2xpZGVyJywgZnVuY3Rpb24oKSB7XG5cblx0XHQvLyBGaXhlZDogaHR0cHM6Ly9naXRodWIuY29tL2xpdmUtY29tcG9zZXIvbGl2ZS1jb21wb3Nlci1wYWdlLWJ1aWxkZXIvaXNzdWVzLzc0MFxuXHRcdGlmICggISBqUXVlcnkodGhpcykuaGFzQ2xhc3MoICdkc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24tc2VsZWN0JyApICkge1xuICAgICAgICBcdGRzbGNfbW9kdWxlX29wdGlvbnNfbnVtZXJpYyggdGhpcyApO1xuXHRcdH1cblx0fSk7XG5cblx0LyogSW5pdGlhdGUgYWxsIHRoZSBzbGlkZXIgY29udHJvbHMgb24gdGhlIHJvdyBvcHRpb25zIHBhbmVsLiAqL1xuXHRqUXVlcnkoJy5kc2xjYS1jb250YWluZXInKS5vbignbW91c2VlbnRlcicsICcuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWVkaXQtb3B0aW9uLXNsaWRlcicsIGZ1bmN0aW9uKCkge1xuXG5cdFx0ZHNsY19tb2R1bGVfb3B0aW9uc19udW1lcmljKCB0aGlzICk7XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiBIb29rIC0gU3VibWl0XG5cdCAqL1xuXHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1mb3JtJykuc3VibWl0KCBmdW5jdGlvbihlKXtcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0bW9kdWxlT3V0cHV0QWx0ZXJlZCgpO1xuXHR9KTtcblxuXHQvKipcblx0ICogSG9vayAtIFRhYiBTd2l0Y2hcblx0ICovXG5cdGpRdWVyeShkb2N1bWVudCkub24oICdjbGljaycsICcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9vaycsIGZ1bmN0aW9uKGUpe1xuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRlbGVtZW50T3B0aW9uc1RhYnMoIGpRdWVyeSh0aGlzKSApO1xuXHR9KTtcblxuXHQvKipcblx0ICogSG9vayAtIE9wdGlvbiBTZWN0aW9uIFN3aXRjaFxuXHQgKi9cblx0alF1ZXJ5KGRvY3VtZW50KS5vbiggJ2NsaWNrJywgJy5kc2xjYS1vcHRpb25zLWZpbHRlci1ob29rJywgZnVuY3Rpb24oZSl7XG5cblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHR2YXIgZHNsY1ByZXYgPSBqUXVlcnkoJy5kc2xjYS1vcHRpb25zLWZpbHRlci1ob29rLmRzbGNhLWFjdGl2ZScpLmRhdGEoJ3NlY3Rpb24nKTtcblx0XHR2YXIgY3VycmVudFNlY3Rpb24gPSBqUXVlcnkodGhpcykuZGF0YSgnc2VjdGlvbicpO1xuXG5cdFx0alF1ZXJ5KCcuZHNsY2Etb3B0aW9ucy1maWx0ZXItaG9vay5kc2xjYS1hY3RpdmUnKS5yZW1vdmVDbGFzcygnZHNsY2EtYWN0aXZlJyk7XG5cdFx0alF1ZXJ5KHRoaXMpLmFkZENsYXNzKCdkc2xjYS1hY3RpdmUnKTtcblxuXG5cdFx0ZHNsY19tb2R1bGVfb3B0aW9uc19zZWN0aW9uX2ZpbHRlciggY3VycmVudFNlY3Rpb24gKTtcblxuXHRcdC8vIElmIHByZXZpb3VzIHdhcyByZXNwb25zaXZlIHJlbG9hZCBtb2R1bGVcblx0XHRpZiAoIGRzbGNQcmV2ID09ICdyZXNwb25zaXZlJyApIHtcblx0XHRcdC8vIFNob3cgdGhlIGxvYWRlclxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtY29udGFpbmVyLWxvYWRlcicpLnNob3coKTtcblxuXHRcdFx0Ly8gUmVzZXQgdGhlIHJlc3BvbnNpdmUgY2xhc3Nlc1xuXHRcdFx0d2luZG93LkxpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhV2luZG93LmRzbGNfcmVzcG9uc2l2ZV9jbGFzc2VzKCk7XG5cblx0XHRcdC8vIFJlbG9hZCBNb2R1bGVcblx0XHRcdG1vZHVsZU91dHB1dEFsdGVyZWQoZnVuY3Rpb24oKXtcblx0XHRcdFx0Ly8gSGlkZSB0aGUgbG9hZGVyXG5cdFx0XHRcdGpRdWVyeSgnLmRzbGNhLWNvbnRhaW5lci1sb2FkZXInKS5oaWRlKCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBEZXN0cm95IHJlc2l6YWJsZSBwcmV2aWV3IGZ1bmN0aW9uYWxpdHlcblx0XHRcdCAqIHdoZW4gbGVhdmluZyBSZXNwb25zaXZlIHZpZXcuXG5cdFx0XHQgKi9cblx0XHRcdGpRdWVyeSgnI3BhZ2UtYnVpbGRlci1wcmV2aWV3LWFyZWEnKS5yZXNpemFibGUoJ2Rlc3Ryb3knKS5hdHRyKCdzdHlsZScsJycpO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIE1ha2UgdGhlIHByZXZpZXcgYXJlYSByZXNpemFibGVcblx0XHQgKiB3aGVuIGVudGVyaW5nIFJlc3BvbnNpdmUgdmlldy5cblx0XHQgKi9cblx0XHRpZiAoIGN1cnJlbnRTZWN0aW9uID09ICdyZXNwb25zaXZlJyApIHtcblx0XHRcdGpRdWVyeSgnI3BhZ2UtYnVpbGRlci1wcmV2aWV3LWFyZWEnKS5yZXNpemFibGUoKTtcblx0XHR9XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiBIb29rIC0gQ29uZmlybSBDaGFuZ2VzXG5cdCAqL1xuXHRqUXVlcnkoZG9jdW1lbnQpLm9uKCAnY2xpY2snLCAnLmRzbGNhLW1vZHVsZS1lZGl0LXNhdmUnLCBmdW5jdGlvbihlKXtcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRkc2xjX21vZHVsZV9vcHRpb25zX2NvbmZpcm1fY2hhbmdlcyhmdW5jdGlvbigpe1xuXG5cdFx0XHQvLyB3aW5kb3cuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuVUkuaW5pdElubGluZUVkaXRvcnMoe3dpdGhSZW1vdmU6dHJ1ZX0pO1xuXHRcdFx0d2luZG93LkxpdmVDb21wb3Nlci5CdWlsZGVyLlVJLnVubG9hZE9wdGlvbnNEZXBzKCk7XG5cdFx0XHR3aW5kb3cuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuRmxhZ3MucGFuZWxPcGVuZWQgPSBmYWxzZTtcblxuXHRcdFx0alF1ZXJ5KFwiYm9keVwiLCB3aW5kb3cuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkucmVtb3ZlQ2xhc3MoJ21vZHVsZS1lZGl0aW5nLWluLXByb2dyZXNzJyk7XG5cblx0XHR9KTtcblxuXHRcdGpRdWVyeSgnLmRzbGNhLW9wdGlvbnMtZmlsdGVyLWhvb2suZHNsY2EtYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2RzbGNhLWFjdGl2ZScpO1xuXG5cdFx0ZHNsY19kaXNhYmxlX3Jlc3BvbnNpdmVfdmlldygpO1xuXG5cdH0pO1xuXG5cdC8qKlxuXHQgKiBIb29rIC0gQ2FuY2VsIENoYW5nZXNcblx0ICovXG5cdGpRdWVyeShkb2N1bWVudCkub24oICdjbGljaycsICcuZHNsY2EtbW9kdWxlLWVkaXQtY2FuY2VsJywgZnVuY3Rpb24oZSl7XG5cblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRkc2xjX21vZHVsZV9vcHRpb25zX2NhbmNlbF9jaGFuZ2VzKGZ1bmN0aW9uKCl7XG5cblx0XHRcdC8vIHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5VSS5pbml0SW5saW5lRWRpdG9ycyh7d2l0aFJlbW92ZTp0cnVlfSk7XG5cdFx0XHR3aW5kb3cuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuVUkudW5sb2FkT3B0aW9uc0RlcHMoKTtcblx0XHRcdHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5GbGFncy5wYW5lbE9wZW5lZCA9IGZhbHNlO1xuXG5cdFx0XHRqUXVlcnkoXCJib2R5XCIsIHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5yZW1vdmVDbGFzcygnbW9kdWxlLWVkaXRpbmctaW4tcHJvZ3Jlc3MnKTtcblxuXHRcdH0pO1xuXG5cdFx0alF1ZXJ5KCcuZHNsY2Etb3B0aW9ucy1maWx0ZXItaG9vay5kc2xjYS1hY3RpdmUnKS5yZW1vdmVDbGFzcygnZHNsY2EtYWN0aXZlJyk7XG5cblx0XHRkc2xjX2Rpc2FibGVfcmVzcG9uc2l2ZV92aWV3KCk7XG5cdH0pO1xufSk7XG5cbi8qIEVkaXRvciBzY3JpcHRzICovXG5leHBvcnQgY29uc3Qgc2V0dGluZ3NQYW5lbEluaXQgPSAoKSA9PiB7XG5cdHZhciBzZWxmID0gd2luZG93LkxpdmVDb21wb3Nlci5CdWlsZGVyO1xuXHR3aW5kb3cuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuSGVscGVycy5jb2xvcnBpY2tlcnMgPSBbXTtcbi8qXG5cdHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5VSS5pbml0SW5saW5lRWRpdG9ycyA9IGZ1bmN0aW9uKHBhcmFtcyl7XG5cdFx0cGFyYW1zID0gcGFyYW1zIHx8IHt9O1xuXG5cdFx0aWYgKCBwYXJhbXMud2l0aFJlbW92ZSA9PSB0cnVlICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0d2luZG93LkxpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhV2luZG93LnRpbnlNQ0UucmVtb3ZlKCk7XG5cdFx0XHR9IGNhdGNoKGVycikge1xuXHRcdFx0XHRjb25zb2xlLmluZm8oICdObyB0aW55TUNFIGNvZGUgZm91bmQuIEVycm9yIGNvZGU6IDEwMTgxMTE2LicgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR3aW5kb3cuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFXaW5kb3cudGlueU1DRS5pbml0KHtcblx0XHRcdHNlbGVjdG9yOiAnLmlubGluZS1lZGl0b3IuZHNsY2EtZWRpdGFibGUtY29udGVudCcsXG5cdFx0XHRlZGl0b3JfZGVzZWxlY3RvcjogJ21jZS1jb250ZW50LWJvZHknLFxuXHRcdFx0bWVudWJhcjogZmFsc2UsXG5cdFx0XHRpbmxpbmU6IHRydWUsXG5cdFx0XHRwbHVnaW5zOiAnd29yZHByZXNzIHdwbGluayBsaXN0cyBwYXN0ZScsXG5cdFx0XHRwYXN0ZV9hc190ZXh0OiB0cnVlLCAvLyBQYXN0ZSBzdHlsZWQgdGV4dCBhcyBwbGFpbiB0ZXh0IG9ubHkuIFJlcXVpcmVzICdwYXN0ZScgaW4gcGx1Z2lucy5cblx0XHRcdHBhc3RlX2Jsb2NrX2Ryb3A6IHRydWUsIC8vIERpc2FibGVkIGRyb3AgYWN0aW9uIGZvciBpbmxpbmUgZWRpdG9yIHRvIHByZXZlbnQganMgZXJyb3JzIGluIHRoZSBjb25zb2xlLiBodHRwOi8vYXJjaGl2ZS50aW55bWNlLmNvbS93aWtpLnBocC9QbHVnaW4zeDpwYXN0ZVxuXHRcdFx0c3R5bGVfZm9ybWF0czogW1xuXHRcdFx0XHRcdHt0aXRsZTogJ1BhcmFncmFwaCcsIGZvcm1hdDogJ3AnfSxcblx0XHRcdFx0XHR7dGl0bGU6ICdIZWFkZXIgMScsIGZvcm1hdDogJ2gxJ30sXG5cdFx0XHRcdFx0e3RpdGxlOiAnSGVhZGVyIDInLCBmb3JtYXQ6ICdoMid9LFxuXHRcdFx0XHRcdHt0aXRsZTogJ0hlYWRlciAzJywgZm9ybWF0OiAnaDMnfSxcblx0XHRcdFx0XHR7dGl0bGU6ICdIZWFkZXIgNCcsIGZvcm1hdDogJ2g0J30sXG5cdFx0XHRcdFx0e3RpdGxlOiAnSGVhZGVyIDUnLCBmb3JtYXQ6ICdoNSd9LFxuXHRcdFx0XHRcdHt0aXRsZTogJ0hlYWRlciA2JywgZm9ybWF0OiAnaDYnfSxcblx0XHRcdCAgXSxcblx0XHRcdHRvb2xiYXI6ICdzdHlsZXNlbGVjdCB8IGJvbGQgaXRhbGljIGJsb2NrcXVvdGUgfCByZW1vdmVmb3JtYXQgfCBidWxsaXN0IG51bWxpc3QgJ1xuXHRcdH0pO1xuXHR9XG4qL1xuXHQvKiBEZXN0cm95IGluc3RhbmNlZCBvZiBzbGlkZXJzLCBjb2xvciBwaWNrZXJzIGFuZCBvdGhlciB0ZW1wb3JhcnkgZWxlbWVudHMgKi9cblx0d2luZG93LkxpdmVDb21wb3Nlci5CdWlsZGVyLlVJLmNsZWFyVXRpbHMgPSBmdW5jdGlvbigpIHtcblxuXHRcdGlmICggd2luZG93LmRzbGNEZWJ1ZyApIGNvbnNvbGUubG9nKCAnd2luZG93LkxpdmVDb21wb3Nlci5CdWlsZGVyLlVJLmNsZWFyVXRpbHMnICk7XG5cblx0XHQvLyBEZXN0cm95IGFsbCBDb2xvciBQaWNrZXJzXG5cdFx0d2luZG93LkxpdmVDb21wb3Nlci5CdWlsZGVyLlVJLmNsZWFyQ29sb3JQaWNrZXJzKCk7XG5cblx0XHQvLyBEZWxldGUgbW9kdWxlIGJhY2t1cHMgZm9ybSBtZW1vcnkuXG5cdFx0aWYgKCB1bmRlZmluZWQgIT09IHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5tb2R1bGVCYWNrdXAgKSB7XG5cdFx0XHR3aW5kb3cuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIubW9kdWxlQmFja3VwLnJlbW92ZSgpO1xuXHRcdH1cblxuXHRcdGpRdWVyeSgnLnRlbXAtc3R5bGVzLWZvci1tb2R1bGUnLCB3aW5kb3cuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkucmVtb3ZlKCk7XG5cblx0XHQvLyBIaWRlIGlubGluZSBlZGl0b3IgcGFuZWwgaWYgb24gW0NvbmZpcm1dIG9yIFtDYW5jZWxdIGJ1dHRvbiBjbGljay5cblx0XHRqUXVlcnkoJy5tY2UtdGlueW1jZScsIHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5oaWRlKCk7XG5cdH1cblxuXHR3aW5kb3cuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuVUkuY2xlYXJDb2xvclBpY2tlcnMgPSBmdW5jdGlvbigpIHtcblxuXHRcdGlmICggQXJyYXkuaXNBcnJheShzZWxmLkhlbHBlcnMuY29sb3JwaWNrZXJzICkgKSB7XG5cblx0XHRcdHNlbGYuSGVscGVycy5jb2xvcnBpY2tlcnMuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblx0XHRcdFx0Ly8gRG8gbm90IGRlbGV0ZSBjb2xvciBwaWNrZXIgaW5zdGFuY2UgZnJvbSByb3cgc2V0dGluZ3MgcGFuZWwsXG5cdFx0XHRcdC8vIGFzIGl0IHN0YXlzIG9uIHBhZ2UgYW5kIG5vdCBnZXQgbG9hZGVkIHZpYSBBamF4LlxuXHRcdFx0XHRpZiAoICEgalF1ZXJ5KGl0ZW0pLmhhc0NsYXNzKCdkc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1maWVsZCcpICkge1xuXHRcdFx0XHRcdC8vIERlc3Ryb3kgY29sb3IgcGlja2VyIGluc3RhbmNlLlxuXHRcdFx0XHRcdGpRdWVyeShpdGVtKS5yZW1vdmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHNlbGYuSGVscGVycy5jb2xvcnBpY2tlcnMgPSBbXTtcblx0XHR9XG5cblx0XHQvLyBEZWxldGUgdGhlIGNvbG9yIHBpY2tlciBldmVudHMuXG5cdFx0alF1ZXJ5KCAnYm9keScgKS5vZmYoICdjbGljay53cGNvbG9ycGlja2VyJyApO1xuXHR9XG5cblx0LyoqIE9wdGlvbnMgZGVwZW5kZW5jaWVzICovXG5cdHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5IZWxwZXJzLmRlcHNIYW5kbGVycyA9IFtdO1xuXG5cdHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5VSS5sb2FkT3B0aW9uc0RlcHMgPSBmdW5jdGlvbigpIHtcblxuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdGpRdWVyeShcIi5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25cIikuZWFjaChmdW5jdGlvbigpe1xuXG5cdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cdFx0XHR2YXIgcGFyc2VkID0gdHJ1ZTtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHR2YXIgZGVwID0gSlNPTi5wYXJzZSggTGl2ZUNvbXBvc2VyLlV0aWxzLmI2NF90b191dGY4KCBqUXVlcnkodGhpcykuZGF0YSgnZGVwJykgKSApO1xuXG5cdFx0XHR9IGNhdGNoKGUpe1xuXG5cdFx0XHRcdHBhcnNlZCA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHBhcnNlZCApIHtcblxuXHRcdFx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCl7XG5cblx0XHRcdFx0XHR2YXIgb3B0RWxlbSA9IHRoaXM7XG5cdFx0XHRcdFx0dmFyIGxvY2FsRGVwID0ge307XG5cblx0XHRcdFx0XHRpZiAoICggb3B0RWxlbS50eXBlID09ICdyYWRpbycgfHwgb3B0RWxlbS50eXBlID09ICdjaGVja2JveCcgKSAmJiBkZXBbIG9wdEVsZW0udmFsdWUgXSA9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIG9wdEVsZW0udHlwZSA9PSAnY2hlY2tib3gnICYmIGRlcFsgb3B0RWxlbS52YWx1ZSBdICE9IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0bG9jYWxEZXBbIG9wdEVsZW0udmFsdWUgXSA9IGRlcFsgb3B0RWxlbS52YWx1ZSBdO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGxvY2FsRGVwID0gZGVwO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdE9iamVjdC5rZXlzKGxvY2FsRGVwKS5mb3JFYWNoKGZ1bmN0aW9uKG9wdF92YWwpe1xuXG5cdFx0XHRcdFx0XHRsb2NhbERlcFsgb3B0X3ZhbCBdLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblxuXHRcdFx0XHRcdFx0XHR2YXIgb3B0X3dyYXAgPSBqUXVlcnkoXCIuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uLVwiICsgaXRlbS50cmltKCkpLmNsb3Nlc3QoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24nKTtcblx0XHRcdFx0XHRcdFx0dmFyIGNoZWNrZWRDaGVja2JveCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBvcHRFbGVtLnR5cGUgPT0gJ3JhZGlvJyB8fCBvcHRFbGVtLnR5cGUgPT0gJ2NoZWNrYm94JyApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGNoZWNrZWRDaGVja2JveCA9IGpRdWVyeShvcHRFbGVtKS5pcyhcIjpjaGVja2VkXCIpO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0dmFyIHNlY3Rpb25fdGFiID0galF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9vay5kc2xjYS1hY3RpdmUnKS5kYXRhKCdpZCcpO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggb3B0RWxlbS52YWx1ZSA9PSBvcHRfdmFsICYmIGNoZWNrZWRDaGVja2JveCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggb3B0X3dyYXAubm90KCBcIi5kZXBlbmRlbnRcIiApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0b3B0X3dyYXAuYWRkQ2xhc3MoJ2RlcGVuZGVudCcpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdGlmICggb3B0X3dyYXAuaGFzQ2xhc3MoJ2RlcC1oaWRlJykgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRvcHRfd3JhcC5yZW1vdmVDbGFzcygnZGVwLWhpZGUnKTtcblx0XHRcdFx0XHRcdFx0XHRcdG9wdF93cmFwLmFkZENsYXNzKCdkZXAtc2hvdycpO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRvcHRfd3JhcC5hZGRDbGFzcygnZGVwLXNob3cnKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIHNlY3Rpb25fdGFiID09IG9wdF93cmFwLmRhdGEoJ3RhYicpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0b3B0X3dyYXAuc2hvdygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggb3B0X3dyYXAubm90KCBcIi5kZXBlbmRlbnRcIiApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0b3B0X3dyYXAuYWRkQ2xhc3MoJ2RlcGVuZGVudCcpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdGlmICggb3B0X3dyYXAuaGFzQ2xhc3MoJ2RlcC1zaG93JykgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRvcHRfd3JhcC5yZW1vdmVDbGFzcygnZGVwLXNob3cnKTtcblx0XHRcdFx0XHRcdFx0XHRcdG9wdF93cmFwLmFkZENsYXNzKCdkZXAtaGlkZScpO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRvcHRfd3JhcC5hZGRDbGFzcygnZGVwLWhpZGUnKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRvcHRfd3JhcC5oaWRlKCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0alF1ZXJ5KGRvY3VtZW50KS5vbignY2hhbmdlIGRzbGMtaW5pdC1kZXBzJywgJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24gKltkYXRhLWlkPVwiJyArIGpRdWVyeSh0aGlzKS5kYXRhKCdpZCcpICsgJ1wiXScsIGhhbmRsZXIpO1xuXHRcdFx0XHR3aW5kb3cuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuSGVscGVycy5kZXBzSGFuZGxlcnMucHVzaCggaGFuZGxlciApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0alF1ZXJ5KFwiLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbiBpbnB1dCwgLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbiBzZWxlY3RcIikudHJpZ2dlcignZHNsYy1pbml0LWRlcHMnKTtcblx0fVxuXG5cdHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5VSS51bmxvYWRPcHRpb25zRGVwcyA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0d2luZG93LkxpdmVDb21wb3Nlci5CdWlsZGVyLkhlbHBlcnMuZGVwc0hhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcil7XG5cblx0XHRcdGpRdWVyeShkb2N1bWVudCkudW5iaW5kKCAnY2hhbmdlJywgaGFuZGxlciApO1xuXHRcdFx0alF1ZXJ5KGRvY3VtZW50KS51bmJpbmQoICdkc2xjLWluaXQtZGVwcycsIGhhbmRsZXIgKTtcblx0XHR9KTtcblxuXHRcdHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5IZWxwZXJzLmRlcHNIYW5kbGVycyA9IFtdO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgaW5saW5lIHN0eWxlIHRhZyB3aGVuIGVkaXRpbmcgV1lTV0lHXG5cdCAqXG5cdCAqIEBwYXJhbSAge29iamVjdH0gcGFyYW1zXG5cdCAqICAgIHBhcmFtcy5ydWxlXG5cdCAqICAgIHBhcmFtcy5lbGVtc1xuXHQgKiAgICBwYXJhbXMubW9kdWxlX2lkXG5cdCAqL1xuXHR3aW5kb3cuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuSGVscGVycy5wcm9jZXNzSW5saW5lU3R5bGVUYWcgPSBmdW5jdGlvbiggcGFyYW1zICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgcGFyYW1zICE9ICdvYmplY3QnICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0dmFyIHJlc3BfcHJlZml4ID0gJycsIHJlc3BfcG9zdGZpeCA9ICcnO1xuXG5cdFx0aWYgKCBwYXJhbXMuY29udGV4dC5jbG9zZXN0KFwiLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvblwiKS5kYXRhKCd0YWInKSA9PSAndGFibGV0X3Jlc3BvbnNpdmUnICkge1xuXG5cdFx0XHRyZXNwX3ByZWZpeCA9ICdAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjRweCkgYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7Jztcblx0XHRcdHJlc3BfcG9zdGZpeCA9ICd9Jztcblx0XHR9IGVsc2UgaWYgKCBwYXJhbXMuY29udGV4dC5jbG9zZXN0KFwiLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvblwiKS5kYXRhKCd0YWInKSA9PSAncGhvbmVfcmVzcG9uc2l2ZScgKSB7XG5cblx0XHRcdHJlc3BfcHJlZml4ID0gJ0BtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY3cHgpIHsnO1xuXHRcdFx0cmVzcF9wb3N0Zml4ID0gJ30nO1xuXHRcdH1cblxuXHRcdHBhcmFtcy5zdHlsZUNvbnRlbnQgPSByZXNwX3ByZWZpeCArIHBhcmFtcy5zdHlsZUNvbnRlbnQgKyByZXNwX3Bvc3RmaXg7XG5cblx0XHR2YXIgaWQgPSByZXNwX3ByZWZpeCArIHBhcmFtcy5ydWxlICsgcGFyYW1zLmVsZW1zO1xuXHRcdGlkID0gaWQucmVwbGFjZSgvIC9naSwgJycpO1xuXG5cdFx0aWYgKCB3aW5kb3cuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudFswXS5nZXRFbGVtZW50QnlJZChpZCkgPT0gbnVsbCApIHtcblxuXHRcdFx0dmFyIHN0eWxlVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblx0XHRcdHN0eWxlVGFnLmlubmVySFRNTCA9IHBhcmFtcy5zdHlsZUNvbnRlbnQ7XG5cdFx0XHRzdHlsZVRhZy5pZCA9IGlkO1xuXHRcdFx0c3R5bGVUYWcuY2xhc3NOYW1lID0gXCJ0ZW1wLXN0eWxlcy1mb3ItbW9kdWxlXCI7XG5cblx0XHRcdHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50WzBdLmJvZHkuYXBwZW5kQ2hpbGQoc3R5bGVUYWcpO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50WzBdLmdldEVsZW1lbnRCeUlkKGlkKS5pbm5lckhUTUwgPSBwYXJhbXMuc3R5bGVDb250ZW50O1xuXHRcdH1cblx0fVxuXG5cdHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5VSS5zaGFrZVBhbmVsQ29uZmlybUJ1dHRvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtc2F2ZScpLmFkZENsYXNzKCdsYy1zaGFrZS1lZmZlY3QgYWN0aXZlJyk7XG5cblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LXNhdmUnKS5yZW1vdmVDbGFzcygnbGMtc2hha2UtZWZmZWN0IGFjdGl2ZScpO1xuXHRcdH0sIDEwMDApO1xuXHR9O1xuXG5cdG9uTW9kdWxlT3B0aW9uc0NoYW5nZSgpO1xuXHRvblNlY3Rpb25PcHRpb25zQ2hhbmdlKCk7XG5cdG9uRmlsZVVwbG9hZE9wdGlvbnNDaGFuZ2UoKTtcbn07XG5cbmNvbnN0IG9uTW9kdWxlT3B0aW9uc0NoYW5nZSA9ICgpID0+IHtcblx0Ly8gTGl2ZSBQcmV2aWV3IGZvciBNb2R1bGUgU2V0dGluZ3MgQ2hhbmdlXG5cdGpRdWVyeShkb2N1bWVudCkub24oICdjaGFuZ2UnLCAnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkJywgZnVuY3Rpb24oKXtcblx0XHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ29uIGNoYW5nZSBldmVudCBmb3IgLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkJyApO1xuXG5cdFx0dmFyIGRzbGNPcHRpb25WYWx1ZSA9ICcnLFxuXHRcdFx0ZHNsY09wdGlvblZhbHVlT3JpZyA9ICcnLFxuXHRcdFx0ZHNsY09wdGlvbiA9IGpRdWVyeSh0aGlzKSxcblx0XHRcdGRzbGNPcHRpb25JRCA9IGRzbGNPcHRpb24uZGF0YSgnaWQnKSxcblx0XHRcdGRzbGNPcHRpb25XcmFwID0gZHNsY09wdGlvbi5jbG9zZXN0KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uJyksXG5cdFx0XHRkc2xjTW9kdWxlID0galF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLFxuXHRcdFx0ZHNsY01vZHVsZUlEID0gZHNsY01vZHVsZS5kYXRhKCdtb2R1bGUnKSxcblx0XHRcdGRzbGNNb2R1bGVPcHRpb25zID0galF1ZXJ5KCAnLmRzbGNhLW1vZHVsZS1vcHRpb25zLWZyb250IHRleHRhcmVhJywgZHNsY01vZHVsZSApO1xuXG5cdFx0Ly8gQWRkIGNoYW5nZWQgY2xhc3Ncblx0XHRkc2xjTW9kdWxlLmFkZENsYXNzKCdkc2xjYS1tb2R1bGUtY2hhbmdlLW1hZGUnKTtcblxuXHRcdC8vIEhpZGUvU2hvdyB0YWJzIGluIHRoZSBtb2R1bGUgb3B0aW9ucyBwYW5lbC5cblx0XHQvLyBSZXF1aXJlZCB0byBzaG93L2hpZGUgcGFydGljdWxhciBvcHRpb25zIHRhYnMgYmFzZWQgb24gdGhlIGN1cnJlbnQgc2VsZWN0aW9uLlxuXHRcdC8vIEFjdGl2ZSBvbmx5IGZvciBkcm9wZG93bnMgYW5kIGNoZWNrYm94ZXMuXG5cdFx0aWYgKCBkc2xjT3B0aW9uV3JhcC5oYXNDbGFzcygnZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uLXNlbGVjdCcpIHx8XG5cdFx0ZHNsY09wdGlvbldyYXAuaGFzQ2xhc3MoJ2RzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbi1jaGVja2JveCcpICkge1xuXHRcdFx0ZHNsY19tb2R1bGVfb3B0aW9uc19oaWRlc2hvd190YWJzKCk7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogUmVmcmVzaCBvbiBjaGFuZ2UgPSB0cnVlXG5cdFx0ICpcblx0XHQgKiBSZWZyZXNoIG1vZHVsZSBIVE1MIGZyb20gdGhlIHNlcnZlciBvbiBldmVyeSBmaWVsZCB2YWx1ZSBjaGFuZ2Vcblx0XHQgKi9cblx0XHRpZiAoIGpRdWVyeSh0aGlzKS5jbG9zZXN0KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uJykuZGF0YSgncmVmcmVzaC1vbi1jaGFuZ2UnKSA9PSAnYWN0aXZlJyApIHtcblx0XHRcdC8qKlxuXHRcdFx0ICogR2V0IHRoZSBuZXcgdmFsdWVcblx0XHRcdCAqL1xuXHRcdFx0aWYgKCBkc2xjT3B0aW9uV3JhcC5maW5kKCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uLWNoZWNrYm94LXdyYXBwZXInKS5sZW5ndGggKSB7XG5cdFx0XHRcdHZhciBkc2xjT3B0aW9uQ2hvaWNlcyA9IGpRdWVyeSgnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJywgZHNsY09wdGlvbldyYXApO1xuXHRcdFx0XHRkc2xjT3B0aW9uQ2hvaWNlcy5lYWNoKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkodGhpcykucHJvcCgnY2hlY2tlZCcpICkge1xuXHRcdFx0XHRcdFx0ZHNsY09wdGlvblZhbHVlID0gZHNsY09wdGlvblZhbHVlICsgalF1ZXJ5KHRoaXMpLnZhbCgpICsgJyAnO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2UgaWYgKCBkc2xjT3B0aW9uLmhhc0NsYXNzKCdkc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24tcmFkaW8nKSApIHtcblx0XHRcdFx0dmFyIGRzbGNPcHRpb25WYWx1ZSA9IGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkOmNoZWNrZWQnLCBkc2xjT3B0aW9uKS52YWwoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBkc2xjT3B0aW9uVmFsdWUgPSBkc2xjT3B0aW9uLnZhbCgpO1xuXHRcdFx0XHQvLyBQb3N0IEdyaWQgPiBUaHVtYm5haWw6IE9yaWVudGF0aW9uIGNoYW5nZS5cblx0XHRcdFx0Ly8gTmVlZCB0byBjaGFuZ2UgdGh1bWJuYWlsIHdpZHRoIHRvIGdldCBpdCB3b3JrIGFzIGV4cGVjdGVkXG5cdFx0XHRcdGlmICggZHNsY09wdGlvbklEID09ICdvcmllbnRhdGlvbicgJiYgZHNsY09wdGlvblZhbHVlID09ICdob3Jpem9udGFsJyApIHtcblx0XHRcdFx0XHR2YXIgZHNsY1NsaWRlckVsID0galF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uLXRodW1iX3dpZHRoIC5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZCcpO1xuXHRcdFx0XHRcdGRzbGNTbGlkZXJFbC52YWwoJzQwJykudHJpZ2dlcignY2hhbmdlJyk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIGRzbGNPcHRpb25JRCA9PSAnb3JpZW50YXRpb24nICYmIGRzbGNPcHRpb25WYWx1ZSA9PSAndmVydGljYWwnICkge1xuXHRcdFx0XHRcdHZhciBkc2xjU2xpZGVyRWwgPSBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24tdGh1bWJfd2lkdGggLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkJyk7XG5cdFx0XHRcdFx0ZHNsY1NsaWRlckVsLnZhbCgnMTAwJykudHJpZ2dlcignY2hhbmdlJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBDaGFuZ2Ugb2xkIHZhbHVlIHdpdGggbmV3IHZhbHVlXG5cdFx0XHQgKi9cblxuXHRcdFx0aWYgKCB1bmRlZmluZWQgIT09IGRzbGNPcHRpb25WYWx1ZSApIHtcblx0XHRcdFx0ZHNsY09wdGlvblZhbHVlID0gZHNsY09wdGlvblZhbHVlLnRyaW0oKS5yZXBsYWNlKC88dGV4dGFyZWEvZywgJzxsY3RleHRhcmVhJykucmVwbGFjZSgvPFxcL3RleHRhcmVhL2csICc8L2xjdGV4dGFyZWEnKTtcblx0XHRcdH1cblxuXHRcdFx0alF1ZXJ5KCAnLmRzbGNhLW1vZHVsZS1vcHRpb25zLWZyb250IHRleHRhcmVhW2RhdGEtaWQ9XCInICsgZHNsY09wdGlvbklEICsgJ1wiXScsIGRzbGNNb2R1bGUgKS52YWwoZHNsY09wdGlvblZhbHVlKTtcblx0XHRcdGpRdWVyeSgnLmRzbGNhLWNvbnRhaW5lci1sb2FkZXInKS5zaG93KCk7XG5cblx0XHRcdG1vZHVsZU91dHB1dEFsdGVyZWQoIGZ1bmN0aW9uKCl7XG5cblx0XHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLmFkZENsYXNzKCdkc2xjYS1tb2R1bGUtY2hhbmdlLW1hZGUnKTtcblxuXHRcdFx0XHRpZiAoIGRzbGNPcHRpb25JRCA9PSAnY3NzX2xvYWRfcHJlc2V0JyAmJiAhIGpRdWVyeSgnYm9keScpLmhhc0NsYXNzKCdkc2xjYS1uZXctcHJlc2V0LWFkZGVkJykgKSB7XG5cblx0XHRcdFx0XHRkc2xjX21vZHVsZV9vcHRpb25zX3Nob3coIGRzbGNNb2R1bGVJRCApO1xuXHRcdFx0XHRcdGpRdWVyeSgnLmRzbGNhLWNvbnRhaW5lci1sb2FkZXInKS5oaWRlKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRqUXVlcnkoJy5kc2xjYS1jb250YWluZXItbG9hZGVyJykuaGlkZSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0alF1ZXJ5KCdib2R5JykucmVtb3ZlQ2xhc3MoJ2RzbGNhLW5ldy1wcmVzZXQtYWRkZWQnKTtcblxuXG5cdFx0XHRcdC8vIFRyaWdnZXIgJ0xDLm1vZHVsZUNoYW5nZScgZXZlbnQuXG5cdFx0XHRcdC8vIFRoaXMgZXZlbnQgY2FuIGJlIHVzZWQgYnkgMy1yZCBwYXJ0eSBkZXZlbG9wZXJzIHRvIHJlLWluaXRcblx0XHRcdFx0Ly8gc29tZSBvZiB0aGUgSmF2YVNjcmlwdCBjb2RlIG9uIG1vZHVyZSByZS1yZW5kZXJpbmcuXG5cdFx0XHRcdExpdmVDb21wb3Nlci5VdGlscy5wdWJsaXNoKCAnTEMubW9kdWxlQ2hhbmdlJywge1xuXHRcdFx0XHRcdG1vZHVsZUlkOiBkc2xjTW9kdWxlSUQsXG5cdFx0XHRcdFx0b3B0aW9uSUQ6IGRzbGNPcHRpb25JRCxcblx0XHRcdFx0XHRvcHRpb25WYWw6IGRzbGNPcHRpb24udmFsKClcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdC8qKlxuXHRcdCAqIFJlZnJlc2ggb24gY2hhbmdlID0gZmFsc2Vcblx0XHQgKlxuXHRcdCAqIERvIG5vdCByZWZyZXNoIGZyb20gdGhlIHNlcnZlciwgYnV0IHVzaW5nIEpTXG5cdFx0ICovXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBMaXZlIFByZXZpZXdcblx0XHRcdCAqL1xuXG5cdFx0XHRpZiAoIGRzbGNPcHRpb24uaGFzQ2xhc3MoJ2RzbGNhLW1vZHVsZS1lZGl0LWZpZWxkLWZvbnQnKSApIHtcblxuXHRcdFx0XHR2YXIgZHNsY0ZvbnRzVG9Mb2FkID0gZHNsY09wdGlvbi52YWwoKTtcblx0XHRcdFx0ZHNsY0ZvbnRzVG9Mb2FkID0gZHNsY0ZvbnRzVG9Mb2FkICsgJzo0MDAsMTAwLDIwMCwzMDAsNTAwLDYwMCw3MDAsODAwLDkwMCc7XG5cblx0XHRcdFx0dmFyIGRzbGNBZmZlY3RPbkNoYW5nZUVsID0gZHNsY09wdGlvbi5kYXRhKCdhZmZlY3Qtb24tY2hhbmdlLWVsJyk7XG5cdFx0XHRcdHZhciBkc2xjQWZmZWN0T25DaGFuZ2VSdWxlID0gZHNsY09wdGlvbi5kYXRhKCdhZmZlY3Qtb24tY2hhbmdlLXJ1bGUnKTtcblx0XHRcdFx0dmFyIGRzbGNBZmZlY3RPbkNoYW5nZVZhbCA9IGRzbGNPcHRpb24udmFsKCk7XG5cdFx0XHRcdHZhciBkc2xjQWZmZWN0T25DaGFuZ2VWYWxPcmlnID0gZHNsY0FmZmVjdE9uQ2hhbmdlVmFsO1xuXHRcdFx0XHR2YXIgbW9kdWxlID0galF1ZXJ5KFwiLmRzbGNhLW1vZHVsZS1iZWluZy1lZGl0ZWRcIiwgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCk7XG5cblx0XHRcdFx0aWYgKCBkc2xjT3B0aW9uLnZhbCgpLmxlbmd0aCAmJiBkc2xjR29vZ2xlRm9udHNBcnJheS5pbmRleE9mKCBkc2xjT3B0aW9uLnZhbCgpICkgIT09IC0xICApIHtcblxuXHRcdFx0XHRcdC8vIENhbGwgV2ViRm9udCBmdW5jdGlvbiBmcm9tIHRoZSBpZnJhbWVcblx0XHRcdFx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFnZS1idWlsZGVyLWZyYW1lJykuY29udGVudFdpbmRvdy5XZWJGb250LmxvYWQoe1xuXHRcdFx0XHRcdFx0XHRnb29nbGU6IHtcblx0XHRcdFx0XHRcdFx0XHRmYW1pbGllczogWyBkc2xjRm9udHNUb0xvYWQgXVxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRhY3RpdmUgOiBmdW5jdGlvbihmYW1pbHlOYW1lLCBmdmQpIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5KCAnLmRzbGNhLWZvbnQtbG9hZGluZycgKS5jbG9zZXN0KCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtZm9udC1uZXh0JykubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoJy5kc2xjYS1mb250LWxvYWRpbmcnKS5yZW1vdmVDbGFzcygnZHNsY2EtZm9udC1sb2FkaW5nJykuZmluZCgnLmRzbGNhLWljb24nKS5yZW1vdmVDbGFzcygnZHNsYy1pY29uLXNwaW4nKS5hZGRDbGFzcygnZHNsYy1pY29uLWNoZXZyb24tcmlnaHQnKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoJy5kc2xjYS1mb250LWxvYWRpbmcnKS5yZW1vdmVDbGFzcygnZHNsY2EtZm9udC1sb2FkaW5nJykuZmluZCgnLmRzbGNhLWljb24nKS5yZW1vdmVDbGFzcygnZHNsYy1pY29uLXNwaW4nKS5hZGRDbGFzcygnZHNsYy1pY29uLWNoZXZyb24tbGVmdCcpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdHZhciBlbGVtcyA9IGRzbGNBZmZlY3RPbkNoYW5nZUVsLnNwbGl0KCcsJyk7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHN0eWxlQ29udGVudCA9IFwiI1wiICsgbW9kdWxlWzBdLmlkICsgXCIgXCIgKyBlbGVtcy5qb2luKFwiLCAjXCIgKyBtb2R1bGVbMF0uaWQgKyBcIiBcIikgKyBcIiB7XCIgKyBkc2xjQWZmZWN0T25DaGFuZ2VSdWxlICsgXCI6IFwiICsgZHNsY0FmZmVjdE9uQ2hhbmdlVmFsICsgXCJ9XCI7XG5cblx0XHRcdFx0XHRcdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5IZWxwZXJzLnByb2Nlc3NJbmxpbmVTdHlsZVRhZyh7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGNvbnRleHQ6IGRzbGNPcHRpb24sXG5cdFx0XHRcdFx0XHRcdFx0XHRydWxlOiBkc2xjQWZmZWN0T25DaGFuZ2VSdWxlLFxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbXM6IGRzbGNBZmZlY3RPbkNoYW5nZUVsLFxuXHRcdFx0XHRcdFx0XHRcdFx0c3R5bGVDb250ZW50OiBzdHlsZUNvbnRlbnRcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0aW5hY3RpdmUgOiBmdW5jdGlvbiAoIGZhbWlseU5hbWUsIGZ2ZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5KCAnLmRzbGNhLWZvbnQtbG9hZGluZycgKS5jbG9zZXN0KCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtZm9udC1uZXh0JykubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoJy5kc2xjYS1mb250LWxvYWRpbmcnKS5yZW1vdmVDbGFzcygnZHNsY2EtZm9udC1sb2FkaW5nJykuZmluZCgnLmRzbGNhLWljb24nKS5yZW1vdmVDbGFzcygnZHNsYy1pY29uLXNwaW4nKS5hZGRDbGFzcygnZHNsYy1pY29uLWNoZXZyb24tcmlnaHQnKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoJy5kc2xjYS1mb250LWxvYWRpbmcnKS5yZW1vdmVDbGFzcygnZHNsY2EtZm9udC1sb2FkaW5nJykuZmluZCgnLmRzbGNhLWljb24nKS5yZW1vdmVDbGFzcygnZHNsYy1pY29uLXNwaW4nKS5hZGRDbGFzcygnZHNsYy1pY29uLWNoZXZyb24tbGVmdCcpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uKCl7XG5cblx0XHRcdFx0XHRcdGlmICggalF1ZXJ5KCAnLmRzbGNhLWZvbnQtbG9hZGluZy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZC1mb250LW5leHQnICkubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0XHRcdGpRdWVyeSgnLmRzbGNhLWZvbnQtbG9hZGluZycpLnJlbW92ZUNsYXNzKCdkc2xjYS1mb250LWxvYWRpbmcnKS5maW5kKCcuZHNsY2EtaWNvbicpLnJlbW92ZUNsYXNzKCdkc2xjLWljb24tc3BpbicpLmFkZENsYXNzKCdkc2xjLWljb24tY2hldnJvbi1yaWdodCcpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRqUXVlcnkoJy5kc2xjYS1mb250LWxvYWRpbmcnKS5yZW1vdmVDbGFzcygnZHNsY2EtZm9udC1sb2FkaW5nJykuZmluZCgnLmRzbGNhLWljb24nKS5yZW1vdmVDbGFzcygnZHNsYy1pY29uLXNwaW4nKS5hZGRDbGFzcygnZHNsYy1pY29uLWNoZXZyb24tbGVmdCcpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR2YXIgZWxlbXMgPSBkc2xjQWZmZWN0T25DaGFuZ2VFbC5zcGxpdCgnLCcpO1xuXHRcdFx0XHRcdFx0dmFyIHN0eWxlQ29udGVudCA9IFwiI1wiICsgbW9kdWxlWzBdLmlkICsgXCIgXCIgKyBlbGVtcy5qb2luKFwiLCAjXCIgKyBtb2R1bGVbMF0uaWQgKyBcIiBcIikgKyBcIiB7XCIgKyBkc2xjQWZmZWN0T25DaGFuZ2VSdWxlICsgXCI6IFwiICsgZHNsY0FmZmVjdE9uQ2hhbmdlVmFsICsgXCJ9XCI7XG5cblx0XHRcdFx0XHRcdExpdmVDb21wb3Nlci5CdWlsZGVyLkhlbHBlcnMucHJvY2Vzc0lubGluZVN0eWxlVGFnKHtcblxuXHRcdFx0XHRcdFx0XHRjb250ZXh0OiBkc2xjT3B0aW9uLFxuXHRcdFx0XHRcdFx0XHRydWxlOiBkc2xjQWZmZWN0T25DaGFuZ2VSdWxlLFxuXHRcdFx0XHRcdFx0XHRlbGVtczogZHNsY0FmZmVjdE9uQ2hhbmdlRWwsXG5cdFx0XHRcdFx0XHRcdHN0eWxlQ29udGVudDogc3R5bGVDb250ZW50XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9LCAxMDApO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQ2hlY2tib3hcblx0XHRcdCAqL1xuXHRcdFx0fSBlbHNlIGlmICggZHNsY09wdGlvbi5oYXNDbGFzcygnZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtY2hlY2tib3gnKSApIHtcblxuXHRcdFx0XHR2YXIgZHNsY09wdGlvbkNob2ljZXMgPSBqUXVlcnkoJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXScsIGRzbGNPcHRpb25XcmFwKTtcblxuXHRcdFx0XHRkc2xjT3B0aW9uQ2hvaWNlcy5lYWNoKGZ1bmN0aW9uKCl7XG5cblx0XHRcdFx0XHQvKlxuXHRcdFx0XHRcdEB0b2RvIFRoaXMgZnVuY3Rpb24gaXMgc3BlY2lmaWMgdG8gYm9yZGVycy4gTmVlZHMgcmV2aWV3LlxuXHRcdFx0XHRcdCAqL1xuXG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkodGhpcykucHJvcCgnY2hlY2tlZCcpICkge1xuXG5cdFx0XHRcdFx0XHRkc2xjT3B0aW9uVmFsdWUgPSBkc2xjT3B0aW9uVmFsdWUgKyAnc29saWQgJztcblx0XHRcdFx0XHRcdGRzbGNPcHRpb25WYWx1ZU9yaWcgPSBkc2xjT3B0aW9uVmFsdWVPcmlnICsgalF1ZXJ5KHRoaXMpLnZhbCgpICsgJyAnO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGRzbGNPcHRpb25WYWx1ZSA9IGRzbGNPcHRpb25WYWx1ZSArICdub25lICc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHQvLyBIZXJlIGRzbGNPcHRpb25WYWx1ZSB3aWxsIGxvb2sgbGlrZTogbm9uZSBub25lIG5vbmUgc29saWQuXG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQWxsIG90aGVyIG9wdGlvbiB0eXBlc1xuXHRcdFx0ICovXG5cdFx0XHRpZiAoICEgZHNsY09wdGlvbi5oYXNDbGFzcygnZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtZm9udCcpICYmXG5cdFx0XHRcdFx0ZHNsY09wdGlvbi5kYXRhKCdhZmZlY3Qtb24tY2hhbmdlLWVsJykgIT0gbnVsbCAmJlxuXHRcdFx0XHRcdGRzbGNPcHRpb24uZGF0YSgnYWZmZWN0LW9uLWNoYW5nZS1ydWxlJykgIT0gbnVsbFxuXHRcdFx0XHRcdCApIHtcblxuXHRcdFx0XHR2YXIgZHNsY0V4dCA9IGRzbGNPcHRpb24uZGF0YSgnZXh0JykgfHwgJyc7XG5cdFx0XHRcdHZhciBkc2xjQWZmZWN0T25DaGFuZ2VFbCA9IGRzbGNPcHRpb24uZGF0YSgnYWZmZWN0LW9uLWNoYW5nZS1lbCcpO1xuXHRcdFx0XHR2YXIgZHNsY0FmZmVjdE9uQ2hhbmdlUnVsZSA9IGRzbGNPcHRpb24uZGF0YSgnYWZmZWN0LW9uLWNoYW5nZS1ydWxlJyk7XG5cdFx0XHRcdHZhciBkc2xjQWZmZWN0T25DaGFuZ2VWYWwgPSBkc2xjT3B0aW9uLnZhbCgpO1xuXHRcdFx0XHR2YXIgZHNsY0FmZmVjdE9uQ2hhbmdlVmFsT3JpZyA9IGRzbGNBZmZlY3RPbkNoYW5nZVZhbDtcblxuXHRcdFx0XHRpZiAoIGRzbGNPcHRpb24uaGFzQ2xhc3MoJ2RzbGNhLW1vZHVsZS1lZGl0LWZpZWxkLWNoZWNrYm94JykgKSB7XG5cblx0XHRcdFx0XHRkc2xjQWZmZWN0T25DaGFuZ2VWYWwgPSBkc2xjT3B0aW9uVmFsdWU7XG5cdFx0XHRcdFx0ZHNsY0FmZmVjdE9uQ2hhbmdlVmFsT3JpZyA9IGRzbGNPcHRpb25WYWx1ZU9yaWc7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGRzbGNPcHRpb24uaGFzQ2xhc3MoJ2RzbGNhLW1vZHVsZS1lZGl0LWZpZWxkLWltYWdlJykgKSB7XG5cblx0XHRcdFx0XHRkc2xjQWZmZWN0T25DaGFuZ2VWYWwgPSAndXJsKFwiJyArIGRzbGNBZmZlY3RPbkNoYW5nZVZhbCArICdcIiknO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCAoIG51bGwgIT09IGRzbGNBZmZlY3RPbkNoYW5nZVZhbCAmJiBkc2xjQWZmZWN0T25DaGFuZ2VWYWwubGVuZ3RoIDwgMSApICYmICggZHNsY0FmZmVjdE9uQ2hhbmdlUnVsZSA9PSAnYmFja2dyb3VuZC1jb2xvcicgfHwgZHNsY0FmZmVjdE9uQ2hhbmdlUnVsZSA9PSAnYmFja2dyb3VuZCcgKSApIHtcblxuXHRcdFx0XHRcdGRzbGNBZmZlY3RPbkNoYW5nZVZhbCA9ICd0cmFuc3BhcmVudCc7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkc2xjQWZmZWN0T25DaGFuZ2VSdWxlLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbihydWxlKXtcblxuXHRcdFx0XHRcdHJ1bGUgPSBydWxlLnJlcGxhY2UoL1xccysvZywgJycpO1xuXG5cdFx0XHRcdFx0dmFyIG1vZHVsZSA9IGpRdWVyeShcIi5kc2xjYS1tb2R1bGUtYmVpbmctZWRpdGVkXCIsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpO1xuXG5cdFx0XHRcdFx0dmFyIGVsZW1zID0gZHNsY0FmZmVjdE9uQ2hhbmdlRWwuc3BsaXQoJywnKTtcblx0XHRcdFx0XHR2YXIgc3R5bGVDb250ZW50ID0gXCIjXCIgKyBtb2R1bGVbMF0uaWQgKyBcIiBcIiArIGVsZW1zLmpvaW4oXCIsICNcIiArIG1vZHVsZVswXS5pZCArIFwiIFwiKSArIFwiIHtcIiArIHJ1bGUgKyBcIjogXCIgKyBkc2xjQWZmZWN0T25DaGFuZ2VWYWwgKyBkc2xjRXh0ICsgXCJ9XCI7XG5cblx0XHRcdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5IZWxwZXJzLnByb2Nlc3NJbmxpbmVTdHlsZVRhZyh7XG5cblx0XHRcdFx0XHRcdGNvbnRleHQ6IGRzbGNPcHRpb24sXG5cdFx0XHRcdFx0XHRydWxlOiBydWxlLFxuXHRcdFx0XHRcdFx0ZWxlbXM6IGRzbGNBZmZlY3RPbkNoYW5nZUVsLFxuXHRcdFx0XHRcdFx0c3R5bGVDb250ZW50OiBzdHlsZUNvbnRlbnRcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogVXBkYXRlIG9wdGlvblxuXHRcdFx0ICovXG5cblx0XHRcdHZhciBkc2xjT3B0aW9uVG9BcHBseSA9ICcnO1xuXG5cdFx0XHQvLyBEbyB3ZSB3b3JrIHdpdGggQ1NTIGNvbnRyb2wgb3IgbW9kdWxlIHByb3BlcnR5P1xuXHRcdFx0aWYgKCBkc2xjT3B0aW9uSUQuaW5kZXhPZignY3NzXycpICE9PSAtMSApIHtcblx0XHRcdFx0Ly8gQXBwbHkgQ1NTIHByb3BlcnR5LlxuXHRcdFx0XHRkc2xjT3B0aW9uVG9BcHBseSA9IGRzbGNBZmZlY3RPbkNoYW5nZVZhbE9yaWc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBBcHBseSBtb2R1bGUgcHJvcGVydHkuXG5cdFx0XHRcdGRzbGNPcHRpb25Ub0FwcGx5ID0gZHNsY09wdGlvbi52YWwoKTtcblx0XHRcdH1cblxuXHRcdFx0alF1ZXJ5KCAnLmRzbGNhLW1vZHVsZS1vcHRpb24tZnJvbnRbZGF0YS1pZD1cIicgKyBkc2xjT3B0aW9uSUQgKyAnXCJdJywgZHNsY01vZHVsZSApLnZhbCggZHNsY09wdGlvblRvQXBwbHkgKTtcblxuXHRcdFx0Ly8gVHJpZ2dlciAnTEMubW9kdWxlQ2hhbmdlJyBldmVudC5cblx0XHRcdC8vIFRoaXMgZXZlbnQgY2FuIGJlIHVzZWQgYnkgMy1yZCBwYXJ0eSBkZXZlbG9wZXJzIHRvIHJlLWluaXRcblx0XHRcdC8vIHNvbWUgb2YgdGhlIEphdmFTY3JpcHQgY29kZSBvbiBtb2R1cmUgcmUtcmVuZGVyaW5nLlxuXHRcdFx0TGl2ZUNvbXBvc2VyLlV0aWxzLnB1Ymxpc2goICdMQy5tb2R1bGVDaGFuZ2UnLCB7XG5cblx0XHRcdFx0bW9kdWxlSWQ6IGRzbGNNb2R1bGVbMF0uaWQsXG5cdFx0XHRcdG9wdGlvbklEOiBkc2xjT3B0aW9uSUQsXG5cdFx0XHRcdG9wdGlvblZhbDogZHNsY0FmZmVjdE9uQ2hhbmdlVmFsT3JpZyB8fCBkc2xjT3B0aW9uLnZhbCgpXG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xufVxuXG5jb25zdCBvblNlY3Rpb25PcHRpb25zQ2hhbmdlID0gKCkgPT4ge1xuXHQvLyBST1cgc3R5bGluZyBvcHRpb24gY2hhbmdlc1xuXHRqUXVlcnkoZG9jdW1lbnQpLm9uKCAnY2hhbmdlJywgJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1maWVsZCcsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBkc2xjRmllbGQsIGRzbGNGaWVsZElELCBkc2xjRWwsIGRzbGNNb2R1bGVzU2VjdGlvbiwgZHNsY1ZhbCwgZHNsY1ZhbFJlYWwsIGRzbGNWYWxFeHQsIGRzbGNSdWxlLCBkc2xjU2V0dGluZywgZHNsY1RhcmdldEVsLCBkc2xjSW1nVVJMO1xuXG5cdFx0ZHNsY0ZpZWxkID0galF1ZXJ5KHRoaXMpO1xuXHRcdGRzbGNGaWVsZElEID0gZHNsY0ZpZWxkLmRhdGEoJ2lkJyk7XG5cdFx0ZHNsY1ZhbCA9IGRzbGNGaWVsZC52YWwoKTtcblx0XHRkc2xjVmFsUmVhbCA9IGRzbGNWYWw7XG5cdFx0ZHNsY1ZhbEV4dCA9IGRzbGNWYWwgKyBkc2xjRmllbGQuZGF0YSgnZXh0Jyk7XG5cdFx0ZHNsY1J1bGUgPSBkc2xjRmllbGQuZGF0YSgnY3NzLXJ1bGUnKTtcblxuXHRcdGRzbGNFbCA9IGpRdWVyeSgnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1iZWluZy1lZGl0ZWQnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KTsgLy8gQ3VycmVudGx5IGVkaXRpbmcgZWxlbWVudFxuXHRcdGRzbGNUYXJnZXRFbCA9IGRzbGNFbDtcblx0XHRkc2xjU2V0dGluZyA9IGpRdWVyeSgnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1zZXR0aW5ncyBpbnB1dFtkYXRhLWlkPVwiJyArIGRzbGNGaWVsZElEICsgJ1wiXScsIGRzbGNFbCApO1xuXG5cdFx0ZHNsY0VsLmFkZENsYXNzKCdkc2xjYS1tb2R1bGVzLXNlY3Rpb24tY2hhbmdlLW1hZGUnKTtcblxuXHRcdC8vIElmIGltYWdlL3VwbG9hZCBmaWVsZCBhbHRlciB0aGUgdmFsdWUgKCB1c2UgZnJvbSBkYXRhIClcblx0XHRpZiAoIGRzbGNGaWVsZC5oYXNDbGFzcygnZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWVkaXQtZmllbGQtdXBsb2FkJykgKSB7XG5cblx0XHRcdGlmICggZHNsY1ZhbCAmJiBkc2xjVmFsLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyBkc2xjVmFsID0gZHNsY0ZpZWxkLmRhdGEoJ2RzbGNhLWltZy11cmwnKTtcblx0XHRcdFx0ZHNsY1ZhbCA9IGpRdWVyeSgnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1zZXR0aW5ncyBpbnB1dFtkYXRhLWlkPVwiZHNsY2EtaW1nLXVybFwiXScsIGRzbGNFbCApLnZhbCgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZHNsY1J1bGUgPT0gJ2JhY2tncm91bmQtaW1hZ2UnICkge1xuXG5cdFx0XHRkc2xjVmFsID0gJ3VybChcIicgKyBkc2xjVmFsICsgJ1wiKSc7XG5cdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5kc2xjX2JnX3ZpZGVvKCk7XG5cdFx0fVxuXG5cdFx0aWYgKCBkc2xjRmllbGRJRCA9PSAnYmdfaW1hZ2VfYXR0YWNobWVudCcgKSB7XG5cblx0XHRcdGRzbGNFbC5yZW1vdmVDbGFzcygnZHNsYy1pbml0LXBhcmFsbGF4Jyk7XG5cdFx0fVxuXG5cdFx0aWYgKCBkc2xjRmllbGRJRCA9PSAnYm9yZGVyLXRvcCcgfHxcblx0XHRcdGRzbGNGaWVsZElEID09ICdib3JkZXItcmlnaHQnIHx8XG5cdFx0XHRkc2xjRmllbGRJRCA9PSAnYm9yZGVyLWJvdHRvbScgfHxcblx0XHRcdGRzbGNGaWVsZElEID09ICdib3JkZXItbGVmdCcgKSB7XG5cblx0XHRcdHZhciBkc2xjQm9yZGVyU3R5bGUgPSBqUXVlcnkoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tc2V0dGluZ3MgaW5wdXRbZGF0YS1pZD1cImJvcmRlcl9zdHlsZVwiXScpLnZhbCgpO1xuXHRcdFx0ZHNsY1NldHRpbmcgPSBqUXVlcnkoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tc2V0dGluZ3MgaW5wdXRbZGF0YS1pZD1cImJvcmRlclwiXScsIGRzbGNFbCApO1xuXG5cdFx0XHRkc2xjVmFsUmVhbCA9ICcnO1xuXG5cdFx0XHR2YXIgZHNsY0NoZWNib3hlc1dyYXAgPSBkc2xjRmllbGQuY2xvc2VzdCgnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1lZGl0LW9wdGlvbi1jaGVja2JveC13cmFwcGVyJyk7XG5cdFx0XHRkc2xjQ2hlY2JveGVzV3JhcC5maW5kKCcuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWVkaXQtZmllbGQtY2hlY2tib3gnKS5lYWNoKGZ1bmN0aW9uKCl7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkodGhpcykuaXMoJzpjaGVja2VkJykgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGpRdWVyeSh0aGlzKS5kYXRhKCdpZCcpID09ICdib3JkZXItdG9wJyApIHtcblxuXHRcdFx0XHRcdFx0ZHNsY1ZhbFJlYWwgKz0gJ3RvcCAnO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGpRdWVyeSh0aGlzKS5kYXRhKCdpZCcpID09ICdib3JkZXItcmlnaHQnICkge1xuXG5cdFx0XHRcdFx0XHRkc2xjVmFsUmVhbCArPSAncmlnaHQgJztcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBqUXVlcnkodGhpcykuZGF0YSgnaWQnKSA9PSAnYm9yZGVyLWJvdHRvbScgKSB7XG5cblx0XHRcdFx0XHRcdGRzbGNWYWxSZWFsICs9ICdib3R0b20gJztcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBqUXVlcnkodGhpcykuZGF0YSgnaWQnKSA9PSAnYm9yZGVyLWxlZnQnICkge1xuXG5cdFx0XHRcdFx0XHRkc2xjVmFsUmVhbCArPSAnbGVmdCAnO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGlmICggZHNsY0ZpZWxkLmlzKCc6Y2hlY2tlZCcpICkge1xuXG5cdFx0XHRcdGlmICggZHNsY0ZpZWxkLmRhdGEoJ2lkJykgPT0gJ2JvcmRlci10b3AnICkge1xuXG5cdFx0XHRcdFx0ZHNsY0VsLmNzcyh7ICdib3JkZXItdG9wLXN0eWxlJyA6IGRzbGNCb3JkZXJTdHlsZSB9KTtcblx0XHRcdFx0fSBlbHNlIGlmICggZHNsY0ZpZWxkLmRhdGEoJ2lkJykgPT0gJ2JvcmRlci1yaWdodCcgKSB7XG5cblx0XHRcdFx0XHRkc2xjRWwuY3NzKHsgJ2JvcmRlci1yaWdodC1zdHlsZScgOiBkc2xjQm9yZGVyU3R5bGUgfSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIGRzbGNGaWVsZC5kYXRhKCdpZCcpID09ICdib3JkZXItYm90dG9tJyApIHtcblxuXHRcdFx0XHRcdGRzbGNFbC5jc3MoeyAnYm9yZGVyLWJvdHRvbS1zdHlsZScgOiBkc2xjQm9yZGVyU3R5bGUgfSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIGRzbGNGaWVsZC5kYXRhKCdpZCcpID09ICdib3JkZXItbGVmdCcgKSB7XG5cblx0XHRcdFx0XHRkc2xjRWwuY3NzKHsgJ2JvcmRlci1sZWZ0LXN0eWxlJyA6IGRzbGNCb3JkZXJTdHlsZSB9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICggZHNsY0ZpZWxkLmRhdGEoJ2lkJykgPT0gJ2JvcmRlci10b3AnICkge1xuXG5cdFx0XHRcdFx0ZHNsY0VsLmNzcyh7ICdib3JkZXItdG9wLXN0eWxlJyA6ICdoaWRkZW4nIH0pO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBkc2xjRmllbGQuZGF0YSgnaWQnKSA9PSAnYm9yZGVyLXJpZ2h0JyApIHtcblxuXHRcdFx0XHRcdGRzbGNFbC5jc3MoeyAnYm9yZGVyLXJpZ2h0LXN0eWxlJyA6ICdoaWRkZW4nIH0pO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBkc2xjRmllbGQuZGF0YSgnaWQnKSA9PSAnYm9yZGVyLWJvdHRvbScgKSB7XG5cblx0XHRcdFx0XHRkc2xjRWwuY3NzKHsgJ2JvcmRlci1ib3R0b20tc3R5bGUnIDogJ2hpZGRlbicgfSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIGRzbGNGaWVsZC5kYXRhKCdpZCcpID09ICdib3JkZXItbGVmdCcgKSB7XG5cblx0XHRcdFx0XHRkc2xjRWwuY3NzKHsgJ2JvcmRlci1sZWZ0LXN0eWxlJyA6ICdoaWRkZW4nIH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICggZHNsY0ZpZWxkLmhhc0NsYXNzKCAnZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWVkaXQtZmllbGQtY2hlY2tib3gnICkgKSB7XG5cblx0XHRcdHZhciBjaGVja2JveGVzID0galF1ZXJ5KHRoaXMpLmNsb3Nlc3QoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1vcHRpb24tY2hlY2tib3gtd3JhcHBlcicpLmZpbmQoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1maWVsZC1jaGVja2JveCcpO1xuXHRcdFx0dmFyIGNoZWNrYm94ZXNWYWwgPSAnJztcblx0XHRcdGNoZWNrYm94ZXMuZWFjaChmdW5jdGlvbigpe1xuXG5cdFx0XHRcdGlmICggalF1ZXJ5KHRoaXMpLnByb3AoJ2NoZWNrZWQnKSApIHtcblxuXHRcdFx0XHRcdGNoZWNrYm94ZXNWYWwgKz0galF1ZXJ5KHRoaXMpLmRhdGEoJ3ZhbCcpICsgJyAnO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0dmFyIGRzbGNWYWxSZWFsID0gY2hlY2tib3hlc1ZhbDtcblxuXHRcdFx0LyogU2hvdyBPbiAqL1xuXHRcdFx0aWYgKCBkc2xjRmllbGQuZGF0YSgnaWQnKSA9PSAnc2hvd19vbicgKSB7XG5cblx0XHRcdFx0aWYgKCBjaGVja2JveGVzVmFsLmluZGV4T2YoICdkZXNrdG9wJyApICE9PSAtMSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1iZWluZy1lZGl0ZWQnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5yZW1vdmVDbGFzcygnZHNsYy1oaWRlLW9uLWRlc2t0b3AnKTtcblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1iZWluZy1lZGl0ZWQnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5hZGRDbGFzcygnZHNsYy1oaWRlLW9uLWRlc2t0b3AnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggY2hlY2tib3hlc1ZhbC5pbmRleE9mKCAndGFibGV0JyApICE9PSAtMSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1iZWluZy1lZGl0ZWQnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5yZW1vdmVDbGFzcygnZHNsYy1oaWRlLW9uLXRhYmxldCcpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWJlaW5nLWVkaXRlZCcsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLmFkZENsYXNzKCdkc2xjLWhpZGUtb24tdGFibGV0Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGNoZWNrYm94ZXNWYWwuaW5kZXhPZiggJ3Bob25lJyApICE9PSAtMSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1iZWluZy1lZGl0ZWQnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5yZW1vdmVDbGFzcygnZHNsYy1oaWRlLW9uLXBob25lJyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tYmVpbmctZWRpdGVkJywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkuYWRkQ2xhc3MoJ2RzbGMtaGlkZS1vbi1waG9uZScpO1xuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIGRzbGNGaWVsZElEID09ICdiZ19pbWFnZV9hdHRhY2htZW50JyAmJiBkc2xjVmFsID09ICdwYXJhbGxheCcgKSB7XG5cdFx0XHRkc2xjRWwuYWRkQ2xhc3MoICdkc2xjLWluaXQtcGFyYWxsYXgnICk7XG5cdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5kc2xjX3BhcmFsbGF4KCk7XG5cdFx0fSBlbHNlIGlmICggZHNsY0ZpZWxkSUQgPT0gJ3R5cGUnICkge1xuXHRcdFx0aWYgKCBkc2xjVmFsID09ICdmdWxsJyApIHtcblx0XHRcdFx0ZHNsY0VsLmFkZENsYXNzKCdkc2xjLWZ1bGwnKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRzbGNFbC5yZW1vdmVDbGFzcygnZHNsYy1mdWxsJyk7XG5cdFx0XHR9XG5cdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5kc2xjX21hc29ucnkoKTtcblx0XHR9IGVsc2UgaWYgKCBkc2xjRmllbGRJRCA9PSAnY29sdW1uc19zcGFjaW5nJyApIHtcblxuXHRcdFx0aWYgKCBkc2xjVmFsID09ICdub3NwYWNpbmcnICkge1xuXG5cdFx0XHRcdGRzbGNFbC5hZGRDbGFzcygnZHNsYy1uby1jb2x1bW5zLXNwYWNpbmcnKTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZHNsY0VsLnJlbW92ZUNsYXNzKCdkc2xjLW5vLWNvbHVtbnMtc3BhY2luZycpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoIGRzbGNGaWVsZElEID09ICdjdXN0b21fY2xhc3MnICkge1xuXG5cdFx0fSBlbHNlIGlmICggZHNsY0ZpZWxkSUQgPT0gJ2N1c3RvbV9pZCcgKSB7XG5cblx0XHR9IGVsc2UgaWYgKCBkc2xjRmllbGRJRCA9PSAnYmdfdmlkZW8nICkge1xuXG5cdFx0XHRqUXVlcnkoJy5kc2xjLWJnLXZpZGVvIHZpZGVvJywgZHNsY0VsKS5yZW1vdmUoKTtcblxuXHRcdFx0aWYgKCBkc2xjVmFsICYmIGRzbGNWYWwubGVuZ3RoICkge1xuXG5cdFx0XHRcdHZhciBkc2xjVmlkZW9WYWwgPSBkc2xjVmFsO1xuXHRcdFx0XHRkc2xjVmlkZW9WYWwgPSBkc2xjVmlkZW9WYWwucmVwbGFjZSggJy53ZWJtJywgJycgKTtcblx0XHRcdFx0ZHNsY1ZpZGVvVmFsID0gZHNsY1ZpZGVvVmFsLnJlcGxhY2UoICcubXA0JywgJycgKTtcblx0XHRcdFx0alF1ZXJ5KCcuZHNsYy1iZy12aWRlby1pbm5lcicsIGRzbGNFbCkuaHRtbCgnPHZpZGVvPjxzb3VyY2UgdHlwZT1cInZpZGVvL21wNFwiIHNyYz1cIicgKyBkc2xjVmlkZW9WYWwgKyAnLm1wNFwiIC8+PHNvdXJjZSB0eXBlPVwidmlkZW8vd2VibVwiIHNyYz1cIicgKyBkc2xjVmlkZW9WYWwgKyAnLndlYm1cIiAvPjwvdmlkZW8+Jyk7XG5cdFx0XHRcdExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhV2luZG93LmRzbGNfYmdfdmlkZW8oKTtcblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIGRzbGNGaWVsZElEID09ICdiZ19pbWFnZV90aHVtYicgKSB7XG5cblx0XHRcdGlmICggZHNsY1ZhbFJlYWwgPT0gJ2VuYWJsZWQnICkge1xuXG5cdFx0XHRcdGlmICggalF1ZXJ5KCcjZHNsY2EtcG9zdC1kYXRhLXRodW1iJykubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0dmFyIGRzbGNUaHVtYlVSTCA9IFwidXJsKCdcIiArIGpRdWVyeSgnI2RzbGNhLXBvc3QtZGF0YS10aHVtYicpLnZhbCgpICsgXCInKVwiO1xuXHRcdFx0XHRcdGRzbGNUYXJnZXRFbC5jc3MoZHNsY1J1bGUsIGRzbGNUaHVtYlVSTCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIGRzbGNWYWxSZWFsID09ICdkaXNhYmxlZCcgKSB7XG5cblx0XHRcdFx0ZHNsY1RhcmdldEVsLmNzcyhkc2xjUnVsZSwgJ25vbmUnICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBkc2xjRmllbGQuZGF0YSgnY3NzLWVsZW1lbnQnKSApIHtcblxuXHRcdFx0XHRkc2xjVGFyZ2V0RWwgPSBqUXVlcnkoIGRzbGNGaWVsZC5kYXRhKCdjc3MtZWxlbWVudCcpLCBkc2xjRWwgKTtcblx0XHRcdH1cblxuXHRcdFx0ZHNsY1J1bGUgPSBkc2xjUnVsZS5yZXBsYWNlKC8gL2csJycpLnNwbGl0KCAnLCcgKTtcblx0XHRcdHZhciBkc2xjVmFsVG9BcHBseTtcblxuXHRcdFx0aWYgKCBudWxsICE9IGRzbGNGaWVsZC5kYXRhKCdleHQnKSApIHtcblx0XHRcdFx0ZHNsY1ZhbFRvQXBwbHkgPSBkc2xjVmFsRXh0O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZHNsY1ZhbFRvQXBwbHkgPSBkc2xjVmFsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29wIHRocm91Z2ggcnVsZXMgKHVzZWZ1bCB3aGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBydWxlcylcblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGRzbGNSdWxlLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRkc2xjVGFyZ2V0RWwuY3NzKGRzbGNSdWxlW2ldLCBkc2xjVmFsVG9BcHBseSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gVXBkYXRlIGhpZGRlbiBpbnB1dCB3aXRoIG5ldyB2YWx1ZVxuXHRcdGRzbGNTZXR0aW5nLnZhbCggZHNsY1ZhbFJlYWwgKTtcblxuXHRcdGlmICggISBMaXZlQ29tcG9zZXIuQnVpbGRlci5GbGFncy5nZW5lcmF0ZV9jb2RlX2FmdGVyX3Jvd19jaGFuZ2VkICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0Ly8gd2luZG93LmRzbGNfZ2VuZXJhdGVfY29kZSgpO1xuXHRcdC8vIHdpbmRvdy5kc2xjX3Nob3dfcHVibGlzaF9idXR0b24oKTtcblx0fSk7XG59XG5cbmNvbnN0IG9uRmlsZVVwbG9hZE9wdGlvbnNDaGFuZ2UgPSAoKSA9PiB7XG5cdC8vIFVwbG9hZGluZyBmaWxlc1xuXHR2YXIgZmlsZV9mcmFtZTtcblxuXHRqUXVlcnkoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtaW1hZ2UtYWRkLWhvb2ssIC5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1maWVsZC1pbWFnZS1hZGQtaG9vaycsIGZ1bmN0aW9uKCl7XG5cblx0XHR2YXIgaG9vayA9IGpRdWVyeSh0aGlzKTtcblxuXHRcdGlmICggaG9vay5oYXNDbGFzcyggJ2RzbGNhLW1vZHVsZS1lZGl0LWZpZWxkLWltYWdlLWFkZC1ob29rJyApICkge1xuXG5cdFx0XHR2YXIgZmllbGQgPSBob29rLnNpYmxpbmdzKCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtaW1hZ2UnKTtcblx0XHRcdHZhciByZW1vdmVIb29rID0gaG9vay5zaWJsaW5ncygnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkLWltYWdlLXJlbW92ZS1ob29rJyk7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmFyIGZpZWxkID0gaG9vay5zaWJsaW5ncygnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1lZGl0LWZpZWxkLXVwbG9hZCcpO1xuXHRcdFx0dmFyIHJlbW92ZUhvb2sgPSBob29rLnNpYmxpbmdzKCcuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWVkaXQtZmllbGQtaW1hZ2UtcmVtb3ZlLWhvb2snKTtcblx0XHR9XG5cblx0XHQvLyBXaGV0aGVyIG9yIG5vdCBtdWx0aXBsZSBmaWxlcyBhcmUgYWxsb3dlZFxuXHRcdHZhciBtdWx0aXBsZSA9IGZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRoZSBtZWRpYSBmcmFtZS5cblx0XHRmaWxlX2ZyYW1lID0gd3AubWVkaWEuZnJhbWVzLmZpbGVfZnJhbWUgPSB3cC5tZWRpYSh7XG5cdFx0XHR0aXRsZTogJ0Nob29zZSBJbWFnZScsXG5cdFx0XHRidXR0b246IHtcblx0XHRcdFx0dGV4dDogJ0NvbmZpcm0nLFxuXHRcdFx0fSxcblx0XHRcdG11bHRpcGxlOiBtdWx0aXBsZVxuXHRcdH0pO1xuXG5cdFx0Ly8gV2hlbiBhbiBpbWFnZSBpcyBzZWxlY3RlZCwgcnVuIGEgY2FsbGJhY2suXG5cdFx0ZmlsZV9mcmFtZS5vbiggJ3NlbGVjdCcsIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgYXR0YWNobWVudCA9IGZpbGVfZnJhbWUuc3RhdGUoKS5nZXQoJ3NlbGVjdGlvbicpLmZpcnN0KCkudG9KU09OKCk7XG5cdFx0XHQvKlxuXHRcdFx0U2F2ZSBpbWFnZSBJRCBhcyB2YWx1ZSBvZiB0aGUgaW1hZ2UgaW5wdXQuXG5cdFx0XHQgKi9cblx0XHRcdC8vIGZpZWxkLnZhbCggYXR0YWNobWVudC5pZCApLmRhdGEoICdkc2xjYS1pbWctdXJsJywgYXR0YWNobWVudC51cmwgKS50cmlnZ2VyKCdjaGFuZ2UnKTsgLSBwcmV2aW91cyB2ZXJzaW9uXG5cdFx0XHRmaWVsZC52YWwoIGF0dGFjaG1lbnQuaWQgKTtcblxuXHRcdFx0dmFyIGRhdGFJZCA9IGhvb2sucGFyZW50KCkuYXR0cihcImRhdGEtaWRcIik7XG5cblx0XHRcdC8qXG5cdFx0XHRTYXZlIGFsdCBhcyB2YWx1ZSBvZiB0aGUgaW1hZ2UgaW5wdXQuXG5cdFx0XHQgKi9cblx0XHRcdGlmICggYXR0YWNobWVudC5hbHQgIT0gJycgJiYgZGF0YUlkID09ICdpbWFnZScgKSB7XG5cdFx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbi1pbWFnZV9hbHQgaW5wdXRbZGF0YS1pZD1cImltYWdlX2FsdFwiXScpLnZhbCggYXR0YWNobWVudC5hbHQgKTtcblx0XHRcdH1cblxuXHRcdFx0Lypcblx0XHRcdFNhdmUgYWx0IGFzIHZhbHVlIG9mIHRoZSBpbWFnZSBpbnB1dC5cblx0XHRcdCAqL1xuXHRcdFx0aWYgKCBhdHRhY2htZW50LnRpdGxlICE9ICcnICYmIGRhdGFJZCA9PSAnaW1hZ2UnICkge1xuXHRcdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24taW1hZ2VfdGl0bGUgaW5wdXRbZGF0YS1pZD1cImltYWdlX3RpdGxlXCJdJykudmFsKCBhdHRhY2htZW50LnRpdGxlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qXG5cdFx0XHRTYXZlIGltYWdlIFVSTCBhcyBkYXRhIGF0dHJpYnV0ZSBvZiBpbnB1dCBpbiBkc2xjYS1tb2R1bGVzLXNlY3Rpb24tc2V0dGluZ3Mgc2V0XG5cdFx0XHRXZSBuZWVkIFVSTCBpbiAnZHNsY2EtaW1nLXVybCcgZm9yIGxpdmUgcHJldmlld1xuXHRcdFx0ICovXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tYmVpbmctZWRpdGVkJywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkuZmluZCgnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1zZXR0aW5ncyBpbnB1dFtkYXRhLWlkPVwiZHNsY2EtaW1nLXVybFwiXScpLnZhbCggYXR0YWNobWVudC51cmwgKTtcblx0XHRcdGZpZWxkLnRyaWdnZXIoJ2NoYW5nZScpOyAvLyB0cmlnZ2VyIGNoYW5nZSBvbmx5IGFmdGVyICdkc2xjYS1pbWctdXJsJyBpcyBzZXRcblxuXHRcdFx0aG9vay5oaWRlKCk7XG5cdFx0XHRyZW1vdmVIb29rLnNob3coKTtcblx0XHR9KTtcblxuXHRcdC8vIEZpbmFsbHksIG9wZW4gdGhlIG1vZGFsXG5cdFx0ZmlsZV9mcmFtZS5vcGVuKCk7XG5cdH0pO1xuXG5cdGpRdWVyeShkb2N1bWVudCkub24oJ2NsaWNrJywgJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZC1pbWFnZS1yZW1vdmUtaG9vaywgLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1lZGl0LWZpZWxkLWltYWdlLXJlbW92ZS1ob29rJywgZnVuY3Rpb24oKXtcblxuXHRcdHZhciBob29rID0galF1ZXJ5KHRoaXMpO1xuXG5cdFx0aWYgKCBob29rLmhhc0NsYXNzKCAnZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtaW1hZ2UtcmVtb3ZlLWhvb2snICkgKSB7XG5cblx0XHRcdHZhciBmaWVsZCA9IGhvb2suc2libGluZ3MoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZC1pbWFnZScpO1xuXHRcdFx0dmFyIGFkZEhvb2sgPSBob29rLnNpYmxpbmdzKCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtaW1hZ2UtYWRkLWhvb2snKTtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR2YXIgZmllbGQgPSBob29rLnNpYmxpbmdzKCcuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWVkaXQtZmllbGQtdXBsb2FkJyk7XG5cdFx0XHR2YXIgYWRkSG9vayA9IGhvb2suc2libGluZ3MoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1maWVsZC1pbWFnZS1hZGQtaG9vaycpO1xuXHRcdH1cblxuXHRcdGZpZWxkLnZhbCgnJykudHJpZ2dlcignY2hhbmdlJyk7IC8vIC5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1maWVsZFxuXG5cdFx0Lypcblx0XHREZWxldGUgYWx0IGFuZCB0aXRsZSB2YWx1ZS5cblx0XHQgKi9cblx0XHR2YXIgZGF0YUlkID0gaG9vay5wYXJlbnQoKS5hdHRyKFwiZGF0YS1pZFwiKTtcblxuXHRcdGlmICggZGF0YUlkID09ICdpbWFnZScgKSB7XG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24taW1hZ2VfYWx0IGlucHV0JykuYXR0cigndmFsdWUnLCAnJykudHJpZ2dlciggJ2NoYW5nZScgKTtcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbi1pbWFnZV9hbHQgaW5wdXQnKS5hdHRyKCdkYXRhLXZhbC1iY2twJywgJycpLnRyaWdnZXIoICdjaGFuZ2UnICk7XG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24taW1hZ2VfdGl0bGUgaW5wdXQnKS5hdHRyKCd2YWx1ZScsICcnKS50cmlnZ2VyKCAnY2hhbmdlJyApO1xuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uLWltYWdlX3RpdGxlIGlucHV0JykuYXR0cignZGF0YS12YWwtYmNrcCcsICcnKS50cmlnZ2VyKCAnY2hhbmdlJyApO1xuXHRcdH1cblx0XHRob29rLmhpZGUoKTtcblx0XHRhZGRIb29rLnNob3coKTtcblx0fSk7XG59XG5cblxuXG4vKipcbiAqIE1PRFVMRVMgU0VUVElOR1MgUEFORUwgLSBGaWx0ZXIgTW9kdWxlIE9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gZHNsY19tb2R1bGVfb3B0aW9uc19zZWN0aW9uX2ZpbHRlciggc2VjdGlvbklEICkge1xuXG5cdGlmICggd2luZG93LmRzbGNEZWJ1ZyApIGNvbnNvbGUubG9nKCAnZHNsY19tb2R1bGVfb3B0aW9uc19zZWN0aW9uX2ZpbHRlcicgKTtcblxuXHQvLyBIaWRlIGFsbCBvcHRpb25zXG5cdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbicpLmhpZGUoKTtcblxuXHQvLyBTaG93IG9wdGlvbnMgZm9yIGN1cnJlbnQgc2VjdGlvblxuXHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25bZGF0YS1zZWN0aW9uPVwiJyArIHNlY3Rpb25JRCArICdcIl0nKS5zaG93KCk7XG5cblx0Ly8gUmVjYWxsIG1vZHVsZSBvcHRpb25zIHRhYlxuXHRlbGVtZW50T3B0aW9uc1RhYnMoKTtcbn1cblxuLyoqXG4gKiBNT0RVTEVTIFNFVFRJTkdTIFBBTkVMIC0gU2hvdyBtb2R1bGUgb3B0aW9ucyB0YWJcbiAqL1xuZXhwb3J0IGNvbnN0IGVsZW1lbnRPcHRpb25zVGFicyA9ICggZHNsY1RhYiApID0+IHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2VsZW1lbnRPcHRpb25zVGFicycgKTtcblxuXHQvLyBHZXQgY3VycmVudGx5IGFjdGl2ZSBzZWN0aW9uXG5cdHZhciBkc2xjU2VjdGlvbklEID0galF1ZXJ5KCcuZHNsY2Etb3B0aW9ucy1maWx0ZXItaG9vay5kc2xjYS1hY3RpdmUnKS5kYXRhKCdzZWN0aW9uJyk7XG5cblx0Ly8gSWYgdGFiIG5vdCBzdXBwbGllZCBzZXQgdG8gZmlyc3Rcblx0ZHNsY1RhYiA9IHR5cGVvZiBkc2xjVGFiICE9PSAndW5kZWZpbmVkJyA/IGRzbGNUYWIgOiBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYi1ob29rW2RhdGEtc2VjdGlvbj1cIicgKyBkc2xjU2VjdGlvbklEICsgJ1wiXTpmaXJzdCcpO1xuXG5cdC8vIEdldCB0aGUgdGFiIElEXG5cdHZhciBkc2xjVGFiSUQgPSBkc2xjVGFiLmRhdGEoJ2lkJyk7XG5cblx0Ly8gU2V0IGFjdGl2ZSBjbGFzcyBvbiB0YWJcblx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9vaycpLnJlbW92ZUNsYXNzKCdkc2xjYS1hY3RpdmUnKTtcblx0ZHNsY1RhYi5hZGRDbGFzcygnZHNsY2EtYWN0aXZlJyk7XG5cblx0Ly8gU2hvdyB0YWJzIGNvbnRhaW5lclxuXHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYnMnKS5zaG93KCk7XG5cblx0Ly8gSGlkZS9TaG93IHRhYnMgaG9va3Ncblx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9vaycpLmhpZGUoKTtcblx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLXNlY3Rpb249XCInICsgZHNsY1NlY3Rpb25JRCArICdcIl0nKS5zaG93KCk7XG5cblx0aWYgKCBkc2xjVGFiSUQgKSB7XG5cblx0XHQvLyBIaWRlL1Nob3cgb3B0aW9uc1xuXHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbicpLmhpZGUoKTtcblx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25bZGF0YS10YWI9XCInICsgZHNsY1RhYklEICsgJ1wiXScpLnNob3coKTtcblxuXHRcdC8vIEhpZGUvU2hvdyBUYWJzXG5cdFx0ZHNsY19tb2R1bGVfb3B0aW9uc19oaWRlc2hvd190YWJzKCk7XG5cblx0XHQvLyBJZiBvbmx5IG9uZSB0YWIgaGlkZSB0aGUgdGFicyBjb250YWluZXJcblx0XHRpZiAoIGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2s6dmlzaWJsZScpLmxlbmd0aCA8IDIgKSB7XG5cblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFicycpLmhpZGUoKTtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYnMnKS5zaG93KCk7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogSWYgcmVzcG9uc2l2ZSB0YWIsIGNoYW5nZSB0aGUgd2lkdGggb2YgdGhlIGRzbGMtY29udGVudCBkaXZcblx0XHQgKi9cblxuXHRcdGRzbGNfZGlzYWJsZV9yZXNwb25zaXZlX3ZpZXcoKTtcblxuXHRcdC8vIFRhYmxldFxuXHRcdGlmICggZHNsY1RhYklEID09IERTTENTdHJpbmcuc3RyX3Jlc190YWJsZXQudG9Mb3dlckNhc2UoKSArICdfcmVzcG9uc2l2ZScgKSB7XG5cblx0XHRcdGpRdWVyeSgnYm9keScpLnJlbW92ZUNsYXNzKCdkc2xjLXJlcy1iaWcgZHNsYy1yZXMtc21hbGxlci1tb25pdG9yIGRzbGMtcmVzLXBob25lIGRzbGMtcmVzLXRhYmxldCcpO1xuXHRcdFx0alF1ZXJ5KCdib2R5JykuYWRkQ2xhc3MoJ2RzbGMtcmVzLXRhYmxldCcpO1xuXHRcdFx0alF1ZXJ5KCdodG1sJykuYWRkQ2xhc3MoJ2RzbGMtcmVzcG9uc2l2ZS1wcmV2aWV3Jyk7XG5cdFx0fVxuXG5cdFx0Ly8gUGhvbmVcblx0XHRpZiAoIGRzbGNUYWJJRCA9PSBEU0xDU3RyaW5nLnN0cl9yZXNfcGhvbmUudG9Mb3dlckNhc2UoKSArICdfcmVzcG9uc2l2ZScgKSB7XG5cblx0XHRcdGpRdWVyeSgnYm9keScpLnJlbW92ZUNsYXNzKCdkc2xjLXJlcy1iaWcgZHNsYy1yZXMtc21hbGxlci1tb25pdG9yIGRzbGMtcmVzLXBob25lIGRzbGMtcmVzLXRhYmxldCcpO1xuXHRcdFx0alF1ZXJ5KCdib2R5JykuYWRkQ2xhc3MoJ2RzbGMtcmVzLXBob25lJyk7XG5cdFx0XHRqUXVlcnkoJ2h0bWwnKS5hZGRDbGFzcygnZHNsYy1yZXNwb25zaXZlLXByZXZpZXcnKTtcblx0XHR9XG5cblx0XHQvLyBJZiByZXNwb25zaXZlIHJlbG9hZCBtb2R1bGVcblx0XHRpZiAoIGRzbGNUYWJJRCA9PSBEU0xDU3RyaW5nLnN0cl9yZXNfdGFibGV0LnRvTG93ZXJDYXNlKCkgKyAnX3Jlc3BvbnNpdmUnIHx8IGRzbGNUYWJJRCA9PSBEU0xDU3RyaW5nLnN0cl9yZXNfcGhvbmUudG9Mb3dlckNhc2UoKSArICdfcmVzcG9uc2l2ZScgKSB7XG5cblx0XHRcdC8vIFNob3cgdGhlIGxvYWRlclxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtY29udGFpbmVyLWxvYWRlcicpLnNob3coKTtcblxuXHRcdFx0Ly8gUmVsb2FkIE1vZHVsZVxuXHRcdFx0bW9kdWxlT3V0cHV0QWx0ZXJlZChmdW5jdGlvbigpe1xuXG5cdFx0XHRcdC8vIEhpZGUgdGhlIGxvYWRlclxuXHRcdFx0XHRqUXVlcnkoJy5kc2xjYS1jb250YWluZXItbG9hZGVyJykuaGlkZSgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2Nyb2xsIGhvcml6b250YWxseSBvcHRpb25zIHBhbmVsIHRvIHRoZSBsZWZ0IChub3QgcmVhZHkpXG5cdGlmICggalF1ZXJ5KCdib2R5JykuaGFzQ2xhc3MoJ3J0bCcpICkge1xuXHRcdHZhciB0b3RhbFdpZHRoT3B0aW9uID0gMDtcblx0XHR2YXIgdG90YWxXaWR0aEdyb3VwID0gMDtcblx0XHR2YXIgdG90YWxXaWR0aCA9IDA7XG5cblx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXdyYXBwZXIgPiAuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uOnZpc2libGUnKS5lYWNoKGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0XHRpZiAoICEgalF1ZXJ5KHRoaXMpLmhhc0NsYXNzKCdkc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24taGlkZGVuJykgJiYgISBqUXVlcnkodGhpcykuaGFzQ2xhc3MoJ2RzbGNhLW1vZHVsZS1jb250cm9sLWdyb3VwJykgKSB7XG5cdFx0XHRcdHRvdGFsV2lkdGhPcHRpb24gKz0gcGFyc2VJbnQoalF1ZXJ5KHRoaXMpLm91dGVyV2lkdGgoKSwgMTApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy13cmFwcGVyID4gLmRzbGNhLW1vZHVsZS1jb250cm9sLWdyb3VwOnZpc2libGUnKS5lYWNoKGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0XHR0b3RhbFdpZHRoR3JvdXAgKz0gcGFyc2VJbnQoalF1ZXJ5KHRoaXMpLm91dGVyV2lkdGgoKSwgMTApO1xuXHRcdH0pO1xuXG5cdFx0dG90YWxXaWR0aCA9IHBhcnNlSW50KHRvdGFsV2lkdGhPcHRpb24pICsgcGFyc2VJbnQodG90YWxXaWR0aEdyb3VwKSArIDEwO1xuXG5cdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy13cmFwcGVyJykuY3NzKHtcblx0XHRcdCd3aWR0aCc6IHRvdGFsV2lkdGggKyAncHgnLFxuXHRcdH0pO1xuXHR9XG59XG5cbi8qKlxuICogTU9EVUxFUyBTRVRUSU5HUyBQQU5FTCAtIEhpZGUgc2hvdyB0YWJzIGJhc2VkIG9uIG9wdGlvbiBjaG9pY2VzXG4gKi9cbmZ1bmN0aW9uIGRzbGNfbW9kdWxlX29wdGlvbnNfaGlkZXNob3dfdGFicygpIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfbW9kdWxlX29wdGlvbnNfaGlkZXNob3dfdGFicycgKTtcblxuXHR2YXIgZHNsY1NlY3Rpb25JRCA9IGpRdWVyeSgnLmRzbGNhLW9wdGlvbnMtZmlsdGVyLWhvb2suZHNsY2EtYWN0aXZlJykuZGF0YSgnc2VjdGlvbicpO1xuXG5cdGlmICggZHNsY1NlY3Rpb25JRCA9PSAnc3R5bGluZycgKSB7XG5cblx0XHQvLyBWYXJzXG5cdFx0dmFyIGRzbGNDb250YWluZXIgPSBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdCcpLFxuXHRcdGRzbGNIZWFkaW5nID0gdHJ1ZSxcblx0XHRkc2xjRmlsdGVycyA9IHRydWUsXG5cdFx0ZHNsY0NhckFycm93cyA9IHRydWUsXG5cdFx0ZHNsY0NhckNpcmNsZXMgPSB0cnVlLFxuXHRcdGRzbGNQYWdpbmF0aW9uID0gdHJ1ZSxcblx0XHRkc2xjRWxUaHVtYiA9IHRydWUsXG5cdFx0ZHNsY0VsVGl0bGUgPSB0cnVlLFxuXHRcdGRzbGNFbEV4Y2VycHQgPSB0cnVlLFxuXHRcdGRzbGNFbE1ldGEgPSB0cnVlLFxuXHRcdGRzbGNFbEJ1dHRvbiA9IHRydWUsXG5cdFx0ZHNsY0VsQ2F0cyA9IHRydWUsXG5cdFx0ZHNsY0VsQ291bnQgPSB0cnVlLFxuXHRcdGRzbGNFbFNlcGFyYXRvciA9IHRydWUsXG5cdFx0ZHNsY0VsVGFncyA9IHRydWUsXG5cdFx0ZHNsY0VsU29jaWFsID0gdHJ1ZSxcblx0XHRkc2xjRWxQb3NpdGlvbiA9IHRydWUsXG5cdFx0ZHNsY0VsSWNvbiA9IHRydWUsXG5cdFx0ZHNsY0VsQ29udGVudCA9IHRydWUsXG5cdFx0ZHNsY0VsUHJpY2UgPSB0cnVlLFxuXHRcdGRzbGNFbFByaWNlU2VjID0gdHJ1ZSxcblx0XHRkc2xjRWxBZGRDYXJ0ID0gdHJ1ZSxcblx0XHRkc2xjRWxEZXRhaWxzID0gdHJ1ZSxcblx0XHRkc2xjRWxRdW90ZSA9IHRydWUsXG5cdFx0ZHNsY0VsQXV0aG9yTmFtZSA9IHRydWUsXG5cdFx0ZHNsY0VsQXV0aG9yUG9zID0gdHJ1ZSxcblx0XHRkc2xjRWxJbWFnZSA9IHRydWUsXG5cdFx0ZHNsY0VsTG9nbyA9IHRydWU7XG5cblxuXHRcdC8vIElzIGhlYWRpbmcgc2VsZWN0ZWQ/XG5cdFx0aWYgKCAhIGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkW3ZhbHVlPVwibWFpbl9oZWFkaW5nXCJdJykuaXMoJzpjaGVja2VkJykgKVxuXHRcdFx0ZHNsY0hlYWRpbmcgPSBmYWxzZTtcblxuXHRcdC8vIEFyZSBmaWx0ZXJzIHNlbGVjdGVkP1xuXHRcdGlmICggISBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZFt2YWx1ZT1cImZpbHRlcnNcIl0nKS5pcygnOmNoZWNrZWQnKSApXG5cdFx0XHRkc2xjRmlsdGVycyA9IGZhbHNlO1xuXG5cdFx0Ly8gQXJlIGFycm93cyBzZWxlY3RlZD9cblx0XHRpZiAoICEgalF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGRbdmFsdWU9XCJhcnJvd3NcIl0nKS5pcygnOmNoZWNrZWQnKSApXG5cdFx0XHRkc2xjQ2FyQXJyb3dzID0gZmFsc2U7XG5cblx0XHQvLyBBcmUgY2lyY2xlcyBzZWxlY3RlZD9cblx0XHRpZiAoICEgalF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGRbdmFsdWU9XCJjaXJjbGVzXCJdJykuaXMoJzpjaGVja2VkJykgKVxuXHRcdFx0ZHNsY0NhckNpcmNsZXMgPSBmYWxzZTtcblxuXHRcdC8vIElzIGl0IGEgY2Fyb3VzZWw/XG5cdFx0aWYgKCBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZFtkYXRhLWlkPVwidHlwZVwiXScpLnZhbCgpICE9ICdjYXJvdXNlbCcgKSB7XG5cdFx0XHRkc2xjQ2FyQXJyb3dzID0gZmFsc2U7XG5cdFx0XHRkc2xjQ2FyQ2lyY2xlcyA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIElzIHBhZ2luYXRpb24gZW5hYmxlZD9cblx0XHRpZiAoIGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkW2RhdGEtaWQ9XCJwYWdpbmF0aW9uX3R5cGVcIl0nKS52YWwoKSA9PSAnZGlzYWJsZWQnICkge1xuXHRcdFx0ZHNsY1BhZ2luYXRpb24gPSBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBJcyB0aHVtYiBlbmFibGVkP1xuXHRcdGlmICggISBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZFtkYXRhLWlkKj1cImVsZW1lbnRzXCJdW3ZhbHVlPVwidGh1bWJuYWlsXCJdJykuaXMoJzpjaGVja2VkJykgKSB7XG5cdFx0XHRkc2xjRWxUaHVtYiA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIElzIHRpdGxlIGVuYWJsZWQ/XG5cdFx0aWYgKCBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZFtkYXRhLWlkKj1cImVsZW1lbnRzXCJdW3ZhbHVlPVwiY29udGVudFwiXScpLmxlbmd0aCAmJiAhIGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkW2RhdGEtaWQqPVwiZWxlbWVudHNcIl1bdmFsdWU9XCJ0aXRsZVwiXScpLmlzKCc6Y2hlY2tlZCcpICkge1xuXHRcdFx0ZHNsY0VsVGl0bGUgPSBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBJcyBleGNlcnB0IGVuYWJsZWQ/XG5cdFx0aWYgKCAhIGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkW2RhdGEtaWQqPVwiZWxlbWVudHNcIl1bdmFsdWU9XCJleGNlcnB0XCJdJykuaXMoJzpjaGVja2VkJykgKSB7XG5cdFx0XHRkc2xjRWxFeGNlcnB0ID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gSXMgbWV0YSBlbmFibGVkP1xuXHRcdGlmICggISBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZFtkYXRhLWlkKj1cImVsZW1lbnRzXCJdW3ZhbHVlPVwibWV0YVwiXScpLmlzKCc6Y2hlY2tlZCcpICkge1xuXHRcdFx0ZHNsY0VsTWV0YSA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIElzIGJ1dHRvbiBlbmFibGVkP1xuXHRcdGlmICggalF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGRbZGF0YS1pZCo9XCJlbGVtZW50c1wiXVt2YWx1ZT1cImJ1dHRvblwiXScpLmxlbmd0aCAmJiAhIGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkW2RhdGEtaWQqPVwiZWxlbWVudHNcIl1bdmFsdWU9XCJidXR0b25cIl0nKS5pcygnOmNoZWNrZWQnKSApIHtcblx0XHRcdGRzbGNFbEJ1dHRvbiA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIEFyZSBjYXRzIGVuYWJsZWQ/XG5cdFx0aWYgKCAhIGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkW2RhdGEtaWQqPVwiZWxlbWVudHNcIl1bdmFsdWU9XCJjYXRlZ29yaWVzXCJdJykuaXMoJzpjaGVja2VkJykgKSB7XG5cdFx0XHRkc2xjRWxDYXRzID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gSXMgc2VwYXJhdG9yIGVuYWJsZWQ/XG5cdFx0aWYgKCAhIGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkW2RhdGEtaWQqPVwiZWxlbWVudHNcIl1bdmFsdWU9XCJzZXBhcmF0b3JcIl0nKS5pcygnOmNoZWNrZWQnKSApIHtcblx0XHRcdGRzbGNFbFNlcGFyYXRvciA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIElzIGNvdW50IGVuYWJsZWQ/XG5cdFx0aWYgKCAhIGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkW2RhdGEtaWQqPVwiZWxlbWVudHNcIl1bdmFsdWU9XCJjb3VudFwiXScpLmlzKCc6Y2hlY2tlZCcpICkge1xuXHRcdFx0ZHNsY0VsQ291bnQgPSBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBBcmUgdGFncyBlbmFibGVkP1xuXHRcdGlmICggISBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZFtkYXRhLWlkKj1cImVsZW1lbnRzXCJdW3ZhbHVlPVwidGFnc1wiXScpLmlzKCc6Y2hlY2tlZCcpICkge1xuXHRcdFx0ZHNsY0VsVGFncyA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIEFyZSBzb2NpYWwgbGluayBlbmFibGVkP1xuXHRcdGlmICggISBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZFtkYXRhLWlkKj1cImVsZW1lbnRzXCJdW3ZhbHVlPVwic29jaWFsXCJdJykuaXMoJzpjaGVja2VkJykgKSB7XG5cdFx0XHRkc2xjRWxTb2NpYWwgPSBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBJcyBwb3NpdGlvbiBlbmFibGVkP1xuXHRcdGlmICggISBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZFtkYXRhLWlkKj1cImVsZW1lbnRzXCJdW3ZhbHVlPVwicG9zaXRpb25cIl0nKS5pcygnOmNoZWNrZWQnKSApIHtcblx0XHRcdGRzbGNFbFBvc2l0aW9uID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gSXMgaWNvbiBlbmFibGVkP1xuXHRcdGlmICggalF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGRbZGF0YS1pZCo9XCJlbGVtZW50c1wiXVt2YWx1ZT1cImljb25cIl0nKS5sZW5ndGggJiYgISBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZFtkYXRhLWlkKj1cImVsZW1lbnRzXCJdW3ZhbHVlPVwiaWNvblwiXScpLmlzKCc6Y2hlY2tlZCcpICkge1xuXHRcdFx0ZHNsY0VsSWNvbiA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIElzIGNvbnRlbnQgZW5hYmxlZD9cblx0XHRpZiAoICBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZFtkYXRhLWlkKj1cImVsZW1lbnRzXCJdW3ZhbHVlPVwiY29udGVudFwiXScpLmxlbmd0aCAmJiAhIGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkW2RhdGEtaWQqPVwiZWxlbWVudHNcIl1bdmFsdWU9XCJjb250ZW50XCJdJykuaXMoJzpjaGVja2VkJykgKSB7XG5cdFx0XHRkc2xjRWxDb250ZW50ID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gSXMgcHJpY2UgZW5hYmxlZD9cblx0XHRpZiAoICEgalF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGRbZGF0YS1pZCo9XCJlbGVtZW50c1wiXVt2YWx1ZT1cInByaWNlXCJdJykuaXMoJzpjaGVja2VkJykgKSB7XG5cdFx0XHRkc2xjRWxQcmljZSA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIElzIHByaWNlIHNlY29uZGFyeSBlbmFibGVkP1xuXHRcdGlmICggISBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZFtkYXRhLWlkKj1cImVsZW1lbnRzXCJdW3ZhbHVlPVwicHJpY2VfMlwiXScpLmlzKCc6Y2hlY2tlZCcpICkge1xuXHRcdFx0ZHNsY0VsUHJpY2VTZWMgPSBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBJcyBhZGQgdG8gY2FydCBlbmFibGVkP1xuXHRcdGlmICggISBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZFtkYXRhLWlkKj1cImVsZW1lbnRzXCJdW3ZhbHVlPVwiYWRkdG9jYXJ0XCJdJykuaXMoJzpjaGVja2VkJykgKSB7XG5cdFx0XHRkc2xjRWxBZGRDYXJ0ID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gSXMgYWRkIHRvIGNhcnQgZW5hYmxlZD9cblx0XHRpZiAoICEgalF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGRbZGF0YS1pZCo9XCJlbGVtZW50c1wiXVt2YWx1ZT1cImRldGFpbHNcIl0nKS5pcygnOmNoZWNrZWQnKSApIHtcblx0XHRcdGRzbGNFbERldGFpbHMgPSBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBJcyBxdW90ZSBlbmFibGVkP1xuXHRcdGlmICggISBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZFtkYXRhLWlkKj1cImVsZW1lbnRzXCJdW3ZhbHVlPVwicXVvdGVcIl0nKS5pcygnOmNoZWNrZWQnKSApIHtcblx0XHRcdGRzbGNFbFF1b3RlID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gSXMgYXV0aG9yIG5hbWUgZW5hYmxlZD9cblx0XHRpZiAoICEgalF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGRbZGF0YS1pZCo9XCJlbGVtZW50c1wiXVt2YWx1ZT1cImF1dGhvcl9uYW1lXCJdJykuaXMoJzpjaGVja2VkJykgKSB7XG5cdFx0XHRkc2xjRWxBdXRob3JOYW1lID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gSXMgYXV0aG9yIHBvc2l0aW9uIGVuYWJsZWQ/XG5cdFx0aWYgKCAhIGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkW2RhdGEtaWQqPVwiZWxlbWVudHNcIl1bdmFsdWU9XCJhdXRob3JfcG9zaXRpb25cIl0nKS5pcygnOmNoZWNrZWQnKSApIHtcblx0XHRcdGRzbGNFbEF1dGhvclBvcyA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIElzIGltYWdlIGVuYWJsZWQ/XG5cdFx0aWYgKCAhIGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkW2RhdGEtaWQqPVwiZWxlbWVudHNcIl1bdmFsdWU9XCJpbWFnZVwiXScpLmlzKCc6Y2hlY2tlZCcpICkge1xuXHRcdFx0ZHNsY0VsSW1hZ2UgPSBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBJcyBsb2dvIGVuYWJsZWQ/XG5cdFx0aWYgKCAhIGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkW2RhdGEtaWQqPVwiZWxlbWVudHNcIl1bdmFsdWU9XCJsb2dvXCJdJykuaXMoJzpjaGVja2VkJykgKSB7XG5cdFx0XHRkc2xjRWxMb2dvID0gZmFsc2U7XG5cdFx0fVxuXG5cblx0XHQvLyBTaG93L0hpZGUgSGVhZGluZ1xuXHRcdGlmICggZHNsY0hlYWRpbmcgKVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwiaGVhZGluZ19zdHlsaW5nXCJdJykuc2hvdygpO1xuXHRcdGVsc2Vcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2tbZGF0YS1pZD1cImhlYWRpbmdfc3R5bGluZ1wiXScpLmhpZGUoKTtcblxuXHRcdC8vIFNob3cvSGlkZSBGaWx0ZXJzXG5cdFx0aWYgKCBkc2xjRmlsdGVycyApXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYi1ob29rW2RhdGEtaWQ9XCJmaWx0ZXJzX3N0eWxpbmdcIl0nKS5zaG93KCk7XG5cdFx0ZWxzZVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwiZmlsdGVyc19zdHlsaW5nXCJdJykuaGlkZSgpO1xuXG5cdFx0Ly8gU2hvdy9IaWRlIENhcm91c2VsIEFycm93c1xuXHRcdGlmICggZHNsY0NhckFycm93cyApXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYi1ob29rW2RhdGEtaWQ9XCJjYXJvdXNlbF9hcnJvd3Nfc3R5bGluZ1wiXScpLnNob3coKTtcblx0XHRlbHNlXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYi1ob29rW2RhdGEtaWQ9XCJjYXJvdXNlbF9hcnJvd3Nfc3R5bGluZ1wiXScpLmhpZGUoKTtcblxuXHRcdC8vIFNob3cvSGlkZSBDYXJvdXNlbCBDaXJjbGVzXG5cdFx0aWYgKCBkc2xjQ2FyQ2lyY2xlcyApXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYi1ob29rW2RhdGEtaWQ9XCJjYXJvdXNlbF9jaXJjbGVzX3N0eWxpbmdcIl0nKS5zaG93KCk7XG5cdFx0ZWxzZVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwiY2Fyb3VzZWxfY2lyY2xlc19zdHlsaW5nXCJdJykuaGlkZSgpO1xuXG5cdFx0Ly8gU2hvdy9IaWRlIFBhZ2luYXRpb25cblx0XHRpZiAoIGRzbGNQYWdpbmF0aW9uIClcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2tbZGF0YS1pZD1cInBhZ2luYXRpb25fc3R5bGluZ1wiXScpLnNob3coKTtcblx0XHRlbHNlXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYi1ob29rW2RhdGEtaWQ9XCJwYWdpbmF0aW9uX3N0eWxpbmdcIl0nKS5oaWRlKCk7XG5cblx0XHQvLyBTaG93L0hpZGUgVGh1bWJcblx0XHRpZiAoIGRzbGNFbFRodW1iIClcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2tbZGF0YS1pZD1cInRodW1ibmFpbF9zdHlsaW5nXCJdJykuc2hvdygpO1xuXHRcdGVsc2Vcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2tbZGF0YS1pZD1cInRodW1ibmFpbF9zdHlsaW5nXCJdJykuaGlkZSgpO1xuXG5cdFx0Ly8gU2hvdy9IaWRlIFRpdGxlXG5cdFx0aWYgKCBkc2xjRWxUaXRsZSApXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYi1ob29rW2RhdGEtaWQ9XCJ0aXRsZV9zdHlsaW5nXCJdJykuc2hvdygpO1xuXHRcdGVsc2Vcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2tbZGF0YS1pZD1cInRpdGxlX3N0eWxpbmdcIl0nKS5oaWRlKCk7XG5cblx0XHQvLyBTaG93L0hpZGUgRXhjZXJwdFxuXHRcdGlmICggZHNsY0VsRXhjZXJwdCApXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYi1ob29rW2RhdGEtaWQ9XCJleGNlcnB0X3N0eWxpbmdcIl0nKS5zaG93KCk7XG5cdFx0ZWxzZVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwiZXhjZXJwdF9zdHlsaW5nXCJdJykuaGlkZSgpO1xuXG5cdFx0Ly8gU2hvdy9IaWRlIE1ldGFcblx0XHRpZiAoIGRzbGNFbE1ldGEgKVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwibWV0YV9zdHlsaW5nXCJdJykuc2hvdygpO1xuXHRcdGVsc2Vcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2tbZGF0YS1pZD1cIm1ldGFfc3R5bGluZ1wiXScpLmhpZGUoKTtcblxuXHRcdC8vIFNob3cvSGlkZSBCdXR0b25cblx0XHRpZiAoIGRzbGNFbEJ1dHRvbiApXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYi1ob29rW2RhdGEtaWQ9XCJidXR0b25fc3R5bGluZ1wiXSwgLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2tbZGF0YS1pZD1cInByaW1hcnlfYnV0dG9uX3N0eWxpbmdcIl0sJytcblx0XHRcdFx0JyAuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwic2Vjb25kYXJ5X2J1dHRvbl9zdHlsaW5nXCJdJykuc2hvdygpO1xuXHRcdGVsc2Vcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2tbZGF0YS1pZD1cImJ1dHRvbl9zdHlsaW5nXCJdLCAuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwicHJpbWFyeV9idXR0b25fc3R5bGluZ1wiXSwnK1xuXHRcdFx0XHQnIC5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYi1ob29rW2RhdGEtaWQ9XCJzZWNvbmRhcnlfYnV0dG9uX3N0eWxpbmdcIl0nKS5oaWRlKCk7XG5cblx0XHQvLyBTaG93L0hpZGUgQ2F0c1xuXHRcdGlmICggZHNsY0VsQ2F0cyApXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYi1ob29rW2RhdGEtaWQ9XCJjYXRlZ29yaWVzX3N0eWxpbmdcIl0nKS5zaG93KCk7XG5cdFx0ZWxzZVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwiY2F0ZWdvcmllc19zdHlsaW5nXCJdJykuaGlkZSgpO1xuXG5cdFx0Ly8gU2hvdy9IaWRlIFNlcGFyYXRvclxuXHRcdGlmICggZHNsY0VsU2VwYXJhdG9yIClcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2tbZGF0YS1pZD1cInNlcGFyYXRvcl9zdHlsaW5nXCJdJykuc2hvdygpO1xuXHRcdGVsc2Vcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2tbZGF0YS1pZD1cInNlcGFyYXRvcl9zdHlsaW5nXCJdJykuaGlkZSgpO1xuXG5cdFx0Ly8gU2hvdy9IaWRlIENvdW50XG5cdFx0aWYgKCBkc2xjRWxDb3VudCApXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYi1ob29rW2RhdGEtaWQ9XCJjb3VudF9zdHlsaW5nXCJdJykuc2hvdygpO1xuXHRcdGVsc2Vcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2tbZGF0YS1pZD1cImNvdW50X3N0eWxpbmdcIl0nKS5oaWRlKCk7XG5cblx0XHQvLyBTaG93L0hpZGUgVGFnc1xuXHRcdGlmICggZHNsY0VsVGFncyApXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYi1ob29rW2RhdGEtaWQ9XCJ0YWdzX3N0eWxpbmdcIl0nKS5zaG93KCk7XG5cdFx0ZWxzZVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwidGFnc19zdHlsaW5nXCJdJykuaGlkZSgpO1xuXG5cdFx0Ly8gU2hvdy9IaWRlIFRhZ3Ncblx0XHRpZiAoIGRzbGNFbFBvc2l0aW9uIClcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2tbZGF0YS1pZD1cInBvc2l0aW9uX3N0eWxpbmdcIl0nKS5zaG93KCk7XG5cdFx0ZWxzZVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwicG9zaXRpb25fc3R5bGluZ1wiXScpLmhpZGUoKTtcblxuXHRcdC8vIFNob3cvSGlkZSBUYWdzXG5cdFx0aWYgKCBkc2xjRWxTb2NpYWwgKVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwic29jaWFsX3N0eWxpbmdcIl0nKS5zaG93KCk7XG5cdFx0ZWxzZVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwic29jaWFsX3N0eWxpbmdcIl0nKS5oaWRlKCk7XG5cblx0XHQvLyBTaG93L0hpZGUgSWNvblxuXHRcdGlmICggZHNsY0VsSWNvbiApXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYi1ob29rW2RhdGEtaWQ9XCJpY29uX3N0eWxpbmdcIl0nKS5zaG93KCk7XG5cdFx0ZWxzZVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwiaWNvbl9zdHlsaW5nXCJdJykuaGlkZSgpO1xuXG5cdFx0Ly8gU2hvdy9IaWRlIENvbnRlbnRcblx0XHRpZiAoIGRzbGNFbENvbnRlbnQgKVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwiY29udGVudF9zdHlsaW5nXCJdJykuc2hvdygpO1xuXHRcdGVsc2Vcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2tbZGF0YS1pZD1cImNvbnRlbnRfc3R5bGluZ1wiXScpLmhpZGUoKTtcblxuXHRcdC8vIFNob3cvSGlkZSBQcmljZVxuXHRcdGlmICggZHNsY0VsUHJpY2UgKVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwicHJpY2Vfc3R5bGluZ1wiXScpLnNob3coKTtcblx0XHRlbHNlXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYi1ob29rW2RhdGEtaWQ9XCJwcmljZV9zdHlsaW5nXCJdJykuaGlkZSgpO1xuXG5cdFx0Ly8gU2hvdy9IaWRlIFByaWNlIFNlY1xuXHRcdGlmICggZHNsY0VsUHJpY2VTZWMgKVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwicHJpY2Vfc2Vjb25kYXJ5X3N0eWxpbmdcIl0nKS5zaG93KCk7XG5cdFx0ZWxzZVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwicHJpY2Vfc2Vjb25kYXJ5X3N0eWxpbmdcIl0nKS5oaWRlKCk7XG5cblx0XHQvLyBTaG93L0hpZGUgQWRkIHRvIENhcnRcblx0XHRpZiAoIGRzbGNFbEFkZENhcnQgfHwgZHNsY0VsRGV0YWlscyApXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYi1ob29rW2RhdGEtaWQ9XCJvdGhlcl9zdHlsaW5nXCJdJykuc2hvdygpO1xuXHRcdGVsc2Vcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2tbZGF0YS1pZD1cIm90aGVyX3N0eWxpbmdcIl0nKS5oaWRlKCk7XG5cblx0XHQvLyBTaG93L0hpZGUgUXVvdGVcblx0XHRpZiAoIGRzbGNFbFF1b3RlIClcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2tbZGF0YS1pZD1cInF1b3RlX3N0eWxpbmdcIl0nKS5zaG93KCk7XG5cdFx0ZWxzZVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwicXVvdGVfc3R5bGluZ1wiXScpLmhpZGUoKTtcblxuXHRcdC8vIFNob3cvSGlkZSBBdXRob3IgTmFtZVxuXHRcdGlmICggZHNsY0VsQXV0aG9yTmFtZSApXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYi1ob29rW2RhdGEtaWQ9XCJhdXRob3JfbmFtZV9zdHlsaW5nXCJdJykuc2hvdygpO1xuXHRcdGVsc2Vcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2tbZGF0YS1pZD1cImF1dGhvcl9uYW1lX3N0eWxpbmdcIl0nKS5oaWRlKCk7XG5cblx0XHQvLyBTaG93L0hpZGUgQXV0aG9yIFBvc2l0aW9uXG5cdFx0aWYgKCBkc2xjRWxBdXRob3JQb3MgKVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwiYXV0aG9yX3Bvc2l0aW9uX3N0eWxpbmdcIl0nKS5zaG93KCk7XG5cdFx0ZWxzZVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwiYXV0aG9yX3Bvc2l0aW9uX3N0eWxpbmdcIl0nKS5oaWRlKCk7XG5cblx0XHQvLyBTaG93L0hpZGUgSW1hZ2Vcblx0XHRpZiAoIGRzbGNFbEltYWdlIClcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2tbZGF0YS1pZD1cImltYWdlX3N0eWxpbmdcIl0nKS5zaG93KCk7XG5cdFx0ZWxzZVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwiaW1hZ2Vfc3R5bGluZ1wiXScpLmhpZGUoKTtcblxuXHRcdC8vIFNob3cvSGlkZSBRdW90ZVxuXHRcdGlmICggZHNsY0VsTG9nbyApXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYi1ob29rW2RhdGEtaWQ9XCJsb2dvX3N0eWxpbmdcIl0nKS5zaG93KCk7XG5cdFx0ZWxzZVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9va1tkYXRhLWlkPVwibG9nb19zdHlsaW5nXCJdJykuaGlkZSgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2sgJ0VuYWJsZS9EaXNhYmxlIEN1c3RvbSBDU1MnIGNvbnRyb2xcblx0ICovXG5cblx0aWYgKCBqUXVlcnkoJy5kc2xjYS1vcHRpb25zLWZpbHRlci1ob29rW2RhdGEtc2VjdGlvbj1cInN0eWxpbmdcIl0nKS5oYXNDbGFzcygnZHNsY2EtYWN0aXZlJykgKSB7XG5cblx0XHR2YXIgZHNsY0N1c3RvbUNTUyA9IGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbltkYXRhLWlkPVwiY3NzX2N1c3RvbVwiXScpLFxuXHRcdGRzbGNDdXN0b21DU1NWYWwgPSBkc2xjQ3VzdG9tQ1NTLmZpbmQoJ3NlbGVjdCcpLnZhbCgpO1xuXG5cdFx0aWYgKCBkc2xjQ3VzdG9tQ1NTVmFsID09ICdlbmFibGVkJyApIHtcblxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uW2RhdGEtc2VjdGlvbj1cInN0eWxpbmdcIl0nKS5jc3MoeyB2aXNpYmlsaXR5IDogJ3Zpc2libGUnIH0pO1xuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uW2RhdGEtdGFiXScpLmNzcyggJ3Zpc2liaWxpdHknLCAndmlzaWJsZScgKTtcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFicycpLnNob3coKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uW2RhdGEtc2VjdGlvbj1cInN0eWxpbmdcIl0nKS5jc3MoeyB2aXNpYmlsaXR5IDogJ2hpZGRlbicgfSk7XG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtY29udHJvbC1ncm91cC5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24nKS5jc3MoICd2aXNpYmlsaXR5JywgJ2hpZGRlbicgKTtcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFicycpLmhpZGUoKTtcblx0XHRcdGRzbGNDdXN0b21DU1MuY3NzKHsgdmlzaWJpbGl0eSA6ICd2aXNpYmxlJyB9KTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLXRhYnMnKS5zaG93KCk7XG5cdH1cblxuXHRpZiAoIGpRdWVyeSgnc2VsZWN0LmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkW2RhdGEtaWQ9XCJjc3NfcmVzX3RcIl0nKS52YWwoKSA9PSAnZGlzYWJsZWQnICkge1xuXHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbltkYXRhLWlkKj1cImNzc19yZXNfdFwiXScpLmNzcyggJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyApO1xuXHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbltkYXRhLXRhYj1cInRhYmxldF9yZXNwb25zaXZlXCJdJykuY3NzKCAndmlzaWJpbGl0eScsICdoaWRkZW4nICk7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uW2RhdGEtaWQqPVwiY3NzX3Jlc190XCJdJykuY3NzKCAndmlzaWJpbGl0eScsICd2aXNpYmxlJyApO1xuXHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbltkYXRhLXRhYj1cInRhYmxldF9yZXNwb25zaXZlXCJdJykuY3NzKCAndmlzaWJpbGl0eScsICd2aXNpYmxlJyApO1xuXHR9XG5cblx0aWYgKCBqUXVlcnkoJ3NlbGVjdC5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZFtkYXRhLWlkPVwiY3NzX3Jlc19wXCJdJykudmFsKCkgPT0gJ2Rpc2FibGVkJyApIHtcblx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25bZGF0YS1pZCo9XCJjc3NfcmVzX3BcIl0nKS5jc3MoICd2aXNpYmlsaXR5JywgJ2hpZGRlbicgKTtcblx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25bZGF0YS10YWI9XCJwaG9uZV9yZXNwb25zaXZlXCJdJykuY3NzKCAndmlzaWJpbGl0eScsICdoaWRkZW4nICk7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uW2RhdGEtaWQqPVwiY3NzX3Jlc19wXCJdJykuY3NzKCAndmlzaWJpbGl0eScsICd2aXNpYmxlJyApO1xuXHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbltkYXRhLXRhYj1cInBob25lX3Jlc3BvbnNpdmVcIl0nKS5jc3MoICd2aXNpYmlsaXR5JywgJ3Zpc2libGUnICk7XG5cdH1cblxuXHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25bZGF0YS1pZD1cImNzc19yZXNfcFwiXSwgLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbltkYXRhLWlkPVwiY3NzX3Jlc190XCJdJykuY3NzKCAndmlzaWJpbGl0eScsICd2aXNpYmxlJyApO1xuXG5cblx0aWYgKCBqUXVlcnkoJy5kc2xjYS1vcHRpb25zLWZpbHRlci1ob29rJykuaGFzQ2xhc3MoJ2RzbGNhLWFjdGl2ZScpICkge1xuXHRcdHZhciBzZWN0aW9uX3RhYiA9IGpRdWVyeSgnLmRzbGNhLW9wdGlvbnMtZmlsdGVyLWhvb2suZHNsY2EtYWN0aXZlJykuZGF0YSgnc2VjdGlvbicpO1xuXG5cdFx0aWYgKCBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25bZGF0YS1zZWN0aW9uPVwiJyArIHNlY3Rpb25fdGFiICsgJ1wiXScpLmhhc0NsYXNzKCdkZXAtc2hvdycpICkge1xuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uLmRlcC1zaG93Jykuc2hvdygpO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uW2RhdGEtc2VjdGlvbj1cIicgKyBzZWN0aW9uX3RhYiArICdcIl0nKS5oYXNDbGFzcygnZGVwLWhpZGUnKSApIHtcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbi5kZXAtaGlkZScpLmhpZGUoKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoIGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbnMtdGFiLWhvb2snKS5oYXNDbGFzcygnZHNsY2EtYWN0aXZlJykgKSB7XG5cdFx0dmFyIGRhdGFfdGFiID0galF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWItaG9vay5kc2xjYS1hY3RpdmUnKS5kYXRhKCdpZCcpO1xuXG5cdFx0aWYgKCBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25bZGF0YS10YWI9XCInICsgZGF0YV90YWIgKyAnXCJdJykuaGFzQ2xhc3MoJ2RlcGVuZGVudCcpICkge1xuXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24uZGVwZW5kZW50JykuaGlkZSgpO1xuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uW2RhdGEtdGFiPVwiJyArIGRhdGFfdGFiICsgJ1wiXS5kZXAtc2hvdycpLnNob3coKTtcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbltkYXRhLXRhYj1cIicgKyBkYXRhX3RhYiArICdcIl0uZGVwLWhpZGUnKS5oaWRlKCk7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uLmRlcGVuZGVudCcpLmhpZGUoKTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBNT0RVTEVTIFNFVFRJTkdTIFBBTkVMIC0gQ29uZmlybSBtb2R1bGUgb3B0aW9ucyBjaGFuZ2VzXG4gKi9cbmZ1bmN0aW9uIGRzbGNfbW9kdWxlX29wdGlvbnNfY29uZmlybV9jaGFuZ2VzKCBjYWxsYmFjayApIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfbW9kdWxlX29wdGlvbnNfY29uZmlybV9jaGFuZ2VzJyApO1xuXG5cdC8vIENhbGxiYWNrXG5cdGNhbGxiYWNrID0gdHlwZW9mIGNhbGxiYWNrICE9PSAndW5kZWZpbmVkJyA/IGNhbGxiYWNrIDogZmFsc2U7XG5cblx0Ly8gSWYgc2xpZGVyIG1vZHVsZVxuXHRpZiAoIGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1iZWluZy1lZGl0ZWQnLCB3aW5kb3cuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkuaGFzQ2xhc3MoJ2RzbGMtbW9kdWxlLURTTENfU2xpZGVycycpICkge1xuXG5cdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcsIHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5yZW1vdmVDbGFzcygnZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcpO1xuXHQvLyBJZiBub3Qgc2xpZGVyIG1vZHVsZVxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQWRkIGNsYXNzIHNvIHdlIGtub3cgc2F2aW5nIGlzIGluIHByb2dyZXNzXG5cdFx0alF1ZXJ5KCdib2R5JykuYWRkQ2xhc3MoJ2RzbGNhLW1vZHVsZS1zYXZpbmctaW4tcHJvZ3Jlc3MnKTtcblxuXHRcdC8vIFJlbG9hZCBtb2R1bGUgd2l0aCBuZXcgc2V0dGluZ3Ncblx0XHRtb2R1bGVPdXRwdXRBbHRlcmVkKCBmdW5jdGlvbigpe1xuXG5cdFx0XHQvLyBVcGRhdGUgcHJlc2V0XG5cdFx0XHR1cGRhdGVQcmVzZXQoKTtcblxuXHRcdFx0d2luZG93LmRzbGNfZ2VuZXJhdGVfY29kZSgpO1xuXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtYmVpbmctZWRpdGVkJywgd2luZG93LkxpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLnJlbW92ZUNsYXNzKCdkc2xjYS1tb2R1bGUtYmVpbmctZWRpdGVkJyk7XG5cblx0XHRcdC8vIFJlbW92ZSBjbGFzc2VzIHNvIHdlIGtub3cgc2F2aW5nIGZpbmlzaGVkXG5cdFx0XHRqUXVlcnkoJ2JvZHknKS5yZW1vdmVDbGFzcygnZHNsY2EtbW9kdWxlLXNhdmluZy1pbi1wcm9ncmVzcycpO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBvcHRpb25zIGNvbnRhaW5lclxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy1pbm5lcicpLmh0bWwoJycpO1xuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWJzJykuaHRtbCgnJyk7XG5cblx0XHRcdHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5VSS5jbGVhclV0aWxzKCk7XG5cblx0XHRcdC8vIENhbGxiYWNrIGlmIHRoZXJlJ3Mgb25lXG5cdFx0XHRpZiAoIGNhbGxiYWNrICkgeyBjYWxsYmFjaygpOyB9XG5cdFx0fSk7XG5cdH1cblxuXHQvLyBTaG93IG1vZHVsZXMgbGlzdGluZ1xuXHRzaG93U2VjdGlvbignLmRzbGNhLW1vZHVsZXMnKTtcblxuXHQvLyBIaWRlIHRoZSBmaWx0ZXIgaG9va3Ncblx0alF1ZXJ5KCcuZHNsY2EtaGVhZGVyIC5kc2xjYS1vcHRpb25zLWZpbHRlci1ob29rJykuaGlkZSgpO1xuXG5cdC8vIEhpZGUgdGhlIHNhdmUvY2FuY2VsIGFjdGlvbnNcblx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtYWN0aW9ucycpLmhpZGUoKTtcblxuXHQvLyBTaG93IHRoZSBzZWN0aW9uIGhvb2tzXG5cdGpRdWVyeSgnLmRzbGNhLWhlYWRlciAuZHNsY2EtZ28tdG8tc2VjdGlvbi1ob29rJykuc2hvdygpO1xuXG5cdC8vIHdpbmRvdy5kc2xjX2dlbmVyYXRlX2NvZGUoKTtcblx0Ly8gU2hvdyB0aGUgcHVibGlzaCBidXR0b25cblx0d2luZG93LmRzbGNfc2hvd19wdWJsaXNoX2J1dHRvbigpO1xufVxuXG4vKipcbiAqIE1PRFVMRVMgU0VUVElOR1MgUEFORUwgLSBDYW5jZWwgbW9kdWxlIG9wdGlvbnMgY2hhbmdlc1xuICovXG5mdW5jdGlvbiBkc2xjX21vZHVsZV9vcHRpb25zX2NhbmNlbF9jaGFuZ2VzKCBjYWxsYmFjayApIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfbW9kdWxlX29wdGlvbnNfY2FuY2VsX2NoYW5nZXMnICk7XG5cblx0Ly8gQ2FsbGJhY2tcblx0Y2FsbGJhY2sgPSB0eXBlb2YgY2FsbGJhY2sgIT09ICd1bmRlZmluZWQnID8gY2FsbGJhY2sgOiBmYWxzZTtcblxuXHQvLyBWYXJzXG5cdHZhciBlZGl0ZWRNb2R1bGUgPSBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtYmVpbmctZWRpdGVkJywgd2luZG93LkxpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpO1xuXG5cdC8vIEFkZCBiYWNrdXAgb3B0aW9uIHZhbHVlc1xuXHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtb3B0aW9ucy1mcm9udCcsIGVkaXRlZE1vZHVsZSkuaHRtbCgnJykuYXBwZW5kKHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5tb2R1bGVCYWNrdXApO1xuXHQvLyB3aW5kb3cuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIubW9kdWxlQmFja3VwID0gZmFsc2U7XG5cblx0Ly8gUmVsb2FkIG1vZHVsZVxuXHRtb2R1bGVPdXRwdXRBbHRlcmVkKCBmdW5jdGlvbigpe1xuXG5cdFx0d2luZG93LmRzbGNfZ2VuZXJhdGVfY29kZSgpO1xuXG5cdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcsIHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5yZW1vdmVDbGFzcygnZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcpO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgb3B0aW9ucyBjb250YWluZXJcblx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb25zLWlubmVyJykuaHRtbCgnJyk7XG5cdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9ucy10YWJzJykuaHRtbCgnJyk7XG5cblx0XHR3aW5kb3cuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuVUkuY2xlYXJVdGlscygpO1xuXG5cdFx0aWYgKCBjYWxsYmFjayApIHsgY2FsbGJhY2soKTsgfVxuXHR9KTtcblxuXHQvLyBTaG93IG1vZHVsZXMgbGlzdGluZ1xuXHRzaG93U2VjdGlvbignLmRzbGNhLW1vZHVsZXMnKTtcblxuXHQvLyBIaWRlIHRoZSBmaWx0ZXIgaG9va3Ncblx0alF1ZXJ5KCcuZHNsY2EtaGVhZGVyIC5kc2xjYS1vcHRpb25zLWZpbHRlci1ob29rJykuaGlkZSgpO1xuXG5cdC8vIEhpZGUgdGhlIHNhdmUvY2FuY2VsIGFjdGlvbnNcblx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtYWN0aW9ucycpLmhpZGUoKTtcblxuXHQvLyBTaG93IHRoZSBzZWN0aW9uIGhvb2tzXG5cdGpRdWVyeSgnLmRzbGNhLWhlYWRlciAuZHNsY2EtZ28tdG8tc2VjdGlvbi1ob29rJykuc2hvdygpO1xuXG5cdC8vIFNob3cgdGhlIHB1Ymxpc2ggYnV0dG9uXG5cdHdpbmRvdy5kc2xjX3Nob3dfcHVibGlzaF9idXR0b24oKTtcblxuXHR3aW5kb3cuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuVUkuY2xlYXJVdGlscygpO1xufVxuXG4vKipcbiAqIE1PRFVMRVMgU0VUVElOR1MgUEFORUwgLSBPcHRpb24gVG9vbHRpcHNcbiAqL1xuZnVuY3Rpb24gZHNsY19tb2R1bGVfb3B0aW9uc190b29sdGlwKCkge1xuXG5cdC8vIENsb3NlIFRvb2x0aXBcblx0alF1ZXJ5KGRvY3VtZW50KS5vbiggJ2NsaWNrJywgJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZC10dGlwLWNsb3NlJywgZnVuY3Rpb24oKXtcblx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZC10dGlwLCAuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtaWNvbi10dGlwJykuaGlkZSgpO1xuXHR9KTtcblxuXHQvLyBTaG93IFRvb2x0aXBcblx0alF1ZXJ5KGRvY3VtZW50KS5vbiggJ2NsaWNrJywgJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZC10dGlwLWhvb2snLCBmdW5jdGlvbigpe1xuXG5cdFx0dmFyIGRzbGNUdGlwID0galF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtdHRpcCcpLFxuXHRcdGRzbGNUdGlwSW5uZXIgPSBkc2xjVHRpcC5maW5kKCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtdHRpcC1pbm5lcicpLFxuXHRcdGRzbGNIb29rID0galF1ZXJ5KHRoaXMpLFxuXHRcdGRzbGNUdGlwQ29udGVudCxcblx0XHRkc2xjTGFiZWw7XG5cblx0XHRkc2xjTGFiZWwgPSBkc2xjSG9vay5wYXJlbnQoKTtcblxuXHRcdGlmICggZHNsY0xhYmVsLnBhcmVudCgpLmhhc0NsYXNzKCdkc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1vcHRpb24nKSApIHtcblx0XHRcdGRzbGNUdGlwQ29udGVudCA9IGRzbGNIb29rLmNsb3Nlc3QoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1vcHRpb24nKS5maW5kKCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtdHRpcC1jb250ZW50JykuaHRtbCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkc2xjVHRpcENvbnRlbnQgPSBkc2xjSG9vay5jbG9zZXN0KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uJykuZmluZCgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkLXR0aXAtY29udGVudCcpLmh0bWwoKTtcblx0XHR9XG5cblx0XHRpZiAoIGRzbGNUdGlwLmlzKCc6dmlzaWJsZScpICkge1xuXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZC10dGlwJykuaGlkZSgpO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRzbGNUdGlwSW5uZXIuaHRtbCggZHNsY1R0aXBDb250ZW50ICk7XG5cblx0XHRcdHZhciBkc2xjT2Zmc2V0ID0gZHNsY0hvb2sub2Zmc2V0KCk7XG5cdFx0XHR2YXIgZHNsY1R0aXBIZWlnaHQgPSBkc2xjVHRpcC5vdXRlckhlaWdodCgpO1xuXHRcdFx0dmFyIGRzbGNUdGlwV2lkdGggPSBkc2xjVHRpcC5vdXRlcldpZHRoKCk7XG5cdFx0XHR2YXIgZHNsY1R0aXBMZWZ0ID0gZHNsY09mZnNldC5sZWZ0IC0gKCBkc2xjVHRpcFdpZHRoIC8gMiApICsgNjtcblx0XHRcdHZhciBkc2xjVHRpcEFyckxlZnQgPSAnNTAlJztcblxuXHRcdFx0aWYgKCBkc2xjVHRpcExlZnQgPCAwICkge1xuXG5cdFx0XHRcdGRzbGNUdGlwQXJyTGVmdCA9ICggZHNsY1R0aXBXaWR0aCAvIDIgKSArIGRzbGNUdGlwTGVmdCArICdweCc7XG5cdFx0XHRcdGRzbGNUdGlwTGVmdCA9IDA7XG5cdFx0XHR9XG5cblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkLXR0aXAnKS5zaG93KCkuY3NzKHtcblx0XHRcdFx0dG9wIDogZHNsY09mZnNldC50b3AgLSBkc2xjVHRpcEhlaWdodCAtIDIwLFxuXHRcdFx0XHRsZWZ0OiBkc2xjVHRpcExlZnRcblx0XHRcdH0pO1xuXG5cdFx0XHRqUXVlcnkoXCJoZWFkXCIpLmFwcGVuZChqUXVlcnkoJzxzdHlsZT4uZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtdHRpcDphZnRlciwgLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkLXR0aXA6YmVmb3JlIHsgbGVmdDogJyArIGRzbGNUdGlwQXJyTGVmdCArICcgfTwvc3R5bGU+JykpO1xuXHRcdH1cblx0fSk7XG5cblx0Ly8gU2hvdyBUb29sdGlwICggSWNvbiBPcHRpb25zIClcblx0alF1ZXJ5KGRvY3VtZW50KS5vbiggJ2NsaWNrJywgJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZC1pY29uLXR0aXAtaG9vaycsIGZ1bmN0aW9uKCl7XG5cblx0XHR2YXIgZHNsY1R0aXAgPSBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZC1pY29uLXR0aXAnKTtcblx0XHR2YXIgZHNsY0hvb2sgPSBqUXVlcnkodGhpcyk7XG5cblx0XHRpZiAoIGRzbGNUdGlwLmlzKCc6dmlzaWJsZScpICkge1xuXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZC1pY29uLXR0aXAnKS5oaWRlKCk7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmFyIGRzbGNPZmZzZXQgPSBkc2xjSG9vay5vZmZzZXQoKTtcblx0XHRcdHZhciBkc2xjVHRpcEhlaWdodCA9IGRzbGNUdGlwLm91dGVySGVpZ2h0KCk7XG5cdFx0XHR2YXIgZHNsY1R0aXBXaWR0aCA9IGRzbGNUdGlwLm91dGVyV2lkdGgoKTtcblx0XHRcdHZhciBkc2xjVHRpcExlZnQgPSBkc2xjT2Zmc2V0LmxlZnQgLSAoIGRzbGNUdGlwV2lkdGggLyAyICkgKyA2O1xuXHRcdFx0dmFyIGRzbGNUdGlwQXJyTGVmdCA9ICc1MCUnO1xuXG5cdFx0XHRpZiAoIGRzbGNUdGlwTGVmdCA8IDAgKSB7XG5cblx0XHRcdFx0ZHNsY1R0aXBBcnJMZWZ0ID0gKCBkc2xjVHRpcFdpZHRoIC8gMiApICsgZHNsY1R0aXBMZWZ0ICsgJ3B4Jztcblx0XHRcdFx0ZHNsY1R0aXBMZWZ0ID0gMDtcblx0XHRcdH1cblxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtaWNvbi10dGlwJykuc2hvdygpLmNzcyh7XG5cdFx0XHRcdHRvcCA6IGRzbGNPZmZzZXQudG9wIC0gZHNsY1R0aXBIZWlnaHQgLSAyMCxcblx0XHRcdFx0bGVmdDogZHNsY1R0aXBMZWZ0XG5cdFx0XHR9KTtcblxuXHRcdFx0alF1ZXJ5KFwiaGVhZFwiKS5hcHBlbmQoalF1ZXJ5KCc8c3R5bGU+LmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkLWljb24tdHRpcDphZnRlciwgLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkLWljb24tdHRpcDpiZWZvcmUgeyBsZWZ0OiAnICsgZHNsY1R0aXBBcnJMZWZ0ICsgJyB9PC9zdHlsZT4nKSk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLyoqXG4gKiBNT0RVTEVTIFNFVFRJTkdTIFBBTkVMIC0gRm9udCBvcHRpb24gdHlwZVxuICovXG5mdW5jdGlvbiBkc2xjX21vZHVsZV9vcHRpb25zX2ZvbnQoKSB7XG5cblx0Ly8gTmV4dCBGb250XG5cdGpRdWVyeShkb2N1bWVudCkub24oICdjbGljaycsICcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtZm9udC1uZXh0JywgIGZ1bmN0aW9uKGUpe1xuXG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0aWYgKCAhIGpRdWVyeSh0aGlzKS5oYXNDbGFzcygnZHNsY2EtZm9udC1sb2FkaW5nJykgJiYgISBqUXVlcnkodGhpcykuc2libGluZ3MoJy5kc2xjYS1mb250LWxvYWRpbmcnKS5sZW5ndGggKSB7XG5cblx0XHRcdHZhciBkc2xjT3B0aW9uID0galF1ZXJ5KHRoaXMpLmNsb3Nlc3QoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24tZm9udCcpO1xuXHRcdFx0dmFyIGRzbGNGaWVsZCA9IGpRdWVyeSggJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZC1mb250JywgZHNsY09wdGlvbiApO1xuXHRcdFx0dmFyIGRzbGNDdXJySW5kZXggPSBkc2xjQWxsRm9udHNBcnJheS5pbmRleE9mKCBkc2xjRmllbGQudmFsKCkgKTtcblx0XHRcdHZhciBkc2xjTmV3SW5kZXggPSBkc2xjQ3VyckluZGV4ICsgMTtcblxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtZm9udC1zdWdnZXN0JywgZHNsY09wdGlvbikudGV4dCgnJyk7XG5cblx0XHRcdGRzbGNGaWVsZC52YWwoIGRzbGNBbGxGb250c0FycmF5W2RzbGNOZXdJbmRleF0gKS50cmlnZ2VyKCdjaGFuZ2UnKTtcblxuXHRcdFx0alF1ZXJ5KHRoaXMpLmFkZENsYXNzKCdkc2xjYS1mb250LWxvYWRpbmcnKS5maW5kKCcuZHNsY2EtaWNvbicpLnJlbW92ZUNsYXNzKCdkc2xjLWljb24tY2hldnJvbi1yaWdodCcpLmFkZENsYXNzKCdkc2xjLWljb24tcmVmcmVzaCBkc2xjLWljb24tc3BpbicpO1xuXHRcdH1cblx0fSk7XG5cblx0Ly8gUHJldmlvdXMgRm9udFxuXHRqUXVlcnkoZG9jdW1lbnQpLm9uKCAnY2xpY2snLCAnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkLWZvbnQtcHJldicsICBmdW5jdGlvbihlKXtcblxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdGlmICggISBqUXVlcnkodGhpcykuaGFzQ2xhc3MoJ2RzbGNhLWZvbnQtbG9hZGluZycpICYmICEgalF1ZXJ5KHRoaXMpLnNpYmxpbmdzKCcuZHNsY2EtZm9udC1sb2FkaW5nJykubGVuZ3RoICkge1xuXG5cdFx0XHR2YXIgZHNsY09wdGlvbiA9IGpRdWVyeSh0aGlzKS5jbG9zZXN0KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uLWZvbnQnKTtcblx0XHRcdHZhciBkc2xjRmllbGQgPSBqUXVlcnkoICcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtZm9udCcsIGRzbGNPcHRpb24gKTtcblx0XHRcdHZhciBkc2xjQ3VyckluZGV4ID0gZHNsY0FsbEZvbnRzQXJyYXkuaW5kZXhPZiggZHNsY0ZpZWxkLnZhbCgpICk7XG5cdFx0XHR2YXIgZHNsY05ld0luZGV4ID0gZHNsY0N1cnJJbmRleCAtIDE7XG5cblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkLWZvbnQtc3VnZ2VzdCcsIGRzbGNPcHRpb24pLnRleHQoJycpO1xuXG5cdFx0XHRpZiAoIGRzbGNOZXdJbmRleCA8IDAgKSB7XG5cblx0XHRcdFx0ZHNsY05ld0luZGV4ID0gZHNsY0FsbEZvbnRzQXJyYXkubGVuZ3RoIC0gMVxuXHRcdFx0fVxuXG5cdFx0XHRkc2xjRmllbGQudmFsKCBkc2xjQWxsRm9udHNBcnJheVtkc2xjTmV3SW5kZXhdICkudHJpZ2dlcignY2hhbmdlJyk7XG5cblx0XHRcdGpRdWVyeSh0aGlzKS5hZGRDbGFzcygnZHNsY2EtZm9udC1sb2FkaW5nJykuZmluZCgnLmRzbGNhLWljb24nKS5yZW1vdmVDbGFzcygnZHNsYy1pY29uLWNoZXZyb24tbGVmdCcpLmFkZENsYXNzKCdkc2xjLWljb24tcmVmcmVzaCBkc2xjLWljb24tc3BpbicpO1xuXHRcdH1cblx0fSk7XG5cblx0Ly8gS2V5dXAgKCBsZWZ0IGFycm93LCByaWdodCBhcnJvdywgZWxzZSApXG5cdGpRdWVyeShkb2N1bWVudCkub24oICdrZXl1cCcsICcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtZm9udCcsIGZ1bmN0aW9uKGUpIHtcblxuXHRcdHZhciBkc2xjRmllbGQsIGRzbGNPcHRpb24sIGRzbGNWYWwsIGRzbGNNYXRjaGluZ0ZvbnQgPSBmYWxzZSwgZHNsY0ZvbnQ7XG5cblx0XHRkc2xjRmllbGQgPSBqUXVlcnkodGhpcyk7XG5cdFx0ZHNsY09wdGlvbiA9IGRzbGNGaWVsZC5jbG9zZXN0KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uJyk7XG5cblx0XHRpZiAoIGUud2hpY2ggPT0gMzggKSB7XG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZC1mb250LXByZXYnLCBkc2xjT3B0aW9uKS5jbGljaygpO1xuXHRcdH1cblxuXHRcdGlmICggZS53aGljaCA9PSA0MCApIHtcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkLWZvbnQtbmV4dCcsIGRzbGNPcHRpb24pLmNsaWNrKCk7XG5cdFx0fVxuXG5cdFx0aWYgKCBlLndoaWNoICE9IDEzICYmIGUud2hpY2ggIT0gMzggJiYgZS53aGljaCAhPSA0MCApIHtcblxuXHRcdFx0ZHNsY1ZhbCA9IGRzbGNGaWVsZC52YWwoKTtcblxuXHRcdFx0dmFyIHNlYXJjaCA9IFtdO1xuXHRcdFx0dmFyIHJlID0gbmV3IFJlZ0V4cCgnXicgKyBkc2xjVmFsLCAnaScpO1xuXHRcdFx0dmFyIGRzbGNGb250c0Ftb3VudCA9IGRzbGNBbGxGb250c0FycmF5Lmxlbmd0aDtcblx0XHRcdHZhciBpID0gMDtcblxuXHRcdFx0ZG8ge1xuXG5cdFx0XHRcdGlmIChyZS50ZXN0KGRzbGNBbGxGb250c0FycmF5W2ldKSkge1xuXG5cdFx0XHRcdFx0aWYgKCAhIGRzbGNNYXRjaGluZ0ZvbnQgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBkc2xjTWF0Y2hpbmdGb250ID0gZHNsY0FsbEZvbnRzQXJyYXlbaV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdGkrKzsgfSB3aGlsZSAoaSA8IGRzbGNGb250c0Ftb3VudCk7XG5cblx0XHRcdGlmICggISBkc2xjTWF0Y2hpbmdGb250ICkge1xuXG5cdFx0XHRcdGRzbGNGb250ID0gZHNsY1ZhbDtcblx0XHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtZm9udC1zdWdnZXN0JywgZHNsY09wdGlvbikuaGlkZSgpO1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRkc2xjRm9udCA9IGRzbGNNYXRjaGluZ0ZvbnQ7XG5cdFx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkLWZvbnQtc3VnZ2VzdCcsIGRzbGNPcHRpb24pLnNob3coKTtcblx0XHRcdH1cblxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtZm9udC1zdWdnZXN0JywgZHNsY09wdGlvbikudGV4dCggZHNsY0ZvbnQgKTtcblxuXHRcdFx0aWYgKCBkc2xjRm9udC5sZW5ndGggKXtcblxuXHRcdFx0XHRkc2xjRmllbGQudmFsKCBkc2xjRm9udC5zdWJzdHJpbmcoIDAgLCBkc2xjRmllbGQudmFsKCkubGVuZ3RoICkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdC8vIEtleSBwcmVzcyAoIGVudGVyIClcblx0alF1ZXJ5KGRvY3VtZW50KS5vbiggJ2tleXByZXNzJywgJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZC1mb250JywgZnVuY3Rpb24oZSkge1xuXG5cdFx0aWYgKCBlLndoaWNoID09IDEzICkge1xuXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdHZhciBkc2xjRmllbGQsIGRzbGNPcHRpb24sIGRzbGNWYWwsIGRzbGNNYXRjaGluZ0ZvbnQsIGRzbGNGb250O1xuXG5cdFx0XHRkc2xjRmllbGQgPSBqUXVlcnkodGhpcyk7XG5cdFx0XHRkc2xjT3B0aW9uID0gZHNsY0ZpZWxkLmNsb3Nlc3QoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24nKTtcblxuXHRcdFx0alF1ZXJ5KHRoaXMpLnZhbCggalF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtZm9udC1zdWdnZXN0JywgZHNsY09wdGlvbikudGV4dCgpICkudHJpZ2dlcignY2hhbmdlJyk7XG5cblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkLWZvbnQtc3VnZ2VzdCcsIGRzbGNPcHRpb24pLnRleHQoJycpO1xuXHRcdH1cblx0fSk7XG59XG5cbi8qXG4gKiBNT0RVTEVTIFNFVFRJTkdTIFBBTkVMIC0gQ2hhbmdlIGljb24gY29kZSBiYXNlZCBvbiBkaXJlY3Rpb24gKG5leHQvcHJldmlvdXMpXG4gKi9cbmZ1bmN0aW9uIGRzbGNfbGlzdF9pY29uKCBvYmplY3QsIGRpcmVjdGlvbiApIHtcblxuXHR2YXIgZHNsY09wdGlvbiA9IGpRdWVyeShvYmplY3QpLmNsb3Nlc3QoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24taWNvbicpO1xuXHR2YXIgZHNsY0ZpZWxkID0galF1ZXJ5KCAnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkLWljb24nLCBkc2xjT3B0aW9uICk7XG5cdHZhciBkc2xjQ3VyckluZGV4ID0gZHNsY0ljb25zQ3VycmVudFNldC5pbmRleE9mKCBkc2xjRmllbGQudmFsKCkgKTtcblxuXHRpZiAoIGRpcmVjdGlvbiA9PSAncHJldmlvdXMnICkge1xuXG5cdFx0dmFyIGRzbGNOZXdJbmRleCA9IGRzbGNDdXJySW5kZXggLSAxO1xuXHR9IGVsc2Uge1xuXG5cdFx0dmFyIGRzbGNOZXdJbmRleCA9IGRzbGNDdXJySW5kZXggKyAxO1xuXHR9XG5cblx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtaWNvbi1zdWdnZXN0JywgZHNsY09wdGlvbikudGV4dCgnJyk7XG5cblx0aWYgKCBkc2xjTmV3SW5kZXggPCAwICkge1xuXG5cdFx0ZHNsY05ld0luZGV4ID0gZHNsY0ljb25zQ3VycmVudFNldC5sZW5ndGggLSAxXG5cdH1cblxuXHRkc2xjRmllbGQudmFsKCBkc2xjSWNvbnNDdXJyZW50U2V0W2RzbGNOZXdJbmRleF0gKS50cmlnZ2VyKCdjaGFuZ2UnKTtcbn1cblxuLyoqXG4gKiBNT0RVTEVTIFNFVFRJTkdTIFBBTkVMIC0gSWNvbiBvcHRpb24gdHlwZVxuICovXG5mdW5jdGlvbiBkc2xjX21vZHVsZV9vcHRpb25zX2ljb24oKSB7XG5cblx0Ly8gS2V5IFVwICggYXJyb3cgdXAsIGFycm93IGRvd24sIGVsc2UgKVxuXG5cdGpRdWVyeShkb2N1bWVudCkub24oICdrZXl1cCcsICcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtaWNvbicsIGZ1bmN0aW9uKGUpIHtcblxuXHRcdHZhciBkc2xjRmllbGQsIGRzbGNPcHRpb24sIGRzbGNWYWwsIGRzbGNJY29uc0FycmF5R3JlcCwgZHNsY0ljb247XG5cblx0XHRkc2xjRmllbGQgPSBqUXVlcnkodGhpcyk7XG5cdFx0ZHNsY09wdGlvbiA9IGRzbGNGaWVsZC5jbG9zZXN0KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uJyk7XG5cblx0XHQvLyBLZXkgcHJlc3NlZDogYXJyb3cgdXBcblx0XHRpZiAoIGUud2hpY2ggPT0gMzggKSB7XG5cblx0XHRcdGRzbGNfbGlzdF9pY29uKGRzbGNGaWVsZCwncHJldmlvdXMnKTtcblx0XHR9XG5cblx0XHQvLyBLZXkgcHJlc3NlZDogYXJyb3cgZG93blxuXHRcdGlmICggZS53aGljaCA9PSA0MCApIHtcblxuXHRcdFx0ZHNsY19saXN0X2ljb24oZHNsY0ZpZWxkLCduZXh0Jyk7XG5cdFx0fVxuXG5cdFx0aWYgKCBlLndoaWNoICE9IDEzICYmIGUud2hpY2ggIT0gMzggJiYgZS53aGljaCAhPSA0MCApIHtcblxuXHRcdFx0ZHNsY1ZhbCA9IGRzbGNGaWVsZC52YWwoKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0ZHNsY0ZpZWxkLnZhbCggZHNsY1ZhbCApO1xuXG5cdFx0XHRkc2xjSWNvbnNBcnJheUdyZXAgPSBqUXVlcnkuZ3JlcChkc2xjSWNvbnNDdXJyZW50U2V0LCBmdW5jdGlvbih2YWx1ZSwgaSkge1xuXHRcdFx0XHRyZXR1cm4gKCB2YWx1ZS5pbmRleE9mKCBkc2xjVmFsICkgPT0gMCApO1xuXHRcdFx0fSk7XG5cblx0XHRcdGRzbGNJY29uID0gZHNsY0ljb25zQXJyYXlHcmVwWzBdO1xuXG5cdFx0XHRqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZC1pY29uLXN1Z2dlc3QnLCBkc2xjT3B0aW9uKS50ZXh0KCBkc2xjSWNvbiApO1xuXHRcdH1cblx0fSk7XG5cblx0Ly8gS2V5IFByZXNzICggRW50ZXIgKVxuXG5cdGpRdWVyeShkb2N1bWVudCkub24oICdrZXlwcmVzcycsICcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtaWNvbicsIGZ1bmN0aW9uKGUpIHtcblxuXHRcdGlmICggZS53aGljaCA9PSAxMyApIHtcblxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHR2YXIgZHNsY0ZpZWxkLCBkc2xjT3B0aW9uLCBkc2xjVmFsLCBkc2xjSWNvbnNBcnJheUdyZXAsIGRzbGNJY29uO1xuXG5cdFx0XHRkc2xjRmllbGQgPSBqUXVlcnkodGhpcyk7XG5cdFx0XHRkc2xjT3B0aW9uID0gZHNsY0ZpZWxkLmNsb3Nlc3QoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24nKTtcblxuXHRcdFx0alF1ZXJ5KHRoaXMpLnZhbCggalF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtaWNvbi1zdWdnZXN0JywgZHNsY09wdGlvbikudGV4dCgpICkudHJpZ2dlcignY2hhbmdlJyk7XG5cblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkLWljb24tc3VnZ2VzdCcsIGRzbGNPcHRpb24pLnRleHQoJycpO1xuXHRcdH1cblx0fSk7XG59XG5cbi8qKlxuICogTU9EVUxFUyBTRVRUSU5HUyBQQU5FTCAtIHJldHVybiBvcHRpb25zIGlkXG4gKi9cbmZ1bmN0aW9uIGRzbGNfbW9kdWxlX29wdGlvbnNfaWNvbl9yZXR1cm5pZCgpIHtcblxuXHRqUXVlcnkoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuZHNsY2Etb3Blbi1tb2RhbC1ob29rW2RhdGEtbW9kYWxePVwiLmRzbGMtbGlzdC1pY29uc1wiXScsIGZ1bmN0aW9uKGVsKSB7XG5cdFx0alF1ZXJ5KHRoaXMpLmNsb3Nlc3QoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24taWNvbicpLmZpbmQoJ2lucHV0JykuYWRkQ2xhc3MoJ2ljb24tbW9kYWwtYWN0aXZlJyk7XG5cdH0pO1xuXG5cdGpRdWVyeShkb2N1bWVudCkub24oJ2NsaWNrJywgJy5kc2xjYS1tb2RhbC1pY29ucyAuaWNvbi1pdGVtJywgZnVuY3Rpb24oZWwpIHtcblxuXHRcdC8vIEdldCBzZWxlY3RlZCBpdGVtIGNvZGVcblx0XHR2YXIgc2VsZWN0ZWRJY29uQ29kZSA9IGpRdWVyeSh0aGlzKS5maW5kKCcuaWNvbi1pdGVtX25hbWUnKS50ZXh0KCk7XG5cdFx0alF1ZXJ5KCdpbnB1dC5pY29uLW1vZGFsLWFjdGl2ZScpLnZhbChzZWxlY3RlZEljb25Db2RlKS5jaGFuZ2UoKTtcblxuXHRcdC8vIENsb3NlIG1vZGFsIHdpbmRvd1xuXHRcdGhpZGVNb2RhbCggJycsIGpRdWVyeSgnLmRzbGNhLW1vZGFsOnZpc2libGUnKSApO1xuXHRcdGpRdWVyeSgnaW5wdXQuaWNvbi1tb2RhbC1hY3RpdmUnKS5yZW1vdmVDbGFzcygnaWNvbi1tb2RhbC1hY3RpdmUnKTtcblx0fSk7XG59XG5cbi8qKlxuICogTU9EVUxFUyBTRVRUSU5HUyBQQU5FTCAtIFRleHQgYWxpZ24gb3B0aW9uIHR5cGVcbiAqL1xuZnVuY3Rpb24gZHNsY19tb2R1bGVfb3B0aW9uc190ZXh0X2FsaWduKCkge1xuXG5cdGpRdWVyeShkb2N1bWVudCkub24oICdjbGljaycsICcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uLXRleHQtYWxpZ24taG9vaycsIGZ1bmN0aW9uKCl7XG5cblx0XHR2YXIgbmV3T3B0ID0galF1ZXJ5KHRoaXMpLFxuXHRcdG90aGVyT3B0ID0galF1ZXJ5KHRoaXMpLmNsb3Nlc3QoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24tdGV4dC1hbGlnbi13cmFwcGVyJykuZmluZCgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbi10ZXh0LWFsaWduLWhvb2snKSxcblx0XHRuZXdWYWwgPSBuZXdPcHQuZGF0YSgndmFsJyksXG5cdFx0cmVhbE9wdCA9IGpRdWVyeSh0aGlzKS5jbG9zZXN0KCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uLXRleHQtYWxpZ24td3JhcHBlcicpLnNpYmxpbmdzKCdpbnB1dC5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZCcpO1xuXG5cdFx0b3RoZXJPcHQucmVtb3ZlQ2xhc3MoJ2RzbGNhLWFjdGl2ZScpO1xuXHRcdG5ld09wdC5hZGRDbGFzcygnZHNsY2EtYWN0aXZlJyk7XG5cblx0XHRyZWFsT3B0LnZhbCggbmV3VmFsICkudHJpZ2dlcignY2hhbmdlJyk7XG5cdH0pO1xufVxuXG4vKipcbiAqIE1PRFVMRVMgU0VUVElOR1MgUEFORUwgLSBDaGVja2JveCBPcHRpb24gVHlwZVxuICovXG5mdW5jdGlvbiBkc2xjX21vZHVsZV9vcHRpb25zX2NoZWNrYm94KCkge1xuXG5cdGpRdWVyeShkb2N1bWVudCkub24oICdjbGljaycsICcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uLWNoZWNrYm94LWhvb2ssIC5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1vcHRpb24tY2hlY2tib3gtaG9vaycsIGZ1bmN0aW9uKCl7XG5cblx0XHR2YXIgY2hlY2tGYWtlID0galF1ZXJ5KHRoaXMpO1xuXHRcdHZhciBjaGVja1JlYWwgPSBjaGVja0Zha2Uuc2libGluZ3MoJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXScpO1xuXG5cdFx0aWYgKCBjaGVja1JlYWwucHJvcCgnY2hlY2tlZCcpICkge1xuXHRcdFx0Y2hlY2tSZWFsLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG5cdFx0XHRjaGVja0Zha2UuZmluZCgnLmRzbGNhLWljb24nKS5yZW1vdmVDbGFzcygnZHNsYy1pY29uLWNoZWNrJykuYWRkQ2xhc3MoJ2RzbGMtaWNvbi1jaGVjay1lbXB0eScpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjaGVja1JlYWwucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuXHRcdFx0Y2hlY2tGYWtlLmZpbmQoJy5kc2xjYS1pY29uJykucmVtb3ZlQ2xhc3MoJ2RzbGMtaWNvbi1jaGVjay1lbXB0eScpLmFkZENsYXNzKCdkc2xjLWljb24tY2hlY2snKTtcblx0XHR9XG5cblx0XHRjaGVja1JlYWwuY2hhbmdlKCk7XG5cdH0pO1xufVxuXG4vKipcbiAqIE1PRFVMRVMgU0VUVElOR1MgUEFORUwgLSBCb3ggU2hhZG93IE9wdGlvbiBUeXBlXG4gKi9cbmZ1bmN0aW9uIGRzbGNfbW9kdWxlX29wdGlvbnNfYm94X3NoYWRvdygpIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfbW9kdWxlX29wdGlvbnNfYm94X3NoYWRvdycgKTtcblxuXHQvKipcblx0ICogVmFsdWUgQ2hhbmdlXG5cdCAqL1xuXG5cdGpRdWVyeShkb2N1bWVudCkub24oICdjaGFuZ2UnLCAnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbi1ib3gtc2hhZG93LWhvciwgJytcblx0XHQnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbi1ib3gtc2hhZG93LXZlciwgLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbi1ib3gtc2hhZG93LWJsdXIsIC5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24tYm94LXNoYWRvdy1zcHJlYWQsJytcblx0XHQnIC5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24tYm94LXNoYWRvdy1jb2xvciwgLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbi1ib3gtc2hhZG93LWluc2V0JywgZnVuY3Rpb24oKXtcblxuXHRcdHZhciBib3hTaGFkb3dXcmFwcGVyID0galF1ZXJ5KHRoaXMpLmNsb3Nlc3QoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24nKSxcblx0XHRib3hTaGFkb3dJbnB1dCA9IGJveFNoYWRvd1dyYXBwZXIuZmluZCgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkJyksXG5cdFx0Ym94U2hhZG93SG9yID0gYm94U2hhZG93V3JhcHBlci5maW5kKCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uLWJveC1zaGFkb3ctaG9yJykudmFsKCksXG5cdFx0Ym94U2hhZG93VmVyID0gYm94U2hhZG93V3JhcHBlci5maW5kKCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uLWJveC1zaGFkb3ctdmVyJykudmFsKCksXG5cdFx0Ym94U2hhZG93Qmx1ciA9IGJveFNoYWRvd1dyYXBwZXIuZmluZCgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbi1ib3gtc2hhZG93LWJsdXInKS52YWwoKSxcblx0XHRib3hTaGFkb3dTcHJlYWQgPSBib3hTaGFkb3dXcmFwcGVyLmZpbmQoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24tYm94LXNoYWRvdy1zcHJlYWQnKS52YWwoKSxcblx0XHRib3hTaGFkb3dDb2xvciA9IGJveFNoYWRvd1dyYXBwZXIuZmluZCgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbi1ib3gtc2hhZG93LWNvbG9yJykudmFsKCksXG5cdFx0Ym94U2hhZG93SW5zZXQgPSBib3hTaGFkb3dXcmFwcGVyLmZpbmQoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24tYm94LXNoYWRvdy1pbnNldCcpLmlzKCc6Y2hlY2tlZCcpO1xuXG5cdFx0aWYgKCBib3hTaGFkb3dJbnNldCApIHsgYm94U2hhZG93SW5zZXQgPSAnIGluc2V0JzsgfSBlbHNlIHsgYm94U2hhZG93SW5zZXQgPSAnJzsgfVxuXG5cdFx0dmFyIGJveFNoYWRvd1ZhbCA9IGJveFNoYWRvd0hvciArICdweCAnICsgYm94U2hhZG93VmVyICsgJ3B4ICcgKyBib3hTaGFkb3dCbHVyICsgJ3B4ICcgKyBib3hTaGFkb3dTcHJlYWQgKyAncHggJyArIGJveFNoYWRvd0NvbG9yICsgYm94U2hhZG93SW5zZXQ7XG5cblx0XHRib3hTaGFkb3dJbnB1dC52YWwoIGJveFNoYWRvd1ZhbCApLnRyaWdnZXIoJ2NoYW5nZScpO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBNT0RVTEVTIFNFVFRJTkdTIFBBTkVMIC0gVGV4dCBTaGFkb3cgT3B0aW9uIFR5cGVcbiAqL1xuZnVuY3Rpb24gZHNsY19tb2R1bGVfb3B0aW9uc190ZXh0X3NoYWRvdygpIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfbW9kdWxlX29wdGlvbnNfdGV4dF9zaGFkb3cnICk7XG5cblx0LyoqXG5cdCAqIFZhbHVlIENoYW5nZVxuXHQgKi9cblxuXHRqUXVlcnkoZG9jdW1lbnQpLm9uKCAnY2hhbmdlJywgJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24tdGV4dC1zaGFkb3ctaG9yLCAuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uLXRleHQtc2hhZG93LXZlciwnK1xuXHRcdCcuZHNsY2EtbW9kdWxlLWVkaXQtb3B0aW9uLXRleHQtc2hhZG93LWJsdXIsIC5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24tdGV4dC1zaGFkb3ctY29sb3InLCBmdW5jdGlvbigpe1xuXG5cdFx0dmFyIHRleHRTaGFkb3dXcmFwcGVyID0galF1ZXJ5KHRoaXMpLmNsb3Nlc3QoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24nKSxcblx0XHR0ZXh0U2hhZG93SW5wdXQgPSB0ZXh0U2hhZG93V3JhcHBlci5maW5kKCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQnKSxcblx0XHR0ZXh0U2hhZG93SG9yID0gdGV4dFNoYWRvd1dyYXBwZXIuZmluZCgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbi10ZXh0LXNoYWRvdy1ob3InKS52YWwoKSxcblx0XHR0ZXh0U2hhZG93VmVyID0gdGV4dFNoYWRvd1dyYXBwZXIuZmluZCgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbi10ZXh0LXNoYWRvdy12ZXInKS52YWwoKSxcblx0XHR0ZXh0U2hhZG93Qmx1ciA9IHRleHRTaGFkb3dXcmFwcGVyLmZpbmQoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24tdGV4dC1zaGFkb3ctYmx1cicpLnZhbCgpLFxuXHRcdHRleHRTaGFkb3dDb2xvciA9IHRleHRTaGFkb3dXcmFwcGVyLmZpbmQoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24tdGV4dC1zaGFkb3ctY29sb3InKS52YWwoKTtcblxuXHRcdHZhciB0ZXh0U2hhZG93VmFsID0gdGV4dFNoYWRvd0hvciArICdweCAnICsgdGV4dFNoYWRvd1ZlciArICdweCAnICsgdGV4dFNoYWRvd0JsdXIgKyAncHggJyArIHRleHRTaGFkb3dDb2xvcjtcblxuXHRcdHRleHRTaGFkb3dJbnB1dC52YWwoIHRleHRTaGFkb3dWYWwgKS50cmlnZ2VyKCdjaGFuZ2UnKTtcblx0fSk7XG59XG5cbi8qKlxuICogTU9EVUxFUyBTRVRUSU5HUyBQQU5FTCAtIENvbG9yIE9wdGlvbiBUeXBlXG4gKi9cbmZ1bmN0aW9uIGRzbGNfbW9kdWxlX29wdGlvbnNfY29sb3IoIGZpZWxkICkge1xuXG5cdGlmICggd2luZG93LmRzbGNEZWJ1ZyApIGNvbnNvbGUubG9nKCAnZHNsY19tb2R1bGVfb3B0aW9uc19jb2xvcicgKTtcblxuXHR2YXIgZHNsY0NvbG9yRmllbGQsXG5cdGRzbGNBZmZlY3RPbkNoYW5nZUVsLFxuXHRkc2xjQWZmZWN0T25DaGFuZ2VSdWxlLFxuXHRkc2xjQ29sb3JGaWVsZFZhbCxcblx0ZHNsY01vZHVsZSxcblx0ZHNsY09wdGlvbklELFxuXHRkc2xjQ3VyckNvbG9yO1xuXG5cdC8qKlxuXHQgKiBDb2xvciBQYWxsZXRlLlxuXHQgKlxuXHQgKiBMYXN0IHRocmVlIHNlbGVjdGVkIGNvbG9ycyBnZXQgc3RvcmVkIGluIHRoZSBsb2NhbCBzdG9yYWdlXG5cdCAqIG9mIHRoZSBicm93c2VyIHVuZGVyIHRoZSBrZXkgJ2RzbGNDb2xvcnMtZXhhbXBsZS5jb20nLlxuXHQgKlxuXHQgKiBCZXNpZGUgbGF0ZXN0IHRocmVlIGN1c3RvbSBjb2xvcnMsIGNvbG9yIHBhbGV0dGUgaW5jbHVkZXNcblx0ICogdGhyZWUgcHJlZGVmaW5lZC9maXhlZCBjb2xvcnM6IHdoaXRlLCBibGFjayBhbmQgdHJhbnNwYXJlbnQuXG5cdCAqL1xuXG5cdHZhciBkc2xjQ29sb3JQYWxsZXRlID0gW10sXG5cdGN1cnJTdG9yYWdlLFxuXHRpbmRleDtcblxuXHR2YXIgcGFsbGV0ZUN1cnJlbnREb21tYWluID0gJ2RzbGNDb2xvcnMtJyArIGRvY3VtZW50LmRvbWFpblxuXG5cdC8vIEdldCB0aHJlZSByZWNlbnQgY29sb3JzIGZyb20gdGhlIGxvY2FsIHN0b3JhZ2UuXG5cdGlmICggdW5kZWZpbmVkICE9PSBsb2NhbFN0b3JhZ2VbIHBhbGxldGVDdXJyZW50RG9tbWFpbiBdICkge1xuXHRcdGN1cnJTdG9yYWdlID0gSlNPTi5wYXJzZSggbG9jYWxTdG9yYWdlWyBwYWxsZXRlQ3VycmVudERvbW1haW4gXSApO1xuXHRcdGRzbGNDb2xvclBhbGxldGUgPSBjdXJyU3RvcmFnZTtcblx0fVxuXG5cdC8vIFNldCBkZWZhdWx0IGNvbG9ycyBpZiBub3QgZW5vdWdoIGN1c3RvbSBjb2xvcnMuIFNob3VsZCBiZSBzaXguXG5cdGlmICggMSA+IGRzbGNDb2xvclBhbGxldGUubGVuZ3RoICkge1xuXHRcdGRzbGNDb2xvclBhbGxldGUucHVzaCggJyM3OGInICk7XG5cdH1cblxuXHRpZiAoIDIgPiBkc2xjQ29sb3JQYWxsZXRlLmxlbmd0aCApIHtcblx0XHRkc2xjQ29sb3JQYWxsZXRlLnB1c2goICcjYWIwJyApO1xuXHR9XG5cblx0aWYgKCAzID4gZHNsY0NvbG9yUGFsbGV0ZS5sZW5ndGggKSB7XG5cdFx0ZHNsY0NvbG9yUGFsbGV0ZS5wdXNoKCAnI2RlMycgKTtcblx0fVxuXG5cdC8vIEFkZCB0aGUgbmV4dCBcImZpeGVkXCIgY29sb3JzIHRvIHRoZSBlbmQgb2YgdGhlIHBhbGxldGUuXG5cdGRzbGNDb2xvclBhbGxldGUucHVzaCggJyNmZmYnICk7XG5cdGRzbGNDb2xvclBhbGxldGUucHVzaCggJyMwMDAnICk7XG5cdGRzbGNDb2xvclBhbGxldGUucHVzaCggJ3JnYmEoMCwwLDAsMCknICk7XG5cblx0dmFyIHF1ZXJ5ID0gZmllbGQ7XG5cblx0Ly8gRm9yIGVhY2ggY29sb3IgcGlja2VyIGlucHV0IGZpZWxkLlxuXHRqUXVlcnkocXVlcnkpLmVhY2goIGZ1bmN0aW9uKCl7XG5cblx0XHQvLyBTZXQgc2V0dGluZyB0aGUgY29ub3Ryb2wgd3JhcHBlci5cblx0XHR2YXIgd3JhcHBlciA9IGpRdWVyeSh0aGlzKS5jbG9zZXN0KCcuZHNsY2EtY29sb3Itb3B0aW9uJyk7XG5cdFx0dmFyIGlucHV0ID0galF1ZXJ5KHRoaXMpO1xuXG5cdFx0ZHNsY0N1cnJDb2xvciA9IGpRdWVyeSh0aGlzKS52YWwoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEluaXQgc3RhbmRhcmQgV1AgY29sb3IgcGlja2VycyAoSXJpcykuXG5cdFx0ICpcblx0XHQgKiBTZWU6IGh0dHA6Ly9hdXRvbWF0dGljLmdpdGh1Yi5pby9JcmlzL1xuXHRcdCAqIFNlZTogaHR0cHM6Ly9naXRodWIuY29tLzIzcjlpMC93cC1jb2xvci1waWNrZXItYWxwaGFcblx0XHQgKi9cblx0XHRpbnB1dC53cENvbG9yUGlja2VyKHtcblx0XHRcdG1vZGU6ICdoc2wnLFxuXHRcdFx0cGFsZXR0ZXM6IGRzbGNDb2xvclBhbGxldGUsXG5cdFx0XHRjaGFuZ2U6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuXHRcdFx0XHQvLyBAdG9kbzogZ2V0IHRoZSBjb2RlIGJlbG93IGludG8gYSBzZXBhcmF0ZSBmdW5jdGlvbiFcblx0XHRcdFx0Ly8gVGhlIG9wdGlvbiBmaWVsZFxuXHRcdFx0XHRkc2xjQ29sb3JGaWVsZCA9IGlucHV0O1xuXG5cdFx0XHRcdHZhciBjb2xvciA9IGlucHV0LndwQ29sb3JQaWNrZXIoJ2NvbG9yJyk7XG5cblx0XHRcdFx0Ly8gVGhlIG5ldyBjb2xvclxuXHRcdFx0XHRpZiAoIGNvbG9yID09IG51bGwgKSB7XG5cdFx0XHRcdFx0ZHNsY0NvbG9yRmllbGRWYWwgPSAnJztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkc2xjQ29sb3JGaWVsZFZhbCA9IGNvbG9yO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2hhbmdlIGN1cnJlbnQgdmFsdWUgb2Ygb3B0aW9uXG5cdFx0XHRcdGRzbGNDb2xvckZpZWxkLnZhbCggZHNsY0NvbG9yRmllbGRWYWwgKS50cmlnZ2VyKCdjaGFuZ2UnKTtcblxuXHRcdFx0XHQvLyBDaGFuZ2UgaW5wdXQgZmllbGQgYmFja2dyb3VuZC5cblx0XHRcdFx0ZHNsY0NvbG9yRmllbGQuY3NzKCdiYWNrZ3JvdW5kJywgZHNsY0NvbG9yRmllbGRWYWwpO1xuXG5cdFx0XHRcdC8vIExpdmUgY2hhbmdlXG5cdFx0XHRcdGRzbGNBZmZlY3RPbkNoYW5nZUVsID0gZHNsY0NvbG9yRmllbGQuZGF0YSgnYWZmZWN0LW9uLWNoYW5nZS1lbCcpO1xuXHRcdFx0XHRkc2xjQWZmZWN0T25DaGFuZ2VSdWxlID0gZHNsY0NvbG9yRmllbGQuZGF0YSgnYWZmZWN0LW9uLWNoYW5nZS1ydWxlJyk7XG5cblx0XHRcdFx0Ly8gUk9XcyBkb2Vzbid0IGhhdmUgJ2RzbGNBZmZlY3RPbkNoYW5nZUVsJyBkZWZpbmVkXG5cdFx0XHRcdGlmICggbnVsbCAhPSBkc2xjQWZmZWN0T25DaGFuZ2VFbCAmJiAnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1iZWluZy1lZGl0ZWQnICE9PSBkc2xjQWZmZWN0T25DaGFuZ2VFbCApIHtcblx0XHRcdFx0XHRqUXVlcnkoIGRzbGNBZmZlY3RPbkNoYW5nZUVsICwgd2luZG93LkxpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQuZmluZCgnLmRzbGNhLW1vZHVsZS1iZWluZy1lZGl0ZWQnKSApLmNzcyggZHNsY0FmZmVjdE9uQ2hhbmdlUnVsZSAsIGRzbGNDb2xvckZpZWxkVmFsICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gVXBkYXRlIG9wdGlvblxuXHRcdFx0XHRkc2xjTW9kdWxlID0galF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcsIHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KTtcblx0XHRcdFx0ZHNsY09wdGlvbklEID0gZHNsY0NvbG9yRmllbGQuZGF0YSgnaWQnKTtcblx0XHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kdWxlLW9wdGlvbi1mcm9udFtkYXRhLWlkPVwiJyArIGRzbGNPcHRpb25JRCArICdcIl0nLCBkc2xjTW9kdWxlKS52YWwoIGRzbGNDb2xvckZpZWxkVmFsICk7XG5cblx0XHRcdFx0Ly8gQWRkIGNoYW5nZWQgY2xhc3Ncblx0XHRcdFx0ZHNsY01vZHVsZS5hZGRDbGFzcygnZHNsY2EtbW9kdWxlLWNoYW5nZS1tYWRlJyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR2YXIgY29sb3JQaWNrZXJQb3B1cCA9IHdyYXBwZXIuZmluZCgnLndwLXBpY2tlci1ob2xkZXIgLmlyaXMtcGlja2VyJyk7XG5cdFx0Y29sb3JQaWNrZXJQb3B1cC5hcHBlbmQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiZHNsY2EtY29sb3JwaWNrZXItYXBwbHlcIj5BcHBseTwvYnV0dG9uPicpO1xuXG5cdFx0dmFyIGFwcGx5ID0gd3JhcHBlci5maW5kKCcuZHNsY2EtY29sb3JwaWNrZXItYXBwbHknKTtcblxuXHRcdGlucHV0LndwQ29sb3JQaWNrZXIoICdvcGVuJyApO1xuXG5cdFx0Ly8gSWYgW0FQUExZXSBidXR0b24gY2xpY2tlZC4uLlxuXHRcdGpRdWVyeShhcHBseSkub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIG5ldyBjb2xvciBpcyBub3Qgb25lIG9mIHRoZSBcImZpeGVkXCIgY29sb3JzLi4uXG5cdFx0XHRpZiAoICcjZmZmJyAhPT0gZHNsY0NvbG9yRmllbGRWYWwgJiZcblx0XHRcdFx0ICAnI2ZmZmZmZicgIT09IGRzbGNDb2xvckZpZWxkVmFsICYmXG5cdFx0XHRcdCAgJyMwMDAnICE9PSBkc2xjQ29sb3JGaWVsZFZhbCAmJlxuXHRcdFx0XHQgICcjMDAwMDAwJyAhPT0gZHNsY0NvbG9yRmllbGRWYWwgJiZcblx0XHRcdFx0ICAncmdiYSgwLDAsMCwwKScgIT09IGRzbGNDb2xvckZpZWxkVmFsICkge1xuXG5cdFx0XHRcdC8vIFVwZGF0ZSBwYWxsZXRlIGNvbG9ycyBpbiB0aGUgbG9jYWwgc3RvcmFnZS5cblx0XHRcdFx0aWYgKCB1bmRlZmluZWQgPT09IGxvY2FsU3RvcmFnZVsgcGFsbGV0ZUN1cnJlbnREb21tYWluIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBDcmVhdGUgbmV3IHJlY29yZCBpZiBubyBsb2NhbCBzdG9yYWdlIGZvdW5kLlxuXHRcdFx0XHRcdHZhciBuZXdTdG9yYWdlID0gWyBkc2xjQ29sb3JGaWVsZFZhbCBdO1xuXHRcdFx0XHRcdGxvY2FsU3RvcmFnZVsgcGFsbGV0ZUN1cnJlbnREb21tYWluIF0gPSBKU09OLnN0cmluZ2lmeShuZXdTdG9yYWdlKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gVXBkYXRlIGV4aXN0aW5nIHJlY29yZCBpbiB0aGUgbG9jYWwgc3RvcmFnZS5cblx0XHRcdFx0XHR2YXIgbmV3U3RvcmFnZSA9IEpTT04ucGFyc2UoIGxvY2FsU3RvcmFnZVsgcGFsbGV0ZUN1cnJlbnREb21tYWluIF0gKTtcblxuXHRcdFx0XHRcdGlmICggbmV3U3RvcmFnZS5pbmRleE9mKCBkc2xjQ29sb3JGaWVsZFZhbCApID09IC0xICkge1xuXG5cdFx0XHRcdFx0XHQvLyBBZGQgbmV3IGNvbG9yIHRvIHRoZSBoZWFkIG9mIHRoZSBwYWxsZXRlIGFycmF5LlxuXHRcdFx0XHRcdFx0bmV3U3RvcmFnZS51bnNoaWZ0KCBkc2xjQ29sb3JGaWVsZFZhbCApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIDMgPCBuZXdTdG9yYWdlLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIHRoZSBsYXN0IGNvbG9yIGZyb20gdGhlIHBhbGxldGUuXG5cdFx0XHRcdFx0XHRcdG5ld1N0b3JhZ2UucG9wKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bG9jYWxTdG9yYWdlWyBwYWxsZXRlQ3VycmVudERvbW1haW4gXSA9IEpTT04uc3RyaW5naWZ5KG5ld1N0b3JhZ2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlucHV0LndwQ29sb3JQaWNrZXIoICdjbG9zZScgKTtcblx0XHR9KTtcblxuXHRcdC8vIFNhdmUgdGhpcyBlbGVtZW50IHRvIGRlc3Ryb3kgb24gcGFuZWwgY2xvc2VkLlxuXHRcdHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5IZWxwZXJzLmNvbG9ycGlja2Vycy5wdXNoKCBqUXVlcnkodGhpcykgKTtcblx0fSk7XG59XG5cbi8qKlxuICogTU9EVUxFUyBTRVRUSU5HUyBQQU5FTCAtIE51bWVyaWMgT3B0aW9uIFR5cGVcbiAqL1xuZnVuY3Rpb24gZHNsY19tb2R1bGVfb3B0aW9uc19udW1lcmljKCBmaWVsZFdyYXBwZXIgKSB7XG5cdGlmICggd2luZG93LmRzbGNEZWJ1ZyApIGNvbnNvbGUubG9nKCAnZHNsY19tb2R1bGVfb3B0aW9uc19udW1lcmljJyApO1xuXG5cdHZhciBxdWVyeSA9IGZpZWxkV3JhcHBlcjsgLy8gfHwgJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24tc2xpZGVyJztcblxuXHRqUXVlcnkocXVlcnkpLmVhY2goZnVuY3Rpb24oKXtcblxuXHRcdHZhciBjb250cm9sV3JhcHBlciA9IGpRdWVyeSh0aGlzKTtcblxuXHRcdC8qIENyZWF0ZSBhbiBlbXB0eSBkaXYgdG8gYmUgdXNlcyBieSBqUXVlcnkgYXMgdGhlIHNsaWRlciBjb250YWluZXIuICovXG5cdFx0aWYgKCAwID09PSBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZC1zbGlkZXInLCBjb250cm9sV3JhcHBlcikubGVuZ3RoICkge1xuXHRcdFx0Y29udHJvbFdyYXBwZXIuYXBwZW5kKCc8ZGl2IGNsYXNzPVwiZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtc2xpZGVyXCI+PC9kaXY+Jyk7XG5cdFx0fVxuXG5cdFx0dmFyIHdvcmtpbmdXaXRoTW9kdWxlID0gdHJ1ZTtcblxuXHRcdC8qIElzIHRoZSBjb250cm9sIHBhcnQgb2YgdGhlIG1vZHVsZSBzZXR0aW5nIHBhbmVsIG9yIHNlY3Rpb24gc2V0dGluZ3M/ICovXG5cdFx0aWYgKCBjb250cm9sV3JhcHBlci5oYXNDbGFzcygnZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWVkaXQtb3B0aW9uJykgKSB7XG5cdFx0XHQvLyBXZSBhcmUgd29ya2luZyB3aXRoIHNlY2l0b24uXG5cdFx0XHR3b3JraW5nV2l0aE1vZHVsZSA9IGZhbHNlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBXZSBhcmUgd29ya2luZyB3aXRoIG1vZHVsZS5cblx0XHRcdHdvcmtpbmdXaXRoTW9kdWxlID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIHdvcmtpbmdXaXRoTW9kdWxlICkge1xuXHRcdFx0dmFyIHNsaWRlcklucHV0ID0gY29udHJvbFdyYXBwZXIuZmluZCgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkJyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBzbGlkZXJJbnB1dCA9IGNvbnRyb2xXcmFwcGVyLmZpbmQoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1maWVsZCcpO1xuXHRcdH1cblxuXHRcdC8qIElzIHRoZSBjb250cm9sIHBhcnQgb2YgdGhlIG1vZHVsZSBzZXR0aW5nIHBhbmVsIG9yIHNlY3Rpb24gc2V0dGluZ3M/ICovXG5cdFx0aWYgKCBjb250cm9sV3JhcHBlci5oYXNDbGFzcygnZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWVkaXQtb3B0aW9uJykgKSB7XG5cdFx0XHQvLyBXZSBhcmUgd29ya2luZyB3aXRoIHNlY2l0b24uXG5cdFx0XHR2YXIgc2xpZGVySW5wdXQgPSBjb250cm9sV3JhcHBlci5maW5kKCcuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWVkaXQtZmllbGQnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gV2UgYXJlIHdvcmtpbmcgd2l0aCBtb2R1bGUuXG5cdFx0XHR2YXIgc2xpZGVySW5wdXQgPSBjb250cm9sV3JhcHBlci5maW5kKCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQnKTtcblx0XHR9XG5cblx0XHR2YXIgc2xpZGVyRXh0ID0gJycsXG5cdFx0c2xpZGVyQ29udHJvbCA9IGNvbnRyb2xXcmFwcGVyLmZpbmQoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZC1zbGlkZXInKSxcblx0XHRjdXJyZW50VmFsICAgID0gcGFyc2VGbG9hdCggc2xpZGVySW5wdXQudmFsKCkgKSxcblxuXHRcdC8vIE1heCB2YWx1ZS4gQnkgZGVmYXVsdCBtYXggaXMgMTAwLlxuXHRcdG1heCA9IHBhcnNlRmxvYXQoIHNsaWRlcklucHV0LmRhdGEoJ21heCcpICksXG5cdFx0Ly8gTWluIHZhbHVlLiBCeSBkZWZhdWx0IG1pbiBpcyAwLlxuXHRcdG1pbiA9IHBhcnNlRmxvYXQoIHNsaWRlcklucHV0LmRhdGEoJ21pbicpICksXG5cdFx0Ly8gSW5jcmVtZW50IHZhbHVlLiBCeSBkZWZhdWx0IGluY3JlbWVudCBpcyAxLlxuXHRcdGluYyA9IHBhcnNlRmxvYXQoIHNsaWRlcklucHV0LmRhdGEoJ2luY3JlbWVudCcpICksXG5cdFx0Ly8gQmFja3VwIHZhbHVlcy5cblx0XHRtYXhfb3JpZyA9IG1heCxcblx0XHRtaW5fb3JpZyA9IG1pbjtcblxuXHRcdC8qKlxuXHRcdCAqIENoZWNrIGlmIHZhbHVlIGNhbid0IGJlIG5lZ2F0aXZlIGFjY29yZGluZyB0byBtb2R1bGUgc2V0dGluZ3MuXG5cdFx0ICovXG5cdFx0dmFyIG9ubHlwb3NpdGl2ZSA9IGZhbHNlO1xuXG5cdFx0aWYgKCB1bmRlZmluZWQgIT09IHNsaWRlcklucHV0LmRhdGEoJ29ubHlwb3NpdGl2ZScpICYmIDEgPT09IHNsaWRlcklucHV0LmRhdGEoJ29ubHlwb3NpdGl2ZScpICApIHtcblx0XHRcdG9ubHlwb3NpdGl2ZSA9IHRydWU7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogSWYgdGhlIGN1cnJlbnQgc2xpZGVyIHZhbHVlIGdldHMgdG8gdGhlIG1heCBvciBtaW4sXG5cdFx0ICogd2Ugc2V0IG5ldyAnd2lkZXInIG1heC9taW4gdmFsdWVzLlxuXHRcdCAqXG5cdFx0ICogVGhpcyB3YXkgc2xpZGVyIGhhcyBubyBmaXhlZCB0b3Agb3IgYm90dG9tIGxpbWl0IG9uZSBvbmUgaGFuZFxuXHRcdCAqIGFuZCB3b3JrcyBwcmVjaXNlIGVub3VnaCBmb3IgYm90aCBzbWFsbCBhbmQgYmlnIHZhbHVlcy5cblx0XHQgKi9cblx0XHRpZiAoIGN1cnJlbnRWYWwgPj0gbWF4ICkge1xuXHRcdFx0bWF4ID0gY3VycmVudFZhbCAqIDI7XG5cdFx0fVxuXG5cdFx0aWYgKCAhIG9ubHlwb3NpdGl2ZSAmJiBjdXJyZW50VmFsIDw9IG1pbiApIHtcblx0XHRcdG1pbiA9IGN1cnJlbnRWYWwgKiAyO1xuXHRcdH1cblxuXHRcdHNsaWRlckNvbnRyb2wuc2xpZGVyKHtcblx0XHRcdG1pbiA6IG1pbixcblx0XHRcdG1heCA6IG1heCxcblx0XHRcdHN0ZXA6IGluYyxcblx0XHRcdHZhbHVlOiBzbGlkZXJJbnB1dC52YWwoKSxcblxuXHRcdFx0c2xpZGU6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuXHRcdFx0XHRzbGlkZXJJbnB1dC52YWwoIHVpLnZhbHVlICsgc2xpZGVyRXh0ICk7XG5cdFx0XHRcdHNsaWRlcklucHV0LnRyaWdnZXIoJ2NoYW5nZScpO1xuXHRcdFx0fSxcblxuXHRcdFx0Y2hhbmdlOiBmdW5jdGlvbihldmVudCwgdWkpIHtcblx0XHRcdFx0LyoqXG5cdFx0XHRcdCAqIElmIHRoZSBjdXJyZW50IHNsaWRlciB2YWx1ZSBnZXRzIHRvIHRoZSBtYXggb3IgbWluLFxuXHRcdFx0XHQgKiB3ZSByZXNldCB0aGUgc2xpZGVyIChkZXN0cm95L2NhbGwgYWdhaW4pIHNvIHNjcmlwdCBhYm92ZVxuXHRcdFx0XHQgKiBzZXQgbmV3IGJpZ2dlciBtYXgvbWluIHZhbHVlcy5cblx0XHRcdFx0ICpcblx0XHRcdFx0ICogVGhpcyB3YXkgc2xpZGVyIGhhcyBubyB0b3Agb3IgYm90dG9tIGxpbWl0IG9uZSBvbmUgaGFuZFxuXHRcdFx0XHQgKiBhbmQgcHJlY2lzZSBlbm91Z2ggZm9yIGJvdGggc21hbGwgYW5kIGJpZyB2YWx1ZXMuXG5cdFx0XHRcdCAqL1xuXHRcdFx0XHRpZiAoIHVpLnZhbHVlID49IG1heCB8fCB1aS52YWx1ZSA8PSBtaW4gKSB7XG5cdFx0XHRcdFx0c2xpZGVyQ29udHJvbC5zbGlkZXIoIFwiZGVzdHJveVwiICk7XG5cdFx0XHRcdFx0ZHNsY19tb2R1bGVfb3B0aW9uc19udW1lcmljKCBjb250cm9sV3JhcHBlciApO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0Lypcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XG5cdFx0XHR9LFxuXHRcdFx0c3RhcnQ6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XG5cdFx0XHR9XG5cdFx0XHQqL1xuXHRcdH0pO1xuXG5cdFx0LyoqXG5cdFx0ICogT25jZSB0aGUgc2xpZGVyIGluaXRpYXRlZCwgc2hvdyBpdCBpbiBIVE1MLlxuXHRcdCAqIFNsaWRlciBjb250cm9sIGlzIGhpZGRlbiBieSBkZWZhdWx0LiBXZSBzaG93IGl0IG9uIGhvdmVyIG9ubHkuXG5cdFx0ICovXG5cdFx0c2xpZGVyQ29udHJvbC5zaG93KCk7XG5cblx0XHQvKiBPbiBtb3VzZSBsZWF2ZTogUmVtb3ZlIGVtcHR5IERJViBhbmQgZGVzdHJveSB0aGUgc2xpZGVyLiAqL1xuXHRcdGpRdWVyeShjb250cm9sV3JhcHBlcikub24oJ21vdXNlbGVhdmUnLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0aWYgKCB1bmRlZmluZWQgIT09IHNsaWRlckNvbnRyb2wuc2xpZGVyKCAnaW5zdGFuY2UnICkgKSB7XG5cdFx0XHRcdGpRdWVyeShzbGlkZXJDb250cm9sKS5zbGlkZXIoICdkZXN0cm95JyApO1xuXHRcdFx0fVxuXG5cdFx0XHRzbGlkZXJDb250cm9sLnJlbW92ZSgpO1xuXHRcdH0pO1xuXG5cblx0XHRpZiggc2xpZGVySW5wdXRbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKCdzbGlkZXItaW5pdGlhdGVkJykgKSByZXR1cm47XG5cdFx0c2xpZGVySW5wdXRbMF0uY2xhc3NMaXN0LmFkZChcInNsaWRlci1pbml0aWF0ZWRcIik7XG5cblx0XHRzbGlkZXJJbnB1dC5vbigna2V5dXAnLCBmdW5jdGlvbihlKXtcblxuXHRcdFx0Ly8gSW4gc29tZSByYXJlIGNhc2VzIHdlIGhhdmUgdGhlIG5leHQgZXJyb3I6XG5cdFx0XHQvLyBUeXBlRXJyb3I6IHVuZGVmaW5lZCBpcyBub3QgYW4gb2JqZWN0IChldmFsdWF0aW5nICdhLmtleS5tYXRjaCcpXG5cdFx0XHRpZiAodW5kZWZpbmVkID09PSBlKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hpZnQgKyBVcC9Eb3duXG5cdFx0XHRpZiggZS5zaGlmdEtleSApIHtcblxuXHRcdFx0XHRpZiggZS5rZXlDb2RlID09IDM4ICkge1xuXHRcdFx0XHRcdHRoaXMudmFsdWUgPSAoIHBhcnNlSW50KHRoaXMudmFsdWUpIHx8IDAgKSArIDk7XG5cdFx0XHRcdFx0c2xpZGVySW5wdXQudHJpZ2dlcignY2hhbmdlJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiggZS5rZXlDb2RlID09IDQwICkge1xuXHRcdFx0XHRcdHRoaXMudmFsdWUgPSAoIHBhcnNlSW50KHRoaXMudmFsdWUpICsgMCApIC0gOTtcblx0XHRcdFx0XHRzbGlkZXJJbnB1dC50cmlnZ2VyKCdjaGFuZ2UnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBCYWNrc3BhY2UsIFwiLVwiXG5cdFx0XHRpZiggZS5rZXlDb2RlID09IDggfHwgZS5rZXlDb2RlID09IDQ1ICkge1xuXHRcdFx0XHRzbGlkZXJJbnB1dC50cmlnZ2VyKCdjaGFuZ2UnKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgbnVtYmVyIGtleSBwcmVzc2VkXG5cdFx0XHRpZiAoKGUua2V5Q29kZSA+PSA0OCAmJiBlLmtleUNvZGUgPD0gNTcpIHx8IChlLmtleUNvZGUgPj0gOTYgJiYgZS5rZXlDb2RlIDw9IDEwNSkpIHtcblx0XHRcdFx0c2xpZGVySW5wdXQudHJpZ2dlcignY2hhbmdlJyk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBjaGFyQ29kZSA9IChlLndoaWNoKSA/IGUud2hpY2ggOiBlLmtleUNvZGU7XG5cblx0XHRcdC8vQHRvZG8gbW9yZSB3b3JrIGhlcmVcblx0XHRcdGlmKCAoIChjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1NykgfHwgKGNoYXJDb2RlID49IDk2ICYmIGNoYXJDb2RlIDw9IDEwNSkgKSAmJiBlLmtleUNvZGUgIT0gOCAmJiBlLmtleUNvZGUgIT0gMzkgJiYgZS5rZXlDb2RlICE9IDM3ICYmIGUua2V5Q29kZSAhPSA0NiApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gc2xpZGVySW5wdXQudW5iaW5kKCdjaGFuZ2UnKTtcblx0XHRzbGlkZXJJbnB1dC5vbignY2hhbmdlJywgZnVuY3Rpb24oZSl7XG5cblx0XHRcdGlmICggb25seXBvc2l0aXZlICYmIHRoaXMudmFsdWUgPCAwICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gMDtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGNvbnRhaW5lcldyYXBwZXI7XG5cblx0XHRcdGlmICggd29ya2luZ1dpdGhNb2R1bGUgKSB7XG5cdFx0XHRcdGNvbnRhaW5lcldyYXBwZXIgPSBqUXVlcnkoIGUudGFyZ2V0LmNsb3Nlc3QoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24tc2xpZGVyJykgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnRhaW5lcldyYXBwZXIgPSBqUXVlcnkoIGUudGFyZ2V0LmNsb3Nlc3QoJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdC1vcHRpb24tc2xpZGVyJykgKTtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBNb3ZlIHRoZSBzbGlkZXIgbmVlZGxlIHRvIHJlZmxlY3QgdGhlIHZhbHVlIGNoYW5nZXNcblx0XHRcdCAqIG1hZGUgdmlhIGRpcmVjdCBpbnB1dCBvZiB2aWEga2V5Ym9hcmQgYXJyb3cga2V5cy5cblx0XHRcdCAqL1xuXHRcdFx0dmFyIGN1cnJlbnRTbGlkZXJJbnN0YW5jZSA9IGNvbnRhaW5lcldyYXBwZXIuZmluZCgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkLXNsaWRlcicpO1xuXHRcdFx0aWYgKCB1bmRlZmluZWQgIT09IGN1cnJlbnRTbGlkZXJJbnN0YW5jZS5zbGlkZXIoICdpbnN0YW5jZScgKSApIHtcblx0XHRcdFx0Y3VycmVudFNsaWRlckluc3RhbmNlLnNsaWRlciggJ3ZhbHVlJywgdGhpcy52YWx1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdvcmtpbmdXaXRoTW9kdWxlICkge1xuXHRcdFx0XHQvLyBBZGQgY2hhbmdlZCBjbGFzcyB0byB0aGUgbW9kdWxlLlxuXHRcdFx0XHR2YXIgbW9kdWxlID0galF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcsIHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KTtcblx0XHRcdFx0bW9kdWxlLmFkZENsYXNzKCdkc2xjYS1tb2R1bGUtY2hhbmdlLW1hZGUnKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSk7IC8vIC5lYWNoXG59XG5cbmZ1bmN0aW9uIGRzbGNfZGlzYWJsZV9yZXNwb25zaXZlX3ZpZXcgKCkge1xuXHRqUXVlcnkoJ2h0bWwnKS5yZW1vdmVDbGFzcygnZHNsYy1yZXNwb25zaXZlLXByZXZpZXcnKTtcblx0alF1ZXJ5KCdib2R5JykucmVtb3ZlQ2xhc3MoJ2RzbGMtcmVzLWJpZyBkc2xjLXJlcy1zbWFsbGVyLW1vbml0b3IgZHNsYy1yZXMtcGhvbmUgZHNsYy1yZXMtdGFibGV0Jyk7XG5cbn1cblxuXG5mdW5jdGlvbiBkc2xjX2ZpbHRlcl9tb2R1bGVfb3B0aW9ucyggc2VjdGlvbklEICkgeyBkc2xjX21vZHVsZV9vcHRpb25zX3NlY3Rpb25fZmlsdGVyKCBzZWN0aW9uSUQgKTsgfVxuZnVuY3Rpb24gZHNsY19jb25maXJtX2NoYW5nZXMoIGNhbGxiYWNrICkgeyBkc2xjX21vZHVsZV9vcHRpb25zX2NvbmZpcm1fY2hhbmdlcyggY2FsbGJhY2sgKTsgfVxuZnVuY3Rpb24gZHNsY19jYW5jZWxfY2hhbmdlcyggY2FsbGJhY2sgKSB7IGRzbGNfbW9kdWxlX29wdGlvbnNfY2FuY2VsX2NoYW5nZXMoIGNhbGxiYWNrICk7IH1cbmZ1bmN0aW9uIGRzbGNfaW5pdF9jb2xvcnBpY2tlcigpIHsgZHNsY19tb2R1bGVfb3B0aW9uc19jb2xvcigpOyB9XG5mdW5jdGlvbiBkc2xjX2luaXRfb3B0aW9uc19zbGlkZXIoKSB7IGRzbGNfbW9kdWxlX29wdGlvbnNfbnVtZXJpYygpOyB9XG5mdW5jdGlvbiBkc2xjX21vZHVsZV9lZGl0X29wdGlvbnNfaGlkZXNob3dfdGFicygpIHsgZHNsY19tb2R1bGVfb3B0aW9uc19oaWRlc2hvd190YWJzKCk7IH0iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKlxuICogPSBURU1QTEFURVMgPVxuICpcbiAqIC0gZHNsY19sb2FkX3RlbXBsYXRlICggTG9hZCBUZW1wbGF0ZSApXG4gKiAtIGRzbGNfaW1wb3J0X3RlbXBsYXRlICggSW1wb3J0IFRlbXBsYXRlIClcbiAqIC0gZHNsY19zYXZlX3RlbXBsYXRlICggU2F2ZSBURW1wbGF0ZSApXG4gKiAtIGRzbGNfZGVsZXRlX3RlbXBsYXRlICggRGVsZXRlIFRlbXBsYXRlIClcbiAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB7IHNlY3Rpb25zSW5pdEpTIH0gZnJvbSAnLi9zZWN0aW9ucy5qcyc7XG5pbXBvcnQgeyBkcmFnQW5kRHJvcEluaXQgfSBmcm9tICcuL2RyYWduZHJvcC5qcyc7XG5pbXBvcnQgeyBtb2R1bGVhcmVhc0luaXRKUyB9IGZyb20gJy4vbW9kdWxlYXJlYS5qcyc7XG5pbXBvcnQgeyBoaWRlTW9kYWwgfSBmcm9tIFwiLi9tb2RhbHdpbmRvdy5qc1wiO1xuXG4vKipcbiAqIFRFTVBMQVRFUyAtIExvYWRcbiAqL1xuY29uc3QgbG9hZFRlbXBsYXRlQnlJZCA9ICggdGVtcGxhdGUgKSA9PiB7XG5cblx0aWYgKCB3aW5kb3cuZHNsY0RlYnVnICkgY29uc29sZS5sb2coICdkc2xjX2xvYWRfdGVtcGxhdGUnICk7XG5cblx0Ly8gVmFyc1xuXHR2YXIgZHNsY01vZHVsZSwgZHNsY01vZHVsZUlEO1xuXG5cdC8vIFRlbXBsYXRlIHByZWxvYWRlclxuXHRqUXVlcnkoJyN3cGNvbnRlbnQnKS5wcmVwZW5kKCc8ZGl2IGNsYXNzPVwibGMtdGVtcGxhdGUtbG9hZGVyXCI+PC9kaXY+Jyk7XG5cblx0dmFyIGJsb2NrID0gJzxkaXYgY2xhc3M9XCJsYy1sb2FkZXIgbGRzLWNzc1wiPjxkaXYgY2xhc3M9XCJsZHMtc3Bpbm5lclwiPjxkaXY+PC9kaXY+PGRpdj48L2Rpdj48ZGl2PjwvZGl2PjxkaXY+PC9kaXY+PGRpdj48L2Rpdj48ZGl2PjwvZGl2PjxkaXY+PC9kaXY+PGRpdj48L2Rpdj48ZGl2PjwvZGl2PjxkaXY+PC9kaXY+PGRpdj48L2Rpdj48ZGl2PjwvZGl2PjwvZGl2Pic7XG5cblx0alF1ZXJ5KCcubGMtdGVtcGxhdGUtbG9hZGVyJykucHJlcGVuZChibG9jayk7XG5cblxuXHQvLyBBamF4IGNhbGwgdG8gZ2V0IHRlbXBsYXRlJ3MgSFRNTFxuXHRqUXVlcnkucG9zdChcblxuXHRcdERTTENBamF4LmFqYXh1cmwsXG5cdFx0e1xuXHRcdFx0YWN0aW9uIDogJ2RzbGMtYWpheC1sb2FkLXRlbXBsYXRlJyxcblx0XHRcdGRzbGMgOiAnYWN0aXZlJyxcblx0XHRcdGRzbGNfdGVtcGxhdGVfaWQgOiB0ZW1wbGF0ZVxuXHRcdH0sXG5cdFx0ZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXG5cdFx0XHQvLyBBcHBseSB0aGUgdGVtcGxhdGUncyBIVE1MXG5cdFx0XHRqUXVlcnkoJyNkc2xjLW1haW4nLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5odG1sKCByZXNwb25zZS5vdXRwdXQgKTtcblxuXHRcdFx0alF1ZXJ5KCcubGMtdGVtcGxhdGUtbG9hZGVyJykucmVtb3ZlKCk7XG5cblx0XHRcdC8vIENhbGwgb3RoZXIgZnVuY3Rpb25zXG5cdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5kc2xjX2Nhcm91c2VsKCk7XG5cblx0XHRcdC8vIENoZWNrIGluaXQgZm9yIHJvd3MgYW5kIG1vZHVsZSBhcmVhc1xuXHRcdFx0c2VjdGlvbnNJbml0SlMoKTtcblx0XHRcdG1vZHVsZWFyZWFzSW5pdEpTKCk7XG5cblx0XHRcdGRyYWdBbmREcm9wSW5pdCgpO1xuXHRcdFx0d2luZG93LmRzbGNfc2hvd19wdWJsaXNoX2J1dHRvbigpO1xuXHRcdFx0d2luZG93LmRzbGNfZ2VuZXJhdGVfY29kZSgpO1xuXHRcdH1cblx0KTtcbn1cblxuLyoqXG4gKiBURU1QTEFURVMgLSBJbXBvcnRcbiAqL1xuZnVuY3Rpb24gZHNsY190ZW1wbGF0ZV9pbXBvcnQoKSB7XG5cblx0aWYgKCB3aW5kb3cuZHNsY0RlYnVnICkgY29uc29sZS5sb2coICdkc2xjX2ltcG9ydF90ZW1wbGF0ZScgKTtcblxuXHQvLyBWYXJzXG5cdHZhciBkc2xjTW9kdWxlLCBkc2xjTW9kdWxlSUQ7XG5cblx0Ly8gSGlkZSB0aGUgdGl0bGUgb24gdGhlIGJ1dHRvbiBhbmQgc2hvdyBsb2FkaW5nIGFuaW1hdGlvblxuXHRqUXVlcnkoJy5kc2xjYS1tb2RhbC10ZW1wbGF0ZXMtaW1wb3J0IC5kc2xjYS1tb2RhbC10aXRsZScpLmNzcyh7IG9wYWNpdHkgOiAwIH0pO1xuXHRqUXVlcnkoJy5kc2xjYS1tb2RhbC10ZW1wbGF0ZXMtaW1wb3J0IC5kc2xjYS1sb2FkaW5nJykuc2hvdygpO1xuXG5cdC8vIEFqYXggY2FsbCB0byBsb2FkIHRlbXBsYXRlJ3MgSFRNTFxuXHRqUXVlcnkucG9zdChcblxuXHRcdERTTENBamF4LmFqYXh1cmwsXG5cdFx0e1xuXHRcdFx0YWN0aW9uIDogJ2RzbGMtYWpheC1pbXBvcnQtdGVtcGxhdGUnLFxuXHRcdFx0ZHNsYyA6ICdhY3RpdmUnLFxuXHRcdFx0ZHNsY190ZW1wbGF0ZV9jb2RlIDogalF1ZXJ5KCcjZHNsY2EtaW1wb3J0LWNvZGUnKS52YWwoKVxuXHRcdH0sXG5cdFx0ZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXG5cdFx0XHQvLyBBcHBseSB0aGUgdGVtcGxhdGUncyBIVE1MXG5cdFx0XHRqUXVlcnkoJyNkc2xjLW1haW4nLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5odG1sKCByZXNwb25zZS5vdXRwdXQgKTtcblxuXHRcdFx0Ly8gSGlkZSB0aGUgbG9hZGluZyBvbiB0aGUgYnV0dG9uIGFuZCBzaG93IHRoZSB0aXRsZVxuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtbW9kYWwtdGVtcGxhdGVzLWltcG9ydCAuZHNsY2EtbG9hZGluZycpLmhpZGUoKTtcblx0XHRcdGpRdWVyeSgnLmRzbGNhLW1vZGFsLXRlbXBsYXRlcy1pbXBvcnQgLmRzbGNhLW1vZGFsLXRpdGxlJykuY3NzKHsgb3BhY2l0eSA6IDEgfSk7XG5cblx0XHRcdC8vIEhpZGUgdGhlIG1vZGFsXG5cdFx0XHRoaWRlTW9kYWwoICcnLCAnLmRzbGNhLW1vZGFsLXRlbXBsYXRlcy1pbXBvcnQnICk7XG5cblx0XHRcdC8vIENhbGwgb3RoZXIgZnVuY3Rpb25zXG5cdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5kc2xjX2JnX3ZpZGVvKCk7XG5cdFx0XHRkcmFnQW5kRHJvcEluaXQoKTtcblx0XHRcdHdpbmRvdy5kc2xjX3Nob3dfcHVibGlzaF9idXR0b24oKTtcblx0XHRcdHdpbmRvdy5kc2xjX2dlbmVyYXRlX2NvZGUoKTtcblx0XHR9XG5cdCk7XG59XG5cbi8qKlxuICogVEVNUExBVEVTIC0gU0FWRVxuICovXG5mdW5jdGlvbiBkc2xjX3RlbXBsYXRlX3NhdmUoKSB7XG5cblx0aWYgKCB3aW5kb3cuZHNsY0RlYnVnICkgY29uc29sZS5sb2coICdkc2xjX3NhdmVfdGVtcGxhdGUnICk7XG5cblx0Ly8gQUpBWCBjYWxsIHRvIHNhdmUgdGhlIHRlbXBsYXRlXG5cdGpRdWVyeS5wb3N0KFxuXG5cdFx0RFNMQ0FqYXguYWpheHVybCxcblx0XHR7XG5cdFx0XHRhY3Rpb24gOiAnZHNsYy1hamF4LXNhdmUtdGVtcGxhdGUnLFxuXHRcdFx0ZHNsYyA6ICdhY3RpdmUnLFxuXHRcdFx0ZHNsY190ZW1wbGF0ZV9jb2RlIDogalF1ZXJ5KCcjZHNsY2EtY29kZScpLnZhbCgpLFxuXHRcdFx0ZHNsY190ZW1wbGF0ZV90aXRsZSA6IGpRdWVyeSgnI2RzbGNhLXNhdmUtdGVtcGxhdGUtdGl0bGUnKS52YWwoKVxuXHRcdH0sXG5cdFx0ZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXG5cdFx0XHQvLyBIaWRlIHRoZSBtb2RhbFxuXHRcdFx0aGlkZU1vZGFsKCAnJywgJy5kc2xjYS1tb2RhbC10ZW1wbGF0ZXMtc2F2ZScgKTtcblx0XHR9XG5cdCk7XG59XG5cbi8qKlxuICogVEVNUExBVEVTIC0gREVMRVRFXG4gKi9cbmZ1bmN0aW9uIGRzbGNfdGVtcGxhdGVfZGVsZXRlKCB0ZW1wbGF0ZSApIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfZGVsZXRlX3RlbXBsYXRlJyApO1xuXG5cdC8vIEFKQVggY2FsbCB0byBkZWxldGUgdGVtcGxhdGVcblx0alF1ZXJ5LnBvc3QoXG5cblx0XHREU0xDQWpheC5hamF4dXJsLFxuXHRcdHtcblx0XHRcdGFjdGlvbiA6ICdkc2xjLWFqYXgtZGVsZXRlLXRlbXBsYXRlJyxcblx0XHRcdGRzbGMgOiAnYWN0aXZlJyxcblx0XHRcdGRzbGNfdGVtcGxhdGVfaWQgOiB0ZW1wbGF0ZVxuXHRcdH0sXG5cdFx0ZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgdGVtcGxhdGUgZnJvbSB0aGUgdGVtcGxhdGUgbGlzdGluZ1xuXHRcdFx0alF1ZXJ5KCcuZHNsY2EtdGVtcGxhdGVbZGF0YS1pZD1cIicgKyB0ZW1wbGF0ZSArICdcIl0nKS5mYWRlT3V0KDIwMCwgZnVuY3Rpb24oKXtcblx0XHRcdFx0alF1ZXJ5KHRoaXMpLnJlbW92ZSgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHQpO1xufVxuXG4vKipcbiAqIERlcHJlY2F0ZWQgRnVuY3Rpb25zIGFuZCBGYWxsYmFja3NcbiAqL1xuIGZ1bmN0aW9uIGRzbGNfaW1wb3J0X3RlbXBsYXRlKCkgeyBkc2xjX3RlbXBsYXRlX2ltcG9ydCgpOyB9XG4gZnVuY3Rpb24gZHNsY19zYXZlX3RlbXBsYXRlKCkgeyBkc2xjX3RlbXBsYXRlX3NhdmUoKTsgfVxuIGZ1bmN0aW9uIGRzbGNfZGVsZXRlX3RlbXBsYXRlKCB0ZW1wbGF0ZSApIHsgZHNsY190ZW1wbGF0ZV9kZWxldGUoIHRlbXBsYXRlICk7IH1cblxuIC8qKlxuICAqIFRFTVBMQVRFUyAtIERvY3VtZW50IFJlYWR5XG4gICovXG5cbiBleHBvcnQgY29uc3QgdGVtcGxhdGVzUGFuZWxJbml0ID0gKCkgPT4ge1xuXG5cdC8qKlxuXHQgKiBIb29rIC0gTG9hZCBUZW1wbGF0ZVxuXHQgKi9cblx0bGV0IHRlbXBsYXRlSXRlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kc2xjYS10ZW1wbGF0ZScpO1xuXHQvLyBBdHRhY2ggaW1wb3J0IGZ1bmN0aW9uIHRvIGVhY2ggdGVtcGxhdGUgaXRlbS5cblx0dGVtcGxhdGVJdGVtLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0bGV0IGltcG9ydEJ1dHRvbiA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KFwiW2RhdGEtaWRdXCIpO1xuXHRcdFx0bG9hZFRlbXBsYXRlQnlJZCggaW1wb3J0QnV0dG9uLmRhdGFzZXQuaWQgKTtcblx0XHR9KTtcblx0fSk7XG5cblx0LyoqXG5cdCAqIEhvb2sgLSBJbXBvcnQgVGVtcGxhdGVcblx0ICovXG5cdGpRdWVyeSgnLmRzbGNhLXRlbXBsYXRlLWltcG9ydC1mb3JtJykuc3VibWl0KGZ1bmN0aW9uKGUpe1xuXG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGRzbGNfdGVtcGxhdGVfaW1wb3J0KCk7XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiBIb29rIC0gU2F2ZSBUZW1wbGF0ZVxuXHQgKi9cblx0alF1ZXJ5KCcuZHNsY2EtdGVtcGxhdGUtc2F2ZS1mb3JtJykuc3VibWl0KGZ1bmN0aW9uKGUpe1xuXG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGRzbGNfdGVtcGxhdGVfc2F2ZSgpO1xuXHR9KTtcblxuXHQvKipcblx0ICogSG9vayAtIERlbGV0ZSBUZW1wbGF0ZVxuXHQgKi9cblx0alF1ZXJ5KGRvY3VtZW50KS5vbiggJ2NsaWNrJywgJy5kc2xjYS1kZWxldGUtdGVtcGxhdGUtaG9vaycsIGZ1bmN0aW9uKGUpe1xuXG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRkc2xjX3RlbXBsYXRlX2RlbGV0ZSggalF1ZXJ5KHRoaXMpLmRhdGEoJ2lkJykgKTtcblx0fSk7XG5cbn1cbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqXG4gKiA9IFVJIC0gR0VORVJBTCA9XG4gKlxuICogLSBkc2xjX2hpZGVfY29tcG9zZXIgKCBIaWRlcyB0aGUgY29tcG9zZXIgZWxlbWVudHMgKVxuICogLSBkc2xjX3Nob3dfY29tcG9zZXIgKCBTaG93cyB0aGUgY29tcG9zZXIgZWxlbWVudHMgKVxuICogLSBkc2xjX3Nob3dfcHVibGlzaF9idXR0b24gKCBTaG93cyB0aGUgcHVibGlzaCBidXR0b24gKVxuICogLSBkc2xjX3Nob3dfc2VjdGlvbiBub3cgc2hvd1NlY3Rpb24gKCBTaG93IGEgc3BlY2lmaWMgc2VjdGlvbiApXG4gKiAtIGRzbGNfZ2VuZXJhdGVfZmlsdGVycyAoIEdlbmVyYXRlIG9yaWdpbiBmaWx0ZXJzIClcbiAqIC0gZHNsY19maWx0ZXJfb3JpZ2luICggT3JpZ2luIGZpbHRlcmluZyBmb3IgdGVtcGxhdGVzL21vZHVsZXMgbGlzdGluZyApXG4gKiAtIGRyYWdBbmREcm9wSW5pdCAoIEluaXRpYXRlIGRyYWcgYW5kIGRyb3AgZnVuY3Rpb25hbGl0eSApXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB7IGVsZW1lbnRPcHRpb25zVGFicyB9IGZyb20gJy4vc2V0dGluZ3MucGFuZWwuanMnO1xuaW1wb3J0IHsgQ01vZGFsV2luZG93IH0gZnJvbSAnLi9tb2RhbHdpbmRvdy5jbGFzcy5qcyc7XG5cbmltcG9ydCBTb3J0YWJsZSBmcm9tICdzb3J0YWJsZWpzJztcblxuLyoqXG4gKiBUcnkgdG8gZGV0ZWN0IEpTIGVycm9ycyBpbiBXUCBBZG1pbiBwYXJ0LlxuICovXG4gd2luZG93Lm9uZXJyb3IgPSBmdW5jdGlvbiggZXJyb3IsIGZpbGUsIGxpbmUsIGNoYXIgKSB7XG5cblx0ZHNsY2FfZ2VuZXJhdGVfZXJyb3JfcmVwb3J0ICggZXJyb3IsIGZpbGUsIGxpbmUsIGNoYXIgKTtcbn1cblxuLyoqXG4gKiBIb29rIC0gT3BlbiBFcnJvciBMb2cgYnV0dG9uXG4gKi9cbmpRdWVyeShkb2N1bWVudCkub24oICdjbGljaycsICcuZHNsY2Etc2hvdy1qcy1lcnJvci1ob29rJywgZnVuY3Rpb24oZSl7XG5cblx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdHZhciBlcnJvcnNfY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RzbGNhLWpzLWVycm9ycy1yZXBvcnQnKTtcblxuXHRpZiAoICEgalF1ZXJ5KCdib2R5JykuaGFzQ2xhc3MoJ2RzbGNhLXNhdmluZy1pbi1wcm9ncmVzcycpICkge1xuXG5cdFx0Q01vZGFsV2luZG93KHtcblxuXHRcdFx0dGl0bGU6ICc8YSBocmVmPVwiaHR0cHM6Ly9saXZlY29tcG9zZXJwbHVnaW4uY29tL3N1cHBvcnQvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PHNwYW4gY2xhc3M9XCJkc2xjYS1pY29uIGRzbGMtaWNvbi1jb21tZW50XCI+PC9zcGFuPiAmbmJzcDsgR2V0IFN1cHBvcnQgSW5mbzwvYT4nLFxuXHRcdFx0Y29udGVudDogJzxzcGFuIGNsYXNzPVwiZHNsY2EtZXJyb3ItcmVwb3J0XCI+JyArIGVycm9yc19jb250YWluZXIudmFsdWUgKyAnPC9zcGFuPicsXG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5cbi8qKlxuICogVUkgLSBHRU5FUkFMIC0gRG9jdW1lbnQgUmVhZHlcbiAqL1xuXG5qUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCQpIHtcblxuXHQvKipcblx0ICogVHJ5IHRvIGRldGVjdCBKUyBlcnJvcnMgaW4gcHJldmlldyBhcmVhLlxuXHQgKi9cblx0alF1ZXJ5KFwiI3BhZ2UtYnVpbGRlci1mcmFtZVwiKVswXS5jb250ZW50V2luZG93Lm9uZXJyb3IgPSBmdW5jdGlvbiggZXJyb3IsIGZpbGUsIGxpbmUsIGNoYXIgKSB7XG5cdFx0ZHNsY2FfZ2VuZXJhdGVfZXJyb3JfcmVwb3J0ICggZXJyb3IsIGZpbGUsIGxpbmUsIGNoYXIgKTtcblx0fVxuXG5cdC8vIFB1dCBKUyBlcnJvciBsb2cgZGF0YSBpbiBhIGhpZGRlbiB0ZXh0YXJlYS5cblx0ZHNsY2FfdXBkYXRlX3JlcG9ydF9sb2coKTtcblxuIFx0alF1ZXJ5KCdib2R5JykuYWRkQ2xhc3MoJ2RzbGNhLWVuYWJsZWQgZHNsY2EtZHJhZy1ub3QtaW4tcHJvZ3Jlc3MnKTtcbiBcdGpRdWVyeSgnLmRzbGNhLWludmlzaWJsZS1vdmVybGF5JykuaGlkZSgpO1xuIFx0alF1ZXJ5KCcuZHNsY2Etc2VjdGlvbicpLmVxKDApLnNob3coKTtcbn0pO1xuXG4vKipcbiAqIEFjdGlvbiAtIFwiQ3VycmVudGx5IEVkaXRpbmdcIiBzY3JvbGwgb24gY2xpY2tcbiAqL1xuXG5qUXVlcnkoZG9jdW1lbnQpLm9uKCAnY2xpY2snLCAnLmRzbGNhLWN1cnJlbnRseS1lZGl0aW5nJywgZnVuY3Rpb24oKXtcblxuXHR2YXIgYWN0aXZlRWxlbWVudCA9IGZhbHNlLFxuXHRuZXdPZmZzZXQgPSBmYWxzZSxcblx0b3V0bGluZUNvbG9yO1xuXG5cdGlmICggalF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLmxlbmd0aCApIHtcblxuXHRcdGFjdGl2ZUVsZW1lbnQgPSBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtYmVpbmctZWRpdGVkJywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCk7XG5cdFx0b3V0bGluZUNvbG9yID0gJyM1ODkwZTUnO1xuXG5cdH0gZWxzZSBpZiAoIGpRdWVyeSgnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1iZWluZy1lZGl0ZWQnLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5sZW5ndGggKSB7XG5cblx0XHRhY3RpdmVFbGVtZW50ID0galF1ZXJ5KCcuZHNsY2EtbW9kdWxlcy1zZWN0aW9uLWJlaW5nLWVkaXRlZCcsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpO1xuXHRcdG91dGxpbmVDb2xvciA9ICcjZWFiYmE5Jztcblx0fVxuXG5cdGlmICggYWN0aXZlRWxlbWVudCApIHtcblx0XHRuZXdPZmZzZXQgPSBhY3RpdmVFbGVtZW50Lm9mZnNldCgpLnRvcCAtIDEwMDtcblx0XHRpZiAoIG5ld09mZnNldCA8IDAgKSB7IG5ld09mZnNldCA9IDA7IH1cblxuXHRcdHZhciBjYWxsYmFja3MgPSBbXTtcblxuXHRcdGpRdWVyeSggJ2h0bWwsIGJvZHknLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50ICkuYW5pbWF0ZSh7IHNjcm9sbFRvcDogbmV3T2Zmc2V0IH0sIDMwMCwgZnVuY3Rpb24oKXtcblx0XHRcdGFjdGl2ZUVsZW1lbnQucmVtb3ZlQXR0cignc3R5bGUnKTtcblx0XHR9KTtcblx0fVxuXG59KTtcblxuLyoqXG4gKiBTYXZlIGNvbXBvc2VyIGNvZGUgd2l0aCBDTUQrUyBvciBDdHJsK1NcbiAqL1xualF1ZXJ5KHdpbmRvdykua2V5cHJlc3MoIGZ1bmN0aW9uKGUpe1xuXG5cdGlmICgoZS5tZXRhS2V5IHx8IGUuY3RybEtleSkgJiYgZS5rZXlDb2RlID09IDgzKSB7XG5cblx0XHRkc2xjX2FqYXhfc2F2ZV9jb21wb3NlcigpO1xuXHRcdGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHR9XG59KTtcblxuLyoqXG4gKiBIb29rIC0gSGlkZSBDb21wb3NlclxuICovXG5cbmpRdWVyeShkb2N1bWVudCkub24oICdjbGljaycsICcuZHNsY2EtaGlkZS1jb21wb3Nlci1ob29rJywgZnVuY3Rpb24oZSl7XG5cblx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRkc2xjX2hpZGVfY29tcG9zZXIoKVxufSk7XG5cbi8qKlxuICogSG9vayAtIFNob3cgQ29tcG9zZXJcbiAqL1xuXG5qUXVlcnkoZG9jdW1lbnQpLm9uKCAnY2xpY2snLCAnLmRzbGNhLXNob3ctY29tcG9zZXItaG9vaycsIGZ1bmN0aW9uKGUpe1xuXHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdGRzbGNfc2hvd19jb21wb3NlcigpO1xufSk7XG5cbi8qKlxuICogSG9vayAtIFNlY3Rpb24gU2hvdyAtIE1vZHVsZXMgTGlzdGluZ1xuICovXG5cbmpRdWVyeShkb2N1bWVudCkub24oICdjbGljaycsICcuZHNsY2EtZ28tdG8tbW9kdWxlcy1ob29rJywgZnVuY3Rpb24oZSl7XG5cdGUucHJldmVudERlZmF1bHQoKTtcblx0c2hvd1NlY3Rpb24oICcuZHNsY2EtbW9kdWxlcycgKTtcbn0pO1xuXG4vKipcbiAqIEhvb2sgLSBTZWN0aW9uIFNob3cgLSBEeW5hbWljXG4gKi9cblxualF1ZXJ5KGRvY3VtZW50KS5vbiggJ2NsaWNrJywgJy5kc2xjYS1nby10by1zZWN0aW9uLWhvb2snLCBmdW5jdGlvbihlKXtcblxuXHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0Ly8gRG8gbm90aGluZyBpZiBjbGlja2VkIG9uIGFjdGl2ZSB0YWJcblx0aWYgKCBqUXVlcnkodGhpcykuaGFzQ2xhc3MoJ2RzbGNhLWFjdGl2ZScpICkge1xuXG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIHNlY3Rpb25UaXRsZSA9IGpRdWVyeSh0aGlzKS5kYXRhKCdzZWN0aW9uJyk7XG5cdHNob3dTZWN0aW9uKCBzZWN0aW9uVGl0bGUgKTtcblxuXHRpZiAoIGpRdWVyeSh0aGlzKS5oYXNDbGFzcygnZHNsY2EtZ28tdG8tc2VjdGlvbi1tb2R1bGVzJykgfHwgalF1ZXJ5KHRoaXMpLmhhc0NsYXNzKCdkc2xjYS1nby10by1zZWN0aW9uLXRlbXBsYXRlcycpICApIHtcblxuXHRcdGpRdWVyeSh0aGlzKS5hZGRDbGFzcygnZHNsY2EtYWN0aXZlJykuc2libGluZ3MoJy5kc2xjYS1nby10by1zZWN0aW9uLWhvb2snKS5yZW1vdmVDbGFzcygnZHNsY2EtYWN0aXZlJyk7XG5cdH1cbn0pO1xuXG4vKipcbiAqIEhvb2sgLSBDbG9zZSBDb21wb3NlclxuICovXG5cbmpRdWVyeShkb2N1bWVudCkub24oICdjbGljaycsICcuZHNsY2EtY2xvc2UtY29tcG9zZXItaG9vaycsIGZ1bmN0aW9uKGUpe1xuXG5cdGUucHJldmVudERlZmF1bHQoKTtcblxuXHR2YXIgcmVkaXJlY3RfdXJsID0galF1ZXJ5KHRoaXMpLmF0dHIoJ2hyZWYnKTtcblxuXHRpZiAoICEgalF1ZXJ5KCdib2R5JykuaGFzQ2xhc3MoJ2RzbGNhLXNhdmluZy1pbi1wcm9ncmVzcycpICYmIGpRdWVyeSgnLmRzbGNhLXNhdmUtY29tcG9zZXInKS5pcygnOnZpc2libGUnKSApIHtcblx0XHQvLyBTaG93IHdhcm5pbmcgaWYgY2hhbmdlcyB3ZXJlbid0IHNhdmVkLlxuXHRcdENNb2RhbFdpbmRvdyh7XG5cblx0XHRcdHRpdGxlOiBEU0xDU3RyaW5nLnN0cl9leGl0X3RpdGxlLFxuXHRcdFx0Y29udGVudDogRFNMQ1N0cmluZy5zdHJfZXhpdF9kZXNjcixcblx0XHRcdGNvbmZpcm06IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR3aW5kb3cubG9jYXRpb24gPSByZWRpcmVjdF91cmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmxvY2F0aW9uID0gcmVkaXJlY3RfdXJsO1xuXHR9XG59KTtcblxuLyoqXG4gKiBTdWJtaXQgRm9ybVxuICovXG5cbmpRdWVyeShkb2N1bWVudCkub24oICdjbGljaycsICcuZHNsY2Etc3VibWl0JywgZnVuY3Rpb24oKXtcblxuXHRqUXVlcnkodGhpcykuY2xvc2VzdCgnZm9ybScpLnN1Ym1pdCgpO1xuXG59KTtcblxuLyoqXG4gKiBIb29rIC0gU2hvdyBPcmlnaW4gRmlsdGVyc1xuICovXG5cbmpRdWVyeShkb2N1bWVudCkub24oICdjbGljaycsICcuZHNsY2Etc2VjdGlvbi10aXRsZScsIGZ1bmN0aW9uKGUpe1xuXG5cdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cblx0aWYgKCBqUXVlcnkoJy5kc2xjYS1zZWN0aW9uLXRpdGxlLWZpbHRlcicsIHRoaXMpLmxlbmd0aCApIHtcblxuXHRcdGRzbGNfZ2VuZXJhdGVfZmlsdGVycygpO1xuXG5cdFx0Ly8gT3BlbiBmaWx0ZXIgcGFuZWxcblx0XHRqUXVlcnkoJy5kc2xjYS1zZWN0aW9uLXRpdGxlLWZpbHRlci1vcHRpb25zJykuc2xpZGVUb2dnbGUoMzAwKTtcblx0fVxufSk7XG5cbi8qKlxuICogSG9vayAtIEFwcGx5IEZpbHRlciBPcmlnaW5cbiAqL1xuXG5qUXVlcnkoZG9jdW1lbnQpLm9uKCAnY2xpY2snLCAnLmRzbGNhLXNlY3Rpb24tdGl0bGUtZmlsdGVyLW9wdGlvbnMgYScsIGZ1bmN0aW9uKGUpe1xuXG5cdGUucHJldmVudERlZmF1bHQoKTtcblx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuXHR2YXIgb3JpZ2luID0galF1ZXJ5KHRoaXMpLmRhdGEoJ29yaWdpbicpO1xuXHR2YXIgc2VjdGlvbiA9IGpRdWVyeSh0aGlzKS5jbG9zZXN0KCcuZHNsY2Etc2VjdGlvbicpO1xuXG5cdGlmICggc2VjdGlvbi5oYXNDbGFzcygnZHNsY2EtdGVtcGxhdGVzLWxvYWQnKSApIHtcblxuXHRcdGpRdWVyeSgnLmRzbGNhLXNlY3Rpb24tdGl0bGUtZmlsdGVyLWN1cnInLCBzZWN0aW9uKS50ZXh0KCBqUXVlcnkodGhpcykudGV4dCgpKTtcblx0fSBlbHNlIHtcblxuXHRcdGpRdWVyeSgnLmRzbGNhLXNlY3Rpb24tdGl0bGUtZmlsdGVyLWN1cnInLCBzZWN0aW9uKS50ZXh0KCBqUXVlcnkodGhpcykudGV4dCgpKTtcblx0fVxuXG5cdGpRdWVyeSgnLmRzbGNhLXNlY3Rpb24tc2Nyb2xsZXItaW5uZXInKS5jc3MoeyBsZWZ0IDogMCB9KTtcblxuXHRkc2xjX2ZpbHRlcl9vcmlnaW4oIG9yaWdpbiwgc2VjdGlvbiApO1xuXG5cdC8vIENsb3NlIGZpbHRlciBwYW5lbFxuXHRqUXVlcnkoJy5kc2xjYS1zZWN0aW9uLXRpdGxlLWZpbHRlci1vcHRpb25zJykuc2xpZGVUb2dnbGUoMzAwKTtcbn0pO1xuXG5cbi8qKlxuICogVUkgLSBHRU5FUkFMIC0gSGlkZSBDb21wb3NlclxuICovXG5cbmZ1bmN0aW9uIGRzbGNfaGlkZV9jb21wb3NlcigpIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfaGlkZV9jb21wb3NlcicgKTtcblxuXHQvLyBIaWRlIFwiaGlkZVwiIGJ1dHRvbiBhbmQgc2hvdyBcInNob3dcIiBidXR0b25cblx0alF1ZXJ5KCcuZHNsY2EtaGlkZS1jb21wb3Nlci1ob29rJykuaGlkZSgpO1xuXHRqUXVlcnkoJy5kc2xjYS1zaG93LWNvbXBvc2VyLWhvb2snKS5zaG93KCk7XG5cblx0Ly8gQWRkIGNsYXNzIHRvIGtub3cgaXQncyBoaWRkZW5cblx0alF1ZXJ5KCdib2R5JykuYWRkQ2xhc3MoJ2RzbGNhLWNvbXBvc2VyLWhpZGRlbicpO1xuXHRqUXVlcnkoJ2JvZHknLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5hZGRDbGFzcygnZHNsY2EtY29tcG9zZXItaGlkZGVuJyk7XG5cdExpdmVDb21wb3Nlci5CdWlsZGVyLkZsYWdzLnVpSGlkZGVuID0gdHJ1ZTtcblxuXG5cdC8vIEhpZGUgKCBhbmltYXRpb24gKSB0aGUgbWFpbiBjb21wb3NlciBhcmVhICggYXQgdGhlIGJvdHRvbSApXG5cdGpRdWVyeSgnLmRzbGNhLWNvbnRhaW5lcicpLmNzcyh7IGJvdHRvbSA6IGpRdWVyeSgnLmRzbGNhLWNvbnRhaW5lcicpLm91dGVySGVpZ2h0KCkgKiAtMSB9KTtcblxuXHQvLyBIaWRlIHRoZSBoZWFkZXIgIHBhcnQgb2YgdGhlIG1haW4gY29tcG9zZXIgYXJlYSAoIGF0IHRoZSBib3R0b20gKVxuXHRqUXVlcnkoJy5kc2xjYS1oZWFkZXInKS5oaWRlKCk7XG5cbn1cblxuLyoqXG4gKiBVSSAtIEdFTkVSQUwgLSBTaG93IENvbXBvc2VyXG4gKi9cblxuZnVuY3Rpb24gZHNsY19zaG93X2NvbXBvc2VyKCkge1xuXG5cdGlmICggd2luZG93LmRzbGNEZWJ1ZyApIGNvbnNvbGUubG9nKCAnZHNsY19zaG93X2NvbXBvc2VyJyApO1xuXG5cdC8vIEhpZGUgdGhlIFwic2hvd1wiIGJ1dHRvbiBhbmQgc2hvdyB0aGUgXCJoaWRlXCIgYnV0dG9uXG5cdGpRdWVyeSgnLmRzbGNhLXNob3ctY29tcG9zZXItaG9vaycpLmhpZGUoKTtcblx0alF1ZXJ5KCcuZHNsY2EtaGlkZS1jb21wb3Nlci1ob29rJykuc2hvdygpO1xuXG5cdC8vIFJlbW92ZSB0aGUgY2xhc3MgZnJvbSB0aGUgYm9keSBzbyB3ZSBrbm93IGl0J3Mgbm90IGhpZGRlblxuXHRqUXVlcnkoJ2JvZHknKS5yZW1vdmVDbGFzcygnZHNsY2EtY29tcG9zZXItaGlkZGVuJyk7XG5cdGpRdWVyeSgnYm9keScsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLnJlbW92ZUNsYXNzKCdkc2xjYS1jb21wb3Nlci1oaWRkZW4nKTtcblx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuRmxhZ3MudWlIaWRkZW4gPSBmYWxzZTtcblxuXG5cdC8vIFNob3cgKCBhbmltYXRlICkgdGhlIG1haW4gY29tcG9zZXIgYXJlYSAoIGF0IHRoZSBib3R0b20gKVxuXHRqUXVlcnkoJy5kc2xjYS1jb250YWluZXInKS5jc3MoeyBib3R0b20gOiAwIH0pO1xuXG5cdC8vIFNob3cgdGhlIGhlYWRlciBvZiB0aGUgbWFpbiBjb21wb3NlciBhcmVhICggYXQgdGhlIGJvdHRvbSApXG5cdGpRdWVyeSgnLmRzbGNhLWhlYWRlcicpLnNob3coKTtcbn1cblxuLyoqXG4gKiBVSSAtIEdFTkVSQUwgLSBTaG93IFB1Ymxpc2ggQnV0dG9uXG4gKi9cblxud2luZG93LmRzbGNfc2hvd19wdWJsaXNoX2J1dHRvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdGlmICggd2luZG93LmRzbGNEZWJ1ZyApIGNvbnNvbGUubG9nKCAnZHNsY19zaG93X3B1Ymxpc2hfYnV0dG9uJyApO1xuXG5cdGpRdWVyeSgnLmRzbGNhLXNhdmUtY29tcG9zZXInKS5zaG93KCkuYWRkQ2xhc3MoJ2RzbGNhLWluaXQtYW5pbWF0aW9uJyk7XG5cdGpRdWVyeSgnLmRzbGNhLXNhdmUtZHJhZnQtY29tcG9zZXInKS5zaG93KCkuYWRkQ2xhc3MoJ2RzbGNhLWluaXQtYW5pbWF0aW9uJyk7XG59XG5cbmV4cG9ydCBjb25zdCBoaWRlUHVibGlzaEJ1dHRvbiA9ICgpID0+IHtcblx0aWYgKCB3aW5kb3cuZHNsY0RlYnVnICkgY29uc29sZS5sb2coICdoaWRlUHVibGlzaEJ1dHRvbicgKTtcblxuXHRqUXVlcnkoJy5kc2xjYS1zYXZlLWNvbXBvc2VyJykuaGlkZSgpO1xuXHRqUXVlcnkoJy5kc2xjYS1zYXZlLWRyYWZ0LWNvbXBvc2VyJykuaGlkZSgpO1xufVxuXG4vKipcbiAqIFVJIC0gR0VORVJBTCAtIFNob3cgU2VjdGlvblxuICovXG5cbmV4cG9ydCBjb25zdCBzaG93U2VjdGlvbiA9ICggc2VjdGlvbiApID0+IHtcblx0aWYgKCB3aW5kb3cuZHNsY0RlYnVnICkgY29uc29sZS5sb2coICdzaG93U2VjdGlvbicgKTtcblxuXHQvLyBBZGQgY2xhc3MgdG8gYm9keSBzbyB3ZSBrbm93IGl0J3MgaW4gcHJvZ3Jlc3Ncblx0Ly8galF1ZXJ5KCdib2R5JykuYWRkQ2xhc3MoJ2RzbGNhLWFuaW0taW4tcHJvZ3Jlc3MnKTtcblxuXHQvLyBHZXQgdmFyc1xuXHR2YXIgc2VjdGlvblRpdGxlID0galF1ZXJ5KHNlY3Rpb24pLmRhdGEoJ3RpdGxlJyksXG5cdG5ld0NvbG9yID0galF1ZXJ5KHNlY3Rpb24pLmRhdGEoJ2JnJyk7XG5cblx0Ly8gSGlkZSAoIGFuaW1hdGUgKSB0aGUgY29udGFpbmVyXG5cdGpRdWVyeSgnLmRzbGNhLWNvbnRhaW5lcicpLmNzcyh7IGJvdHRvbTogLTUwMCB9KTtcblxuXHQvLyBIaWRlIGFsbCBzZWN0aW9ucyBhbmQgc2hvdyBzcGVjaWZpYyBzZWN0aW9uXG5cdGpRdWVyeSgnLmRzbGNhLXNlY3Rpb24nKS5oaWRlKCk7XG5cdGpRdWVyeShzZWN0aW9uKS5zaG93KCk7XG5cblx0Ly8gQ2hhbmdlIFwiY3VycmVudGx5IGVkaXRpbmdcIlxuXHRpZiAoIHNlY3Rpb24gPT0gJy5kc2xjYS1tb2R1bGUtZWRpdCcgKSB7XG5cblx0XHRqUXVlcnkoJy5kc2xjYS1jdXJyZW50bHktZWRpdGluZycpXG5cdFx0XHQuc2hvdygpXG5cdFx0XHRcdC5maW5kKCdzdHJvbmcnKVxuXHRcdFx0XHQudGV4dCggalF1ZXJ5KCcuZHNsY2EtbW9kdWxlLWJlaW5nLWVkaXRlZCcsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpLmF0dHIoJ3RpdGxlJykgKyAnIGVsZW1lbnQnICk7XG5cdH0gZWxzZSBpZiAoIHNlY3Rpb24gPT0gJy5kc2xjYS1tb2R1bGVzLXNlY3Rpb24tZWRpdCcgKSB7XG5cblx0XHRqUXVlcnkoJy5kc2xjYS1jdXJyZW50bHktZWRpdGluZycpXG5cdFx0XHQuc2hvdygpXG5cdFx0XHQuY3NzKCAnYmFja2dyb3VuZC1jb2xvcicsICcjZTU4NTVmJyApXG5cdFx0XHRcdC5maW5kKCdzdHJvbmcnKVxuXHRcdFx0XHQudGV4dCggJ1JvdycgKTtcblx0fSBlbHNlIHtcblxuXHRcdGpRdWVyeSgnLmRzbGNhLWN1cnJlbnRseS1lZGl0aW5nJylcblx0XHRcdC5oaWRlKClcblx0XHRcdFx0LmZpbmQoJ3N0cm9uZycpXG5cdFx0XHRcdC50ZXh0KCcnKTtcblx0fVxuXG5cdC8vIEZpbHRlciBtb2R1bGUgb3B0aW9uIHRhYnNcblx0ZWxlbWVudE9wdGlvbnNUYWJzKCk7XG5cblx0Ly8gU2hvdyAoIGFuaW1hdGUgKSB0aGUgY29udGFpbmVyXG5cdC8vIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeSgnLmRzbGNhLWNvbnRhaW5lcicpLmNzcyh7IGJvdHRvbSA6IDAgfSk7XG5cdC8vIH0sIDMwMCApO1xuXG5cdC8vIFJlbW92ZSBjbGFzcyBmcm9tIGJvZHkgc28gd2Uga25vdyBpdCdzIGZpbmlzaGVkXG5cdC8vIGpRdWVyeSgnYm9keScpLnJlbW92ZUNsYXNzKCdkc2xjYS1hbmltLWluLXByb2dyZXNzJyk7XG5cblx0Ly8gU2V0IGluaXRpYWwgYmFja2dyb3VuZCBjb2xvciBmb3IgdGhlIGNvbG9yIHBpY2tlciBmaWVsZHNcblx0Ly8gRml4ZXMgdGhlIGJ1ZyB3aXRoIHNlY3Rpb24gY29sb3IgcGlja2VycyB0byBrZWVwIHZhbHVlcyBmcm9tIHRoZSBwcmV2aW91c2x5XG5cdC8vIGVkaXRlZCBzZWN0aW9uLlxuXHRqUXVlcnkoc2VjdGlvbikuZmluZCgnaW5wdXQuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQtY29sb3JwaWNrZXInKS5lYWNoKCBmdW5jdGlvbiAoaXRlbSkge1xuXHRcdGpRdWVyeSh0aGlzKS5jc3MoJ2JhY2tncm91bmQnLCBqUXVlcnkodGhpcykudmFsKCkpO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBVSSAtIEdFTkVSQUwgLSBHZW5lcmF0ZSBPcmlnaW4gRmlsdGVyc1xuICovXG5cbmZ1bmN0aW9uIGRzbGNfZ2VuZXJhdGVfZmlsdGVycygpIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfZ2VuZXJhdGVfZmlsdGVycycgKTtcblxuXHQvLyBWYXJzXG5cdHZhciBlbCwgZmlsdGVycyA9IFtdLCBmaWx0ZXJzSFRNTCA9ICc8YSBodG1sPVwiI1wiIGRhdGEtb3JpZ2luPVwiXCI+U2hvdyBBbGw8L2E+JywgZWxzID0galF1ZXJ5KCcuZHNsY2Etc2VjdGlvbjp2aXNpYmxlIC5kc2xjYS1vcmlnaW4nKTtcblxuXHQvLyBHbyB0aHJvdWdoIGVhY2ggYW5kIGdlbmVyYXRlIHRoZSBmaWx0ZXJzXG5cdGVscy5lYWNoKGZ1bmN0aW9uKCl7XG5cdFx0ZWwgPSBqUXVlcnkodGhpcyk7XG5cblx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCBlbC5kYXRhKCdvcmlnaW4nKSwgZmlsdGVycyApID09IC0xICkge1xuXHRcdFx0ZmlsdGVycy5wdXNoKCBlbC5kYXRhKCdvcmlnaW4nKSApO1xuXHRcdFx0ZmlsdGVyc0hUTUwgKz0gJzxhIGhyZWY9XCIjXCIgZGF0YS1vcmlnaW49XCInICsgZWwuZGF0YSgnb3JpZ2luJykgKyAnXCI+JyArIGVsLmRhdGEoJ29yaWdpbicpICsgJzwvYT4nO1xuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5KCcuZHNsY2Etc2VjdGlvbjp2aXNpYmxlIC5kc2xjYS1zZWN0aW9uLXRpdGxlLWZpbHRlci1vcHRpb25zJykuaHRtbCggZmlsdGVyc0hUTUwgKS5jc3MoICdiYWNrZ3JvdW5kJywgalF1ZXJ5KCcuZHNsY2Etc2VjdGlvbjp2aXNpYmxlJykuZGF0YSgnYmcnKSApO1xufVxuXG4vKipcbiAqIFVJIC0gR0VORVJBTCAtIE9yaWdpbiBGaWx0ZXJcbiAqL1xuXG5mdW5jdGlvbiBkc2xjX2ZpbHRlcl9vcmlnaW4oIG9yaWdpbiwgc2VjdGlvbiApIHtcblxuXHRpZiAoIHdpbmRvdy5kc2xjRGVidWcgKSBjb25zb2xlLmxvZyggJ2RzbGNfZmlsdGVyX29yaWdpbicgKTtcblxuXHRqUXVlcnkoJy5kc2xjYS1vcmlnaW4nLCBzZWN0aW9uKS5hdHRyKCdkYXRhLWRpc3BsYXktbW9kdWxlJywgJ2ZhbHNlJyk7XG5cdGpRdWVyeSgnLmRzbGNhLW9yaWdpbltkYXRhLW9yaWdpbj1cIicgKyBvcmlnaW4gKyAnXCJdJywgc2VjdGlvbikuYXR0cignZGF0YS1kaXNwbGF5LW1vZHVsZScsICd0cnVlJyk7XG5cblx0aWYgKCBvcmlnaW4gPT0gJycgKSB7XG5cblx0XHRqUXVlcnkoJy5kc2xjYS1vcmlnaW4nLCBzZWN0aW9uKS5hdHRyKCdkYXRhLWRpc3BsYXktbW9kdWxlJywgJ3RydWUnKTtcblx0XHRqUXVlcnkoJy5kc2xjYS1vcmlnaW4uZHNsY2EtZXhjbHVkZScsIHNlY3Rpb24pLmF0dHIoJ2RhdGEtZGlzcGxheS1tb2R1bGUnLCAnZmFsc2UnKVxuXHR9XG59XG5cblxuLyoqXG4gKiBQcmV2ZW50IGRyYWcgYW5kIGRyb3Agb2YgdGhlIG1vZHVsZXNcbiAqIGludG8gdGhlIGlubmVyIGNvbnRlbnQgYXJlYXMgb2YgdGhlIG90aGVyIG1vZHVsZXNcbiAqL1xuZXhwb3J0IGNvbnN0IGZpeENvbnRlbnRlZGl0YWJsZSA9ICgpID0+IHtcblxuXHR3aW5kb3cuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudC5vbignZHJhZ3N0YXJ0JywgJy5kc2xjYS1tb2R1bGUsIC5kc2xjLW1vZHVsZS1mcm9udCwgLmRzbGMtbW9kdWxlcy1hcmVhLCAuZHNsYy1tb2R1bGVzLXNlY3Rpb24nLCBmdW5jdGlvbiAoZSkge1xuXG5cdFx0alF1ZXJ5KCdbY29udGVudGVkaXRhYmxlXScsIHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50KS5hdHRyKCdjb250ZW50ZWRpdGFibGUnLCBmYWxzZSk7XG5cdH0pO1xuXG5cdHdpbmRvdy5MaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50Lm9uKCdkcmFnZW5kIG1vdXNlZG93bicsICcuZHNsY2EtbW9kdWxlLCAuZHNsYy1tb2R1bGUtZnJvbnQsIC5kc2xjLW1vZHVsZXMtYXJlYSwgLmRzbGMtbW9kdWxlcy1zZWN0aW9uJywgZnVuY3Rpb24gKGUpIHtcblxuXHRcdGpRdWVyeSgnW2NvbnRlbnRlZGl0YWJsZV0nLCB3aW5kb3cuTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCkuYXR0cignY29udGVudGVkaXRhYmxlJywgdHJ1ZSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIERpc2FibGUvRW5hYmxlIG1vZHVsZSBjb250cm9sLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gY29udHJvbF9pZCBDU1MgSUQgb2YgdGhlIGNvbnRyb2wgd2UgYXJlIHRvZ2dsaW5nXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5mdW5jdGlvbiBkc2xjX3Rvb2dsZV9jb250cm9sICggY29udHJvbF9pZCApIHtcblxuXHRpZiAoIGNvbnRyb2xfaWQgPT09IHVuZGVmaW5lZCkgY29udHJvbF9pZCA9IGZhbHNlO1xuXHRpZiAoICFjb250cm9sX2lkICkgcmV0dXJuO1xuXG5cdHZhciBjb250cm9sICAgICAgICAgPSBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24tJyArIGNvbnRyb2xfaWQgKTtcblx0dmFyIGNvbnRyb2xfc3RvcmFnZSA9IGNvbnRyb2wuZmluZCgnLmRzbGNhLW1vZHVsZS1lZGl0LWZpZWxkJyk7XG5cblx0Ly8gR2V0IHRoZSBlbGVtZW50IHdlIGFyZSBlZGl0aW5nXG5cdHZhciBtb2R1bGUgPSBqUXVlcnkoJy5kc2xjYS1tb2R1bGUtYmVpbmctZWRpdGVkJywgTGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFEb2N1bWVudCk7XG5cblx0Ly8gR2V0IHRoZSBlbGVtZW50IGlkXG5cdHZhciBtb2R1bGVfaWQgPSBtb2R1bGVbMF0uaWQ7XG5cblx0dmFyIHJlc3BvbnNpdmVfcHJlZml4ID0gJyc7XG5cblx0aWYgKCAndGFibGV0X3Jlc3BvbnNpdmUnID09PSBjb250cm9sLmRhdGEoJ3RhYicpICkge1xuXHRcdHJlc3BvbnNpdmVfcHJlZml4ID0gJ2JvZHkuZHNsYy1yZXMtdGFibGV0ICc7XG5cdH0gZWxzZSBpZiAoICdwaG9uZV9yZXNwb25zaXZlJyA9PT0gY29udHJvbC5kYXRhKCd0YWInKSApIHtcblx0XHRyZXNwb25zaXZlX3ByZWZpeCA9ICdib2R5LmRzbGMtcmVzLXBob25lICc7XG5cdH1cblxuXHR2YXIgYWZmZWN0X29uX2NoYW5nZV9lbCA9IGNvbnRyb2xfc3RvcmFnZS5kYXRhKCdhZmZlY3Qtb24tY2hhbmdlLWVsJyk7XG5cblx0aWYgKCBhZmZlY3Rfb25fY2hhbmdlX2VsID09PSB1bmRlZmluZWQpIHJldHVybjtcblxuXHR2YXIgYWZmZWN0X29uX2NoYW5nZV9lbG10cyA9IGFmZmVjdF9vbl9jaGFuZ2VfZWwuc3BsaXQoICcsJyApO1xuXG5cdGFmZmVjdF9vbl9jaGFuZ2VfZWwgPSAnJztcblxuXHQvLyBMb29wIHRocm91Z2ggZWxlbWVudHMgKHVzZWZ1bCB3aGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBlbGVtZW50cylcblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgYWZmZWN0X29uX2NoYW5nZV9lbG10cy5sZW5ndGg7IGkrKyApIHtcblxuXHRcdGlmICggaSA+IDAgKSB7XG5cblx0XHRcdGFmZmVjdF9vbl9jaGFuZ2VfZWwgKz0gJywgJztcblx0XHR9XG5cblx0XHRhZmZlY3Rfb25fY2hhbmdlX2VsICs9IHJlc3BvbnNpdmVfcHJlZml4ICsgJyMnICsgbW9kdWxlX2lkICsgJyAnICsgYWZmZWN0X29uX2NoYW5nZV9lbG10c1tpXTtcblx0fVxuXG5cdHZhciBhZmZlY3Rfb25fY2hhbmdlX3J1bGUgID0gY29udHJvbF9zdG9yYWdlLmRhdGEoJ2FmZmVjdC1vbi1jaGFuZ2UtcnVsZScpLnJlcGxhY2UoLyAvZywnJyk7XG5cdHZhciBhZmZlY3Rfb25fY2hhbmdlX3J1bGVzID0gYWZmZWN0X29uX2NoYW5nZV9ydWxlLnNwbGl0KCAnLCcgKTtcblxuXHR2YXIgY29udHJvbF92YWx1ZTtcblx0dmFyIGNvbnRyb2xfZGF0YV9leHQgPSBjb250cm9sX3N0b3JhZ2UuZGF0YSgnZXh0Jyk7XG5cblx0Y29udHJvbC50b2dnbGVDbGFzcygnZHNsY2Etb3B0aW9uLW9mZicpO1xuXG5cdGlmICggY29udHJvbC5oYXNDbGFzcygnZHNsY2Etb3B0aW9uLW9mZicpKSB7XG5cdFx0Ly8gRGlzYWJsZVxuXG5cdFx0Y29udHJvbF92YWx1ZSA9IGRzbGNfZ2V0X2NvbnRyb2xfdmFsdWUoY29udHJvbF9pZCk7XG5cdFx0Ly8gVGVtcG9yYXJ5IGJhY2t1cCB0aGUgY3VycmVudCB2YWx1ZSBhcyBkYXRhIGF0dHJpYnV0ZVxuXHRcdGNvbnRyb2xfc3RvcmFnZS5kYXRhKCAndmFsLWJja3AnLCBjb250cm9sX3ZhbHVlICk7XG5cdFx0Ly8gY29udHJvbF92YWx1ZSA9IGRzbGNfY29tYmluZV92YWx1ZV9hbmRfZXh0ZW5zaW9uKCBjb250cm9sX3ZhbHVlLCBjb250cm9sX2RhdGFfZXh0KTtcblxuXHRcdC8vIExvb3AgdGhyb3VnaCBydWxlcyAodXNlZnVsIHdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIHJ1bGVzKVxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGFmZmVjdF9vbl9jaGFuZ2VfcnVsZXMubGVuZ3RoOyBpKysgKSB7XG5cblx0XHRcdC8vIHJlbW92ZSBjc3MgcnVsZSBpbiBlbGVtZW50IGlubGluZSBzdHlsZVxuXHRcdFx0alF1ZXJ5KCBhZmZlY3Rfb25fY2hhbmdlX2VsLCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYURvY3VtZW50ICkuY3NzKCBhZmZlY3Rfb25fY2hhbmdlX3J1bGVzW2ldICwgJycgKTtcblx0XHRcdC8vIHJlbW92ZSBjc3MgcnVsZSBpbiBjc3MgYmxvY2tcblx0XHRcdGRpc2FibGVfY3NzX3J1bGUgKCBhZmZlY3Rfb25fY2hhbmdlX2VsLCBhZmZlY3Rfb25fY2hhbmdlX3J1bGVzW2ldLCBtb2R1bGVfaWQpO1xuXHRcdFx0Ly8gUFJPQkxFTSBkbyBub3Qgd29yayB3aXRoIG11bHRpcGx5IHJ1bGVzIGV4LjogLmRzbGMtdGV4dC1tb2R1bGUtY29udGVudCwuZHNsYy10ZXh0LW1vZHVsZS1jb250ZW50IHBcblx0XHR9XG5cblx0XHRjb250cm9sX3N0b3JhZ2UudmFsKCcnKS50cmlnZ2VyKCdjaGFuZ2UnKTtcblx0fSBlbHNlIHtcblx0XHQvLyBFbmFibGVcblxuXHRcdC8vIFJlc3RvcmUgdmFsdWUgb2YgdGhlIGRhdGEgYmFja3VwIGF0dHJpYnV0ZVxuXHRcdGNvbnRyb2xfc3RvcmFnZS52YWwoIGNvbnRyb2xfc3RvcmFnZS5kYXRhKCd2YWwtYmNrcCcpICkudHJpZ2dlcignY2hhbmdlJyk7XG5cdFx0Y29udHJvbF92YWx1ZSA9IGRzbGNfZ2V0X2NvbnRyb2xfdmFsdWUoY29udHJvbF9pZCk7XG5cdFx0Y29udHJvbF92YWx1ZSA9IGRzbGNfY29tYmluZV92YWx1ZV9hbmRfZXh0ZW5zaW9uKCBjb250cm9sX3ZhbHVlLCBjb250cm9sX2RhdGFfZXh0IHx8ICcnKTtcblxuXHRcdC8vIExvb3AgdGhyb3VnaCBydWxlcyAodXNlZnVsIHdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIHJ1bGVzKVxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGFmZmVjdF9vbl9jaGFuZ2VfcnVsZXMubGVuZ3RoOyBpKysgKSB7XG5cblx0XHRcdHZhciBzdHlsZUNvbnRlbnQgPSBhZmZlY3Rfb25fY2hhbmdlX2VsICsgXCJ7XCIgKyBhZmZlY3Rfb25fY2hhbmdlX3J1bGVzW2ldICsgXCI6IFwiICsgY29udHJvbF92YWx1ZSArIFwifVwiO1xuXG5cdFx0XHRMaXZlQ29tcG9zZXIuQnVpbGRlci5IZWxwZXJzLnByb2Nlc3NJbmxpbmVTdHlsZVRhZyh7XG5cblx0XHRcdFx0Y29udGV4dDogY29udHJvbCxcblx0XHRcdFx0cnVsZTogYWZmZWN0X29uX2NoYW5nZV9ydWxlc1tpXSxcblx0XHRcdFx0ZWxlbXM6IGFmZmVjdF9vbl9jaGFuZ2VfZWwucmVwbGFjZShuZXcgUmVnRXhwKCcjJyArIG1vZHVsZV9pZCwgJ2dpJyksICcnKS50cmltKCksXG5cdFx0XHRcdHN0eWxlQ29udGVudDogc3R5bGVDb250ZW50XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cbn1cblxualF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigkKXtcblxuXHQvLyBPcHRpb24gQ29udHJvbCBUb2dnbGVcblx0alF1ZXJ5KGRvY3VtZW50KS5vbiggJ2NsaWNrJywgJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24gLmRzbGMtY29udHJvbC10b2dnbGUnLCBmdW5jdGlvbihlKXtcblxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR2YXIgY29udHJvbF9pZCA9IGpRdWVyeShlLnRhcmdldCkuY2xvc2VzdCgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbicpLmZpbmQoJy5kc2xjYS1tb2R1bGUtZWRpdC1maWVsZCcpLmRhdGEoJ2lkJyk7XG5cdFx0ZHNsY190b29nbGVfY29udHJvbCAoIGNvbnRyb2xfaWQgKTtcblx0fSk7XG5cblxuXHQvLyBEaXNhYmxlIFRvZ2dsZSBJZiB0aGUgQ29udHJvbCBGb2N1c2VkXG5cdGpRdWVyeShkb2N1bWVudCkub24oICdtb3VzZWRvd24nLCAnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbicsIGZ1bmN0aW9uKGUpe1xuXG5cdFx0dmFyIHRvZ2dsZSA9IGpRdWVyeSgnLmRzbGMtY29udHJvbC10b2dnbGUnKTtcblx0XHRpZiAoICEgdG9nZ2xlLmlzKGUudGFyZ2V0KSAvLyBpZiB0aGUgdGFyZ2V0IG9mIHRoZSBjbGljayBpc24ndCB0aGUgY29udGFpbmVyLi4uXG5cdFx0ICAgICAmJiB0b2dnbGUuaGFzKGUudGFyZ2V0KS5sZW5ndGggPT09IDAgKSAvLyAuLi4gbm9yIGEgZGVzY2VuZGFudCBvZiB0aGUgY29udGFpbmVyXG5cdFx0e1xuXG5cdFx0XHRpZiAoIGpRdWVyeShlLnRhcmdldCkuY2xvc2VzdCgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbicpLmhhc0NsYXNzKCdkc2xjYS1vcHRpb24tb2ZmJykgKSB7XG5cblx0XHRcdFx0dmFyIGNvbnRyb2xfaWQgPSBqUXVlcnkoZS50YXJnZXQpLmNsb3Nlc3QoJy5kc2xjYS1tb2R1bGUtZWRpdC1vcHRpb24nKS5maW5kKCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQnKS5kYXRhKCdpZCcpO1xuXHRcdFx0XHRkc2xjX3Rvb2dsZV9jb250cm9sIChjb250cm9sX2lkKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufSk7XG5cbmZ1bmN0aW9uIGRpc2FibGVfY3NzX3J1bGUoc2VsZWN0b3JDU1MsIHJ1bGVDU1MsIG1vZHVsZUlEKSB7XG5cblx0dmFyIGNzc1J1bGVzO1xuXHR2YXIgdGFyZ2V0X3N0eWxzaGVldF9JRCA9ICdjc3MtZm9yLScgKyBtb2R1bGVJRDtcblx0dmFyIHN0eWxlc2hlZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFnZS1idWlsZGVyLWZyYW1lJykuY29udGVudFdpbmRvdy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXRfc3R5bHNoZWV0X0lEKTtcblxuXHRzZWxlY3RvckNTUyA9IHNlbGVjdG9yQ1NTLnJlcGxhY2UoIC9cXHNcXHMrL2csICcgJyApO1xuXG5cdGlmIChzdHlsZXNoZWV0KSB7XG5cblx0ICAgc3R5bGVzaGVldCA9IHN0eWxlc2hlZXQuc2hlZXQ7XG5cblx0XHRpZiAoc3R5bGVzaGVldFsncnVsZXMnXSkge1xuXG5cdFx0XHRjc3NSdWxlcyA9ICdydWxlcyc7XG5cdFx0fSBlbHNlIGlmIChzdHlsZXNoZWV0Wydjc3NSdWxlcyddKSB7XG5cblx0XHRcdGNzc1J1bGVzID0gJ2Nzc1J1bGVzJztcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvL25vIHJ1bGVzIGZvdW5kLi4uIGJyb3dzZXIgdW5rbm93blxuXHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZWFjaCBDU1MgcnVsZSAoZXguOiAuY29udGVudCBoMSB7Li4ufSlcblx0XHRmb3IgKHZhciBSID0gMDsgUiA8IHN0eWxlc2hlZXRbY3NzUnVsZXNdLmxlbmd0aDsgUisrKSB7XG5cblx0XHRcdC8vIElzIGN1cnJlbnQgQ1NTIHJ1bGUgZXF1YWwgdG8gdGhlIHNlbGVjdG9yQ1NTIHdlIGFyZSBsb29raW5nIGZvcj9cblx0XHRcdC8vIChleC46ICcuY29udGVudCBoMScgPT0gJy5jb250ZW50IGgxJyApXG5cdFx0XHRpZiAoc3R5bGVzaGVldFtjc3NSdWxlc11bUl0uc2VsZWN0b3JUZXh0ID09IHNlbGVjdG9yQ1NTKSB7XG5cblx0XHRcdFx0Ly8gR2V0IENTUyBwcm9wZXJ0eSB3ZSBhcmUgbG9va2luZyBmb3IuLi4gKGV4LjogZm9udC1zaXplIDogLi4uOyApXG5cdFx0XHRcdGlmKHN0eWxlc2hlZXRbY3NzUnVsZXNdW1JdLnN0eWxlW3J1bGVDU1NdKXtcblxuXHRcdFx0XHRcdFx0c3R5bGVzaGVldFtjc3NSdWxlc11bUl0uc3R5bGVbcnVsZUNTU10gPSAnJztcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkc2xjX2NvbWJpbmVfdmFsdWVfYW5kX2V4dGVuc2lvbiAoIHZhbHVlLCBleHRlbnNpb24pIHtcblx0aWYgKCAnJyA9PT0gdmFsdWUgfHwgbnVsbCA9PT0gdmFsdWUgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgdmFsdWUgZG8gbm90IGFscmVhZHkgaW5jbHVkZSBleHRlbnNpb25cblx0aWYgKCB2YWx1ZS5pbmRleE9mKGV4dGVuc2lvbikgPT0gLTEgKSB7XG5cdFx0dmFsdWUgPSB2YWx1ZSArIGV4dGVuc2lvbjtcblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZHNsY19nZXRfY29udHJvbF92YWx1ZSAoIGNvbnRyb2xfaWQgKSB7XG5cblx0dmFyIGNvbnRyb2wgICAgICA9IGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbi0nICsgY29udHJvbF9pZCApO1xuXHR2YXIgY29udHJvbF90eXBlID0gJ3RleHQnO1xuXHR2YXIgY29udHJvbF9zdG9yYWdlID0gY29udHJvbC5maW5kKCcuZHNsY2EtbW9kdWxlLWVkaXQtZmllbGQnKTtcblx0dmFyIHZhbHVlO1xuXG4vKlxuXHRpZiAoIGNvbnRyb2wuaGFzQ2xhc3MoJ2RzbGNhLW1vZHVsZS1lZGl0LW9wdGlvbi1zZWxlY3QnKSApIHtcblxuXHR9IGVsc2Uge1xuXHRcdC8vIHRleHQgYmFzZWQgY29udHJvbHNcblx0XHR2YWx1ZSA9IGNvbnRyb2xfc3RvcmFnZS52YWwoKTtcblx0fVxuKi9cblx0dmFsdWUgPSBjb250cm9sX3N0b3JhZ2UudmFsKCk7XG5cblx0cmV0dXJuIHZhbHVlO1xufVxuXG4vKipcbiAqIEJpbmQga2V5cHJlc3MgZXZlbnRzIHdpdGggYm90aCBwYXJlbnQgYW5kIGlmcmFtZSBwYWdlcy5cbiAqIEZ1bmN0aW9uIGNhbGxlZCB3aGVuIGNvbnRlbnQgaW5zaWRlIGlmcmFtZSBpcyBsb2FkZWQuXG4gKlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IGtleXByZXNzRXZlbnRzID0gKCkgPT4ge1xuXG5cdGpRdWVyeSggW2RvY3VtZW50LCBMaXZlQ29tcG9zZXIuQnVpbGRlci5QcmV2aWV3QXJlYVdpbmRvdy5kb2N1bWVudCBdICkudW5iaW5kKCdrZXlkb3duJykuYmluZCgna2V5ZG93bicsIGZ1bmN0aW9uIChrZXlkb3duX2V2ZW50KSB7XG5cblx0XHQvLyBNb2RhbCB3aW5kb3cgW0VTQ10vW0VudGVyXVxuXHRcdHdpbmRvdy5kc2xjX21vZGFsX2tleXByZXNzX2V2ZW50cyhrZXlkb3duX2V2ZW50KTtcblxuXHRcdC8vIFByZXZlbnQgYmFja3NwYWNlIGZyb20gbmF2aWdhdGluZyBiYWNrXG5cdFx0ZHNsY19kaXNhYmxlX2JhY2tzcGFjZV9uYXZpZ2F0aW9uKGtleWRvd25fZXZlbnQpO1xuXG5cdFx0Ly8gUHJvbXB0IE1vZGFsIG9uIEY1XG5cdFx0ZHNsY19ub3RpY2Vfb25fcmVmcmVzaChrZXlkb3duX2V2ZW50KTtcblxuXHRcdC8vIFNhdmUgUGFnZVxuXHRcdGRzbGNfc2F2ZV9wYWdlKGtleWRvd25fZXZlbnQpO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBBY3Rpb24gLSBQcmV2ZW50IGJhY2tzcGFjZSBmcm9tIG5hdmlnYXRpbmcgYmFja1xuICovXG5cbmZ1bmN0aW9uIGRzbGNfZGlzYWJsZV9iYWNrc3BhY2VfbmF2aWdhdGlvbiAoZXZlbnQpIHtcblxuXHR2YXIgZG9QcmV2ZW50ID0gZmFsc2U7XG5cblx0aWYgKGV2ZW50LmtleUNvZGUgPT09IDgpIHtcblxuXHRcdHZhciBkID0gZXZlbnQuc3JjRWxlbWVudCB8fCBldmVudC50YXJnZXQ7XG5cblx0XHRpZiAoIChkLnRhZ05hbWUudG9VcHBlckNhc2UoKSA9PT0gJ0lOUFVUJyAmJiAoXG5cdFx0XHRcdGQudHlwZS50b1VwcGVyQ2FzZSgpID09PSAnVEVYVCcgfHxcblx0XHRcdFx0ZC50eXBlLnRvVXBwZXJDYXNlKCkgPT09ICdQQVNTV09SRCcgfHxcblx0XHRcdFx0ZC50eXBlLnRvVXBwZXJDYXNlKCkgPT09ICdOVU1CRVInIHx8XG5cdFx0XHRcdGQudHlwZS50b1VwcGVyQ2FzZSgpID09PSAnRklMRScpXG5cdFx0XHQgIClcblx0XHRcdCB8fCBkLnRhZ05hbWUudG9VcHBlckNhc2UoKSA9PT0gJ1RFWFRBUkVBJ1xuXHRcdFx0IHx8IGpRdWVyeShkKS5oYXNDbGFzcygnZHNsY2EtZWRpdGFibGUtY29udGVudCcpXG5cdFx0XHQgfHwgalF1ZXJ5KGQpLmhhc0NsYXNzKCdkc2xjLXRhYnMtbmF2LWhvb2stdGl0bGUnKVxuXHRcdFx0IHx8IGpRdWVyeShkKS5oYXNDbGFzcygnZHNsYy1hY2NvcmRpb24tdGl0bGUnKSApIHtcblxuXHRcdFx0ZG9QcmV2ZW50ID0gZC5yZWFkT25seSB8fCBkLmRpc2FibGVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRvUHJldmVudCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cblx0aWYgKGRvUHJldmVudCkge1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdH1cbn1cblxuLyoqXG4gKiBBY3Rpb25zIC0gUHJvbXB0IE1vZGFsIG9uIEY1XG4gKlxuICogMTE2IOKAkyBGNVxuICogODEgKyBldmVudC5tZXRhS2V5ID0gQ01EICsgUlxuICovXG5cbmZ1bmN0aW9uIGRzbGNfbm90aWNlX29uX3JlZnJlc2goZSkge1xuXG5cdGlmICggZS53aGljaCA9PSAxMTYgfHwgKCBlLndoaWNoID09PSA4MiAmJiBlLm1ldGFLZXkgKSApIHtcblxuXHRcdGlmICggalF1ZXJ5KCcuZHNsY2Etc2F2ZS1jb21wb3Nlci1ob29rJykub2Zmc2V0UGFyZW50ICE9PSBudWxsIHx8IGpRdWVyeSgnLmRzbGNhLW1vZHVsZS1lZGl0LXNhdmUnKS5vZmZzZXRQYXJlbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdENNb2RhbFdpbmRvdyh7XG5cblx0XHRcdFx0dGl0bGU6IERTTENTdHJpbmcuc3RyX3JlZnJlc2hfdGl0bGUsXG5cdFx0XHRcdGNvbnRlbnQ6IERTTENTdHJpbmcuc3RyX3JlZnJlc2hfZGVzY3IsXG5cdFx0XHRcdGNvbmZpcm06IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0d2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Lypkc2xjX2pzX2NvbmZpcm0oICdkaXNhYmxlX2xjJywgJzxzcGFuIGNsYXNzPVwiZHNsY2EtcHJvbXB0LW1vZGFsLXRpdGxlXCI+JyArIERTTENTdHJpbmcuc3RyX3JlZnJlc2hfdGl0bGUgK1xuXHRcdFx0ICc8L3NwYW4+PHNwYW4gY2xhc3M9XCJkc2xjYS1wcm9tcHQtbW9kYWwtZGVzY3JcIj4nICsgRFNMQ1N0cmluZy5zdHJfcmVmcmVzaF9kZXNjciArICc8L3NwYW4+JywgZG9jdW1lbnQuVVJMICk7Ki9cblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBJZiBDb250cm9sIG9yIENvbW1hbmQga2V5IGlzIHByZXNzZWQgYW5kIHRoZSBTIGtleSBpcyBwcmVzc2VkIHJ1biBkc2xjX3NhdmVfY29tcG9zZXIuXG4gKiA4MyBpcyB0aGUga2V5IGNvZGUgZm9yIFMuXG4gKi9cbmZ1bmN0aW9uIGRzbGNfc2F2ZV9wYWdlKGUpIHtcblxuICAgIGlmICggZS53aGljaCA9PSA4MyAmJiAoIGUubWV0YUtleSB8fCBlLmN0cmxLZXkgKSAgKSB7XG4gICAgXHRpZiAoIGpRdWVyeSgnLmRzbGNhLXNhdmUtY29tcG9zZXItaG9vaycpLmNzcygnZGlzcGxheScpID09ICdibG9jaycgKSB7XG5cdCAgICAgICAgZHNsY19zYXZlX2NvbXBvc2VyKCk7XG5cdCAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogR2VuZXJhdGUgcmVwb3J0IGFib3V0IEpTIGVycm9yIGFuZCBzYXZlIGl0IGluIGEgbG9jYWwgc3RvcmFnZS5cbiAqIEBwYXJhbSAgU3RyaW5nIGVycm9yIEVycm9yIHRleHRcbiAqIEBwYXJhbSAgU3RyaW5nIGZpbGUgIEZpbGUgd2l0aCBlcnJvclxuICogQHBhcmFtICBTdHJpbmcgbGluZSAgTGluZSB3aXRoIGVycm9yXG4gKiBAcGFyYW0gIFN0cmluZyBjaGFyICBDb2x1bW4gd2l0aCBlcnJvclxuICogQHJldHVybiB2b2lkXG4gKi9cbmZ1bmN0aW9uIGRzbGNhX2dlbmVyYXRlX2Vycm9yX3JlcG9ydCAoIGVycm9yLCBmaWxlLCBsaW5lLCBjaGFyICkge1xuXG5cdHZhciB0aXRsZSA9ICdKYXZhU2NyaXB0IGVycm9yIGRldGVjdGVkIGluIGEgdGhpcmQtcGFydHkgcGx1Z2luJztcblxuXHRpZiAoIGZpbGUubWF0Y2goXCJ3cC1jb250ZW50XFwvcGx1Z2luc1xcL2xpdmUtY29tcG9zZXItcGFnZS1idWlsZGVyXFwvanNcIikgIT0gbnVsbCApIHtcblxuXHRcdHRpdGxlID0gJ0xpdmUgQ29tcG9zZXIgcmV0dXJuZWQgSlMgZXJyb3InO1xuXHR9XG5cblx0dmFyIGVycm9yX3JlcG9ydCA9ICcnO1xuXHRlcnJvcl9yZXBvcnQgKz0gJzxiciAvPjxzdHJvbmcgc3R5bGU9XCJjb2xvcjojRTU1RjVGO1wiPicgKyB0aXRsZSArICc8L3N0cm9uZz48YnIgLz4nO1xuXHRlcnJvcl9yZXBvcnQgKz0gZXJyb3IgKyAnPGJyIC8+IEZpbGUgXCInICsgZmlsZSArICdcIiwgbGluZSAnICsgbGluZSArICcsIGNoYXIgJyArIGNoYXIgKyAnPGJyIC8+JztcblxuXHRpZiAoICd1bmRlZmluZWQnICE9PSB0eXBlb2YoU3RvcmFnZSkpIHtcblx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnanNfZXJyb3JzX3JlcG9ydCcsIGVycm9yX3JlcG9ydCk7XG5cdH1cbn1cblxuLyoqXG4gKiBQdXQgaW4gYSBoaWRkZW4gZGl2I2RzbGNhLWpzLWVycm9ycy1yZXBvcnQgaW5mb3JtYXRpb24gZnJvbSBsb2NhbCBzdG9yYWdlXG4gKiBAcmV0dXJuIHZvaWRcbiAqL1xuZnVuY3Rpb24gZHNsY2FfdXBkYXRlX3JlcG9ydF9sb2coKSB7XG5cblx0dmFyIGVycm9yc19jb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZHNsY2EtanMtZXJyb3JzLXJlcG9ydCcpO1xuXHR2YXIgZXJyb3JfcmVwb3J0ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2pzX2Vycm9yc19yZXBvcnQnKTtcblxuXHRpZiAoIG51bGwgIT09IGVycm9yX3JlcG9ydCApIHtcblx0XHRlcnJvcnNfY29udGFpbmVyLnZhbHVlID0gZXJyb3JfcmVwb3J0O1xuXHRcdGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdqc19lcnJvcnNfcmVwb3J0Jyk7XG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvciggJy5kc2xjYS1zaG93LWpzLWVycm9yLWhvb2snICkuc2V0QXR0cmlidXRlKCdzdHlsZScsJ3Zpc2liaWxpdHk6dmlzaWJsZScpO1xuXHR9XG59XG5cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5qUXVlcnkoZG9jdW1lbnQpLm9uKCdlZGl0b3JGcmFtZUxvYWRlZCcsIGZ1bmN0aW9uKCl7XG5cblx0dmFyICQgPSBqUXVlcnk7XG5cdHZhciBoZWFkZXJGb290ZXIgPSBqUXVlcnkoJ2RpdltkYXRhLWhmXScsIExpdmVDb21wb3Nlci5CdWlsZGVyLlByZXZpZXdBcmVhRG9jdW1lbnQpO1xuXHR2YXIgb3ZlcmxheSA9ICcnO1xuXG5cdGhlYWRlckZvb3Rlci5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbCkge1xuXHRcdHZhciBsaW5rVG9FZGl0ID0galF1ZXJ5KGVsKS5kYXRhKCdlZGl0aW5nLWxpbmsnKTtcblx0XHR2YXIgaGZUeXBlID0galF1ZXJ5KGVsKS5kYXRhKCdlZGl0aW5nLXR5cGUnKTtcblx0XHR2YXIgZWRpdGluZ0xhYmVsID0galF1ZXJ5KGVsKS5kYXRhKCdlZGl0aW5nLWxhYmVsJyk7XG5cdFx0dmFyIGVkaXRpbmdTdWJMYWJlbCA9IGpRdWVyeShlbCkuZGF0YSgnZWRpdGluZy1zdWJsYWJlbCcpO1xuXG5cdFx0b3ZlcmxheSArPSAnPGRpdiBjbGFzcz1cImRzbGMtaGYtYmxvY2stb3ZlcmxheVwiPjxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCInICsgbGlua1RvRWRpdCArICdcIiBjbGFzcz1cImRzbGMtaGYtYmxvY2stb3ZlcmxheS1idXR0b24gZHNsY2EtbGlua1wiPicgKyBlZGl0aW5nTGFiZWwgKyAnPC9hPic7XG5cdFx0aWYgKCBlZGl0aW5nU3ViTGFiZWwgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdG92ZXJsYXkgKz0gJyA8c3BhbiBjbGFzcz1cImRzbGMtaGYtYmxvY2stb3ZlcmxheS10ZXh0XCI+JyArIGVkaXRpbmdTdWJMYWJlbCArICc8L3NwYW4+Jztcblx0XHR9XG5cdFx0b3ZlcmxheSArPSAnPC9kaXY+JztcblxuXHRcdHZhciBodG1sT2JqZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0aHRtbE9iamVjdC5pbm5lckhUTUwgPSBvdmVybGF5O1xuXG5cdFx0ZWwuYXBwZW5kKCBodG1sT2JqZWN0ICk7XG5cdH0pO1xuXG59KTtcbiIsIi8qKlxuICogQ3VzdG9tIHV0aWxzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBVdGlscyA9IHtcblx0YWRkc2xhc2hlczogZnVuY3Rpb24oc3RyKVxuXHR7XG5cdFx0IHN0ciA9IHN0ci5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpO1xuXHRcdCBzdHIgPSBzdHIucmVwbGFjZSgvXFwnL2csICdcXFxcXFwnJyk7XG5cdFx0IHN0ciA9IHN0ci5yZXBsYWNlKC9cXFwiL2csICdcXFxcXCInKTtcblx0XHQgc3RyID0gc3RyLnJlcGxhY2UoL1xcMC9nLCAnXFxcXDAnKTtcblx0XHQgcmV0dXJuIHN0cjtcblx0fSxcblxuXHRiYXNlbmFtZTogZnVuY3Rpb24ocGF0aClcblx0e1xuXHRcdHJldHVybiBwYXRoLnNwbGl0KC9bXFxcXC9dLykucG9wKCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIENoZWNrIGlmIGJyb3dzZXIgaXMgSUVcblx0ICovXG5cdG1zaWV2ZXJzaW9uOiBmdW5jdGlvbigpIHtcblxuXHQgICAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cdCAgICB2YXIgbXNpZSA9IHVhLmluZGV4T2YoXCJNU0lFIFwiKTtcblxuXHQgICAgaWYgKG1zaWUgPiAwIHx8ICEhbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVHJpZGVudC4qcnZcXDoxMVxcLi8pKSAgLy8gSWYgSW50ZXJuZXQgRXhwbG9yZXIsIHJldHVybiB2ZXJzaW9uIG51bWJlclxuXHQgICAge1xuXHQgICAgICAgIHJldHVybiBwYXJzZUludCh1YS5zdWJzdHJpbmcobXNpZSArIDUsIHVhLmluZGV4T2YoXCIuXCIsIG1zaWUpKSk7XG5cdCAgICB9XG5cdCAgICBlbHNlICAvLyBJZiBhbm90aGVyIGJyb3dzZXIsIHJldHVybiAwXG5cdCAgICB7XG5cdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBDaGVjayBpZiB2YXJpYWJsZXMgaW4gYXJyYXkgaXMgZGVzaXJlZCB0eXBlc1xuXHQgKiBAcGFyYW0gIHthcnJheX0gYXJyYXlcblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICovXG5cdGNoZWNrUGFyYW1zOiBmdW5jdGlvbihhcnJheSlcblx0e1xuXHRcdGlmKCFBcnJheS5pc0FycmF5KGFycmF5KSlcblx0XHR7XG5cdFx0XHR0aHJvdyAoJ1BhcmFtIGlzIG5vdCBhcnJheScpO1xuXHRcdH1cblxuXHRcdC8vLyBJbnN0ZWFkIG9mIHN3aXRjaCBjb25zdHJ1Y3Rpb25cblx0XHR2YXIgdHlwZXMgPSB7XG5cdFx0XHRpbnRlZ2VyOiBmdW5jdGlvbihwYXJhbSlcblx0XHRcdHtcblx0XHRcdFx0cmV0dXJuIGlzTmFOKHBhcnNlSW50KHBhcmFtKSk7XG5cdFx0XHR9LFxuXHRcdFx0ZmxvYXQ6IGZ1bmN0aW9uKHBhcmFtKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXR1cm4gaXNOYU4ocGFyc2VGbG9hdChwYXJhbSkpO1xuXHRcdFx0fSxcblx0XHRcdHN0cmluZzogZnVuY3Rpb24ocGFyYW0pXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybiBwYXJhbSAhPSBudWxsICYmIHBhcmFtICE9IHVuZGVmaW5lZCAmJiB0eXBlb2YgcGFyYW0gPT0gJ3N0cmluZyc7XG5cdFx0XHR9LFxuXHRcdFx0YXJyYXk6IGZ1bmN0aW9uKHBhcmFtKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXR1cm4gQXJyYXkuaXNBcnJheShwYXJhbSk7XG5cdFx0XHR9LFxuXHRcdFx0b2JqZWN0OiBmdW5jdGlvbihwYXJhbSlcblx0XHRcdHtcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBwYXJhbSA9PSAnb2JqZWN0Jztcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLy8gQ2hlY2sgaXQhXG5cdFx0YXJyYXkubWFwKGZ1bmN0aW9uKGl0ZW0pe1xuXHRcdFx0aWYoIXR5cGVzW2l0ZW1bMV1dKGl0ZW1bMF0pKXtcblx0XHRcdFx0dGhyb3coJ1BhcmFtICcgKyBpdGVtWzBdICsgJyBpcyBub3QgJyArIGl0ZW1bMV0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBVVEYtOCB0byBiYXNlNjRcblx0ICpcblx0ICogQHBhcmFtICB7c3RyaW5nfSB0IHV0Zi04XG5cdCAqIEByZXR1cm4ge3N0cmluZ30gICBiNjRcblx0ICovXG5cdHV0ZjhfdG9fYjY0OiBmdW5jdGlvbih0KSB7XG5cblx0XHRyZXR1cm4gd2luZG93LmJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHQpKSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGJhc2U2NCB0byBVVEYtOFxuXHQgKlxuXHQgKiBAcGFyYW0gIHtzdHJpbmd9IHN0ciBpbiBiNjRcblx0ICogQHJldHVybiB7c3RyaW5nfSAgIGluIHV0Zi04XG5cdCAqL1xuXHRiNjRfdG9fdXRmODogZnVuY3Rpb24oc3RyKSB7XG5cblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZSh3aW5kb3cuYXRvYihzdHIpKSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEdldCBQYWdlIFBhcmFtc1xuXHQgKlxuXHQgKiBAcmV0dXJuIHthcnJheX1cblx0ICovXG5cdGdldF9wYWdlX3BhcmFtczogZnVuY3Rpb24oKSB7XG5cblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc2xpY2UoMSkpLnNwbGl0KCcmJykucmVkdWNlKGZ1bmN0aW9uIF9yZWR1Y2UgKCBhLCBiKSB7IGIgPSBiLnNwbGl0KCc9Jyk7IGFbYlswXV0gPSBiWzFdOyByZXR1cm4gYTsgfSwge30pO1xuXHR9LFxuXG5cdGdldF91bmlxdWVfaWQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0cmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzIpLnNsaWNlKDIpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBVcGRhdGUgbW9kdWxlIG9wdGlvbiBpbiByYXcgSlNPTiBjb2RlIChkc2xjX2NvZGUpIG9mIHRoZSBtb2R1bGVcblx0ICpcblx0ICogQHBhcmFtICB7RE9NIGVsZW1lbnR9IG1vZHVsZSAgICBNb2R1bGUgRWxlbWVudFxuXHQgKiBAcGFyYW0gIHtzdHJpbmd9IHByb3BlcnR5X25hbWUgIE5hbWUgb2YgdGhlIG9wdGlvbiB3ZSBjaGFuZ2Vcblx0ICogQHBhcmFtICB7c3RyaW5nfSBwcm9wZXJ0eV92YWx1ZSBWYWx1ZSBvZiB0aGUgb3B0aW9uIHdlIGNoYW5nZVxuXHQgKiBAcmV0dXJuIHt2b2lkfVxuXHQgKi9cblx0dXBkYXRlX21vZHVsZV9wcm9wZXJ0eV9yYXc6IGZ1bmN0aW9uIChtb2R1bGUsIHByb3BlcnR5X25hbWUsIHByb3BlcnR5X3ZhbHVlICkge1xuXHRcdC8vIEhpZGRlbiB0ZXh0YXJlYSBlbGVtZW50IHdpdGggcmF3IGJhc2U2NCBjb2RlIG9mIHRoZSBtb2R1bGVcblx0XHQvLyA8dGV4dGFyZWEgY2xhc3M9XCJkc2xjYS1tb2R1bGUtY29kZVwiPllUbzJPbi4uLi5pT2pFN2ZRPT08L3RleHRhcmVhPlxuXHRcdHZhciBtb2R1bGVfY29kZV9jb250YWluZXIgPSBtb2R1bGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZHNsY2EtbW9kdWxlLWNvZGUnKVswXTtcblxuXHRcdC8vIEhpZGRlbiB0ZXh0YXJlYSBlbGVtZW50IHdpdGggdmFsdWUgb2YgdGhpcyBwYXJ0aWN1bGFyIHNldHRpbmdcblx0XHQvLyA8dGV4dGFyZWEgZGF0YS1pZD1cInByb3BlcnR5X25hbWVcIj5wcm9wZXJ0eV92YWx1ZTwvdGV4dGFyZWE+XG5cdFx0dmFyIHByb3BlcnR5X2NvbnRhaW5lciA9IG1vZHVsZS5xdWVyeVNlbGVjdG9yKCAnLmRzbGNhLW1vZHVsZS1vcHRpb24tZnJvbnRbZGF0YS1pZD1cIicgKyBwcm9wZXJ0eV9uYW1lICsgJ1wiXScgKTtcblxuXHRcdC8vIEdldCBtb2R1bGUgcmF3IGNvZGVcblx0XHR2YXIgbW9kdWxlX2NvZGUgPSBtb2R1bGVfY29kZV9jb250YWluZXIudmFsdWU7XG5cblx0XHRtb2R1bGVfY29kZSA9IEpTT04ucGFyc2UoIG1vZHVsZV9jb2RlICk7XG5cdFx0bW9kdWxlX2NvZGVbcHJvcGVydHlfbmFtZV0gPSBwcm9wZXJ0eV92YWx1ZTtcblx0XHRtb2R1bGVfY29kZSA9IEpTT04uc3RyaW5naWZ5KCBtb2R1bGVfY29kZSApO1xuXG5cdFx0Ly8gVXBkYXRlIHJhdyBjb2RlXG5cdFx0bW9kdWxlX2NvZGVfY29udGFpbmVyLnZhbHVlID0gbW9kdWxlX2NvZGU7XG5cdFx0bW9kdWxlX2NvZGVfY29udGFpbmVyLmlubmVySFRNTCA9IG1vZHVsZV9jb2RlOyAvLyBTZWUgY29tbWVudCBibG9jayBiZWxvd1xuXG5cdFx0Ly8gQ2hhbmdlIHRoZSBwcm9wZXJ0eSBpbiBoaWRkZW4gdGV4dGFyZWEgYXMgd2VsbFxuXHRcdHByb3BlcnR5X2NvbnRhaW5lci52YWx1ZSA9IHByb3BlcnR5X3ZhbHVlO1xuXHRcdHByb3BlcnR5X2NvbnRhaW5lci5pbm5lckhUTUwgID0gcHJvcGVydHlfdmFsdWU7IC8vIFNlZSBjb21tZW50IGJsb2NrIGJlbG93XG5cblx0XHQvKipcblx0XHQgKiBGaXJlRm94IHdpbGwgbm90IGR1cGxpY2F0ZSB0ZXh0YXJlYSB2YWx1ZSBwcm9wZXJseSB1c2luZyAuY2xvbmVOb2RlKHRydWUpXG5cdFx0ICogaWYgd2UgZG9uJ3QgdXNlIC5pbm5lckhUTUwgc3RhdGVtZW50IChDaHJvbWUgd29ya3MgZmluZSB3aXRoIC52YWx1ZSBvbmx5KS5cblx0XHQgKlxuXHRcdCAqIFNlZSBidWcgcmVwb3J0OiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0yMzc3ODNcblx0XHQgKi9cblx0fSxcblxuXHQvKipcblx0ICogVXBkYXRlIHNlY3Rpb24gb3B0aW9uIGluIHJhdyBKU09OIGNvZGUgKGRzbGNfY29kZSkgb2YgdGhlIHNlY3Rpb25cblx0ICpcblx0ICogQHBhcmFtICB7RE9NIGVsZW1lbnR9IHNlY3Rpb24gICAgYHNlY3Rpb24gRWxlbWVudFxuXHQgKiBAcGFyYW0gIHtzdHJpbmd9IHByb3BlcnR5X25hbWUgIE5hbWUgb2YgdGhlIG9wdGlvbiB3ZSBjaGFuZ2Vcblx0ICogQHBhcmFtICB7c3RyaW5nfSBwcm9wZXJ0eV92YWx1ZSBWYWx1ZSBvZiB0aGUgb3B0aW9uIHdlIGNoYW5nZVxuXHQgKiBAcmV0dXJuIHt2b2lkfVxuXHQgKi9cblx0dXBkYXRlX3NlY3Rpb25fcHJvcGVydHlfcmF3OiBmdW5jdGlvbiAoc2VjdGlvbiwgcHJvcGVydHlfbmFtZSwgcHJvcGVydHlfdmFsdWUgKSB7XG5cdFx0Ly8gSGlkZGVuIHRleHRhcmVhIGVsZW1lbnQgd2l0aCByYXcgYmFzZTY0IGNvZGUgb2YgdGhlIHJvcVxuXHRcdC8vIDx0ZXh0YXJlYSBjbGFzcz1cImRzbGNhLXNlY3Rpb24tY29kZVwiPjwvdGV4dGFyZWE+XG5cdFx0dmFyIHNlY3Rpb25fY29kZV9jb250YWluZXIgPSBzZWN0aW9uLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2RzbGNhLXNlY3Rpb24tY29kZScpWzBdO1xuXG5cdFx0Ly8gSGlkZGVuIGlucHV0IGVsZW1lbnQgd2l0aCB2YWx1ZSBvZiB0aGlzIHBhcnRpY3VsYXIgc2V0dGluZ1xuXHRcdC8vIDxpbnB1dCBkYXRhLWlkPVwicHJvcGVydHlfbmFtZVwiPnByb3BlcnR5X3ZhbHVlPC90ZXh0YXJlYT5cblx0XHR2YXIgcHJvcGVydHlfY29udGFpbmVyID0gc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCAnLmRzbGNhLW1vZHVsZXMtc2VjdGlvbi1zZXR0aW5ncyBpbnB1dFtkYXRhLWlkPVwiJyArIHByb3BlcnR5X25hbWUgKyAnXCJdJyApO1xuXG5cdFx0Ly8gR2V0IG1vZHVsZSByYXcgY29kZVxuXHRcdHZhciBzZWN0aW9uX2NvZGUgPSBzZWN0aW9uX2NvZGVfY29udGFpbmVyLnZhbHVlO1xuXG5cdFx0c2VjdGlvbl9jb2RlID0gSlNPTi5wYXJzZSggc2VjdGlvbl9jb2RlICk7XG5cdFx0c2VjdGlvbl9jb2RlW3Byb3BlcnR5X25hbWVdID0gcHJvcGVydHlfdmFsdWU7XG5cdFx0c2VjdGlvbl9jb2RlID0gSlNPTi5zdHJpbmdpZnkoIHNlY3Rpb25fY29kZSApO1xuXG5cdFx0Ly8gVXBkYXRlIHJhdyBjb2RlXG5cdFx0c2VjdGlvbl9jb2RlX2NvbnRhaW5lci52YWx1ZSA9IHNlY3Rpb25fY29kZTtcblx0XHRzZWN0aW9uX2NvZGVfY29udGFpbmVyLmlubmVySFRNTCA9IHNlY3Rpb25fY29kZTsgLy8gU2VlIGNvbW1lbnQgYmxvY2sgYmVsb3dcblxuXHRcdC8vIENoYW5nZSB0aGUgcHJvcGVydHkgaW4gaGlkZGVuIHRleHRhcmVhIGFzIHdlbGxcblx0XHRwcm9wZXJ0eV9jb250YWluZXIuc2V0QXR0cmlidXRlKCAndmFsdWUnLCBwcm9wZXJ0eV92YWx1ZSApO1xuXHRcdHByb3BlcnR5X2NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoICdkYXRhLWRlZicsIHByb3BlcnR5X3ZhbHVlICk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFByb3ZpZGUgY3VzdG9tIGV2ZW50cyBwdWJsaXNoLlxuXHQgKiBBbHNvIGVjaG9lcyBhbGwgdGhlIGN1c3RvbSBldmVudHMgaW4gdGhlIHByZXZpZXcgaWZyYW1lIGFzIHdlbGwuXG5cdCAqXG5cdCAqIEBwYXJhbSAge3N0cmluZ30gZXZlbnROYW1lXG5cdCAqIEBwYXJhbSAge29iamVjdHx8c3RyaW5nfHxudWxsfHxudW1lcmljfSBldmVudERhdGEgW2Rlc2NyaXB0aW9uXVxuXHQgKi9cblx0cHVibGlzaDogZnVuY3Rpb24oIGV2ZW50TmFtZSwgZXZlbnREYXRhICkge1xuXG5cdFx0ZXZlbnREYXRhID0gZXZlbnREYXRhID8gZXZlbnREYXRhIDoge307XG5cblx0XHR0aGlzLmNoZWNrUGFyYW1zKCBbXG5cdFx0XHRbZXZlbnROYW1lLCAnc3RyaW5nJ10sXG5cdFx0XHRbZXZlbnREYXRhLCAnb2JqZWN0J11cblx0XHRdICk7XG5cblx0XHRqUXVlcnkoZG9jdW1lbnQpLnRyaWdnZXIoIHtcblx0XHRcdHR5cGU6IGV2ZW50TmFtZSxcblx0XHRcdG1lc3NhZ2U6IHtkZXRhaWxzOiBldmVudERhdGF9XG5cdFx0fSApO1xuXG5cdFx0TGl2ZUNvbXBvc2VyLkJ1aWxkZXIuUHJldmlld0FyZWFXaW5kb3cuZHNsY2FfcHVibGlzaF9ldmVudCggZXZlbnROYW1lLCBldmVudERhdGEgKTtcblx0fVxufTtcblxuZXhwb3J0IGNvbnN0IHVudGlsc0luaXRKcyA9ICgpID0+IHtcblx0d2luZG93LkxpdmVDb21wb3Nlci5VdGlscyA9IFV0aWxzO1xufVxuIiwiLypcbiAqIGFuaW1lLmpzIHYzLjAuMVxuICogKGMpIDIwMTkgSnVsaWFuIEdhcm5pZXJcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogYW5pbWVqcy5jb21cbiAqL1xuXG4vLyBEZWZhdWx0c1xuXG52YXIgZGVmYXVsdEluc3RhbmNlU2V0dGluZ3MgPSB7XG4gIHVwZGF0ZTogbnVsbCxcbiAgYmVnaW46IG51bGwsXG4gIGxvb3BCZWdpbjogbnVsbCxcbiAgY2hhbmdlQmVnaW46IG51bGwsXG4gIGNoYW5nZTogbnVsbCxcbiAgY2hhbmdlQ29tcGxldGU6IG51bGwsXG4gIGxvb3BDb21wbGV0ZTogbnVsbCxcbiAgY29tcGxldGU6IG51bGwsXG4gIGxvb3A6IDEsXG4gIGRpcmVjdGlvbjogJ25vcm1hbCcsXG4gIGF1dG9wbGF5OiB0cnVlLFxuICB0aW1lbGluZU9mZnNldDogMFxufTtcblxudmFyIGRlZmF1bHRUd2VlblNldHRpbmdzID0ge1xuICBkdXJhdGlvbjogMTAwMCxcbiAgZGVsYXk6IDAsXG4gIGVuZERlbGF5OiAwLFxuICBlYXNpbmc6ICdlYXNlT3V0RWxhc3RpYygxLCAuNSknLFxuICByb3VuZDogMFxufTtcblxudmFyIHZhbGlkVHJhbnNmb3JtcyA9IFsndHJhbnNsYXRlWCcsICd0cmFuc2xhdGVZJywgJ3RyYW5zbGF0ZVonLCAncm90YXRlJywgJ3JvdGF0ZVgnLCAncm90YXRlWScsICdyb3RhdGVaJywgJ3NjYWxlJywgJ3NjYWxlWCcsICdzY2FsZVknLCAnc2NhbGVaJywgJ3NrZXcnLCAnc2tld1gnLCAnc2tld1knLCAncGVyc3BlY3RpdmUnXTtcblxuLy8gQ2FjaGluZ1xuXG52YXIgY2FjaGUgPSB7XG4gIENTUzoge30sXG4gIHNwcmluZ3M6IHt9XG59O1xuXG4vLyBVdGlsc1xuXG5mdW5jdGlvbiBtaW5NYXgodmFsLCBtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgodmFsLCBtaW4pLCBtYXgpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdDb250YWlucyhzdHIsIHRleHQpIHtcbiAgcmV0dXJuIHN0ci5pbmRleE9mKHRleHQpID4gLTE7XG59XG5cbmZ1bmN0aW9uIGFwcGx5QXJndW1lbnRzKGZ1bmMsIGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7XG59XG5cbnZhciBpcyA9IHtcbiAgYXJyOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gQXJyYXkuaXNBcnJheShhKTsgfSxcbiAgb2JqOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gc3RyaW5nQ29udGFpbnMoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpLCAnT2JqZWN0Jyk7IH0sXG4gIHB0aDogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGlzLm9iaihhKSAmJiBhLmhhc093blByb3BlcnR5KCd0b3RhbExlbmd0aCcpOyB9LFxuICBzdmc6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBhIGluc3RhbmNlb2YgU1ZHRWxlbWVudDsgfSxcbiAgaW5wOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYSBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQ7IH0sXG4gIGRvbTogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEubm9kZVR5cGUgfHwgaXMuc3ZnKGEpOyB9LFxuICBzdHI6IGZ1bmN0aW9uIChhKSB7IHJldHVybiB0eXBlb2YgYSA9PT0gJ3N0cmluZyc7IH0sXG4gIGZuYzogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIHR5cGVvZiBhID09PSAnZnVuY3Rpb24nOyB9LFxuICB1bmQ6IGZ1bmN0aW9uIChhKSB7IHJldHVybiB0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCc7IH0sXG4gIGhleDogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIC8oXiNbMC05QS1GXXs2fSQpfCheI1swLTlBLUZdezN9JCkvaS50ZXN0KGEpOyB9LFxuICByZ2I6IGZ1bmN0aW9uIChhKSB7IHJldHVybiAvXnJnYi8udGVzdChhKTsgfSxcbiAgaHNsOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gL15oc2wvLnRlc3QoYSk7IH0sXG4gIGNvbDogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIChpcy5oZXgoYSkgfHwgaXMucmdiKGEpIHx8IGlzLmhzbChhKSk7IH0sXG4gIGtleTogZnVuY3Rpb24gKGEpIHsgcmV0dXJuICFkZWZhdWx0SW5zdGFuY2VTZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShhKSAmJiAhZGVmYXVsdFR3ZWVuU2V0dGluZ3MuaGFzT3duUHJvcGVydHkoYSkgJiYgYSAhPT0gJ3RhcmdldHMnICYmIGEgIT09ICdrZXlmcmFtZXMnOyB9XG59O1xuXG4vLyBFYXNpbmdzXG5cbmZ1bmN0aW9uIHBhcnNlRWFzaW5nUGFyYW1ldGVycyhzdHJpbmcpIHtcbiAgdmFyIG1hdGNoID0gL1xcKChbXildKylcXCkvLmV4ZWMoc3RyaW5nKTtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0uc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKHApIHsgcmV0dXJuIHBhcnNlRmxvYXQocCk7IH0pIDogW107XG59XG5cbi8vIFNwcmluZyBzb2x2ZXIgaW5zcGlyZWQgYnkgV2Via2l0IENvcHlyaWdodCDCqSAyMDE2IEFwcGxlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gaHR0cHM6Ly93ZWJraXQub3JnL2RlbW9zL3NwcmluZy9zcHJpbmcuanNcblxuZnVuY3Rpb24gc3ByaW5nKHN0cmluZywgZHVyYXRpb24pIHtcblxuICB2YXIgcGFyYW1zID0gcGFyc2VFYXNpbmdQYXJhbWV0ZXJzKHN0cmluZyk7XG4gIHZhciBtYXNzID0gbWluTWF4KGlzLnVuZChwYXJhbXNbMF0pID8gMSA6IHBhcmFtc1swXSwgLjEsIDEwMCk7XG4gIHZhciBzdGlmZm5lc3MgPSBtaW5NYXgoaXMudW5kKHBhcmFtc1sxXSkgPyAxMDAgOiBwYXJhbXNbMV0sIC4xLCAxMDApO1xuICB2YXIgZGFtcGluZyA9IG1pbk1heChpcy51bmQocGFyYW1zWzJdKSA/IDEwIDogcGFyYW1zWzJdLCAuMSwgMTAwKTtcbiAgdmFyIHZlbG9jaXR5ID0gIG1pbk1heChpcy51bmQocGFyYW1zWzNdKSA/IDAgOiBwYXJhbXNbM10sIC4xLCAxMDApO1xuICB2YXIgdzAgPSBNYXRoLnNxcnQoc3RpZmZuZXNzIC8gbWFzcyk7XG4gIHZhciB6ZXRhID0gZGFtcGluZyAvICgyICogTWF0aC5zcXJ0KHN0aWZmbmVzcyAqIG1hc3MpKTtcbiAgdmFyIHdkID0gemV0YSA8IDEgPyB3MCAqIE1hdGguc3FydCgxIC0gemV0YSAqIHpldGEpIDogMDtcbiAgdmFyIGEgPSAxO1xuICB2YXIgYiA9IHpldGEgPCAxID8gKHpldGEgKiB3MCArIC12ZWxvY2l0eSkgLyB3ZCA6IC12ZWxvY2l0eSArIHcwO1xuXG4gIGZ1bmN0aW9uIHNvbHZlcih0KSB7XG4gICAgdmFyIHByb2dyZXNzID0gZHVyYXRpb24gPyAoZHVyYXRpb24gKiB0KSAvIDEwMDAgOiB0O1xuICAgIGlmICh6ZXRhIDwgMSkge1xuICAgICAgcHJvZ3Jlc3MgPSBNYXRoLmV4cCgtcHJvZ3Jlc3MgKiB6ZXRhICogdzApICogKGEgKiBNYXRoLmNvcyh3ZCAqIHByb2dyZXNzKSArIGIgKiBNYXRoLnNpbih3ZCAqIHByb2dyZXNzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2dyZXNzID0gKGEgKyBiICogcHJvZ3Jlc3MpICogTWF0aC5leHAoLXByb2dyZXNzICogdzApO1xuICAgIH1cbiAgICBpZiAodCA9PT0gMCB8fCB0ID09PSAxKSB7IHJldHVybiB0OyB9XG4gICAgcmV0dXJuIDEgLSBwcm9ncmVzcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldER1cmF0aW9uKCkge1xuICAgIHZhciBjYWNoZWQgPSBjYWNoZS5zcHJpbmdzW3N0cmluZ107XG4gICAgaWYgKGNhY2hlZCkgeyByZXR1cm4gY2FjaGVkOyB9XG4gICAgdmFyIGZyYW1lID0gMS82O1xuICAgIHZhciBlbGFwc2VkID0gMDtcbiAgICB2YXIgcmVzdCA9IDA7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgZWxhcHNlZCArPSBmcmFtZTtcbiAgICAgIGlmIChzb2x2ZXIoZWxhcHNlZCkgPT09IDEpIHtcbiAgICAgICAgcmVzdCsrO1xuICAgICAgICBpZiAocmVzdCA+PSAxNikgeyBicmVhazsgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdCA9IDA7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBkdXJhdGlvbiA9IGVsYXBzZWQgKiBmcmFtZSAqIDEwMDA7XG4gICAgY2FjaGUuc3ByaW5nc1tzdHJpbmddID0gZHVyYXRpb247XG4gICAgcmV0dXJuIGR1cmF0aW9uO1xuICB9XG5cbiAgcmV0dXJuIGR1cmF0aW9uID8gc29sdmVyIDogZ2V0RHVyYXRpb247XG5cbn1cblxuLy8gRWxhc3RpYyBlYXNpbmcgYWRhcHRlZCBmcm9tIGpRdWVyeVVJIGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2Vhc2luZ3MvXG5cbmZ1bmN0aW9uIGVsYXN0aWMoYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgaWYgKCBhbXBsaXR1ZGUgPT09IHZvaWQgMCApIGFtcGxpdHVkZSA9IDE7XG4gIGlmICggcGVyaW9kID09PSB2b2lkIDAgKSBwZXJpb2QgPSAuNTtcblxuICB2YXIgYSA9IG1pbk1heChhbXBsaXR1ZGUsIDEsIDEwKTtcbiAgdmFyIHAgPSBtaW5NYXgocGVyaW9kLCAuMSwgMik7XG4gIHJldHVybiBmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiAodCA9PT0gMCB8fCB0ID09PSAxKSA/IHQgOiBcbiAgICAgIC1hICogTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKSAqIE1hdGguc2luKCgoKHQgLSAxKSAtIChwIC8gKE1hdGguUEkgKiAyKSAqIE1hdGguYXNpbigxIC8gYSkpKSAqIChNYXRoLlBJICogMikpIC8gcCk7XG4gIH1cbn1cblxuLy8gQmFzaWMgc3RlcHMgZWFzaW5nIGltcGxlbWVudGF0aW9uIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2ZyL2RvY3MvV2ViL0NTUy90cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvblxuXG5mdW5jdGlvbiBzdGVwcyhzdGVwcykge1xuICBpZiAoIHN0ZXBzID09PSB2b2lkIDAgKSBzdGVwcyA9IDEwO1xuXG4gIHJldHVybiBmdW5jdGlvbiAodCkgeyByZXR1cm4gTWF0aC5yb3VuZCh0ICogc3RlcHMpICogKDEgLyBzdGVwcyk7IH07XG59XG5cbi8vIEJlemllckVhc2luZyBodHRwczovL2dpdGh1Yi5jb20vZ3JlL2Jlemllci1lYXNpbmdcblxudmFyIGJlemllciA9IChmdW5jdGlvbiAoKSB7XG5cbiAgdmFyIGtTcGxpbmVUYWJsZVNpemUgPSAxMTtcbiAgdmFyIGtTYW1wbGVTdGVwU2l6ZSA9IDEuMCAvIChrU3BsaW5lVGFibGVTaXplIC0gMS4wKTtcblxuICBmdW5jdGlvbiBBKGFBMSwgYUEyKSB7IHJldHVybiAxLjAgLSAzLjAgKiBhQTIgKyAzLjAgKiBhQTEgfVxuICBmdW5jdGlvbiBCKGFBMSwgYUEyKSB7IHJldHVybiAzLjAgKiBhQTIgLSA2LjAgKiBhQTEgfVxuICBmdW5jdGlvbiBDKGFBMSkgICAgICB7IHJldHVybiAzLjAgKiBhQTEgfVxuXG4gIGZ1bmN0aW9uIGNhbGNCZXppZXIoYVQsIGFBMSwgYUEyKSB7IHJldHVybiAoKEEoYUExLCBhQTIpICogYVQgKyBCKGFBMSwgYUEyKSkgKiBhVCArIEMoYUExKSkgKiBhVCB9XG4gIGZ1bmN0aW9uIGdldFNsb3BlKGFULCBhQTEsIGFBMikgeyByZXR1cm4gMy4wICogQShhQTEsIGFBMikgKiBhVCAqIGFUICsgMi4wICogQihhQTEsIGFBMikgKiBhVCArIEMoYUExKSB9XG5cbiAgZnVuY3Rpb24gYmluYXJ5U3ViZGl2aWRlKGFYLCBhQSwgYUIsIG1YMSwgbVgyKSB7XG4gICAgdmFyIGN1cnJlbnRYLCBjdXJyZW50VCwgaSA9IDA7XG4gICAgZG8ge1xuICAgICAgY3VycmVudFQgPSBhQSArIChhQiAtIGFBKSAvIDIuMDtcbiAgICAgIGN1cnJlbnRYID0gY2FsY0JlemllcihjdXJyZW50VCwgbVgxLCBtWDIpIC0gYVg7XG4gICAgICBpZiAoY3VycmVudFggPiAwLjApIHsgYUIgPSBjdXJyZW50VDsgfSBlbHNlIHsgYUEgPSBjdXJyZW50VDsgfVxuICAgIH0gd2hpbGUgKE1hdGguYWJzKGN1cnJlbnRYKSA+IDAuMDAwMDAwMSAmJiArK2kgPCAxMCk7XG4gICAgcmV0dXJuIGN1cnJlbnRUO1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3dG9uUmFwaHNvbkl0ZXJhdGUoYVgsIGFHdWVzc1QsIG1YMSwgbVgyKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyArK2kpIHtcbiAgICAgIHZhciBjdXJyZW50U2xvcGUgPSBnZXRTbG9wZShhR3Vlc3NULCBtWDEsIG1YMik7XG4gICAgICBpZiAoY3VycmVudFNsb3BlID09PSAwLjApIHsgcmV0dXJuIGFHdWVzc1Q7IH1cbiAgICAgIHZhciBjdXJyZW50WCA9IGNhbGNCZXppZXIoYUd1ZXNzVCwgbVgxLCBtWDIpIC0gYVg7XG4gICAgICBhR3Vlc3NUIC09IGN1cnJlbnRYIC8gY3VycmVudFNsb3BlO1xuICAgIH1cbiAgICByZXR1cm4gYUd1ZXNzVDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJlemllcihtWDEsIG1ZMSwgbVgyLCBtWTIpIHtcblxuICAgIGlmICghKDAgPD0gbVgxICYmIG1YMSA8PSAxICYmIDAgPD0gbVgyICYmIG1YMiA8PSAxKSkgeyByZXR1cm47IH1cbiAgICB2YXIgc2FtcGxlVmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheShrU3BsaW5lVGFibGVTaXplKTtcblxuICAgIGlmIChtWDEgIT09IG1ZMSB8fCBtWDIgIT09IG1ZMikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrU3BsaW5lVGFibGVTaXplOyArK2kpIHtcbiAgICAgICAgc2FtcGxlVmFsdWVzW2ldID0gY2FsY0JlemllcihpICoga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VEZvclgoYVgpIHtcblxuICAgICAgdmFyIGludGVydmFsU3RhcnQgPSAwO1xuICAgICAgdmFyIGN1cnJlbnRTYW1wbGUgPSAxO1xuICAgICAgdmFyIGxhc3RTYW1wbGUgPSBrU3BsaW5lVGFibGVTaXplIC0gMTtcblxuICAgICAgZm9yICg7IGN1cnJlbnRTYW1wbGUgIT09IGxhc3RTYW1wbGUgJiYgc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdIDw9IGFYOyArK2N1cnJlbnRTYW1wbGUpIHtcbiAgICAgICAgaW50ZXJ2YWxTdGFydCArPSBrU2FtcGxlU3RlcFNpemU7XG4gICAgICB9XG5cbiAgICAgIC0tY3VycmVudFNhbXBsZTtcblxuICAgICAgdmFyIGRpc3QgPSAoYVggLSBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0pIC8gKHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlICsgMV0gLSBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0pO1xuICAgICAgdmFyIGd1ZXNzRm9yVCA9IGludGVydmFsU3RhcnQgKyBkaXN0ICoga1NhbXBsZVN0ZXBTaXplO1xuICAgICAgdmFyIGluaXRpYWxTbG9wZSA9IGdldFNsb3BlKGd1ZXNzRm9yVCwgbVgxLCBtWDIpO1xuXG4gICAgICBpZiAoaW5pdGlhbFNsb3BlID49IDAuMDAxKSB7XG4gICAgICAgIHJldHVybiBuZXd0b25SYXBoc29uSXRlcmF0ZShhWCwgZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG4gICAgICB9IGVsc2UgaWYgKGluaXRpYWxTbG9wZSA9PT0gMC4wKSB7XG4gICAgICAgIHJldHVybiBndWVzc0ZvclQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYmluYXJ5U3ViZGl2aWRlKGFYLCBpbnRlcnZhbFN0YXJ0LCBpbnRlcnZhbFN0YXJ0ICsga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHgpIHtcbiAgICAgIGlmIChtWDEgPT09IG1ZMSAmJiBtWDIgPT09IG1ZMikgeyByZXR1cm4geDsgfVxuICAgICAgaWYgKHggPT09IDAgfHwgeCA9PT0gMSkgeyByZXR1cm4geDsgfVxuICAgICAgcmV0dXJuIGNhbGNCZXppZXIoZ2V0VEZvclgoeCksIG1ZMSwgbVkyKTtcbiAgICB9XG5cbiAgfVxuXG4gIHJldHVybiBiZXppZXI7XG5cbn0pKCk7XG5cbnZhciBwZW5uZXIgPSAoZnVuY3Rpb24gKCkge1xuXG4gIHZhciBuYW1lcyA9IFsnUXVhZCcsICdDdWJpYycsICdRdWFydCcsICdRdWludCcsICdTaW5lJywgJ0V4cG8nLCAnQ2lyYycsICdCYWNrJywgJ0VsYXN0aWMnXTtcblxuICAvLyBBcHByb3hpbWF0ZWQgUGVubmVyIGVxdWF0aW9ucyBodHRwOi8vbWF0dGhld2xlaW4uY29tL2NlYXNlci9cblxuICB2YXIgY3VydmVzID0ge1xuICAgIEluOiBbXG4gICAgICBbMC41NTAsIDAuMDg1LCAwLjY4MCwgMC41MzBdLCAvKiBpblF1YWQgKi9cbiAgICAgIFswLjU1MCwgMC4wNTUsIDAuNjc1LCAwLjE5MF0sIC8qIGluQ3ViaWMgKi9cbiAgICAgIFswLjg5NSwgMC4wMzAsIDAuNjg1LCAwLjIyMF0sIC8qIGluUXVhcnQgKi9cbiAgICAgIFswLjc1NSwgMC4wNTAsIDAuODU1LCAwLjA2MF0sIC8qIGluUXVpbnQgKi9cbiAgICAgIFswLjQ3MCwgMC4wMDAsIDAuNzQ1LCAwLjcxNV0sIC8qIGluU2luZSAqL1xuICAgICAgWzAuOTUwLCAwLjA1MCwgMC43OTUsIDAuMDM1XSwgLyogaW5FeHBvICovXG4gICAgICBbMC42MDAsIDAuMDQwLCAwLjk4MCwgMC4zMzVdLCAvKiBpbkNpcmMgKi9cbiAgICAgIFswLjYwMCwtMC4yODAsIDAuNzM1LCAwLjA0NV0sIC8qIGluQmFjayAqL1xuICAgICAgZWxhc3RpYyAvKiBpbkVsYXN0aWMgKi9cbiAgICBdLFxuICAgIE91dDogW1xuICAgICAgWzAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwXSwgLyogb3V0UXVhZCAqL1xuICAgICAgWzAuMjE1LCAwLjYxMCwgMC4zNTUsIDEuMDAwXSwgLyogb3V0Q3ViaWMgKi9cbiAgICAgIFswLjE2NSwgMC44NDAsIDAuNDQwLCAxLjAwMF0sIC8qIG91dFF1YXJ0ICovXG4gICAgICBbMC4yMzAsIDEuMDAwLCAwLjMyMCwgMS4wMDBdLCAvKiBvdXRRdWludCAqL1xuICAgICAgWzAuMzkwLCAwLjU3NSwgMC41NjUsIDEuMDAwXSwgLyogb3V0U2luZSAqL1xuICAgICAgWzAuMTkwLCAxLjAwMCwgMC4yMjAsIDEuMDAwXSwgLyogb3V0RXhwbyAqL1xuICAgICAgWzAuMDc1LCAwLjgyMCwgMC4xNjUsIDEuMDAwXSwgLyogb3V0Q2lyYyAqL1xuICAgICAgWzAuMTc1LCAwLjg4NSwgMC4zMjAsIDEuMjc1XSwgLyogb3V0QmFjayAqL1xuICAgICAgZnVuY3Rpb24gKGEsIHApIHsgcmV0dXJuIGZ1bmN0aW9uICh0KSB7IHJldHVybiAxIC0gZWxhc3RpYyhhLCBwKSgxIC0gdCk7IH07IH0gLyogb3V0RWxhc3RpYyAqL1xuICAgIF0sXG4gICAgSW5PdXQ6IFtcbiAgICAgIFswLjQ1NSwgMC4wMzAsIDAuNTE1LCAwLjk1NV0sIC8qIGluT3V0UXVhZCAqL1xuICAgICAgWzAuNjQ1LCAwLjA0NSwgMC4zNTUsIDEuMDAwXSwgLyogaW5PdXRDdWJpYyAqL1xuICAgICAgWzAuNzcwLCAwLjAwMCwgMC4xNzUsIDEuMDAwXSwgLyogaW5PdXRRdWFydCAqL1xuICAgICAgWzAuODYwLCAwLjAwMCwgMC4wNzAsIDEuMDAwXSwgLyogaW5PdXRRdWludCAqL1xuICAgICAgWzAuNDQ1LCAwLjA1MCwgMC41NTAsIDAuOTUwXSwgLyogaW5PdXRTaW5lICovXG4gICAgICBbMS4wMDAsIDAuMDAwLCAwLjAwMCwgMS4wMDBdLCAvKiBpbk91dEV4cG8gKi9cbiAgICAgIFswLjc4NSwgMC4xMzUsIDAuMTUwLCAwLjg2MF0sIC8qIGluT3V0Q2lyYyAqL1xuICAgICAgWzAuNjgwLC0wLjU1MCwgMC4yNjUsIDEuNTUwXSwgLyogaW5PdXRCYWNrICovXG4gICAgICBmdW5jdGlvbiAoYSwgcCkgeyByZXR1cm4gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQgPCAuNSA/IGVsYXN0aWMoYSwgcCkodCAqIDIpIC8gMiA6IDEgLSBlbGFzdGljKGEsIHApKHQgKiAtMiArIDIpIC8gMjsgfTsgfSAvKiBpbk91dEVsYXN0aWMgKi9cbiAgICBdXG4gIH07XG5cbiAgdmFyIGVhc2VzID0geyBcbiAgICBsaW5lYXI6IFswLjI1MCwgMC4yNTAsIDAuNzUwLCAwLjc1MF1cbiAgfTtcblxuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICggY29vcmRzICkge1xuICAgIGN1cnZlc1tjb29yZHNdLmZvckVhY2goZnVuY3Rpb24gKGVhc2UsIGkpIHtcbiAgICAgIGVhc2VzWydlYXNlJytjb29yZHMrbmFtZXNbaV1dID0gZWFzZTtcbiAgICB9KTtcbiAgfTtcblxuICBmb3IgKHZhciBjb29yZHMgaW4gY3VydmVzKSBsb29wKCBjb29yZHMgKTtcblxuICByZXR1cm4gZWFzZXM7XG5cbn0pKCk7XG5cbmZ1bmN0aW9uIHBhcnNlRWFzaW5ncyhlYXNpbmcsIGR1cmF0aW9uKSB7XG4gIGlmIChpcy5mbmMoZWFzaW5nKSkgeyByZXR1cm4gZWFzaW5nOyB9XG4gIHZhciBuYW1lID0gZWFzaW5nLnNwbGl0KCcoJylbMF07XG4gIHZhciBlYXNlID0gcGVubmVyW25hbWVdO1xuICB2YXIgYXJncyA9IHBhcnNlRWFzaW5nUGFyYW1ldGVycyhlYXNpbmcpO1xuICBzd2l0Y2ggKG5hbWUpIHtcbiAgICBjYXNlICdzcHJpbmcnIDogcmV0dXJuIHNwcmluZyhlYXNpbmcsIGR1cmF0aW9uKTtcbiAgICBjYXNlICdjdWJpY0JlemllcicgOiByZXR1cm4gYXBwbHlBcmd1bWVudHMoYmV6aWVyLCBhcmdzKTtcbiAgICBjYXNlICdzdGVwcycgOiByZXR1cm4gYXBwbHlBcmd1bWVudHMoc3RlcHMsIGFyZ3MpO1xuICAgIGRlZmF1bHQgOiByZXR1cm4gaXMuZm5jKGVhc2UpID8gYXBwbHlBcmd1bWVudHMoZWFzZSwgYXJncykgOiBhcHBseUFyZ3VtZW50cyhiZXppZXIsIGVhc2UpO1xuICB9XG59XG5cbi8vIFN0cmluZ3NcblxuZnVuY3Rpb24gc2VsZWN0U3RyaW5nKHN0cikge1xuICB0cnkge1xuICAgIHZhciBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc3RyKTtcbiAgICByZXR1cm4gbm9kZXM7XG4gIH0gY2F0Y2goZSkge1xuICAgIHJldHVybjtcbiAgfVxufVxuXG4vLyBBcnJheXNcblxuZnVuY3Rpb24gZmlsdGVyQXJyYXkoYXJyLCBjYWxsYmFjaykge1xuICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcbiAgdmFyIHRoaXNBcmcgPSBhcmd1bWVudHMubGVuZ3RoID49IDIgPyBhcmd1bWVudHNbMV0gOiB2b2lkIDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChpIGluIGFycikge1xuICAgICAgdmFyIHZhbCA9IGFycltpXTtcbiAgICAgIGlmIChjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHZhbCwgaSwgYXJyKSkge1xuICAgICAgICByZXN1bHQucHVzaCh2YWwpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnIucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmNvbmNhdChpcy5hcnIoYikgPyBmbGF0dGVuQXJyYXkoYikgOiBiKTsgfSwgW10pO1xufVxuXG5mdW5jdGlvbiB0b0FycmF5KG8pIHtcbiAgaWYgKGlzLmFycihvKSkgeyByZXR1cm4gbzsgfVxuICBpZiAoaXMuc3RyKG8pKSB7IG8gPSBzZWxlY3RTdHJpbmcobykgfHwgbzsgfVxuICBpZiAobyBpbnN0YW5jZW9mIE5vZGVMaXN0IHx8IG8gaW5zdGFuY2VvZiBIVE1MQ29sbGVjdGlvbikgeyByZXR1cm4gW10uc2xpY2UuY2FsbChvKTsgfVxuICByZXR1cm4gW29dO1xufVxuXG5mdW5jdGlvbiBhcnJheUNvbnRhaW5zKGFyciwgdmFsKSB7XG4gIHJldHVybiBhcnIuc29tZShmdW5jdGlvbiAoYSkgeyByZXR1cm4gYSA9PT0gdmFsOyB9KTtcbn1cblxuLy8gT2JqZWN0c1xuXG5mdW5jdGlvbiBjbG9uZU9iamVjdChvKSB7XG4gIHZhciBjbG9uZSA9IHt9O1xuICBmb3IgKHZhciBwIGluIG8pIHsgY2xvbmVbcF0gPSBvW3BdOyB9XG4gIHJldHVybiBjbG9uZTtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZU9iamVjdFByb3BzKG8xLCBvMikge1xuICB2YXIgbyA9IGNsb25lT2JqZWN0KG8xKTtcbiAgZm9yICh2YXIgcCBpbiBvMSkgeyBvW3BdID0gbzIuaGFzT3duUHJvcGVydHkocCkgPyBvMltwXSA6IG8xW3BdOyB9XG4gIHJldHVybiBvO1xufVxuXG5mdW5jdGlvbiBtZXJnZU9iamVjdHMobzEsIG8yKSB7XG4gIHZhciBvID0gY2xvbmVPYmplY3QobzEpO1xuICBmb3IgKHZhciBwIGluIG8yKSB7IG9bcF0gPSBpcy51bmQobzFbcF0pID8gbzJbcF0gOiBvMVtwXTsgfVxuICByZXR1cm4gbztcbn1cblxuLy8gQ29sb3JzXG5cbmZ1bmN0aW9uIHJnYlRvUmdiYShyZ2JWYWx1ZSkge1xuICB2YXIgcmdiID0gL3JnYlxcKChcXGQrLFxccypbXFxkXSssXFxzKltcXGRdKylcXCkvZy5leGVjKHJnYlZhbHVlKTtcbiAgcmV0dXJuIHJnYiA/IChcInJnYmEoXCIgKyAocmdiWzFdKSArIFwiLDEpXCIpIDogcmdiVmFsdWU7XG59XG5cbmZ1bmN0aW9uIGhleFRvUmdiYShoZXhWYWx1ZSkge1xuICB2YXIgcmd4ID0gL14jPyhbYS1mXFxkXSkoW2EtZlxcZF0pKFthLWZcXGRdKSQvaTtcbiAgdmFyIGhleCA9IGhleFZhbHVlLnJlcGxhY2Uocmd4LCBmdW5jdGlvbiAobSwgciwgZywgYikgeyByZXR1cm4gciArIHIgKyBnICsgZyArIGIgKyBiOyB9ICk7XG4gIHZhciByZ2IgPSAvXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pLmV4ZWMoaGV4KTtcbiAgdmFyIHIgPSBwYXJzZUludChyZ2JbMV0sIDE2KTtcbiAgdmFyIGcgPSBwYXJzZUludChyZ2JbMl0sIDE2KTtcbiAgdmFyIGIgPSBwYXJzZUludChyZ2JbM10sIDE2KTtcbiAgcmV0dXJuIChcInJnYmEoXCIgKyByICsgXCIsXCIgKyBnICsgXCIsXCIgKyBiICsgXCIsMSlcIik7XG59XG5cbmZ1bmN0aW9uIGhzbFRvUmdiYShoc2xWYWx1ZSkge1xuICB2YXIgaHNsID0gL2hzbFxcKChcXGQrKSxcXHMqKFtcXGQuXSspJSxcXHMqKFtcXGQuXSspJVxcKS9nLmV4ZWMoaHNsVmFsdWUpIHx8IC9oc2xhXFwoKFxcZCspLFxccyooW1xcZC5dKyklLFxccyooW1xcZC5dKyklLFxccyooW1xcZC5dKylcXCkvZy5leGVjKGhzbFZhbHVlKTtcbiAgdmFyIGggPSBwYXJzZUludChoc2xbMV0sIDEwKSAvIDM2MDtcbiAgdmFyIHMgPSBwYXJzZUludChoc2xbMl0sIDEwKSAvIDEwMDtcbiAgdmFyIGwgPSBwYXJzZUludChoc2xbM10sIDEwKSAvIDEwMDtcbiAgdmFyIGEgPSBoc2xbNF0gfHwgMTtcbiAgZnVuY3Rpb24gaHVlMnJnYihwLCBxLCB0KSB7XG4gICAgaWYgKHQgPCAwKSB7IHQgKz0gMTsgfVxuICAgIGlmICh0ID4gMSkgeyB0IC09IDE7IH1cbiAgICBpZiAodCA8IDEvNikgeyByZXR1cm4gcCArIChxIC0gcCkgKiA2ICogdDsgfVxuICAgIGlmICh0IDwgMS8yKSB7IHJldHVybiBxOyB9XG4gICAgaWYgKHQgPCAyLzMpIHsgcmV0dXJuIHAgKyAocSAtIHApICogKDIvMyAtIHQpICogNjsgfVxuICAgIHJldHVybiBwO1xuICB9XG4gIHZhciByLCBnLCBiO1xuICBpZiAocyA9PSAwKSB7XG4gICAgciA9IGcgPSBiID0gbDtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcSA9IGwgPCAwLjUgPyBsICogKDEgKyBzKSA6IGwgKyBzIC0gbCAqIHM7XG4gICAgdmFyIHAgPSAyICogbCAtIHE7XG4gICAgciA9IGh1ZTJyZ2IocCwgcSwgaCArIDEvMyk7XG4gICAgZyA9IGh1ZTJyZ2IocCwgcSwgaCk7XG4gICAgYiA9IGh1ZTJyZ2IocCwgcSwgaCAtIDEvMyk7XG4gIH1cbiAgcmV0dXJuIChcInJnYmEoXCIgKyAociAqIDI1NSkgKyBcIixcIiArIChnICogMjU1KSArIFwiLFwiICsgKGIgKiAyNTUpICsgXCIsXCIgKyBhICsgXCIpXCIpO1xufVxuXG5mdW5jdGlvbiBjb2xvclRvUmdiKHZhbCkge1xuICBpZiAoaXMucmdiKHZhbCkpIHsgcmV0dXJuIHJnYlRvUmdiYSh2YWwpOyB9XG4gIGlmIChpcy5oZXgodmFsKSkgeyByZXR1cm4gaGV4VG9SZ2JhKHZhbCk7IH1cbiAgaWYgKGlzLmhzbCh2YWwpKSB7IHJldHVybiBoc2xUb1JnYmEodmFsKTsgfVxufVxuXG4vLyBVbml0c1xuXG5mdW5jdGlvbiBnZXRVbml0KHZhbCkge1xuICB2YXIgc3BsaXQgPSAvKFtcXCtcXC1dP1swLTkjXFwuXSspKCV8cHh8cHR8ZW18cmVtfGlufGNtfG1tfGV4fGNofHBjfHZ3fHZofHZtaW58dm1heHxkZWd8cmFkfHR1cm4pPyQvLmV4ZWModmFsKTtcbiAgaWYgKHNwbGl0KSB7IHJldHVybiBzcGxpdFsyXTsgfVxufVxuXG5mdW5jdGlvbiBnZXRUcmFuc2Zvcm1Vbml0KHByb3BOYW1lKSB7XG4gIGlmIChzdHJpbmdDb250YWlucyhwcm9wTmFtZSwgJ3RyYW5zbGF0ZScpIHx8IHByb3BOYW1lID09PSAncGVyc3BlY3RpdmUnKSB7IHJldHVybiAncHgnOyB9XG4gIGlmIChzdHJpbmdDb250YWlucyhwcm9wTmFtZSwgJ3JvdGF0ZScpIHx8IHN0cmluZ0NvbnRhaW5zKHByb3BOYW1lLCAnc2tldycpKSB7IHJldHVybiAnZGVnJzsgfVxufVxuXG4vLyBWYWx1ZXNcblxuZnVuY3Rpb24gZ2V0RnVuY3Rpb25WYWx1ZSh2YWwsIGFuaW1hdGFibGUpIHtcbiAgaWYgKCFpcy5mbmModmFsKSkgeyByZXR1cm4gdmFsOyB9XG4gIHJldHVybiB2YWwoYW5pbWF0YWJsZS50YXJnZXQsIGFuaW1hdGFibGUuaWQsIGFuaW1hdGFibGUudG90YWwpO1xufVxuXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGUoZWwsIHByb3ApIHtcbiAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZShwcm9wKTtcbn1cblxuZnVuY3Rpb24gY29udmVydFB4VG9Vbml0KGVsLCB2YWx1ZSwgdW5pdCkge1xuICB2YXIgdmFsdWVVbml0ID0gZ2V0VW5pdCh2YWx1ZSk7XG4gIGlmIChhcnJheUNvbnRhaW5zKFt1bml0LCAnZGVnJywgJ3JhZCcsICd0dXJuJ10sIHZhbHVlVW5pdCkpIHsgcmV0dXJuIHZhbHVlOyB9XG4gIHZhciBjYWNoZWQgPSBjYWNoZS5DU1NbdmFsdWUgKyB1bml0XTtcbiAgaWYgKCFpcy51bmQoY2FjaGVkKSkgeyByZXR1cm4gY2FjaGVkOyB9XG4gIHZhciBiYXNlbGluZSA9IDEwMDtcbiAgdmFyIHRlbXBFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWwudGFnTmFtZSk7XG4gIHZhciBwYXJlbnRFbCA9IChlbC5wYXJlbnROb2RlICYmIChlbC5wYXJlbnROb2RlICE9PSBkb2N1bWVudCkpID8gZWwucGFyZW50Tm9kZSA6IGRvY3VtZW50LmJvZHk7XG4gIHBhcmVudEVsLmFwcGVuZENoaWxkKHRlbXBFbCk7XG4gIHRlbXBFbC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIHRlbXBFbC5zdHlsZS53aWR0aCA9IGJhc2VsaW5lICsgdW5pdDtcbiAgdmFyIGZhY3RvciA9IGJhc2VsaW5lIC8gdGVtcEVsLm9mZnNldFdpZHRoO1xuICBwYXJlbnRFbC5yZW1vdmVDaGlsZCh0ZW1wRWwpO1xuICB2YXIgY29udmVydGVkVW5pdCA9IGZhY3RvciAqIHBhcnNlRmxvYXQodmFsdWUpO1xuICBjYWNoZS5DU1NbdmFsdWUgKyB1bml0XSA9IGNvbnZlcnRlZFVuaXQ7XG4gIHJldHVybiBjb252ZXJ0ZWRVbml0O1xufVxuXG5mdW5jdGlvbiBnZXRDU1NWYWx1ZShlbCwgcHJvcCwgdW5pdCkge1xuICBpZiAocHJvcCBpbiBlbC5zdHlsZSkge1xuICAgIHZhciB1cHBlcmNhc2VQcm9wTmFtZSA9IHByb3AucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgJyQxLSQyJykudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgdmFsdWUgPSBlbC5zdHlsZVtwcm9wXSB8fCBnZXRDb21wdXRlZFN0eWxlKGVsKS5nZXRQcm9wZXJ0eVZhbHVlKHVwcGVyY2FzZVByb3BOYW1lKSB8fCAnMCc7XG4gICAgcmV0dXJuIHVuaXQgPyBjb252ZXJ0UHhUb1VuaXQoZWwsIHZhbHVlLCB1bml0KSA6IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEFuaW1hdGlvblR5cGUoZWwsIHByb3ApIHtcbiAgaWYgKGlzLmRvbShlbCkgJiYgIWlzLmlucChlbCkgJiYgKGdldEF0dHJpYnV0ZShlbCwgcHJvcCkgfHwgKGlzLnN2ZyhlbCkgJiYgZWxbcHJvcF0pKSkgeyByZXR1cm4gJ2F0dHJpYnV0ZSc7IH1cbiAgaWYgKGlzLmRvbShlbCkgJiYgYXJyYXlDb250YWlucyh2YWxpZFRyYW5zZm9ybXMsIHByb3ApKSB7IHJldHVybiAndHJhbnNmb3JtJzsgfVxuICBpZiAoaXMuZG9tKGVsKSAmJiAocHJvcCAhPT0gJ3RyYW5zZm9ybScgJiYgZ2V0Q1NTVmFsdWUoZWwsIHByb3ApKSkgeyByZXR1cm4gJ2Nzcyc7IH1cbiAgaWYgKGVsW3Byb3BdICE9IG51bGwpIHsgcmV0dXJuICdvYmplY3QnOyB9XG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRUcmFuc2Zvcm1zKGVsKSB7XG4gIGlmICghaXMuZG9tKGVsKSkgeyByZXR1cm47IH1cbiAgdmFyIHN0ciA9IGVsLnN0eWxlLnRyYW5zZm9ybSB8fCAnJztcbiAgdmFyIHJlZyAgPSAvKFxcdyspXFwoKFteKV0qKVxcKS9nO1xuICB2YXIgdHJhbnNmb3JtcyA9IG5ldyBNYXAoKTtcbiAgdmFyIG07IHdoaWxlIChtID0gcmVnLmV4ZWMoc3RyKSkgeyB0cmFuc2Zvcm1zLnNldChtWzFdLCBtWzJdKTsgfVxuICByZXR1cm4gdHJhbnNmb3Jtcztcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNmb3JtVmFsdWUoZWwsIHByb3BOYW1lLCBhbmltYXRhYmxlLCB1bml0KSB7XG4gIHZhciBkZWZhdWx0VmFsID0gc3RyaW5nQ29udGFpbnMocHJvcE5hbWUsICdzY2FsZScpID8gMSA6IDAgKyBnZXRUcmFuc2Zvcm1Vbml0KHByb3BOYW1lKTtcbiAgdmFyIHZhbHVlID0gZ2V0RWxlbWVudFRyYW5zZm9ybXMoZWwpLmdldChwcm9wTmFtZSkgfHwgZGVmYXVsdFZhbDtcbiAgaWYgKGFuaW1hdGFibGUpIHtcbiAgICBhbmltYXRhYmxlLnRyYW5zZm9ybXMubGlzdC5zZXQocHJvcE5hbWUsIHZhbHVlKTtcbiAgICBhbmltYXRhYmxlLnRyYW5zZm9ybXNbJ2xhc3QnXSA9IHByb3BOYW1lO1xuICB9XG4gIHJldHVybiB1bml0ID8gY29udmVydFB4VG9Vbml0KGVsLCB2YWx1ZSwgdW5pdCkgOiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0T3JpZ2luYWxUYXJnZXRWYWx1ZSh0YXJnZXQsIHByb3BOYW1lLCB1bml0LCBhbmltYXRhYmxlKSB7XG4gIHN3aXRjaCAoZ2V0QW5pbWF0aW9uVHlwZSh0YXJnZXQsIHByb3BOYW1lKSkge1xuICAgIGNhc2UgJ3RyYW5zZm9ybSc6IHJldHVybiBnZXRUcmFuc2Zvcm1WYWx1ZSh0YXJnZXQsIHByb3BOYW1lLCBhbmltYXRhYmxlLCB1bml0KTtcbiAgICBjYXNlICdjc3MnOiByZXR1cm4gZ2V0Q1NTVmFsdWUodGFyZ2V0LCBwcm9wTmFtZSwgdW5pdCk7XG4gICAgY2FzZSAnYXR0cmlidXRlJzogcmV0dXJuIGdldEF0dHJpYnV0ZSh0YXJnZXQsIHByb3BOYW1lKTtcbiAgICBkZWZhdWx0OiByZXR1cm4gdGFyZ2V0W3Byb3BOYW1lXSB8fCAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFJlbGF0aXZlVmFsdWUodG8sIGZyb20pIHtcbiAgdmFyIG9wZXJhdG9yID0gL14oXFwqPXxcXCs9fC09KS8uZXhlYyh0byk7XG4gIGlmICghb3BlcmF0b3IpIHsgcmV0dXJuIHRvOyB9XG4gIHZhciB1ID0gZ2V0VW5pdCh0bykgfHwgMDtcbiAgdmFyIHggPSBwYXJzZUZsb2F0KGZyb20pO1xuICB2YXIgeSA9IHBhcnNlRmxvYXQodG8ucmVwbGFjZShvcGVyYXRvclswXSwgJycpKTtcbiAgc3dpdGNoIChvcGVyYXRvclswXVswXSkge1xuICAgIGNhc2UgJysnOiByZXR1cm4geCArIHkgKyB1O1xuICAgIGNhc2UgJy0nOiByZXR1cm4geCAtIHkgKyB1O1xuICAgIGNhc2UgJyonOiByZXR1cm4geCAqIHkgKyB1O1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVmFsdWUodmFsLCB1bml0KSB7XG4gIGlmIChpcy5jb2wodmFsKSkgeyByZXR1cm4gY29sb3JUb1JnYih2YWwpOyB9XG4gIHZhciBvcmlnaW5hbFVuaXQgPSBnZXRVbml0KHZhbCk7XG4gIHZhciB1bml0TGVzcyA9IG9yaWdpbmFsVW5pdCA/IHZhbC5zdWJzdHIoMCwgdmFsLmxlbmd0aCAtIG9yaWdpbmFsVW5pdC5sZW5ndGgpIDogdmFsO1xuICByZXR1cm4gdW5pdCAmJiAhL1xccy9nLnRlc3QodmFsKSA/IHVuaXRMZXNzICsgdW5pdCA6IHVuaXRMZXNzO1xufVxuXG4vLyBnZXRUb3RhbExlbmd0aCgpIGVxdWl2YWxlbnQgZm9yIGNpcmNsZSwgcmVjdCwgcG9seWxpbmUsIHBvbHlnb24gYW5kIGxpbmUgc2hhcGVzXG4vLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vU2ViTGFtYmxhLzNlMDU1MGM0OTZjMjM2NzA5NzQ0XG5cbmZ1bmN0aW9uIGdldERpc3RhbmNlKHAxLCBwMikge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHAyLnggLSBwMS54LCAyKSArIE1hdGgucG93KHAyLnkgLSBwMS55LCAyKSk7XG59XG5cbmZ1bmN0aW9uIGdldENpcmNsZUxlbmd0aChlbCkge1xuICByZXR1cm4gTWF0aC5QSSAqIDIgKiBnZXRBdHRyaWJ1dGUoZWwsICdyJyk7XG59XG5cbmZ1bmN0aW9uIGdldFJlY3RMZW5ndGgoZWwpIHtcbiAgcmV0dXJuIChnZXRBdHRyaWJ1dGUoZWwsICd3aWR0aCcpICogMikgKyAoZ2V0QXR0cmlidXRlKGVsLCAnaGVpZ2h0JykgKiAyKTtcbn1cblxuZnVuY3Rpb24gZ2V0TGluZUxlbmd0aChlbCkge1xuICByZXR1cm4gZ2V0RGlzdGFuY2UoXG4gICAge3g6IGdldEF0dHJpYnV0ZShlbCwgJ3gxJyksIHk6IGdldEF0dHJpYnV0ZShlbCwgJ3kxJyl9LCBcbiAgICB7eDogZ2V0QXR0cmlidXRlKGVsLCAneDInKSwgeTogZ2V0QXR0cmlidXRlKGVsLCAneTInKX1cbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2V0UG9seWxpbmVMZW5ndGgoZWwpIHtcbiAgdmFyIHBvaW50cyA9IGVsLnBvaW50cztcbiAgdmFyIHRvdGFsTGVuZ3RoID0gMDtcbiAgdmFyIHByZXZpb3VzUG9zO1xuICBmb3IgKHZhciBpID0gMCA7IGkgPCBwb2ludHMubnVtYmVyT2ZJdGVtczsgaSsrKSB7XG4gICAgdmFyIGN1cnJlbnRQb3MgPSBwb2ludHMuZ2V0SXRlbShpKTtcbiAgICBpZiAoaSA+IDApIHsgdG90YWxMZW5ndGggKz0gZ2V0RGlzdGFuY2UocHJldmlvdXNQb3MsIGN1cnJlbnRQb3MpOyB9XG4gICAgcHJldmlvdXNQb3MgPSBjdXJyZW50UG9zO1xuICB9XG4gIHJldHVybiB0b3RhbExlbmd0aDtcbn1cblxuZnVuY3Rpb24gZ2V0UG9seWdvbkxlbmd0aChlbCkge1xuICB2YXIgcG9pbnRzID0gZWwucG9pbnRzO1xuICByZXR1cm4gZ2V0UG9seWxpbmVMZW5ndGgoZWwpICsgZ2V0RGlzdGFuY2UocG9pbnRzLmdldEl0ZW0ocG9pbnRzLm51bWJlck9mSXRlbXMgLSAxKSwgcG9pbnRzLmdldEl0ZW0oMCkpO1xufVxuXG4vLyBQYXRoIGFuaW1hdGlvblxuXG5mdW5jdGlvbiBnZXRUb3RhbExlbmd0aChlbCkge1xuICBpZiAoZWwuZ2V0VG90YWxMZW5ndGgpIHsgcmV0dXJuIGVsLmdldFRvdGFsTGVuZ3RoKCk7IH1cbiAgc3dpdGNoKGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2NpcmNsZSc6IHJldHVybiBnZXRDaXJjbGVMZW5ndGgoZWwpO1xuICAgIGNhc2UgJ3JlY3QnOiByZXR1cm4gZ2V0UmVjdExlbmd0aChlbCk7XG4gICAgY2FzZSAnbGluZSc6IHJldHVybiBnZXRMaW5lTGVuZ3RoKGVsKTtcbiAgICBjYXNlICdwb2x5bGluZSc6IHJldHVybiBnZXRQb2x5bGluZUxlbmd0aChlbCk7XG4gICAgY2FzZSAncG9seWdvbic6IHJldHVybiBnZXRQb2x5Z29uTGVuZ3RoKGVsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzZXREYXNob2Zmc2V0KGVsKSB7XG4gIHZhciBwYXRoTGVuZ3RoID0gZ2V0VG90YWxMZW5ndGgoZWwpO1xuICBlbC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1kYXNoYXJyYXknLCBwYXRoTGVuZ3RoKTtcbiAgcmV0dXJuIHBhdGhMZW5ndGg7XG59XG5cbi8vIE1vdGlvbiBwYXRoXG5cbmZ1bmN0aW9uIGdldFBhcmVudFN2Z0VsKGVsKSB7XG4gIHZhciBwYXJlbnRFbCA9IGVsLnBhcmVudE5vZGU7XG4gIHdoaWxlIChpcy5zdmcocGFyZW50RWwpKSB7XG4gICAgcGFyZW50RWwgPSBwYXJlbnRFbC5wYXJlbnROb2RlO1xuICAgIGlmICghaXMuc3ZnKHBhcmVudEVsLnBhcmVudE5vZGUpKSB7IGJyZWFrOyB9XG4gIH1cbiAgcmV0dXJuIHBhcmVudEVsO1xufVxuXG5mdW5jdGlvbiBnZXRQYXJlbnRTdmcocGF0aEVsLCBzdmdEYXRhKSB7XG4gIHZhciBzdmcgPSBzdmdEYXRhIHx8IHt9O1xuICB2YXIgcGFyZW50U3ZnRWwgPSBzdmcuZWwgfHwgZ2V0UGFyZW50U3ZnRWwocGF0aEVsKTtcbiAgdmFyIHJlY3QgPSBwYXJlbnRTdmdFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHZpZXdCb3hBdHRyID0gZ2V0QXR0cmlidXRlKHBhcmVudFN2Z0VsLCAndmlld0JveCcpO1xuICB2YXIgd2lkdGggPSByZWN0LndpZHRoO1xuICB2YXIgaGVpZ2h0ID0gcmVjdC5oZWlnaHQ7XG4gIHZhciB2aWV3Qm94ID0gc3ZnLnZpZXdCb3ggfHwgKHZpZXdCb3hBdHRyID8gdmlld0JveEF0dHIuc3BsaXQoJyAnKSA6IFswLCAwLCB3aWR0aCwgaGVpZ2h0XSk7XG4gIHJldHVybiB7XG4gICAgZWw6IHBhcmVudFN2Z0VsLFxuICAgIHZpZXdCb3g6IHZpZXdCb3gsXG4gICAgeDogdmlld0JveFswXSAvIDEsXG4gICAgeTogdmlld0JveFsxXSAvIDEsXG4gICAgdzogd2lkdGggLyB2aWV3Qm94WzJdLFxuICAgIGg6IGhlaWdodCAvIHZpZXdCb3hbM11cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRQYXRoKHBhdGgsIHBlcmNlbnQpIHtcbiAgdmFyIHBhdGhFbCA9IGlzLnN0cihwYXRoKSA/IHNlbGVjdFN0cmluZyhwYXRoKVswXSA6IHBhdGg7XG4gIHZhciBwID0gcGVyY2VudCB8fCAxMDA7XG4gIHJldHVybiBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgIHJldHVybiB7XG4gICAgICBwcm9wZXJ0eTogcHJvcGVydHksXG4gICAgICBlbDogcGF0aEVsLFxuICAgICAgc3ZnOiBnZXRQYXJlbnRTdmcocGF0aEVsKSxcbiAgICAgIHRvdGFsTGVuZ3RoOiBnZXRUb3RhbExlbmd0aChwYXRoRWwpICogKHAgLyAxMDApXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFBhdGhQcm9ncmVzcyhwYXRoLCBwcm9ncmVzcykge1xuICBmdW5jdGlvbiBwb2ludChvZmZzZXQpIHtcbiAgICBpZiAoIG9mZnNldCA9PT0gdm9pZCAwICkgb2Zmc2V0ID0gMDtcblxuICAgIHZhciBsID0gcHJvZ3Jlc3MgKyBvZmZzZXQgPj0gMSA/IHByb2dyZXNzICsgb2Zmc2V0IDogMDtcbiAgICByZXR1cm4gcGF0aC5lbC5nZXRQb2ludEF0TGVuZ3RoKGwpO1xuICB9XG4gIHZhciBzdmcgPSBnZXRQYXJlbnRTdmcocGF0aC5lbCwgcGF0aC5zdmcpO1xuICB2YXIgcCA9IHBvaW50KCk7XG4gIHZhciBwMCA9IHBvaW50KC0xKTtcbiAgdmFyIHAxID0gcG9pbnQoKzEpO1xuICBzd2l0Y2ggKHBhdGgucHJvcGVydHkpIHtcbiAgICBjYXNlICd4JzogcmV0dXJuIChwLnggLSBzdmcueCkgKiBzdmcudztcbiAgICBjYXNlICd5JzogcmV0dXJuIChwLnkgLSBzdmcueSkgKiBzdmcuaDtcbiAgICBjYXNlICdhbmdsZSc6IHJldHVybiBNYXRoLmF0YW4yKHAxLnkgLSBwMC55LCBwMS54IC0gcDAueCkgKiAxODAgLyBNYXRoLlBJO1xuICB9XG59XG5cbi8vIERlY29tcG9zZSB2YWx1ZVxuXG5mdW5jdGlvbiBkZWNvbXBvc2VWYWx1ZSh2YWwsIHVuaXQpIHtcbiAgdmFyIHJneCA9IC8tP1xcZCpcXC4/XFxkKy9nO1xuICB2YXIgdmFsdWUgPSB2YWxpZGF0ZVZhbHVlKChpcy5wdGgodmFsKSA/IHZhbC50b3RhbExlbmd0aCA6IHZhbCksIHVuaXQpICsgJyc7XG4gIHJldHVybiB7XG4gICAgb3JpZ2luYWw6IHZhbHVlLFxuICAgIG51bWJlcnM6IHZhbHVlLm1hdGNoKHJneCkgPyB2YWx1ZS5tYXRjaChyZ3gpLm1hcChOdW1iZXIpIDogWzBdLFxuICAgIHN0cmluZ3M6IChpcy5zdHIodmFsKSB8fCB1bml0KSA/IHZhbHVlLnNwbGl0KHJneCkgOiBbXVxuICB9XG59XG5cbi8vIEFuaW1hdGFibGVzXG5cbmZ1bmN0aW9uIHBhcnNlVGFyZ2V0cyh0YXJnZXRzKSB7XG4gIHZhciB0YXJnZXRzQXJyYXkgPSB0YXJnZXRzID8gKGZsYXR0ZW5BcnJheShpcy5hcnIodGFyZ2V0cykgPyB0YXJnZXRzLm1hcCh0b0FycmF5KSA6IHRvQXJyYXkodGFyZ2V0cykpKSA6IFtdO1xuICByZXR1cm4gZmlsdGVyQXJyYXkodGFyZ2V0c0FycmF5LCBmdW5jdGlvbiAoaXRlbSwgcG9zLCBzZWxmKSB7IHJldHVybiBzZWxmLmluZGV4T2YoaXRlbSkgPT09IHBvczsgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEFuaW1hdGFibGVzKHRhcmdldHMpIHtcbiAgdmFyIHBhcnNlZCA9IHBhcnNlVGFyZ2V0cyh0YXJnZXRzKTtcbiAgcmV0dXJuIHBhcnNlZC5tYXAoZnVuY3Rpb24gKHQsIGkpIHtcbiAgICByZXR1cm4ge3RhcmdldDogdCwgaWQ6IGksIHRvdGFsOiBwYXJzZWQubGVuZ3RoLCB0cmFuc2Zvcm1zOiB7IGxpc3Q6IGdldEVsZW1lbnRUcmFuc2Zvcm1zKHQpIH0gfTtcbiAgfSk7XG59XG5cbi8vIFByb3BlcnRpZXNcblxuZnVuY3Rpb24gbm9ybWFsaXplUHJvcGVydHlUd2VlbnMocHJvcCwgdHdlZW5TZXR0aW5ncykge1xuICB2YXIgc2V0dGluZ3MgPSBjbG9uZU9iamVjdCh0d2VlblNldHRpbmdzKTtcbiAgLy8gT3ZlcnJpZGUgZHVyYXRpb24gaWYgZWFzaW5nIGlzIGEgc3ByaW5nXG4gIGlmICgvXnNwcmluZy8udGVzdChzZXR0aW5ncy5lYXNpbmcpKSB7IHNldHRpbmdzLmR1cmF0aW9uID0gc3ByaW5nKHNldHRpbmdzLmVhc2luZyk7IH1cbiAgaWYgKGlzLmFycihwcm9wKSkge1xuICAgIHZhciBsID0gcHJvcC5sZW5ndGg7XG4gICAgdmFyIGlzRnJvbVRvID0gKGwgPT09IDIgJiYgIWlzLm9iaihwcm9wWzBdKSk7XG4gICAgaWYgKCFpc0Zyb21Ubykge1xuICAgICAgLy8gRHVyYXRpb24gZGl2aWRlZCBieSB0aGUgbnVtYmVyIG9mIHR3ZWVuc1xuICAgICAgaWYgKCFpcy5mbmModHdlZW5TZXR0aW5ncy5kdXJhdGlvbikpIHsgc2V0dGluZ3MuZHVyYXRpb24gPSB0d2VlblNldHRpbmdzLmR1cmF0aW9uIC8gbDsgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUcmFuc2Zvcm0gW2Zyb20sIHRvXSB2YWx1ZXMgc2hvcnRoYW5kIHRvIGEgdmFsaWQgdHdlZW4gdmFsdWVcbiAgICAgIHByb3AgPSB7dmFsdWU6IHByb3B9O1xuICAgIH1cbiAgfVxuICB2YXIgcHJvcEFycmF5ID0gaXMuYXJyKHByb3ApID8gcHJvcCA6IFtwcm9wXTtcbiAgcmV0dXJuIHByb3BBcnJheS5tYXAoZnVuY3Rpb24gKHYsIGkpIHtcbiAgICB2YXIgb2JqID0gKGlzLm9iaih2KSAmJiAhaXMucHRoKHYpKSA/IHYgOiB7dmFsdWU6IHZ9O1xuICAgIC8vIERlZmF1bHQgZGVsYXkgdmFsdWUgc2hvdWxkIG9ubHkgYmUgYXBwbGllZCB0byB0aGUgZmlyc3QgdHdlZW5cbiAgICBpZiAoaXMudW5kKG9iai5kZWxheSkpIHsgb2JqLmRlbGF5ID0gIWkgPyB0d2VlblNldHRpbmdzLmRlbGF5IDogMDsgfVxuICAgIC8vIERlZmF1bHQgZW5kRGVsYXkgdmFsdWUgc2hvdWxkIG9ubHkgYmUgYXBwbGllZCB0byB0aGUgbGFzdCB0d2VlblxuICAgIGlmIChpcy51bmQob2JqLmVuZERlbGF5KSkgeyBvYmouZW5kRGVsYXkgPSBpID09PSBwcm9wQXJyYXkubGVuZ3RoIC0gMSA/IHR3ZWVuU2V0dGluZ3MuZW5kRGVsYXkgOiAwOyB9XG4gICAgcmV0dXJuIG9iajtcbiAgfSkubWFwKGZ1bmN0aW9uIChrKSB7IHJldHVybiBtZXJnZU9iamVjdHMoaywgc2V0dGluZ3MpOyB9KTtcbn1cblxuXG5mdW5jdGlvbiBmbGF0dGVuS2V5ZnJhbWVzKGtleWZyYW1lcykge1xuICB2YXIgcHJvcGVydHlOYW1lcyA9IGZpbHRlckFycmF5KGZsYXR0ZW5BcnJheShrZXlmcmFtZXMubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIE9iamVjdC5rZXlzKGtleSk7IH0pKSwgZnVuY3Rpb24gKHApIHsgcmV0dXJuIGlzLmtleShwKTsgfSlcbiAgLnJlZHVjZShmdW5jdGlvbiAoYSxiKSB7IGlmIChhLmluZGV4T2YoYikgPCAwKSB7IGEucHVzaChiKTsgfSByZXR1cm4gYTsgfSwgW10pO1xuICB2YXIgcHJvcGVydGllcyA9IHt9O1xuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICggaSApIHtcbiAgICB2YXIgcHJvcE5hbWUgPSBwcm9wZXJ0eU5hbWVzW2ldO1xuICAgIHByb3BlcnRpZXNbcHJvcE5hbWVdID0ga2V5ZnJhbWVzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgbmV3S2V5ID0ge307XG4gICAgICBmb3IgKHZhciBwIGluIGtleSkge1xuICAgICAgICBpZiAoaXMua2V5KHApKSB7XG4gICAgICAgICAgaWYgKHAgPT0gcHJvcE5hbWUpIHsgbmV3S2V5LnZhbHVlID0ga2V5W3BdOyB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3S2V5W3BdID0ga2V5W3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3S2V5O1xuICAgIH0pO1xuICB9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcGVydHlOYW1lcy5sZW5ndGg7IGkrKykgbG9vcCggaSApO1xuICByZXR1cm4gcHJvcGVydGllcztcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcGVydGllcyh0d2VlblNldHRpbmdzLCBwYXJhbXMpIHtcbiAgdmFyIHByb3BlcnRpZXMgPSBbXTtcbiAgdmFyIGtleWZyYW1lcyA9IHBhcmFtcy5rZXlmcmFtZXM7XG4gIGlmIChrZXlmcmFtZXMpIHsgcGFyYW1zID0gbWVyZ2VPYmplY3RzKGZsYXR0ZW5LZXlmcmFtZXMoa2V5ZnJhbWVzKSwgcGFyYW1zKTsgfVxuICBmb3IgKHZhciBwIGluIHBhcmFtcykge1xuICAgIGlmIChpcy5rZXkocCkpIHtcbiAgICAgIHByb3BlcnRpZXMucHVzaCh7XG4gICAgICAgIG5hbWU6IHAsXG4gICAgICAgIHR3ZWVuczogbm9ybWFsaXplUHJvcGVydHlUd2VlbnMocGFyYW1zW3BdLCB0d2VlblNldHRpbmdzKVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwcm9wZXJ0aWVzO1xufVxuXG4vLyBUd2VlbnNcblxuZnVuY3Rpb24gbm9ybWFsaXplVHdlZW5WYWx1ZXModHdlZW4sIGFuaW1hdGFibGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiB0d2Vlbikge1xuICAgIHZhciB2YWx1ZSA9IGdldEZ1bmN0aW9uVmFsdWUodHdlZW5bcF0sIGFuaW1hdGFibGUpO1xuICAgIGlmIChpcy5hcnIodmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gZ2V0RnVuY3Rpb25WYWx1ZSh2LCBhbmltYXRhYmxlKTsgfSk7XG4gICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAxKSB7IHZhbHVlID0gdmFsdWVbMF07IH1cbiAgICB9XG4gICAgdFtwXSA9IHZhbHVlO1xuICB9XG4gIHQuZHVyYXRpb24gPSBwYXJzZUZsb2F0KHQuZHVyYXRpb24pO1xuICB0LmRlbGF5ID0gcGFyc2VGbG9hdCh0LmRlbGF5KTtcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVR3ZWVucyhwcm9wLCBhbmltYXRhYmxlKSB7XG4gIHZhciBwcmV2aW91c1R3ZWVuO1xuICByZXR1cm4gcHJvcC50d2VlbnMubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgdmFyIHR3ZWVuID0gbm9ybWFsaXplVHdlZW5WYWx1ZXModCwgYW5pbWF0YWJsZSk7XG4gICAgdmFyIHR3ZWVuVmFsdWUgPSB0d2Vlbi52YWx1ZTtcbiAgICB2YXIgdG8gPSBpcy5hcnIodHdlZW5WYWx1ZSkgPyB0d2VlblZhbHVlWzFdIDogdHdlZW5WYWx1ZTtcbiAgICB2YXIgdG9Vbml0ID0gZ2V0VW5pdCh0byk7XG4gICAgdmFyIG9yaWdpbmFsVmFsdWUgPSBnZXRPcmlnaW5hbFRhcmdldFZhbHVlKGFuaW1hdGFibGUudGFyZ2V0LCBwcm9wLm5hbWUsIHRvVW5pdCwgYW5pbWF0YWJsZSk7XG4gICAgdmFyIHByZXZpb3VzVmFsdWUgPSBwcmV2aW91c1R3ZWVuID8gcHJldmlvdXNUd2Vlbi50by5vcmlnaW5hbCA6IG9yaWdpbmFsVmFsdWU7XG4gICAgdmFyIGZyb20gPSBpcy5hcnIodHdlZW5WYWx1ZSkgPyB0d2VlblZhbHVlWzBdIDogcHJldmlvdXNWYWx1ZTtcbiAgICB2YXIgZnJvbVVuaXQgPSBnZXRVbml0KGZyb20pIHx8IGdldFVuaXQob3JpZ2luYWxWYWx1ZSk7XG4gICAgdmFyIHVuaXQgPSB0b1VuaXQgfHwgZnJvbVVuaXQ7XG4gICAgaWYgKGlzLnVuZCh0bykpIHsgdG8gPSBwcmV2aW91c1ZhbHVlOyB9XG4gICAgdHdlZW4uZnJvbSA9IGRlY29tcG9zZVZhbHVlKGZyb20sIHVuaXQpO1xuICAgIHR3ZWVuLnRvID0gZGVjb21wb3NlVmFsdWUoZ2V0UmVsYXRpdmVWYWx1ZSh0bywgZnJvbSksIHVuaXQpO1xuICAgIHR3ZWVuLnN0YXJ0ID0gcHJldmlvdXNUd2VlbiA/IHByZXZpb3VzVHdlZW4uZW5kIDogMDtcbiAgICB0d2Vlbi5lbmQgPSB0d2Vlbi5zdGFydCArIHR3ZWVuLmRlbGF5ICsgdHdlZW4uZHVyYXRpb24gKyB0d2Vlbi5lbmREZWxheTtcbiAgICB0d2Vlbi5lYXNpbmcgPSBwYXJzZUVhc2luZ3ModHdlZW4uZWFzaW5nLCB0d2Vlbi5kdXJhdGlvbik7XG4gICAgdHdlZW4uaXNQYXRoID0gaXMucHRoKHR3ZWVuVmFsdWUpO1xuICAgIHR3ZWVuLmlzQ29sb3IgPSBpcy5jb2wodHdlZW4uZnJvbS5vcmlnaW5hbCk7XG4gICAgaWYgKHR3ZWVuLmlzQ29sb3IpIHsgdHdlZW4ucm91bmQgPSAxOyB9XG4gICAgcHJldmlvdXNUd2VlbiA9IHR3ZWVuO1xuICAgIHJldHVybiB0d2VlbjtcbiAgfSk7XG59XG5cbi8vIFR3ZWVuIHByb2dyZXNzXG5cbnZhciBzZXRQcm9ncmVzc1ZhbHVlID0ge1xuICBjc3M6IGZ1bmN0aW9uICh0LCBwLCB2KSB7IHJldHVybiB0LnN0eWxlW3BdID0gdjsgfSxcbiAgYXR0cmlidXRlOiBmdW5jdGlvbiAodCwgcCwgdikgeyByZXR1cm4gdC5zZXRBdHRyaWJ1dGUocCwgdik7IH0sXG4gIG9iamVjdDogZnVuY3Rpb24gKHQsIHAsIHYpIHsgcmV0dXJuIHRbcF0gPSB2OyB9LFxuICB0cmFuc2Zvcm06IGZ1bmN0aW9uICh0LCBwLCB2LCB0cmFuc2Zvcm1zLCBtYW51YWwpIHtcbiAgICB0cmFuc2Zvcm1zLmxpc3Quc2V0KHAsIHYpO1xuICAgIGlmIChwID09PSB0cmFuc2Zvcm1zLmxhc3QgfHwgbWFudWFsKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG4gICAgICB0cmFuc2Zvcm1zLmxpc3QuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIHByb3ApIHsgc3RyICs9IHByb3AgKyBcIihcIiArIHZhbHVlICsgXCIpIFwiOyB9KTtcbiAgICAgIHQuc3R5bGUudHJhbnNmb3JtID0gc3RyO1xuICAgIH1cbiAgfVxufTtcblxuLy8gU2V0IFZhbHVlIGhlbHBlclxuXG5mdW5jdGlvbiBzZXRUYXJnZXRzVmFsdWUodGFyZ2V0cywgcHJvcGVydGllcykge1xuICB2YXIgYW5pbWF0YWJsZXMgPSBnZXRBbmltYXRhYmxlcyh0YXJnZXRzKTtcbiAgYW5pbWF0YWJsZXMuZm9yRWFjaChmdW5jdGlvbiAoYW5pbWF0YWJsZSkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldEZ1bmN0aW9uVmFsdWUocHJvcGVydGllc1twcm9wZXJ0eV0sIGFuaW1hdGFibGUpO1xuICAgICAgdmFyIHRhcmdldCA9IGFuaW1hdGFibGUudGFyZ2V0O1xuICAgICAgdmFyIHZhbHVlVW5pdCA9IGdldFVuaXQodmFsdWUpO1xuICAgICAgdmFyIG9yaWdpbmFsVmFsdWUgPSBnZXRPcmlnaW5hbFRhcmdldFZhbHVlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlVW5pdCwgYW5pbWF0YWJsZSk7XG4gICAgICB2YXIgdW5pdCA9IHZhbHVlVW5pdCB8fCBnZXRVbml0KG9yaWdpbmFsVmFsdWUpO1xuICAgICAgdmFyIHRvID0gZ2V0UmVsYXRpdmVWYWx1ZSh2YWxpZGF0ZVZhbHVlKHZhbHVlLCB1bml0KSwgb3JpZ2luYWxWYWx1ZSk7XG4gICAgICB2YXIgYW5pbVR5cGUgPSBnZXRBbmltYXRpb25UeXBlKHRhcmdldCwgcHJvcGVydHkpO1xuICAgICAgc2V0UHJvZ3Jlc3NWYWx1ZVthbmltVHlwZV0odGFyZ2V0LCBwcm9wZXJ0eSwgdG8sIGFuaW1hdGFibGUudHJhbnNmb3JtcywgdHJ1ZSk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gQW5pbWF0aW9uc1xuXG5mdW5jdGlvbiBjcmVhdGVBbmltYXRpb24oYW5pbWF0YWJsZSwgcHJvcCkge1xuICB2YXIgYW5pbVR5cGUgPSBnZXRBbmltYXRpb25UeXBlKGFuaW1hdGFibGUudGFyZ2V0LCBwcm9wLm5hbWUpO1xuICBpZiAoYW5pbVR5cGUpIHtcbiAgICB2YXIgdHdlZW5zID0gbm9ybWFsaXplVHdlZW5zKHByb3AsIGFuaW1hdGFibGUpO1xuICAgIHZhciBsYXN0VHdlZW4gPSB0d2VlbnNbdHdlZW5zLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBhbmltVHlwZSxcbiAgICAgIHByb3BlcnR5OiBwcm9wLm5hbWUsXG4gICAgICBhbmltYXRhYmxlOiBhbmltYXRhYmxlLFxuICAgICAgdHdlZW5zOiB0d2VlbnMsXG4gICAgICBkdXJhdGlvbjogbGFzdFR3ZWVuLmVuZCxcbiAgICAgIGRlbGF5OiB0d2VlbnNbMF0uZGVsYXksXG4gICAgICBlbmREZWxheTogbGFzdFR3ZWVuLmVuZERlbGF5XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldEFuaW1hdGlvbnMoYW5pbWF0YWJsZXMsIHByb3BlcnRpZXMpIHtcbiAgcmV0dXJuIGZpbHRlckFycmF5KGZsYXR0ZW5BcnJheShhbmltYXRhYmxlcy5tYXAoZnVuY3Rpb24gKGFuaW1hdGFibGUpIHtcbiAgICByZXR1cm4gcHJvcGVydGllcy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIHJldHVybiBjcmVhdGVBbmltYXRpb24oYW5pbWF0YWJsZSwgcHJvcCk7XG4gICAgfSk7XG4gIH0pKSwgZnVuY3Rpb24gKGEpIHsgcmV0dXJuICFpcy51bmQoYSk7IH0pO1xufVxuXG4vLyBDcmVhdGUgSW5zdGFuY2VcblxuZnVuY3Rpb24gZ2V0SW5zdGFuY2VUaW1pbmdzKGFuaW1hdGlvbnMsIHR3ZWVuU2V0dGluZ3MpIHtcbiAgdmFyIGFuaW1MZW5ndGggPSBhbmltYXRpb25zLmxlbmd0aDtcbiAgdmFyIGdldFRsT2Zmc2V0ID0gZnVuY3Rpb24gKGFuaW0pIHsgcmV0dXJuIGFuaW0udGltZWxpbmVPZmZzZXQgPyBhbmltLnRpbWVsaW5lT2Zmc2V0IDogMDsgfTtcbiAgdmFyIHRpbWluZ3MgPSB7fTtcbiAgdGltaW5ncy5kdXJhdGlvbiA9IGFuaW1MZW5ndGggPyBNYXRoLm1heC5hcHBseShNYXRoLCBhbmltYXRpb25zLm1hcChmdW5jdGlvbiAoYW5pbSkgeyByZXR1cm4gZ2V0VGxPZmZzZXQoYW5pbSkgKyBhbmltLmR1cmF0aW9uOyB9KSkgOiB0d2VlblNldHRpbmdzLmR1cmF0aW9uO1xuICB0aW1pbmdzLmRlbGF5ID0gYW5pbUxlbmd0aCA/IE1hdGgubWluLmFwcGx5KE1hdGgsIGFuaW1hdGlvbnMubWFwKGZ1bmN0aW9uIChhbmltKSB7IHJldHVybiBnZXRUbE9mZnNldChhbmltKSArIGFuaW0uZGVsYXk7IH0pKSA6IHR3ZWVuU2V0dGluZ3MuZGVsYXk7XG4gIHRpbWluZ3MuZW5kRGVsYXkgPSBhbmltTGVuZ3RoID8gdGltaW5ncy5kdXJhdGlvbiAtIE1hdGgubWF4LmFwcGx5KE1hdGgsIGFuaW1hdGlvbnMubWFwKGZ1bmN0aW9uIChhbmltKSB7IHJldHVybiBnZXRUbE9mZnNldChhbmltKSArIGFuaW0uZHVyYXRpb24gLSBhbmltLmVuZERlbGF5OyB9KSkgOiB0d2VlblNldHRpbmdzLmVuZERlbGF5O1xuICByZXR1cm4gdGltaW5ncztcbn1cblxudmFyIGluc3RhbmNlSUQgPSAwO1xuXG5mdW5jdGlvbiBjcmVhdGVOZXdJbnN0YW5jZShwYXJhbXMpIHtcbiAgdmFyIGluc3RhbmNlU2V0dGluZ3MgPSByZXBsYWNlT2JqZWN0UHJvcHMoZGVmYXVsdEluc3RhbmNlU2V0dGluZ3MsIHBhcmFtcyk7XG4gIHZhciB0d2VlblNldHRpbmdzID0gcmVwbGFjZU9iamVjdFByb3BzKGRlZmF1bHRUd2VlblNldHRpbmdzLCBwYXJhbXMpO1xuICB2YXIgcHJvcGVydGllcyA9IGdldFByb3BlcnRpZXModHdlZW5TZXR0aW5ncywgcGFyYW1zKTtcbiAgdmFyIGFuaW1hdGFibGVzID0gZ2V0QW5pbWF0YWJsZXMocGFyYW1zLnRhcmdldHMpO1xuICB2YXIgYW5pbWF0aW9ucyA9IGdldEFuaW1hdGlvbnMoYW5pbWF0YWJsZXMsIHByb3BlcnRpZXMpO1xuICB2YXIgdGltaW5ncyA9IGdldEluc3RhbmNlVGltaW5ncyhhbmltYXRpb25zLCB0d2VlblNldHRpbmdzKTtcbiAgdmFyIGlkID0gaW5zdGFuY2VJRDtcbiAgaW5zdGFuY2VJRCsrO1xuICByZXR1cm4gbWVyZ2VPYmplY3RzKGluc3RhbmNlU2V0dGluZ3MsIHtcbiAgICBpZDogaWQsXG4gICAgY2hpbGRyZW46IFtdLFxuICAgIGFuaW1hdGFibGVzOiBhbmltYXRhYmxlcyxcbiAgICBhbmltYXRpb25zOiBhbmltYXRpb25zLFxuICAgIGR1cmF0aW9uOiB0aW1pbmdzLmR1cmF0aW9uLFxuICAgIGRlbGF5OiB0aW1pbmdzLmRlbGF5LFxuICAgIGVuZERlbGF5OiB0aW1pbmdzLmVuZERlbGF5XG4gIH0pO1xufVxuXG4vLyBDb3JlXG5cbnZhciBhY3RpdmVJbnN0YW5jZXMgPSBbXTtcbnZhciBwYXVzZWRJbnN0YW5jZXMgPSBbXTtcbnZhciByYWY7XG5cbnZhciBlbmdpbmUgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBwbGF5KCkgeyBcbiAgICByYWYgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7XG4gIH1cbiAgZnVuY3Rpb24gc3RlcCh0KSB7XG4gICAgdmFyIGFjdGl2ZUluc3RhbmNlc0xlbmd0aCA9IGFjdGl2ZUluc3RhbmNlcy5sZW5ndGg7XG4gICAgaWYgKGFjdGl2ZUluc3RhbmNlc0xlbmd0aCkge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgd2hpbGUgKGkgPCBhY3RpdmVJbnN0YW5jZXNMZW5ndGgpIHtcbiAgICAgICAgdmFyIGFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2VzW2ldO1xuICAgICAgICBpZiAoIWFjdGl2ZUluc3RhbmNlLnBhdXNlZCkge1xuICAgICAgICAgIGFjdGl2ZUluc3RhbmNlLnRpY2sodCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGluc3RhbmNlSW5kZXggPSBhY3RpdmVJbnN0YW5jZXMuaW5kZXhPZihhY3RpdmVJbnN0YW5jZSk7XG4gICAgICAgICAgaWYgKGluc3RhbmNlSW5kZXggPiAtMSkge1xuICAgICAgICAgICAgYWN0aXZlSW5zdGFuY2VzLnNwbGljZShpbnN0YW5jZUluZGV4LCAxKTtcbiAgICAgICAgICAgIGFjdGl2ZUluc3RhbmNlc0xlbmd0aCA9IGFjdGl2ZUluc3RhbmNlcy5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICAgIHBsYXkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmFmID0gY2FuY2VsQW5pbWF0aW9uRnJhbWUocmFmKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBsYXk7XG59KSgpO1xuXG5mdW5jdGlvbiBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCkge1xuICBpZiAoZG9jdW1lbnQuaGlkZGVuKSB7XG4gICAgYWN0aXZlSW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24gKGlucykgeyByZXR1cm4gaW5zLnBhdXNlKCk7IH0pO1xuICAgIHBhdXNlZEluc3RhbmNlcyA9IGFjdGl2ZUluc3RhbmNlcy5zbGljZSgwKTtcbiAgICBhY3RpdmVJbnN0YW5jZXMgPSBbXTtcbiAgfSBlbHNlIHtcbiAgICBwYXVzZWRJbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5zKSB7IHJldHVybiBpbnMucGxheSgpOyB9KTtcbiAgfVxufVxuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSk7XG59XG5cbi8vIFB1YmxpYyBJbnN0YW5jZVxuXG5mdW5jdGlvbiBhbmltZShwYXJhbXMpIHtcbiAgaWYgKCBwYXJhbXMgPT09IHZvaWQgMCApIHBhcmFtcyA9IHt9O1xuXG5cbiAgdmFyIHN0YXJ0VGltZSA9IDAsIGxhc3RUaW1lID0gMCwgbm93ID0gMDtcbiAgdmFyIGNoaWxkcmVuLCBjaGlsZHJlbkxlbmd0aCA9IDA7XG4gIHZhciByZXNvbHZlID0gbnVsbDtcblxuICBmdW5jdGlvbiBtYWtlUHJvbWlzZShpbnN0YW5jZSkge1xuICAgIHZhciBwcm9taXNlID0gd2luZG93LlByb21pc2UgJiYgbmV3IFByb21pc2UoZnVuY3Rpb24gKF9yZXNvbHZlKSB7IHJldHVybiByZXNvbHZlID0gX3Jlc29sdmU7IH0pO1xuICAgIGluc3RhbmNlLmZpbmlzaGVkID0gcHJvbWlzZTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIHZhciBpbnN0YW5jZSA9IGNyZWF0ZU5ld0luc3RhbmNlKHBhcmFtcyk7XG4gIHZhciBwcm9taXNlID0gbWFrZVByb21pc2UoaW5zdGFuY2UpO1xuXG4gIGZ1bmN0aW9uIHRvZ2dsZUluc3RhbmNlRGlyZWN0aW9uKCkge1xuICAgIHZhciBkaXJlY3Rpb24gPSBpbnN0YW5jZS5kaXJlY3Rpb247XG4gICAgaWYgKGRpcmVjdGlvbiAhPT0gJ2FsdGVybmF0ZScpIHtcbiAgICAgIGluc3RhbmNlLmRpcmVjdGlvbiA9IGRpcmVjdGlvbiAhPT0gJ25vcm1hbCcgPyAnbm9ybWFsJyA6ICdyZXZlcnNlJztcbiAgICB9XG4gICAgaW5zdGFuY2UucmV2ZXJzZWQgPSAhaW5zdGFuY2UucmV2ZXJzZWQ7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIGNoaWxkLnJldmVyc2VkID0gaW5zdGFuY2UucmV2ZXJzZWQ7IH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRqdXN0VGltZSh0aW1lKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLnJldmVyc2VkID8gaW5zdGFuY2UuZHVyYXRpb24gLSB0aW1lIDogdGltZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VGltZSgpIHtcbiAgICBzdGFydFRpbWUgPSAwO1xuICAgIGxhc3RUaW1lID0gYWRqdXN0VGltZShpbnN0YW5jZS5jdXJyZW50VGltZSkgKiAoMSAvIGFuaW1lLnNwZWVkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlZWtDaWxkKHRpbWUsIGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkKSB7IGNoaWxkLnNlZWsodGltZSAtIGNoaWxkLnRpbWVsaW5lT2Zmc2V0KTsgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3luY0luc3RhbmNlQ2hpbGRyZW4odGltZSkge1xuICAgIGlmICghaW5zdGFuY2UucmV2ZXJzZVBsYXliYWNrKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspIHsgc2Vla0NpbGQodGltZSwgY2hpbGRyZW5baV0pOyB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IGNoaWxkcmVuTGVuZ3RoOyBpJDEtLTspIHsgc2Vla0NpbGQodGltZSwgY2hpbGRyZW5baSQxXSk7IH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRBbmltYXRpb25zUHJvZ3Jlc3MoaW5zVGltZSkge1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYW5pbWF0aW9ucyA9IGluc3RhbmNlLmFuaW1hdGlvbnM7XG4gICAgdmFyIGFuaW1hdGlvbnNMZW5ndGggPSBhbmltYXRpb25zLmxlbmd0aDtcbiAgICB3aGlsZSAoaSA8IGFuaW1hdGlvbnNMZW5ndGgpIHtcbiAgICAgIHZhciBhbmltID0gYW5pbWF0aW9uc1tpXTtcbiAgICAgIHZhciBhbmltYXRhYmxlID0gYW5pbS5hbmltYXRhYmxlO1xuICAgICAgdmFyIHR3ZWVucyA9IGFuaW0udHdlZW5zO1xuICAgICAgdmFyIHR3ZWVuTGVuZ3RoID0gdHdlZW5zLmxlbmd0aCAtIDE7XG4gICAgICB2YXIgdHdlZW4gPSB0d2VlbnNbdHdlZW5MZW5ndGhdO1xuICAgICAgLy8gT25seSBjaGVjayBmb3Iga2V5ZnJhbWVzIGlmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgdHdlZW5cbiAgICAgIGlmICh0d2Vlbkxlbmd0aCkgeyB0d2VlbiA9IGZpbHRlckFycmF5KHR3ZWVucywgZnVuY3Rpb24gKHQpIHsgcmV0dXJuIChpbnNUaW1lIDwgdC5lbmQpOyB9KVswXSB8fCB0d2VlbjsgfVxuICAgICAgdmFyIGVsYXBzZWQgPSBtaW5NYXgoaW5zVGltZSAtIHR3ZWVuLnN0YXJ0IC0gdHdlZW4uZGVsYXksIDAsIHR3ZWVuLmR1cmF0aW9uKSAvIHR3ZWVuLmR1cmF0aW9uO1xuICAgICAgdmFyIGVhc2VkID0gaXNOYU4oZWxhcHNlZCkgPyAxIDogdHdlZW4uZWFzaW5nKGVsYXBzZWQpO1xuICAgICAgdmFyIHN0cmluZ3MgPSB0d2Vlbi50by5zdHJpbmdzO1xuICAgICAgdmFyIHJvdW5kID0gdHdlZW4ucm91bmQ7XG4gICAgICB2YXIgbnVtYmVycyA9IFtdO1xuICAgICAgdmFyIHRvTnVtYmVyc0xlbmd0aCA9IHR3ZWVuLnRvLm51bWJlcnMubGVuZ3RoO1xuICAgICAgdmFyIHByb2dyZXNzID0gKHZvaWQgMCk7XG4gICAgICBmb3IgKHZhciBuID0gMDsgbiA8IHRvTnVtYmVyc0xlbmd0aDsgbisrKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9ICh2b2lkIDApO1xuICAgICAgICB2YXIgdG9OdW1iZXIgPSB0d2Vlbi50by5udW1iZXJzW25dO1xuICAgICAgICB2YXIgZnJvbU51bWJlciA9IHR3ZWVuLmZyb20ubnVtYmVyc1tuXSB8fCAwO1xuICAgICAgICBpZiAoIXR3ZWVuLmlzUGF0aCkge1xuICAgICAgICAgIHZhbHVlID0gZnJvbU51bWJlciArIChlYXNlZCAqICh0b051bWJlciAtIGZyb21OdW1iZXIpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IGdldFBhdGhQcm9ncmVzcyh0d2Vlbi52YWx1ZSwgZWFzZWQgKiB0b051bWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJvdW5kKSB7XG4gICAgICAgICAgaWYgKCEodHdlZW4uaXNDb2xvciAmJiBuID4gMikpIHtcbiAgICAgICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSAqIHJvdW5kKSAvIHJvdW5kO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBudW1iZXJzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgICAgLy8gTWFudWFsIEFycmF5LnJlZHVjZSBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlc1xuICAgICAgdmFyIHN0cmluZ3NMZW5ndGggPSBzdHJpbmdzLmxlbmd0aDtcbiAgICAgIGlmICghc3RyaW5nc0xlbmd0aCkge1xuICAgICAgICBwcm9ncmVzcyA9IG51bWJlcnNbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9ncmVzcyA9IHN0cmluZ3NbMF07XG4gICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgc3RyaW5nc0xlbmd0aDsgcysrKSB7XG4gICAgICAgICAgdmFyIGEgPSBzdHJpbmdzW3NdO1xuICAgICAgICAgIHZhciBiID0gc3RyaW5nc1tzICsgMV07XG4gICAgICAgICAgdmFyIG4kMSA9IG51bWJlcnNbc107XG4gICAgICAgICAgaWYgKCFpc05hTihuJDEpKSB7XG4gICAgICAgICAgICBpZiAoIWIpIHtcbiAgICAgICAgICAgICAgcHJvZ3Jlc3MgKz0gbiQxICsgJyAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcHJvZ3Jlc3MgKz0gbiQxICsgYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNldFByb2dyZXNzVmFsdWVbYW5pbS50eXBlXShhbmltYXRhYmxlLnRhcmdldCwgYW5pbS5wcm9wZXJ0eSwgcHJvZ3Jlc3MsIGFuaW1hdGFibGUudHJhbnNmb3Jtcyk7XG4gICAgICBhbmltLmN1cnJlbnRWYWx1ZSA9IHByb2dyZXNzO1xuICAgICAgaSsrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldENhbGxiYWNrKGNiKSB7XG4gICAgaWYgKGluc3RhbmNlW2NiXSAmJiAhaW5zdGFuY2UucGFzc1Rocm91Z2gpIHsgaW5zdGFuY2VbY2JdKGluc3RhbmNlKTsgfVxuICB9XG5cbiAgZnVuY3Rpb24gY291bnRJdGVyYXRpb24oKSB7XG4gICAgaWYgKGluc3RhbmNlLnJlbWFpbmluZyAmJiBpbnN0YW5jZS5yZW1haW5pbmcgIT09IHRydWUpIHtcbiAgICAgIGluc3RhbmNlLnJlbWFpbmluZy0tO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEluc3RhbmNlUHJvZ3Jlc3MoZW5naW5lVGltZSkge1xuICAgIHZhciBpbnNEdXJhdGlvbiA9IGluc3RhbmNlLmR1cmF0aW9uO1xuICAgIHZhciBpbnNEZWxheSA9IGluc3RhbmNlLmRlbGF5O1xuICAgIHZhciBpbnNFbmREZWxheSA9IGluc0R1cmF0aW9uIC0gaW5zdGFuY2UuZW5kRGVsYXk7XG4gICAgdmFyIGluc1RpbWUgPSBhZGp1c3RUaW1lKGVuZ2luZVRpbWUpO1xuICAgIGluc3RhbmNlLnByb2dyZXNzID0gbWluTWF4KChpbnNUaW1lIC8gaW5zRHVyYXRpb24pICogMTAwLCAwLCAxMDApO1xuICAgIGluc3RhbmNlLnJldmVyc2VQbGF5YmFjayA9IGluc1RpbWUgPCBpbnN0YW5jZS5jdXJyZW50VGltZTtcbiAgICBpZiAoY2hpbGRyZW4pIHsgc3luY0luc3RhbmNlQ2hpbGRyZW4oaW5zVGltZSk7IH1cbiAgICBpZiAoIWluc3RhbmNlLmJlZ2FuICYmIGluc3RhbmNlLmN1cnJlbnRUaW1lID4gMCkge1xuICAgICAgaW5zdGFuY2UuYmVnYW4gPSB0cnVlO1xuICAgICAgc2V0Q2FsbGJhY2soJ2JlZ2luJyk7XG4gICAgICBzZXRDYWxsYmFjaygnbG9vcEJlZ2luJyk7XG4gICAgfVxuICAgIGlmIChpbnNUaW1lIDw9IGluc0RlbGF5ICYmIGluc3RhbmNlLmN1cnJlbnRUaW1lICE9PSAwKSB7XG4gICAgICBzZXRBbmltYXRpb25zUHJvZ3Jlc3MoMCk7XG4gICAgfVxuICAgIGlmICgoaW5zVGltZSA+PSBpbnNFbmREZWxheSAmJiBpbnN0YW5jZS5jdXJyZW50VGltZSAhPT0gaW5zRHVyYXRpb24pIHx8ICFpbnNEdXJhdGlvbikge1xuICAgICAgc2V0QW5pbWF0aW9uc1Byb2dyZXNzKGluc0R1cmF0aW9uKTtcbiAgICB9XG4gICAgaWYgKGluc1RpbWUgPiBpbnNEZWxheSAmJiBpbnNUaW1lIDwgaW5zRW5kRGVsYXkpIHtcbiAgICAgIGlmICghaW5zdGFuY2UuY2hhbmdlQmVnYW4pIHtcbiAgICAgICAgaW5zdGFuY2UuY2hhbmdlQmVnYW4gPSB0cnVlO1xuICAgICAgICBpbnN0YW5jZS5jaGFuZ2VDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgc2V0Q2FsbGJhY2soJ2NoYW5nZUJlZ2luJyk7XG4gICAgICB9XG4gICAgICBzZXRDYWxsYmFjaygnY2hhbmdlJyk7XG4gICAgICBzZXRBbmltYXRpb25zUHJvZ3Jlc3MoaW5zVGltZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpbnN0YW5jZS5jaGFuZ2VCZWdhbikge1xuICAgICAgICBpbnN0YW5jZS5jaGFuZ2VDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICBpbnN0YW5jZS5jaGFuZ2VCZWdhbiA9IGZhbHNlO1xuICAgICAgICBzZXRDYWxsYmFjaygnY2hhbmdlQ29tcGxldGUnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaW5zdGFuY2UuY3VycmVudFRpbWUgPSBtaW5NYXgoaW5zVGltZSwgMCwgaW5zRHVyYXRpb24pO1xuICAgIGlmIChpbnN0YW5jZS5iZWdhbikgeyBzZXRDYWxsYmFjaygndXBkYXRlJyk7IH1cbiAgICBpZiAoZW5naW5lVGltZSA+PSBpbnNEdXJhdGlvbikge1xuICAgICAgbGFzdFRpbWUgPSAwO1xuICAgICAgY291bnRJdGVyYXRpb24oKTtcbiAgICAgIGlmIChpbnN0YW5jZS5yZW1haW5pbmcpIHtcbiAgICAgICAgc3RhcnRUaW1lID0gbm93O1xuICAgICAgICBzZXRDYWxsYmFjaygnbG9vcENvbXBsZXRlJyk7XG4gICAgICAgIHNldENhbGxiYWNrKCdsb29wQmVnaW4nKTtcbiAgICAgICAgaWYgKGluc3RhbmNlLmRpcmVjdGlvbiA9PT0gJ2FsdGVybmF0ZScpIHsgdG9nZ2xlSW5zdGFuY2VEaXJlY3Rpb24oKTsgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5zdGFuY2UucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgaWYgKCFpbnN0YW5jZS5jb21wbGV0ZWQpIHtcbiAgICAgICAgICBpbnN0YW5jZS5jb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgIHNldENhbGxiYWNrKCdsb29wQ29tcGxldGUnKTtcbiAgICAgICAgICBzZXRDYWxsYmFjaygnY29tcGxldGUnKTtcbiAgICAgICAgICBpZiAoIWluc3RhbmNlLnBhc3NUaHJvdWdoICYmICdQcm9taXNlJyBpbiB3aW5kb3cpIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIHByb21pc2UgPSBtYWtlUHJvbWlzZShpbnN0YW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaW5zdGFuY2UucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGlyZWN0aW9uID0gaW5zdGFuY2UuZGlyZWN0aW9uO1xuICAgIGluc3RhbmNlLnBhc3NUaHJvdWdoID0gZmFsc2U7XG4gICAgaW5zdGFuY2UuY3VycmVudFRpbWUgPSAwO1xuICAgIGluc3RhbmNlLnByb2dyZXNzID0gMDtcbiAgICBpbnN0YW5jZS5wYXVzZWQgPSB0cnVlO1xuICAgIGluc3RhbmNlLmJlZ2FuID0gZmFsc2U7XG4gICAgaW5zdGFuY2UuY2hhbmdlQmVnYW4gPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5jb21wbGV0ZWQgPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5jaGFuZ2VDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5yZXZlcnNlUGxheWJhY2sgPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5yZXZlcnNlZCA9IGRpcmVjdGlvbiA9PT0gJ3JldmVyc2UnO1xuICAgIGluc3RhbmNlLnJlbWFpbmluZyA9IGluc3RhbmNlLmxvb3A7XG4gICAgY2hpbGRyZW4gPSBpbnN0YW5jZS5jaGlsZHJlbjtcbiAgICBjaGlsZHJlbkxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gY2hpbGRyZW5MZW5ndGg7IGktLTspIHsgaW5zdGFuY2UuY2hpbGRyZW5baV0ucmVzZXQoKTsgfVxuICAgIGlmIChpbnN0YW5jZS5yZXZlcnNlZCAmJiBpbnN0YW5jZS5sb29wICE9PSB0cnVlIHx8IChkaXJlY3Rpb24gPT09ICdhbHRlcm5hdGUnICYmIGluc3RhbmNlLmxvb3AgPT09IDEpKSB7IGluc3RhbmNlLnJlbWFpbmluZysrOyB9XG4gICAgc2V0QW5pbWF0aW9uc1Byb2dyZXNzKDApO1xuICB9O1xuXG4gIC8vIFNldCBWYWx1ZSBoZWxwZXJcblxuICBpbnN0YW5jZS5zZXQgPSBmdW5jdGlvbih0YXJnZXRzLCBwcm9wZXJ0aWVzKSB7XG4gICAgc2V0VGFyZ2V0c1ZhbHVlKHRhcmdldHMsIHByb3BlcnRpZXMpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcblxuICBpbnN0YW5jZS50aWNrID0gZnVuY3Rpb24odCkge1xuICAgIG5vdyA9IHQ7XG4gICAgaWYgKCFzdGFydFRpbWUpIHsgc3RhcnRUaW1lID0gbm93OyB9XG4gICAgc2V0SW5zdGFuY2VQcm9ncmVzcygobm93ICsgKGxhc3RUaW1lIC0gc3RhcnRUaW1lKSkgKiBhbmltZS5zcGVlZCk7XG4gIH07XG5cbiAgaW5zdGFuY2Uuc2VlayA9IGZ1bmN0aW9uKHRpbWUpIHtcbiAgICBzZXRJbnN0YW5jZVByb2dyZXNzKGFkanVzdFRpbWUodGltZSkpO1xuICB9O1xuXG4gIGluc3RhbmNlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgaW5zdGFuY2UucGF1c2VkID0gdHJ1ZTtcbiAgICByZXNldFRpbWUoKTtcbiAgfTtcblxuICBpbnN0YW5jZS5wbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFpbnN0YW5jZS5wYXVzZWQpIHsgcmV0dXJuOyB9XG4gICAgaWYgKGluc3RhbmNlLmNvbXBsZXRlZCkgeyBpbnN0YW5jZS5yZXNldCgpOyB9XG4gICAgaW5zdGFuY2UucGF1c2VkID0gZmFsc2U7XG4gICAgYWN0aXZlSW5zdGFuY2VzLnB1c2goaW5zdGFuY2UpO1xuICAgIHJlc2V0VGltZSgpO1xuICAgIGlmICghcmFmKSB7IGVuZ2luZSgpOyB9XG4gIH07XG5cbiAgaW5zdGFuY2UucmV2ZXJzZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRvZ2dsZUluc3RhbmNlRGlyZWN0aW9uKCk7XG4gICAgcmVzZXRUaW1lKCk7XG4gIH07XG5cbiAgaW5zdGFuY2UucmVzdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgIGluc3RhbmNlLnJlc2V0KCk7XG4gICAgaW5zdGFuY2UucGxheSgpO1xuICB9O1xuXG4gIGluc3RhbmNlLnJlc2V0KCk7XG5cbiAgaWYgKGluc3RhbmNlLmF1dG9wbGF5KSB7IGluc3RhbmNlLnBsYXkoKTsgfVxuXG4gIHJldHVybiBpbnN0YW5jZTtcblxufVxuXG4vLyBSZW1vdmUgdGFyZ2V0cyBmcm9tIGFuaW1hdGlvblxuXG5mdW5jdGlvbiByZW1vdmVUYXJnZXRzRnJvbUFuaW1hdGlvbnModGFyZ2V0c0FycmF5LCBhbmltYXRpb25zKSB7XG4gIGZvciAodmFyIGEgPSBhbmltYXRpb25zLmxlbmd0aDsgYS0tOykge1xuICAgIGlmIChhcnJheUNvbnRhaW5zKHRhcmdldHNBcnJheSwgYW5pbWF0aW9uc1thXS5hbmltYXRhYmxlLnRhcmdldCkpIHtcbiAgICAgIGFuaW1hdGlvbnMuc3BsaWNlKGEsIDEpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVUYXJnZXRzKHRhcmdldHMpIHtcbiAgdmFyIHRhcmdldHNBcnJheSA9IHBhcnNlVGFyZ2V0cyh0YXJnZXRzKTtcbiAgZm9yICh2YXIgaSA9IGFjdGl2ZUluc3RhbmNlcy5sZW5ndGg7IGktLTspIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZXNbaV07XG4gICAgdmFyIGFuaW1hdGlvbnMgPSBpbnN0YW5jZS5hbmltYXRpb25zO1xuICAgIHZhciBjaGlsZHJlbiA9IGluc3RhbmNlLmNoaWxkcmVuO1xuICAgIHJlbW92ZVRhcmdldHNGcm9tQW5pbWF0aW9ucyh0YXJnZXRzQXJyYXksIGFuaW1hdGlvbnMpO1xuICAgIGZvciAodmFyIGMgPSBjaGlsZHJlbi5sZW5ndGg7IGMtLTspIHtcbiAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2NdO1xuICAgICAgdmFyIGNoaWxkQW5pbWF0aW9ucyA9IGNoaWxkLmFuaW1hdGlvbnM7XG4gICAgICByZW1vdmVUYXJnZXRzRnJvbUFuaW1hdGlvbnModGFyZ2V0c0FycmF5LCBjaGlsZEFuaW1hdGlvbnMpO1xuICAgICAgaWYgKCFjaGlsZEFuaW1hdGlvbnMubGVuZ3RoICYmICFjaGlsZC5jaGlsZHJlbi5sZW5ndGgpIHsgY2hpbGRyZW4uc3BsaWNlKGMsIDEpOyB9XG4gICAgfVxuICAgIGlmICghYW5pbWF0aW9ucy5sZW5ndGggJiYgIWNoaWxkcmVuLmxlbmd0aCkgeyBpbnN0YW5jZS5wYXVzZSgpOyB9XG4gIH1cbn1cblxuLy8gU3RhZ2dlciBoZWxwZXJzXG5cbmZ1bmN0aW9uIHN0YWdnZXIodmFsLCBwYXJhbXMpIHtcbiAgaWYgKCBwYXJhbXMgPT09IHZvaWQgMCApIHBhcmFtcyA9IHt9O1xuXG4gIHZhciBkaXJlY3Rpb24gPSBwYXJhbXMuZGlyZWN0aW9uIHx8ICdub3JtYWwnO1xuICB2YXIgZWFzaW5nID0gcGFyYW1zLmVhc2luZyA/IHBhcnNlRWFzaW5ncyhwYXJhbXMuZWFzaW5nKSA6IG51bGw7XG4gIHZhciBncmlkID0gcGFyYW1zLmdyaWQ7XG4gIHZhciBheGlzID0gcGFyYW1zLmF4aXM7XG4gIHZhciBmcm9tSW5kZXggPSBwYXJhbXMuZnJvbSB8fCAwO1xuICB2YXIgZnJvbUZpcnN0ID0gZnJvbUluZGV4ID09PSAnZmlyc3QnO1xuICB2YXIgZnJvbUNlbnRlciA9IGZyb21JbmRleCA9PT0gJ2NlbnRlcic7XG4gIHZhciBmcm9tTGFzdCA9IGZyb21JbmRleCA9PT0gJ2xhc3QnO1xuICB2YXIgaXNSYW5nZSA9IGlzLmFycih2YWwpO1xuICB2YXIgdmFsMSA9IGlzUmFuZ2UgPyBwYXJzZUZsb2F0KHZhbFswXSkgOiBwYXJzZUZsb2F0KHZhbCk7XG4gIHZhciB2YWwyID0gaXNSYW5nZSA/IHBhcnNlRmxvYXQodmFsWzFdKSA6IDA7XG4gIHZhciB1bml0ID0gZ2V0VW5pdChpc1JhbmdlID8gdmFsWzFdIDogdmFsKSB8fCAwO1xuICB2YXIgc3RhcnQgPSBwYXJhbXMuc3RhcnQgfHwgMCArIChpc1JhbmdlID8gdmFsMSA6IDApO1xuICB2YXIgdmFsdWVzID0gW107XG4gIHZhciBtYXhWYWx1ZSA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAoZWwsIGksIHQpIHtcbiAgICBpZiAoZnJvbUZpcnN0KSB7IGZyb21JbmRleCA9IDA7IH1cbiAgICBpZiAoZnJvbUNlbnRlcikgeyBmcm9tSW5kZXggPSAodCAtIDEpIC8gMjsgfVxuICAgIGlmIChmcm9tTGFzdCkgeyBmcm9tSW5kZXggPSB0IC0gMTsgfVxuICAgIGlmICghdmFsdWVzLmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHQ7IGluZGV4KyspIHtcbiAgICAgICAgaWYgKCFncmlkKSB7XG4gICAgICAgICAgdmFsdWVzLnB1c2goTWF0aC5hYnMoZnJvbUluZGV4IC0gaW5kZXgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgZnJvbVggPSAhZnJvbUNlbnRlciA/IGZyb21JbmRleCVncmlkWzBdIDogKGdyaWRbMF0tMSkvMjtcbiAgICAgICAgICB2YXIgZnJvbVkgPSAhZnJvbUNlbnRlciA/IE1hdGguZmxvb3IoZnJvbUluZGV4L2dyaWRbMF0pIDogKGdyaWRbMV0tMSkvMjtcbiAgICAgICAgICB2YXIgdG9YID0gaW5kZXglZ3JpZFswXTtcbiAgICAgICAgICB2YXIgdG9ZID0gTWF0aC5mbG9vcihpbmRleC9ncmlkWzBdKTtcbiAgICAgICAgICB2YXIgZGlzdGFuY2VYID0gZnJvbVggLSB0b1g7XG4gICAgICAgICAgdmFyIGRpc3RhbmNlWSA9IGZyb21ZIC0gdG9ZO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IE1hdGguc3FydChkaXN0YW5jZVggKiBkaXN0YW5jZVggKyBkaXN0YW5jZVkgKiBkaXN0YW5jZVkpO1xuICAgICAgICAgIGlmIChheGlzID09PSAneCcpIHsgdmFsdWUgPSAtZGlzdGFuY2VYOyB9XG4gICAgICAgICAgaWYgKGF4aXMgPT09ICd5JykgeyB2YWx1ZSA9IC1kaXN0YW5jZVk7IH1cbiAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgbWF4VmFsdWUgPSBNYXRoLm1heC5hcHBseShNYXRoLCB2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgaWYgKGVhc2luZykgeyB2YWx1ZXMgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIGVhc2luZyh2YWwgLyBtYXhWYWx1ZSkgKiBtYXhWYWx1ZTsgfSk7IH1cbiAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdyZXZlcnNlJykgeyB2YWx1ZXMgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIGF4aXMgPyAodmFsIDwgMCkgPyB2YWwgKiAtMSA6IC12YWwgOiBNYXRoLmFicyhtYXhWYWx1ZSAtIHZhbCk7IH0pOyB9XG4gICAgfVxuICAgIHZhciBzcGFjaW5nID0gaXNSYW5nZSA/ICh2YWwyIC0gdmFsMSkgLyBtYXhWYWx1ZSA6IHZhbDE7XG4gICAgcmV0dXJuIHN0YXJ0ICsgKHNwYWNpbmcgKiAoTWF0aC5yb3VuZCh2YWx1ZXNbaV0gKiAxMDApIC8gMTAwKSkgKyB1bml0O1xuICB9XG59XG5cbi8vIFRpbWVsaW5lXG5cbmZ1bmN0aW9uIHRpbWVsaW5lKHBhcmFtcykge1xuICBpZiAoIHBhcmFtcyA9PT0gdm9pZCAwICkgcGFyYW1zID0ge307XG5cbiAgdmFyIHRsID0gYW5pbWUocGFyYW1zKTtcbiAgdGwuZHVyYXRpb24gPSAwO1xuICB0bC5hZGQgPSBmdW5jdGlvbihpbnN0YW5jZVBhcmFtcywgdGltZWxpbmVPZmZzZXQpIHtcbiAgICB2YXIgdGxJbmRleCA9IGFjdGl2ZUluc3RhbmNlcy5pbmRleE9mKHRsKTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0bC5jaGlsZHJlbjtcbiAgICBpZiAodGxJbmRleCA+IC0xKSB7IGFjdGl2ZUluc3RhbmNlcy5zcGxpY2UodGxJbmRleCwgMSk7IH1cbiAgICBmdW5jdGlvbiBwYXNzVGhyb3VnaChpbnMpIHsgaW5zLnBhc3NUaHJvdWdoID0gdHJ1ZTsgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHsgcGFzc1Rocm91Z2goY2hpbGRyZW5baV0pOyB9XG4gICAgdmFyIGluc1BhcmFtcyA9IG1lcmdlT2JqZWN0cyhpbnN0YW5jZVBhcmFtcywgcmVwbGFjZU9iamVjdFByb3BzKGRlZmF1bHRUd2VlblNldHRpbmdzLCBwYXJhbXMpKTtcbiAgICBpbnNQYXJhbXMudGFyZ2V0cyA9IGluc1BhcmFtcy50YXJnZXRzIHx8IHBhcmFtcy50YXJnZXRzO1xuICAgIHZhciB0bER1cmF0aW9uID0gdGwuZHVyYXRpb247XG4gICAgaW5zUGFyYW1zLmF1dG9wbGF5ID0gZmFsc2U7XG4gICAgaW5zUGFyYW1zLmRpcmVjdGlvbiA9IHRsLmRpcmVjdGlvbjtcbiAgICBpbnNQYXJhbXMudGltZWxpbmVPZmZzZXQgPSBpcy51bmQodGltZWxpbmVPZmZzZXQpID8gdGxEdXJhdGlvbiA6IGdldFJlbGF0aXZlVmFsdWUodGltZWxpbmVPZmZzZXQsIHRsRHVyYXRpb24pO1xuICAgIHBhc3NUaHJvdWdoKHRsKTtcbiAgICB0bC5zZWVrKGluc1BhcmFtcy50aW1lbGluZU9mZnNldCk7XG4gICAgdmFyIGlucyA9IGFuaW1lKGluc1BhcmFtcyk7XG4gICAgcGFzc1Rocm91Z2goaW5zKTtcbiAgICBjaGlsZHJlbi5wdXNoKGlucyk7XG4gICAgdmFyIHRpbWluZ3MgPSBnZXRJbnN0YW5jZVRpbWluZ3MoY2hpbGRyZW4sIHBhcmFtcyk7XG4gICAgdGwuZGVsYXkgPSB0aW1pbmdzLmRlbGF5O1xuICAgIHRsLmVuZERlbGF5ID0gdGltaW5ncy5lbmREZWxheTtcbiAgICB0bC5kdXJhdGlvbiA9IHRpbWluZ3MuZHVyYXRpb247XG4gICAgdGwuc2VlaygwKTtcbiAgICB0bC5yZXNldCgpO1xuICAgIGlmICh0bC5hdXRvcGxheSkgeyB0bC5wbGF5KCk7IH1cbiAgICByZXR1cm4gdGw7XG4gIH07XG4gIHJldHVybiB0bDtcbn1cblxuYW5pbWUudmVyc2lvbiA9ICczLjAuMSc7XG5hbmltZS5zcGVlZCA9IDE7XG5hbmltZS5ydW5uaW5nID0gYWN0aXZlSW5zdGFuY2VzO1xuYW5pbWUucmVtb3ZlID0gcmVtb3ZlVGFyZ2V0cztcbmFuaW1lLmdldCA9IGdldE9yaWdpbmFsVGFyZ2V0VmFsdWU7XG5hbmltZS5zZXQgPSBzZXRUYXJnZXRzVmFsdWU7XG5hbmltZS5jb252ZXJ0UHggPSBjb252ZXJ0UHhUb1VuaXQ7XG5hbmltZS5wYXRoID0gZ2V0UGF0aDtcbmFuaW1lLnNldERhc2hvZmZzZXQgPSBzZXREYXNob2Zmc2V0O1xuYW5pbWUuc3RhZ2dlciA9IHN0YWdnZXI7XG5hbmltZS50aW1lbGluZSA9IHRpbWVsaW5lO1xuYW5pbWUuZWFzaW5nID0gcGFyc2VFYXNpbmdzO1xuYW5pbWUucGVubmVyID0gcGVubmVyO1xuYW5pbWUucmFuZG9tID0gZnVuY3Rpb24gKG1pbiwgbWF4KSB7IHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluOyB9O1xuXG5leHBvcnQgZGVmYXVsdCBhbmltZTtcbiIsIi8qKiFcbiAqIFNvcnRhYmxlIDEuMTAuMC1yYzNcbiAqIEBhdXRob3JcdFJ1YmFYYSAgIDx0cmFzaEBydWJheGEub3JnPlxuICogQGF1dGhvclx0b3dlbm0gICAgPG93ZW4yMzM1NUBnbWFpbC5jb20+XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcbiAgICB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG5cbiAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuXG4gIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcblxuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gICAgcmV0dXJuIGFycjI7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuXG52YXIgdmVyc2lvbiA9IFwiMS4xMC4wLXJjM1wiO1xuXG5mdW5jdGlvbiB1c2VyQWdlbnQocGF0dGVybikge1xuICByZXR1cm4gISFcbiAgLypAX19QVVJFX18qL1xuICBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKHBhdHRlcm4pO1xufVxuXG52YXIgSUUxMU9yTGVzcyA9IHVzZXJBZ2VudCgvKD86VHJpZGVudC4qcnZbIDpdPzExXFwufG1zaWV8aWVtb2JpbGV8V2luZG93cyBQaG9uZSkvaSk7XG52YXIgRWRnZSA9IHVzZXJBZ2VudCgvRWRnZS9pKTtcbnZhciBGaXJlRm94ID0gdXNlckFnZW50KC9maXJlZm94L2kpO1xudmFyIFNhZmFyaSA9IHVzZXJBZ2VudCgvc2FmYXJpL2kpICYmICF1c2VyQWdlbnQoL2Nocm9tZS9pKSAmJiAhdXNlckFnZW50KC9hbmRyb2lkL2kpO1xudmFyIElPUyA9IHVzZXJBZ2VudCgvaVAoYWR8b2R8aG9uZSkvaSk7XG52YXIgQ2hyb21lRm9yQW5kcm9pZCA9IHVzZXJBZ2VudCgvY2hyb21lL2kpICYmIHVzZXJBZ2VudCgvYW5kcm9pZC9pKTtcblxudmFyIGNhcHR1cmVNb2RlID0ge1xuICBjYXB0dXJlOiBmYWxzZSxcbiAgcGFzc2l2ZTogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIG9uKGVsLCBldmVudCwgZm4pIHtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZm4sICFJRTExT3JMZXNzICYmIGNhcHR1cmVNb2RlKTtcbn1cblxuZnVuY3Rpb24gb2ZmKGVsLCBldmVudCwgZm4pIHtcbiAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgZm4sICFJRTExT3JMZXNzICYmIGNhcHR1cmVNb2RlKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyhcbi8qKkhUTUxFbGVtZW50Ki9cbmVsLFxuLyoqU3RyaW5nKi9cbnNlbGVjdG9yKSB7XG4gIGlmICghc2VsZWN0b3IpIHJldHVybjtcbiAgc2VsZWN0b3JbMF0gPT09ICc+JyAmJiAoc2VsZWN0b3IgPSBzZWxlY3Rvci5zdWJzdHJpbmcoMSkpO1xuXG4gIGlmIChlbCkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoZWwubWF0Y2hlcykge1xuICAgICAgICByZXR1cm4gZWwubWF0Y2hlcyhzZWxlY3Rvcik7XG4gICAgICB9IGVsc2UgaWYgKGVsLm1zTWF0Y2hlc1NlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBlbC5tc01hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICB9IGVsc2UgaWYgKGVsLndlYmtpdE1hdGNoZXNTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChfKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRQYXJlbnRPckhvc3QoZWwpIHtcbiAgcmV0dXJuIGVsLmhvc3QgJiYgZWwgIT09IGRvY3VtZW50ICYmIGVsLmhvc3Qubm9kZVR5cGUgPyBlbC5ob3N0IDogZWwucGFyZW50Tm9kZTtcbn1cblxuZnVuY3Rpb24gY2xvc2VzdChcbi8qKkhUTUxFbGVtZW50Ki9cbmVsLFxuLyoqU3RyaW5nKi9cbnNlbGVjdG9yLFxuLyoqSFRNTEVsZW1lbnQqL1xuY3R4LCBpbmNsdWRlQ1RYKSB7XG4gIGlmIChlbCkge1xuICAgIGN0eCA9IGN0eCB8fCBkb2N1bWVudDtcblxuICAgIGRvIHtcbiAgICAgIGlmIChzZWxlY3RvciAhPSBudWxsICYmIChzZWxlY3RvclswXSA9PT0gJz4nID8gZWwucGFyZW50Tm9kZSA9PT0gY3R4ICYmIG1hdGNoZXMoZWwsIHNlbGVjdG9yKSA6IG1hdGNoZXMoZWwsIHNlbGVjdG9yKSkgfHwgaW5jbHVkZUNUWCAmJiBlbCA9PT0gY3R4KSB7XG4gICAgICAgIHJldHVybiBlbDtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsID09PSBjdHgpIGJyZWFrO1xuICAgICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuICAgIH0gd2hpbGUgKGVsID0gZ2V0UGFyZW50T3JIb3N0KGVsKSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxudmFyIFJfU1BBQ0UgPSAvXFxzKy9nO1xuXG5mdW5jdGlvbiB0b2dnbGVDbGFzcyhlbCwgbmFtZSwgc3RhdGUpIHtcbiAgaWYgKGVsICYmIG5hbWUpIHtcbiAgICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgICBlbC5jbGFzc0xpc3Rbc3RhdGUgPyAnYWRkJyA6ICdyZW1vdmUnXShuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNsYXNzTmFtZSA9ICgnICcgKyBlbC5jbGFzc05hbWUgKyAnICcpLnJlcGxhY2UoUl9TUEFDRSwgJyAnKS5yZXBsYWNlKCcgJyArIG5hbWUgKyAnICcsICcgJyk7XG4gICAgICBlbC5jbGFzc05hbWUgPSAoY2xhc3NOYW1lICsgKHN0YXRlID8gJyAnICsgbmFtZSA6ICcnKSkucmVwbGFjZShSX1NQQUNFLCAnICcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjc3MoZWwsIHByb3AsIHZhbCkge1xuICB2YXIgc3R5bGUgPSBlbCAmJiBlbC5zdHlsZTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICBpZiAodmFsID09PSB2b2lkIDApIHtcbiAgICAgIGlmIChkb2N1bWVudC5kZWZhdWx0VmlldyAmJiBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKSB7XG4gICAgICAgIHZhbCA9IGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWwsICcnKTtcbiAgICAgIH0gZWxzZSBpZiAoZWwuY3VycmVudFN0eWxlKSB7XG4gICAgICAgIHZhbCA9IGVsLmN1cnJlbnRTdHlsZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb3AgPT09IHZvaWQgMCA/IHZhbCA6IHZhbFtwcm9wXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCEocHJvcCBpbiBzdHlsZSkgJiYgcHJvcC5pbmRleE9mKCd3ZWJraXQnKSA9PT0gLTEpIHtcbiAgICAgICAgcHJvcCA9ICctd2Via2l0LScgKyBwcm9wO1xuICAgICAgfVxuXG4gICAgICBzdHlsZVtwcm9wXSA9IHZhbCArICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/ICcnIDogJ3B4Jyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1hdHJpeChlbCwgc2VsZk9ubHkpIHtcbiAgdmFyIGFwcGxpZWRUcmFuc2Zvcm1zID0gJyc7XG5cbiAgZG8ge1xuICAgIHZhciB0cmFuc2Zvcm0gPSBjc3MoZWwsICd0cmFuc2Zvcm0nKTtcblxuICAgIGlmICh0cmFuc2Zvcm0gJiYgdHJhbnNmb3JtICE9PSAnbm9uZScpIHtcbiAgICAgIGFwcGxpZWRUcmFuc2Zvcm1zID0gdHJhbnNmb3JtICsgJyAnICsgYXBwbGllZFRyYW5zZm9ybXM7XG4gICAgfVxuICAgIC8qIGpzaGludCBib3NzOnRydWUgKi9cblxuICB9IHdoaWxlICghc2VsZk9ubHkgJiYgKGVsID0gZWwucGFyZW50Tm9kZSkpO1xuXG4gIHZhciBtYXRyaXhGbiA9IHdpbmRvdy5ET01NYXRyaXggfHwgd2luZG93LldlYktpdENTU01hdHJpeCB8fCB3aW5kb3cuQ1NTTWF0cml4O1xuICAvKmpzaGludCAtVzA1NiAqL1xuXG4gIHJldHVybiBtYXRyaXhGbiAmJiBuZXcgbWF0cml4Rm4oYXBwbGllZFRyYW5zZm9ybXMpO1xufVxuXG5mdW5jdGlvbiBmaW5kKGN0eCwgdGFnTmFtZSwgaXRlcmF0b3IpIHtcbiAgaWYgKGN0eCkge1xuICAgIHZhciBsaXN0ID0gY3R4LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZ05hbWUpLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgbiA9IGxpc3QubGVuZ3RoO1xuXG4gICAgaWYgKGl0ZXJhdG9yKSB7XG4gICAgICBmb3IgKDsgaSA8IG47IGkrKykge1xuICAgICAgICBpdGVyYXRvcihsaXN0W2ldLCBpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuXG4gIHJldHVybiBbXTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpIHtcbiAgaWYgKElFMTFPckxlc3MpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50O1xuICB9XG59XG4vKipcclxuICogUmV0dXJucyB0aGUgXCJib3VuZGluZyBjbGllbnQgcmVjdFwiIG9mIGdpdmVuIGVsZW1lbnRcclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgICAgICAgICAgICAgICAgICAgICBUaGUgZWxlbWVudCB3aG9zZSBib3VuZGluZ0NsaWVudFJlY3QgaXMgd2FudGVkXHJcbiAqIEBwYXJhbSAge1tCb29sZWFuXX0gcmVsYXRpdmVUb0NvbnRhaW5pbmdCbG9jayAgV2hldGhlciB0aGUgcmVjdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGNvbnRhaW5pbmcgYmxvY2sgb2YgKGluY2x1ZGluZykgdGhlIGNvbnRhaW5lclxyXG4gKiBAcGFyYW0gIHtbQm9vbGVhbl19IHJlbGF0aXZlVG9Ob25TdGF0aWNQYXJlbnQgIFdoZXRoZXIgdGhlIHJlY3Qgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSByZWxhdGl2ZSBwYXJlbnQgb2YgKGluY2x1ZGluZykgdGhlIGNvbnRhaWVuclxyXG4gKiBAcGFyYW0gIHtbQm9vbGVhbl19IHVuZG9TY2FsZSAgICAgICAgICAgICAgICAgIFdoZXRoZXIgdGhlIGNvbnRhaW5lcidzIHNjYWxlKCkgc2hvdWxkIGJlIHVuZG9uZVxyXG4gKiBAcGFyYW0gIHtbSFRNTEVsZW1lbnRdfSBjb250YWluZXIgICAgICAgICAgICAgIFRoZSBwYXJlbnQgdGhlIGVsZW1lbnQgd2lsbCBiZSBwbGFjZWQgaW5cclxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgYm91bmRpbmdDbGllbnRSZWN0IG9mIGVsLCB3aXRoIHNwZWNpZmllZCBhZGp1c3RtZW50c1xyXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRSZWN0KGVsLCByZWxhdGl2ZVRvQ29udGFpbmluZ0Jsb2NrLCByZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50LCB1bmRvU2NhbGUsIGNvbnRhaW5lcikge1xuICBpZiAoIWVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAmJiBlbCAhPT0gd2luZG93KSByZXR1cm47XG4gIHZhciBlbFJlY3QsIHRvcCwgbGVmdCwgYm90dG9tLCByaWdodCwgaGVpZ2h0LCB3aWR0aDtcblxuICBpZiAoZWwgIT09IHdpbmRvdyAmJiBlbCAhPT0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpKSB7XG4gICAgZWxSZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgdG9wID0gZWxSZWN0LnRvcDtcbiAgICBsZWZ0ID0gZWxSZWN0LmxlZnQ7XG4gICAgYm90dG9tID0gZWxSZWN0LmJvdHRvbTtcbiAgICByaWdodCA9IGVsUmVjdC5yaWdodDtcbiAgICBoZWlnaHQgPSBlbFJlY3QuaGVpZ2h0O1xuICAgIHdpZHRoID0gZWxSZWN0LndpZHRoO1xuICB9IGVsc2Uge1xuICAgIHRvcCA9IDA7XG4gICAgbGVmdCA9IDA7XG4gICAgYm90dG9tID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIHJpZ2h0ID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIHdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gIH1cblxuICBpZiAoKHJlbGF0aXZlVG9Db250YWluaW5nQmxvY2sgfHwgcmVsYXRpdmVUb05vblN0YXRpY1BhcmVudCkgJiYgZWwgIT09IHdpbmRvdykge1xuICAgIC8vIEFkanVzdCBmb3IgdHJhbnNsYXRlKClcbiAgICBjb250YWluZXIgPSBjb250YWluZXIgfHwgZWwucGFyZW50Tm9kZTsgLy8gc29sdmVzICMxMTIzIChzZWU6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zNzk1MzgwNi82MDg4MzEyKVxuICAgIC8vIE5vdCBuZWVkZWQgb24gPD0gSUUxMVxuXG4gICAgaWYgKCFJRTExT3JMZXNzKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGlmIChjb250YWluZXIgJiYgY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAmJiAoY3NzKGNvbnRhaW5lciwgJ3RyYW5zZm9ybScpICE9PSAnbm9uZScgfHwgcmVsYXRpdmVUb05vblN0YXRpY1BhcmVudCAmJiBjc3MoY29udGFpbmVyLCAncG9zaXRpb24nKSAhPT0gJ3N0YXRpYycpKSB7XG4gICAgICAgICAgdmFyIGNvbnRhaW5lclJlY3QgPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IC8vIFNldCByZWxhdGl2ZSB0byBlZGdlcyBvZiBwYWRkaW5nIGJveCBvZiBjb250YWluZXJcblxuICAgICAgICAgIHRvcCAtPSBjb250YWluZXJSZWN0LnRvcCArIHBhcnNlSW50KGNzcyhjb250YWluZXIsICdib3JkZXItdG9wLXdpZHRoJykpO1xuICAgICAgICAgIGxlZnQgLT0gY29udGFpbmVyUmVjdC5sZWZ0ICsgcGFyc2VJbnQoY3NzKGNvbnRhaW5lciwgJ2JvcmRlci1sZWZ0LXdpZHRoJykpO1xuICAgICAgICAgIGJvdHRvbSA9IHRvcCArIGVsUmVjdC5oZWlnaHQ7XG4gICAgICAgICAgcmlnaHQgPSBsZWZ0ICsgZWxSZWN0LndpZHRoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8qIGpzaGludCBib3NzOnRydWUgKi9cblxuICAgICAgfSB3aGlsZSAoY29udGFpbmVyID0gY29udGFpbmVyLnBhcmVudE5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh1bmRvU2NhbGUgJiYgZWwgIT09IHdpbmRvdykge1xuICAgIC8vIEFkanVzdCBmb3Igc2NhbGUoKVxuICAgIHZhciBlbE1hdHJpeCA9IG1hdHJpeChjb250YWluZXIgfHwgZWwpLFxuICAgICAgICBzY2FsZVggPSBlbE1hdHJpeCAmJiBlbE1hdHJpeC5hLFxuICAgICAgICBzY2FsZVkgPSBlbE1hdHJpeCAmJiBlbE1hdHJpeC5kO1xuXG4gICAgaWYgKGVsTWF0cml4KSB7XG4gICAgICB0b3AgLz0gc2NhbGVZO1xuICAgICAgbGVmdCAvPSBzY2FsZVg7XG4gICAgICB3aWR0aCAvPSBzY2FsZVg7XG4gICAgICBoZWlnaHQgLz0gc2NhbGVZO1xuICAgICAgYm90dG9tID0gdG9wICsgaGVpZ2h0O1xuICAgICAgcmlnaHQgPSBsZWZ0ICsgd2lkdGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0b3A6IHRvcCxcbiAgICBsZWZ0OiBsZWZ0LFxuICAgIGJvdHRvbTogYm90dG9tLFxuICAgIHJpZ2h0OiByaWdodCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcbn1cbi8qKlxyXG4gKiBDaGVja3MgaWYgYSBzaWRlIG9mIGFuIGVsZW1lbnQgaXMgc2Nyb2xsZWQgcGFzdCBhIHNpZGUgb2YgaXRzIHBhcmVudHNcclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICBlbCAgICAgICAgICAgVGhlIGVsZW1lbnQgd2hvJ3Mgc2lkZSBiZWluZyBzY3JvbGxlZCBvdXQgb2YgdmlldyBpcyBpbiBxdWVzdGlvblxyXG4gKiBAcGFyYW0gIHtbRE9NUmVjdF19ICAgIHJlY3QgICAgICAgICBPcHRpb25hbCByZWN0IG9mIGBlbGAgdG8gdXNlXHJcbiAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgZWxTaWRlICAgICAgIFNpZGUgb2YgdGhlIGVsZW1lbnQgaW4gcXVlc3Rpb24gKCd0b3AnLCAnbGVmdCcsICdyaWdodCcsICdib3R0b20nKVxyXG4gKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgIHBhcmVudFNpZGUgICBTaWRlIG9mIHRoZSBwYXJlbnQgaW4gcXVlc3Rpb24gKCd0b3AnLCAnbGVmdCcsICdyaWdodCcsICdib3R0b20nKVxyXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gICAgICAgICAgICAgICBUaGUgcGFyZW50IHNjcm9sbCBlbGVtZW50IHRoYXQgdGhlIGVsJ3Mgc2lkZSBpcyBzY3JvbGxlZCBwYXN0LCBvciBudWxsIGlmIHRoZXJlIGlzIG5vIHN1Y2ggZWxlbWVudFxyXG4gKi9cblxuXG5mdW5jdGlvbiBpc1Njcm9sbGVkUGFzdChlbCwgcmVjdCwgZWxTaWRlLCBwYXJlbnRTaWRlKSB7XG4gIHZhciBwYXJlbnQgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbCwgdHJ1ZSksXG4gICAgICBlbFNpZGVWYWwgPSAocmVjdCA/IHJlY3QgOiBnZXRSZWN0KGVsKSlbZWxTaWRlXTtcbiAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuXG4gIHdoaWxlIChwYXJlbnQpIHtcbiAgICB2YXIgcGFyZW50U2lkZVZhbCA9IGdldFJlY3QocGFyZW50KVtwYXJlbnRTaWRlXSxcbiAgICAgICAgdmlzaWJsZSA9IHZvaWQgMDtcblxuICAgIGlmIChwYXJlbnRTaWRlID09PSAndG9wJyB8fCBwYXJlbnRTaWRlID09PSAnbGVmdCcpIHtcbiAgICAgIHZpc2libGUgPSBlbFNpZGVWYWwgPj0gcGFyZW50U2lkZVZhbDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmlzaWJsZSA9IGVsU2lkZVZhbCA8PSBwYXJlbnRTaWRlVmFsO1xuICAgIH1cblxuICAgIGlmICghdmlzaWJsZSkgcmV0dXJuIHBhcmVudDtcbiAgICBpZiAocGFyZW50ID09PSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCkpIGJyZWFrO1xuICAgIHBhcmVudCA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KHBhcmVudCwgZmFsc2UpO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXHJcbiAqIEdldHMgbnRoIGNoaWxkIG9mIGVsLCBpZ25vcmluZyBoaWRkZW4gY2hpbGRyZW4sIHNvcnRhYmxlJ3MgZWxlbWVudHMgKGRvZXMgbm90IGlnbm9yZSBjbG9uZSBpZiBpdCdzIHZpc2libGUpXHJcbiAqIGFuZCBub24tZHJhZ2dhYmxlIGVsZW1lbnRzXHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbCAgICAgICBUaGUgcGFyZW50IGVsZW1lbnRcclxuICogQHBhcmFtICB7TnVtYmVyfSBjaGlsZE51bSAgICAgIFRoZSBpbmRleCBvZiB0aGUgY2hpbGRcclxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zICAgICAgIFBhcmVudCBTb3J0YWJsZSdzIG9wdGlvbnNcclxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9ICAgICAgICAgIFRoZSBjaGlsZCBhdCBpbmRleCBjaGlsZE51bSwgb3IgbnVsbCBpZiBub3QgZm91bmRcclxuICovXG5cblxuZnVuY3Rpb24gZ2V0Q2hpbGQoZWwsIGNoaWxkTnVtLCBvcHRpb25zKSB7XG4gIHZhciBjdXJyZW50Q2hpbGQgPSAwLFxuICAgICAgaSA9IDAsXG4gICAgICBjaGlsZHJlbiA9IGVsLmNoaWxkcmVuO1xuXG4gIHdoaWxlIChpIDwgY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgaWYgKGNoaWxkcmVuW2ldLnN0eWxlLmRpc3BsYXkgIT09ICdub25lJyAmJiBjaGlsZHJlbltpXSAhPT0gU29ydGFibGUuZ2hvc3QgJiYgY2hpbGRyZW5baV0gIT09IFNvcnRhYmxlLmRyYWdnZWQgJiYgY2xvc2VzdChjaGlsZHJlbltpXSwgb3B0aW9ucy5kcmFnZ2FibGUsIGVsLCBmYWxzZSkpIHtcbiAgICAgIGlmIChjdXJyZW50Q2hpbGQgPT09IGNoaWxkTnVtKSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbltpXTtcbiAgICAgIH1cblxuICAgICAgY3VycmVudENoaWxkKys7XG4gICAgfVxuXG4gICAgaSsrO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vKipcclxuICogR2V0cyB0aGUgbGFzdCBjaGlsZCBpbiB0aGUgZWwsIGlnbm9yaW5nIGdob3N0RWwgb3IgaW52aXNpYmxlIGVsZW1lbnRzIChjbG9uZXMpXHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbCAgICAgICBQYXJlbnQgZWxlbWVudFxyXG4gKiBAcGFyYW0gIHtzZWxlY3Rvcn0gc2VsZWN0b3IgICAgQW55IG90aGVyIGVsZW1lbnRzIHRoYXQgc2hvdWxkIGJlIGlnbm9yZWRcclxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9ICAgICAgICAgIFRoZSBsYXN0IGNoaWxkLCBpZ25vcmluZyBnaG9zdEVsXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGxhc3RDaGlsZChlbCwgc2VsZWN0b3IpIHtcbiAgdmFyIGxhc3QgPSBlbC5sYXN0RWxlbWVudENoaWxkO1xuXG4gIHdoaWxlIChsYXN0ICYmIChsYXN0ID09PSBTb3J0YWJsZS5naG9zdCB8fCBjc3MobGFzdCwgJ2Rpc3BsYXknKSA9PT0gJ25vbmUnIHx8IHNlbGVjdG9yICYmICFtYXRjaGVzKGxhc3QsIHNlbGVjdG9yKSkpIHtcbiAgICBsYXN0ID0gbGFzdC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICB9XG5cbiAgcmV0dXJuIGxhc3QgfHwgbnVsbDtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBpbmRleCBvZiBhbiBlbGVtZW50IHdpdGhpbiBpdHMgcGFyZW50IGZvciBhIHNlbGVjdGVkIHNldCBvZlxyXG4gKiBlbGVtZW50c1xyXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWxcclxuICogQHBhcmFtICB7c2VsZWN0b3J9IHNlbGVjdG9yXHJcbiAqIEByZXR1cm4ge251bWJlcn1cclxuICovXG5cblxuZnVuY3Rpb24gaW5kZXgoZWwsIHNlbGVjdG9yKSB7XG4gIHZhciBpbmRleCA9IDA7XG5cbiAgaWYgKCFlbCB8fCAhZWwucGFyZW50Tm9kZSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cblxuICB3aGlsZSAoZWwgPSBlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgaWYgKGVsLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgIT09ICdURU1QTEFURScgJiYgZWwgIT09IFNvcnRhYmxlLmNsb25lICYmICghc2VsZWN0b3IgfHwgbWF0Y2hlcyhlbCwgc2VsZWN0b3IpKSkge1xuICAgICAgaW5kZXgrKztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW5kZXg7XG59XG4vKipcclxuICogUmV0dXJucyB0aGUgc2Nyb2xsIG9mZnNldCBvZiB0aGUgZ2l2ZW4gZWxlbWVudCwgYWRkZWQgd2l0aCBhbGwgdGhlIHNjcm9sbCBvZmZzZXRzIG9mIHBhcmVudCBlbGVtZW50cy5cclxuICogVGhlIHZhbHVlIGlzIHJldHVybmVkIGluIHJlYWwgcGl4ZWxzLlxyXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWxcclxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgICAgIE9mZnNldHMgaW4gdGhlIGZvcm1hdCBvZiBbbGVmdCwgdG9wXVxyXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRSZWxhdGl2ZVNjcm9sbE9mZnNldChlbCkge1xuICB2YXIgb2Zmc2V0TGVmdCA9IDAsXG4gICAgICBvZmZzZXRUb3AgPSAwLFxuICAgICAgd2luU2Nyb2xsZXIgPSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCk7XG5cbiAgaWYgKGVsKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIGVsTWF0cml4ID0gbWF0cml4KGVsKSxcbiAgICAgICAgICBzY2FsZVggPSBlbE1hdHJpeC5hLFxuICAgICAgICAgIHNjYWxlWSA9IGVsTWF0cml4LmQ7XG4gICAgICBvZmZzZXRMZWZ0ICs9IGVsLnNjcm9sbExlZnQgKiBzY2FsZVg7XG4gICAgICBvZmZzZXRUb3AgKz0gZWwuc2Nyb2xsVG9wICogc2NhbGVZO1xuICAgIH0gd2hpbGUgKGVsICE9PSB3aW5TY3JvbGxlciAmJiAoZWwgPSBlbC5wYXJlbnROb2RlKSk7XG4gIH1cblxuICByZXR1cm4gW29mZnNldExlZnQsIG9mZnNldFRvcF07XG59XG4vKipcclxuICogUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG9iamVjdCB3aXRoaW4gdGhlIGdpdmVuIGFycmF5XHJcbiAqIEBwYXJhbSAge0FycmF5fSBhcnIgICBBcnJheSB0aGF0IG1heSBvciBtYXkgbm90IGhvbGQgdGhlIG9iamVjdFxyXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9iaiAgQW4gb2JqZWN0IHRoYXQgaGFzIGEga2V5LXZhbHVlIHBhaXIgdW5pcXVlIHRvIGFuZCBpZGVudGljYWwgdG8gYSBrZXktdmFsdWUgcGFpciBpbiB0aGUgb2JqZWN0IHlvdSB3YW50IHRvIGZpbmRcclxuICogQHJldHVybiB7TnVtYmVyfSAgICAgIFRoZSBpbmRleCBvZiB0aGUgb2JqZWN0IGluIHRoZSBhcnJheSwgb3IgLTFcclxuICovXG5cblxuZnVuY3Rpb24gaW5kZXhPZk9iamVjdChhcnIsIG9iaikge1xuICBmb3IgKHZhciBpIGluIGFycikge1xuICAgIGlmICghYXJyLmhhc093blByb3BlcnR5KGkpKSBjb250aW51ZTtcblxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSAmJiBvYmpba2V5XSA9PT0gYXJyW2ldW2tleV0pIHJldHVybiBOdW1iZXIoaSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xO1xufVxuXG5mdW5jdGlvbiBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbCwgaW5jbHVkZVNlbGYpIHtcbiAgLy8gc2tpcCB0byB3aW5kb3dcbiAgaWYgKCFlbCB8fCAhZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSByZXR1cm4gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICB2YXIgZWxlbSA9IGVsO1xuICB2YXIgZ290U2VsZiA9IGZhbHNlO1xuXG4gIGRvIHtcbiAgICAvLyB3ZSBkb24ndCBuZWVkIHRvIGdldCBlbGVtIGNzcyBpZiBpdCBpc24ndCBldmVuIG92ZXJmbG93aW5nIGluIHRoZSBmaXJzdCBwbGFjZSAocGVyZm9ybWFuY2UpXG4gICAgaWYgKGVsZW0uY2xpZW50V2lkdGggPCBlbGVtLnNjcm9sbFdpZHRoIHx8IGVsZW0uY2xpZW50SGVpZ2h0IDwgZWxlbS5zY3JvbGxIZWlnaHQpIHtcbiAgICAgIHZhciBlbGVtQ1NTID0gY3NzKGVsZW0pO1xuXG4gICAgICBpZiAoZWxlbS5jbGllbnRXaWR0aCA8IGVsZW0uc2Nyb2xsV2lkdGggJiYgKGVsZW1DU1Mub3ZlcmZsb3dYID09ICdhdXRvJyB8fCBlbGVtQ1NTLm92ZXJmbG93WCA9PSAnc2Nyb2xsJykgfHwgZWxlbS5jbGllbnRIZWlnaHQgPCBlbGVtLnNjcm9sbEhlaWdodCAmJiAoZWxlbUNTUy5vdmVyZmxvd1kgPT0gJ2F1dG8nIHx8IGVsZW1DU1Mub3ZlcmZsb3dZID09ICdzY3JvbGwnKSkge1xuICAgICAgICBpZiAoIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0IHx8IGVsZW0gPT09IGRvY3VtZW50LmJvZHkpIHJldHVybiBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCk7XG4gICAgICAgIGlmIChnb3RTZWxmIHx8IGluY2x1ZGVTZWxmKSByZXR1cm4gZWxlbTtcbiAgICAgICAgZ290U2VsZiA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIC8qIGpzaGludCBib3NzOnRydWUgKi9cblxuICB9IHdoaWxlIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKTtcblxuICByZXR1cm4gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xufVxuXG5mdW5jdGlvbiBleHRlbmQoZHN0LCBzcmMpIHtcbiAgaWYgKGRzdCAmJiBzcmMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgICBpZiAoc3JjLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgZHN0W2tleV0gPSBzcmNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZHN0O1xufVxuXG5mdW5jdGlvbiBpc1JlY3RFcXVhbChyZWN0MSwgcmVjdDIpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQocmVjdDEudG9wKSA9PT0gTWF0aC5yb3VuZChyZWN0Mi50b3ApICYmIE1hdGgucm91bmQocmVjdDEubGVmdCkgPT09IE1hdGgucm91bmQocmVjdDIubGVmdCkgJiYgTWF0aC5yb3VuZChyZWN0MS5oZWlnaHQpID09PSBNYXRoLnJvdW5kKHJlY3QyLmhlaWdodCkgJiYgTWF0aC5yb3VuZChyZWN0MS53aWR0aCkgPT09IE1hdGgucm91bmQocmVjdDIud2lkdGgpO1xufVxuXG52YXIgX3Rocm90dGxlVGltZW91dDtcblxuZnVuY3Rpb24gdGhyb3R0bGUoY2FsbGJhY2ssIG1zKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFfdGhyb3R0bGVUaW1lb3V0KSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjYWxsYmFjay5jYWxsKF90aGlzLCBhcmdzWzBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrLmFwcGx5KF90aGlzLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgX3Rocm90dGxlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhyb3R0bGVUaW1lb3V0ID0gdm9pZCAwO1xuICAgICAgfSwgbXMpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FuY2VsVGhyb3R0bGUoKSB7XG4gIGNsZWFyVGltZW91dChfdGhyb3R0bGVUaW1lb3V0KTtcbiAgX3Rocm90dGxlVGltZW91dCA9IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gc2Nyb2xsQnkoZWwsIHgsIHkpIHtcbiAgZWwuc2Nyb2xsTGVmdCArPSB4O1xuICBlbC5zY3JvbGxUb3AgKz0geTtcbn1cblxuZnVuY3Rpb24gY2xvbmUoZWwpIHtcbiAgdmFyIFBvbHltZXIgPSB3aW5kb3cuUG9seW1lcjtcbiAgdmFyICQgPSB3aW5kb3cualF1ZXJ5IHx8IHdpbmRvdy5aZXB0bztcblxuICBpZiAoUG9seW1lciAmJiBQb2x5bWVyLmRvbSkge1xuICAgIHJldHVybiBQb2x5bWVyLmRvbShlbCkuY2xvbmVOb2RlKHRydWUpO1xuICB9IGVsc2UgaWYgKCQpIHtcbiAgICByZXR1cm4gJChlbCkuY2xvbmUodHJ1ZSlbMF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVsLmNsb25lTm9kZSh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRSZWN0KGVsLCByZWN0KSB7XG4gIGNzcyhlbCwgJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJyk7XG4gIGNzcyhlbCwgJ3RvcCcsIHJlY3QudG9wKTtcbiAgY3NzKGVsLCAnbGVmdCcsIHJlY3QubGVmdCk7XG4gIGNzcyhlbCwgJ3dpZHRoJywgcmVjdC53aWR0aCk7XG4gIGNzcyhlbCwgJ2hlaWdodCcsIHJlY3QuaGVpZ2h0KTtcbn1cblxuZnVuY3Rpb24gdW5zZXRSZWN0KGVsKSB7XG4gIGNzcyhlbCwgJ3Bvc2l0aW9uJywgJycpO1xuICBjc3MoZWwsICd0b3AnLCAnJyk7XG4gIGNzcyhlbCwgJ2xlZnQnLCAnJyk7XG4gIGNzcyhlbCwgJ3dpZHRoJywgJycpO1xuICBjc3MoZWwsICdoZWlnaHQnLCAnJyk7XG59XG5cbnZhciBleHBhbmRvID0gJ1NvcnRhYmxlJyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG5mdW5jdGlvbiBBbmltYXRpb25TdGF0ZU1hbmFnZXIoKSB7XG4gIHZhciBhbmltYXRpb25TdGF0ZXMgPSBbXSxcbiAgICAgIGFuaW1hdGlvbkNhbGxiYWNrSWQ7XG4gIHJldHVybiB7XG4gICAgY2FwdHVyZUFuaW1hdGlvblN0YXRlOiBmdW5jdGlvbiBjYXB0dXJlQW5pbWF0aW9uU3RhdGUoKSB7XG4gICAgICBhbmltYXRpb25TdGF0ZXMgPSBbXTtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmFuaW1hdGlvbikgcmV0dXJuO1xuICAgICAgdmFyIGNoaWxkcmVuID0gW10uc2xpY2UuY2FsbCh0aGlzLmVsLmNoaWxkcmVuKTtcbiAgICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChjc3MoY2hpbGQsICdkaXNwbGF5JykgPT09ICdub25lJyB8fCBjaGlsZCA9PT0gU29ydGFibGUuZ2hvc3QpIHJldHVybjtcbiAgICAgICAgYW5pbWF0aW9uU3RhdGVzLnB1c2goe1xuICAgICAgICAgIHRhcmdldDogY2hpbGQsXG4gICAgICAgICAgcmVjdDogZ2V0UmVjdChjaGlsZClcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBmcm9tUmVjdCA9IGdldFJlY3QoY2hpbGQpOyAvLyBJZiBhbmltYXRpbmc6IGNvbXBlbnNhdGUgZm9yIGN1cnJlbnQgYW5pbWF0aW9uXG5cbiAgICAgICAgaWYgKGNoaWxkLnRoaXNBbmltYXRpb25EdXJhdGlvbikge1xuICAgICAgICAgIHZhciBjaGlsZE1hdHJpeCA9IG1hdHJpeChjaGlsZCwgdHJ1ZSk7XG5cbiAgICAgICAgICBpZiAoY2hpbGRNYXRyaXgpIHtcbiAgICAgICAgICAgIGZyb21SZWN0LnRvcCAtPSBjaGlsZE1hdHJpeC5mO1xuICAgICAgICAgICAgZnJvbVJlY3QubGVmdCAtPSBjaGlsZE1hdHJpeC5lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkLmZyb21SZWN0ID0gZnJvbVJlY3Q7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGFkZEFuaW1hdGlvblN0YXRlOiBmdW5jdGlvbiBhZGRBbmltYXRpb25TdGF0ZShzdGF0ZSkge1xuICAgICAgYW5pbWF0aW9uU3RhdGVzLnB1c2goc3RhdGUpO1xuICAgIH0sXG4gICAgcmVtb3ZlQW5pbWF0aW9uU3RhdGU6IGZ1bmN0aW9uIHJlbW92ZUFuaW1hdGlvblN0YXRlKHRhcmdldCkge1xuICAgICAgYW5pbWF0aW9uU3RhdGVzLnNwbGljZShpbmRleE9mT2JqZWN0KGFuaW1hdGlvblN0YXRlcywge1xuICAgICAgICB0YXJnZXQ6IHRhcmdldFxuICAgICAgfSksIDEpO1xuICAgIH0sXG4gICAgYW5pbWF0ZUFsbDogZnVuY3Rpb24gYW5pbWF0ZUFsbChjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYW5pbWF0aW9uKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChhbmltYXRpb25DYWxsYmFja0lkKTtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgYW5pbWF0aW5nID0gZmFsc2UsXG4gICAgICAgICAgYW5pbWF0aW9uVGltZSA9IDA7XG4gICAgICBhbmltYXRpb25TdGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIHRpbWUgPSAwLFxuICAgICAgICAgICAgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0LFxuICAgICAgICAgICAgZnJvbVJlY3QgPSB0YXJnZXQuZnJvbVJlY3QsXG4gICAgICAgICAgICB0b1JlY3QgPSBnZXRSZWN0KHRhcmdldCksXG4gICAgICAgICAgICBwcmV2RnJvbVJlY3QgPSB0YXJnZXQucHJldkZyb21SZWN0LFxuICAgICAgICAgICAgcHJldlRvUmVjdCA9IHRhcmdldC5wcmV2VG9SZWN0LFxuICAgICAgICAgICAgYW5pbWF0aW5nUmVjdCA9IHN0YXRlLnJlY3QsXG4gICAgICAgICAgICB0YXJnZXRNYXRyaXggPSBtYXRyaXgodGFyZ2V0LCB0cnVlKTtcblxuICAgICAgICBpZiAodGFyZ2V0TWF0cml4KSB7XG4gICAgICAgICAgLy8gQ29tcGVuc2F0ZSBmb3IgY3VycmVudCBhbmltYXRpb25cbiAgICAgICAgICB0b1JlY3QudG9wIC09IHRhcmdldE1hdHJpeC5mO1xuICAgICAgICAgIHRvUmVjdC5sZWZ0IC09IHRhcmdldE1hdHJpeC5lO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0LnRvUmVjdCA9IHRvUmVjdDsgLy8gSWYgZWxlbWVudCBpcyBzY3JvbGxlZCBvdXQgb2YgdmlldzogRG8gbm90IGFuaW1hdGVcblxuICAgICAgICBpZiAoKGlzU2Nyb2xsZWRQYXN0KHRhcmdldCwgdG9SZWN0LCAnYm90dG9tJywgJ3RvcCcpIHx8IGlzU2Nyb2xsZWRQYXN0KHRhcmdldCwgdG9SZWN0LCAndG9wJywgJ2JvdHRvbScpIHx8IGlzU2Nyb2xsZWRQYXN0KHRhcmdldCwgdG9SZWN0LCAncmlnaHQnLCAnbGVmdCcpIHx8IGlzU2Nyb2xsZWRQYXN0KHRhcmdldCwgdG9SZWN0LCAnbGVmdCcsICdyaWdodCcpKSAmJiAoaXNTY3JvbGxlZFBhc3QodGFyZ2V0LCBhbmltYXRpbmdSZWN0LCAnYm90dG9tJywgJ3RvcCcpIHx8IGlzU2Nyb2xsZWRQYXN0KHRhcmdldCwgYW5pbWF0aW5nUmVjdCwgJ3RvcCcsICdib3R0b20nKSB8fCBpc1Njcm9sbGVkUGFzdCh0YXJnZXQsIGFuaW1hdGluZ1JlY3QsICdyaWdodCcsICdsZWZ0JykgfHwgaXNTY3JvbGxlZFBhc3QodGFyZ2V0LCBhbmltYXRpbmdSZWN0LCAnbGVmdCcsICdyaWdodCcpKSAmJiAoaXNTY3JvbGxlZFBhc3QodGFyZ2V0LCBmcm9tUmVjdCwgJ2JvdHRvbScsICd0b3AnKSB8fCBpc1Njcm9sbGVkUGFzdCh0YXJnZXQsIGZyb21SZWN0LCAndG9wJywgJ2JvdHRvbScpIHx8IGlzU2Nyb2xsZWRQYXN0KHRhcmdldCwgZnJvbVJlY3QsICdyaWdodCcsICdsZWZ0JykgfHwgaXNTY3JvbGxlZFBhc3QodGFyZ2V0LCBmcm9tUmVjdCwgJ2xlZnQnLCAncmlnaHQnKSkpIHJldHVybjtcblxuICAgICAgICBpZiAodGFyZ2V0LnRoaXNBbmltYXRpb25EdXJhdGlvbikge1xuICAgICAgICAgIC8vIENvdWxkIGFsc28gY2hlY2sgaWYgYW5pbWF0aW5nUmVjdCBpcyBiZXR3ZWVuIGZyb21SZWN0IGFuZCB0b1JlY3RcbiAgICAgICAgICBpZiAoaXNSZWN0RXF1YWwocHJldkZyb21SZWN0LCB0b1JlY3QpICYmICFpc1JlY3RFcXVhbChmcm9tUmVjdCwgdG9SZWN0KSAmJiAvLyBNYWtlIHN1cmUgYW5pbWF0aW5nUmVjdCBpcyBvbiBsaW5lIGJldHdlZW4gdG9SZWN0ICYgZnJvbVJlY3RcbiAgICAgICAgICAoYW5pbWF0aW5nUmVjdC50b3AgLSB0b1JlY3QudG9wKSAvIChhbmltYXRpbmdSZWN0LmxlZnQgLSB0b1JlY3QubGVmdCkgPT09IChmcm9tUmVjdC50b3AgLSB0b1JlY3QudG9wKSAvIChmcm9tUmVjdC5sZWZ0IC0gdG9SZWN0LmxlZnQpKSB7XG4gICAgICAgICAgICAvLyBJZiByZXR1cm5pbmcgdG8gc2FtZSBwbGFjZSBhcyBzdGFydGVkIGZyb20gYW5pbWF0aW9uIGFuZCBvbiBzYW1lIGF4aXNcbiAgICAgICAgICAgIHRpbWUgPSBjYWxjdWxhdGVSZWFsVGltZShhbmltYXRpbmdSZWN0LCBwcmV2RnJvbVJlY3QsIHByZXZUb1JlY3QsIF90aGlzLm9wdGlvbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBpZiBmcm9tUmVjdCAhPSB0b1JlY3Q6IGFuaW1hdGVcblxuXG4gICAgICAgIGlmICghaXNSZWN0RXF1YWwodG9SZWN0LCBmcm9tUmVjdCkpIHtcbiAgICAgICAgICB0YXJnZXQucHJldkZyb21SZWN0ID0gZnJvbVJlY3Q7XG4gICAgICAgICAgdGFyZ2V0LnByZXZUb1JlY3QgPSB0b1JlY3Q7XG5cbiAgICAgICAgICBpZiAoIXRpbWUpIHtcbiAgICAgICAgICAgIHRpbWUgPSBfdGhpcy5vcHRpb25zLmFuaW1hdGlvbjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpcy5hbmltYXRlKHRhcmdldCwgYW5pbWF0aW5nUmVjdCwgdGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGltZSkge1xuICAgICAgICAgIGFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgYW5pbWF0aW9uVGltZSA9IE1hdGgubWF4KGFuaW1hdGlvblRpbWUsIHRpbWUpO1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0YXJnZXQuYW5pbWF0aW9uUmVzZXRUaW1lcik7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGlvblJlc2V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRhcmdldC5hbmltYXRpb25UaW1lID0gMDtcbiAgICAgICAgICAgIHRhcmdldC5wcmV2RnJvbVJlY3QgPSBudWxsO1xuICAgICAgICAgICAgdGFyZ2V0LmZyb21SZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRhcmdldC5wcmV2VG9SZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuICAgICAgICAgIH0sIHRpbWUpO1xuICAgICAgICAgIHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSB0aW1lO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNsZWFyVGltZW91dChhbmltYXRpb25DYWxsYmFja0lkKTtcblxuICAgICAgaWYgKCFhbmltYXRpbmcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuaW1hdGlvbkNhbGxiYWNrSWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuICAgICAgICB9LCBhbmltYXRpb25UaW1lKTtcbiAgICAgIH1cblxuICAgICAgYW5pbWF0aW9uU3RhdGVzID0gW107XG4gICAgfSxcbiAgICBhbmltYXRlOiBmdW5jdGlvbiBhbmltYXRlKHRhcmdldCwgcHJldiwgZHVyYXRpb24pIHtcbiAgICAgIGlmIChkdXJhdGlvbikge1xuICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNpdGlvbicsICcnKTtcbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICcnKTtcbiAgICAgICAgdmFyIGN1cnJlbnRSZWN0ID0gZ2V0UmVjdCh0YXJnZXQpLFxuICAgICAgICAgICAgZWxNYXRyaXggPSBtYXRyaXgodGhpcy5lbCksXG4gICAgICAgICAgICBzY2FsZVggPSBlbE1hdHJpeCAmJiBlbE1hdHJpeC5hLFxuICAgICAgICAgICAgc2NhbGVZID0gZWxNYXRyaXggJiYgZWxNYXRyaXguZCxcbiAgICAgICAgICAgIHRyYW5zbGF0ZVggPSAocHJldi5sZWZ0IC0gY3VycmVudFJlY3QubGVmdCkgLyAoc2NhbGVYIHx8IDEpLFxuICAgICAgICAgICAgdHJhbnNsYXRlWSA9IChwcmV2LnRvcCAtIGN1cnJlbnRSZWN0LnRvcCkgLyAoc2NhbGVZIHx8IDEpO1xuICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWCA9ICEhdHJhbnNsYXRlWDtcbiAgICAgICAgdGFyZ2V0LmFuaW1hdGluZ1kgPSAhIXRyYW5zbGF0ZVk7XG4gICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlM2QoJyArIHRyYW5zbGF0ZVggKyAncHgsJyArIHRyYW5zbGF0ZVkgKyAncHgsMCknKTtcbiAgICAgICAgcmVwYWludCh0YXJnZXQpOyAvLyByZXBhaW50XG5cbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zaXRpb24nLCAndHJhbnNmb3JtICcgKyBkdXJhdGlvbiArICdtcycgKyAodGhpcy5vcHRpb25zLmVhc2luZyA/ICcgJyArIHRoaXMub3B0aW9ucy5lYXNpbmcgOiAnJykpO1xuICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZTNkKDAsMCwwKScpO1xuICAgICAgICB0eXBlb2YgdGFyZ2V0LmFuaW1hdGVkID09PSAnbnVtYmVyJyAmJiBjbGVhclRpbWVvdXQodGFyZ2V0LmFuaW1hdGVkKTtcbiAgICAgICAgdGFyZ2V0LmFuaW1hdGVkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zaXRpb24nLCAnJyk7XG4gICAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICcnKTtcbiAgICAgICAgICB0YXJnZXQuYW5pbWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWCA9IGZhbHNlO1xuICAgICAgICAgIHRhcmdldC5hbmltYXRpbmdZID0gZmFsc2U7XG4gICAgICAgIH0sIGR1cmF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlcGFpbnQodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQub2Zmc2V0V2lkdGg7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVJlYWxUaW1lKGFuaW1hdGluZ1JlY3QsIGZyb21SZWN0LCB0b1JlY3QsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhmcm9tUmVjdC50b3AgLSBhbmltYXRpbmdSZWN0LnRvcCwgMikgKyBNYXRoLnBvdyhmcm9tUmVjdC5sZWZ0IC0gYW5pbWF0aW5nUmVjdC5sZWZ0LCAyKSkgLyBNYXRoLnNxcnQoTWF0aC5wb3coZnJvbVJlY3QudG9wIC0gdG9SZWN0LnRvcCwgMikgKyBNYXRoLnBvdyhmcm9tUmVjdC5sZWZ0IC0gdG9SZWN0LmxlZnQsIDIpKSAqIG9wdGlvbnMuYW5pbWF0aW9uO1xufVxuXG52YXIgcGx1Z2lucyA9IFtdO1xudmFyIGRlZmF1bHRzID0ge1xuICBpbml0aWFsaXplQnlEZWZhdWx0OiB0cnVlXG59O1xudmFyIFBsdWdpbk1hbmFnZXIgPSB7XG4gIG1vdW50OiBmdW5jdGlvbiBtb3VudChwbHVnaW4pIHtcbiAgICAvLyBTZXQgZGVmYXVsdCBzdGF0aWMgcHJvcGVydGllc1xuICAgIGZvciAodmFyIG9wdGlvbiBpbiBkZWZhdWx0cykge1xuICAgICAgaWYgKGRlZmF1bHRzLmhhc093blByb3BlcnR5KG9wdGlvbikgJiYgIShvcHRpb24gaW4gcGx1Z2luKSkge1xuICAgICAgICBwbHVnaW5bb3B0aW9uXSA9IGRlZmF1bHRzW29wdGlvbl07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gIH0sXG4gIHBsdWdpbkV2ZW50OiBmdW5jdGlvbiBwbHVnaW5FdmVudChldmVudE5hbWUsIHNvcnRhYmxlLCBldnQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy5ldmVudENhbmNlbGVkID0gZmFsc2U7XG4gICAgdmFyIGV2ZW50TmFtZUdsb2JhbCA9IGV2ZW50TmFtZSArICdHbG9iYWwnO1xuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICBpZiAoIXNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXSkgcmV0dXJuOyAvLyBGaXJlIGdsb2JhbCBldmVudHMgaWYgaXQgZXhpc3RzIGluIHRoaXMgc29ydGFibGVcblxuICAgICAgaWYgKHNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXVtldmVudE5hbWVHbG9iYWxdKSB7XG4gICAgICAgIF90aGlzLmV2ZW50Q2FuY2VsZWQgPSAhIXNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXVtldmVudE5hbWVHbG9iYWxdKF9vYmplY3RTcHJlYWQoe1xuICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZVxuICAgICAgICB9LCBldnQpKTtcbiAgICAgIH0gLy8gT25seSBmaXJlIHBsdWdpbiBldmVudCBpZiBwbHVnaW4gaXMgZW5hYmxlZCBpbiB0aGlzIHNvcnRhYmxlLFxuICAgICAgLy8gYW5kIHBsdWdpbiBoYXMgZXZlbnQgZGVmaW5lZFxuXG5cbiAgICAgIGlmIChzb3J0YWJsZS5vcHRpb25zW3BsdWdpbi5wbHVnaW5OYW1lXSAmJiBzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV1bZXZlbnROYW1lXSkge1xuICAgICAgICBfdGhpcy5ldmVudENhbmNlbGVkID0gX3RoaXMuZXZlbnRDYW5jZWxlZCB8fCAhIXNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXVtldmVudE5hbWVdKF9vYmplY3RTcHJlYWQoe1xuICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZVxuICAgICAgICB9LCBldnQpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgaW5pdGlhbGl6ZVBsdWdpbnM6IGZ1bmN0aW9uIGluaXRpYWxpemVQbHVnaW5zKHNvcnRhYmxlLCBlbCwgZGVmYXVsdHMpIHtcbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgdmFyIHBsdWdpbk5hbWUgPSBwbHVnaW4ucGx1Z2luTmFtZTtcbiAgICAgIGlmICghc29ydGFibGUub3B0aW9uc1twbHVnaW5OYW1lXSAmJiAhcGx1Z2luLmluaXRpYWxpemVCeURlZmF1bHQpIHJldHVybjtcbiAgICAgIHZhciBpbml0aWFsaXplZCA9IG5ldyBwbHVnaW4oc29ydGFibGUsIGVsKTtcbiAgICAgIGluaXRpYWxpemVkLnNvcnRhYmxlID0gc29ydGFibGU7XG4gICAgICBzb3J0YWJsZVtwbHVnaW5OYW1lXSA9IGluaXRpYWxpemVkOyAvLyBBZGQgZGVmYXVsdCBvcHRpb25zIGZyb20gcGx1Z2luXG5cbiAgICAgIF9leHRlbmRzKGRlZmF1bHRzLCBpbml0aWFsaXplZC5vcHRpb25zKTtcbiAgICB9KTtcblxuICAgIGZvciAodmFyIG9wdGlvbiBpbiBzb3J0YWJsZS5vcHRpb25zKSB7XG4gICAgICBpZiAoIXNvcnRhYmxlLm9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0aW9uKSkgY29udGludWU7XG4gICAgICB2YXIgbW9kaWZpZWQgPSB0aGlzLm1vZGlmeU9wdGlvbihzb3J0YWJsZSwgb3B0aW9uLCBzb3J0YWJsZS5vcHRpb25zW29wdGlvbl0pO1xuXG4gICAgICBpZiAodHlwZW9mIG1vZGlmaWVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzb3J0YWJsZS5vcHRpb25zW29wdGlvbl0gPSBtb2RpZmllZDtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGdldEV2ZW50T3B0aW9uczogZnVuY3Rpb24gZ2V0RXZlbnRPcHRpb25zKG5hbWUsIHNvcnRhYmxlKSB7XG4gICAgdmFyIGV2ZW50T3B0aW9ucyA9IHt9O1xuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICBpZiAodHlwZW9mIHBsdWdpbi5ldmVudE9wdGlvbnMgIT09ICdmdW5jdGlvbicpIHJldHVybjtcblxuICAgICAgX2V4dGVuZHMoZXZlbnRPcHRpb25zLCBwbHVnaW4uZXZlbnRPcHRpb25zLmNhbGwoc29ydGFibGUsIG5hbWUpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZXZlbnRPcHRpb25zO1xuICB9LFxuICBtb2RpZnlPcHRpb246IGZ1bmN0aW9uIG1vZGlmeU9wdGlvbihzb3J0YWJsZSwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgbW9kaWZpZWRWYWx1ZTtcbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgLy8gUGx1Z2luIG11c3QgZXhpc3Qgb24gdGhlIFNvcnRhYmxlXG4gICAgICBpZiAoIXNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXSkgcmV0dXJuOyAvLyBJZiBzdGF0aWMgb3B0aW9uIGxpc3RlbmVyIGV4aXN0cyBmb3IgdGhpcyBvcHRpb24sIGNhbGwgaW4gdGhlIGNvbnRleHQgb2YgdGhlIFNvcnRhYmxlJ3MgaW5zdGFuY2Ugb2YgdGhpcyBwbHVnaW5cblxuICAgICAgaWYgKHBsdWdpbi5vcHRpb25MaXN0ZW5lcnMgJiYgdHlwZW9mIHBsdWdpbi5vcHRpb25MaXN0ZW5lcnNbbmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbW9kaWZpZWRWYWx1ZSA9IHBsdWdpbi5vcHRpb25MaXN0ZW5lcnNbbmFtZV0uY2FsbChzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbW9kaWZpZWRWYWx1ZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChfcmVmKSB7XG4gIHZhciBzb3J0YWJsZSA9IF9yZWYuc29ydGFibGUsXG4gICAgICByb290RWwgPSBfcmVmLnJvb3RFbCxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICB0YXJnZXRFbCA9IF9yZWYudGFyZ2V0RWwsXG4gICAgICBjbG9uZUVsID0gX3JlZi5jbG9uZUVsLFxuICAgICAgdG9FbCA9IF9yZWYudG9FbCxcbiAgICAgIGZyb21FbCA9IF9yZWYuZnJvbUVsLFxuICAgICAgb2xkSW5kZXggPSBfcmVmLm9sZEluZGV4LFxuICAgICAgbmV3SW5kZXggPSBfcmVmLm5ld0luZGV4LFxuICAgICAgb2xkRHJhZ2dhYmxlSW5kZXggPSBfcmVmLm9sZERyYWdnYWJsZUluZGV4LFxuICAgICAgbmV3RHJhZ2dhYmxlSW5kZXggPSBfcmVmLm5ld0RyYWdnYWJsZUluZGV4LFxuICAgICAgb3JpZ2luYWxFdmVudCA9IF9yZWYub3JpZ2luYWxFdmVudCxcbiAgICAgIHB1dFNvcnRhYmxlID0gX3JlZi5wdXRTb3J0YWJsZSxcbiAgICAgIGV2ZW50T3B0aW9ucyA9IF9yZWYuZXZlbnRPcHRpb25zO1xuICBzb3J0YWJsZSA9IHNvcnRhYmxlIHx8IHJvb3RFbFtleHBhbmRvXTtcbiAgdmFyIGV2dCxcbiAgICAgIG9wdGlvbnMgPSBzb3J0YWJsZS5vcHRpb25zLFxuICAgICAgb25OYW1lID0gJ29uJyArIG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnN1YnN0cigxKTsgLy8gU3VwcG9ydCBmb3IgbmV3IEN1c3RvbUV2ZW50IGZlYXR1cmVcblxuICBpZiAod2luZG93LkN1c3RvbUV2ZW50ICYmICFJRTExT3JMZXNzICYmICFFZGdlKSB7XG4gICAgZXZ0ID0gbmV3IEN1c3RvbUV2ZW50KG5hbWUsIHtcbiAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgZXZ0LmluaXRFdmVudChuYW1lLCB0cnVlLCB0cnVlKTtcbiAgfVxuXG4gIGV2dC50byA9IHRvRWwgfHwgcm9vdEVsO1xuICBldnQuZnJvbSA9IGZyb21FbCB8fCByb290RWw7XG4gIGV2dC5pdGVtID0gdGFyZ2V0RWwgfHwgcm9vdEVsO1xuICBldnQuY2xvbmUgPSBjbG9uZUVsO1xuICBldnQub2xkSW5kZXggPSBvbGRJbmRleDtcbiAgZXZ0Lm5ld0luZGV4ID0gbmV3SW5kZXg7XG4gIGV2dC5vbGREcmFnZ2FibGVJbmRleCA9IG9sZERyYWdnYWJsZUluZGV4O1xuICBldnQubmV3RHJhZ2dhYmxlSW5kZXggPSBuZXdEcmFnZ2FibGVJbmRleDtcbiAgZXZ0Lm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICBldnQucHVsbE1vZGUgPSBwdXRTb3J0YWJsZSA/IHB1dFNvcnRhYmxlLmxhc3RQdXRNb2RlIDogdW5kZWZpbmVkO1xuXG4gIHZhciBhbGxFdmVudE9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkKHt9LCBldmVudE9wdGlvbnMsIFBsdWdpbk1hbmFnZXIuZ2V0RXZlbnRPcHRpb25zKG5hbWUsIHNvcnRhYmxlKSk7XG5cbiAgZm9yICh2YXIgb3B0aW9uIGluIGFsbEV2ZW50T3B0aW9ucykge1xuICAgIGV2dFtvcHRpb25dID0gYWxsRXZlbnRPcHRpb25zW29wdGlvbl07XG4gIH1cblxuICBpZiAocm9vdEVsKSB7XG4gICAgcm9vdEVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgfVxuXG4gIGlmIChvcHRpb25zW29uTmFtZV0pIHtcbiAgICBvcHRpb25zW29uTmFtZV0uY2FsbChzb3J0YWJsZSwgZXZ0KTtcbiAgfVxufVxuXG52YXIgcGx1Z2luRXZlbnQgPSBmdW5jdGlvbiBwbHVnaW5FdmVudChldmVudE5hbWUsIHNvcnRhYmxlKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fSxcbiAgICAgIG9yaWdpbmFsRXZlbnQgPSBfcmVmLmV2dCxcbiAgICAgIGRhdGEgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiZXZ0XCJdKTtcblxuICBQbHVnaW5NYW5hZ2VyLnBsdWdpbkV2ZW50LmJpbmQoU29ydGFibGUpKGV2ZW50TmFtZSwgc29ydGFibGUsIF9vYmplY3RTcHJlYWQoe1xuICAgIGRyYWdFbDogZHJhZ0VsLFxuICAgIHBhcmVudEVsOiBwYXJlbnRFbCxcbiAgICBnaG9zdEVsOiBnaG9zdEVsLFxuICAgIHJvb3RFbDogcm9vdEVsLFxuICAgIG5leHRFbDogbmV4dEVsLFxuICAgIGxhc3REb3duRWw6IGxhc3REb3duRWwsXG4gICAgY2xvbmVFbDogY2xvbmVFbCxcbiAgICBjbG9uZUhpZGRlbjogY2xvbmVIaWRkZW4sXG4gICAgZHJhZ1N0YXJ0ZWQ6IG1vdmVkLFxuICAgIHB1dFNvcnRhYmxlOiBwdXRTb3J0YWJsZSxcbiAgICBhY3RpdmVTb3J0YWJsZTogU29ydGFibGUuYWN0aXZlLFxuICAgIG9yaWdpbmFsRXZlbnQ6IG9yaWdpbmFsRXZlbnQsXG4gICAgb2xkSW5kZXg6IG9sZEluZGV4LFxuICAgIG9sZERyYWdnYWJsZUluZGV4OiBvbGREcmFnZ2FibGVJbmRleCxcbiAgICBuZXdJbmRleDogbmV3SW5kZXgsXG4gICAgbmV3RHJhZ2dhYmxlSW5kZXg6IG5ld0RyYWdnYWJsZUluZGV4LFxuICAgIGhpZGVHaG9zdEZvclRhcmdldDogX2hpZGVHaG9zdEZvclRhcmdldCxcbiAgICB1bmhpZGVHaG9zdEZvclRhcmdldDogX3VuaGlkZUdob3N0Rm9yVGFyZ2V0LFxuICAgIGNsb25lTm93SGlkZGVuOiBmdW5jdGlvbiBjbG9uZU5vd0hpZGRlbigpIHtcbiAgICAgIGNsb25lSGlkZGVuID0gdHJ1ZTtcbiAgICB9LFxuICAgIGNsb25lTm93U2hvd246IGZ1bmN0aW9uIGNsb25lTm93U2hvd24oKSB7XG4gICAgICBjbG9uZUhpZGRlbiA9IGZhbHNlO1xuICAgIH0sXG4gICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50OiBmdW5jdGlvbiBkaXNwYXRjaFNvcnRhYmxlRXZlbnQobmFtZSkge1xuICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICBzb3J0YWJsZTogc29ydGFibGUsXG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IG9yaWdpbmFsRXZlbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgZGF0YSkpO1xufTtcblxuZnVuY3Rpb24gX2Rpc3BhdGNoRXZlbnQoaW5mbykge1xuICBkaXNwYXRjaEV2ZW50KF9vYmplY3RTcHJlYWQoe1xuICAgIHB1dFNvcnRhYmxlOiBwdXRTb3J0YWJsZSxcbiAgICBjbG9uZUVsOiBjbG9uZUVsLFxuICAgIHRhcmdldEVsOiBkcmFnRWwsXG4gICAgcm9vdEVsOiByb290RWwsXG4gICAgb2xkSW5kZXg6IG9sZEluZGV4LFxuICAgIG9sZERyYWdnYWJsZUluZGV4OiBvbGREcmFnZ2FibGVJbmRleCxcbiAgICBuZXdJbmRleDogbmV3SW5kZXgsXG4gICAgbmV3RHJhZ2dhYmxlSW5kZXg6IG5ld0RyYWdnYWJsZUluZGV4XG4gIH0sIGluZm8pKTtcbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgfHwgIXdpbmRvdy5kb2N1bWVudCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJTb3J0YWJsZS5qcyByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIik7XG59XG5cbnZhciBkcmFnRWwsXG4gICAgcGFyZW50RWwsXG4gICAgZ2hvc3RFbCxcbiAgICByb290RWwsXG4gICAgbmV4dEVsLFxuICAgIGxhc3REb3duRWwsXG4gICAgY2xvbmVFbCxcbiAgICBjbG9uZUhpZGRlbixcbiAgICBvbGRJbmRleCxcbiAgICBuZXdJbmRleCxcbiAgICBvbGREcmFnZ2FibGVJbmRleCxcbiAgICBuZXdEcmFnZ2FibGVJbmRleCxcbiAgICBhY3RpdmVHcm91cCxcbiAgICBwdXRTb3J0YWJsZSxcbiAgICBhd2FpdGluZ0RyYWdTdGFydGVkID0gZmFsc2UsXG4gICAgaWdub3JlTmV4dENsaWNrID0gZmFsc2UsXG4gICAgc29ydGFibGVzID0gW10sXG4gICAgdGFwRXZ0LFxuICAgIHRvdWNoRXZ0LFxuICAgIG1vdmVkLFxuICAgIGxhc3RUYXJnZXQsXG4gICAgbGFzdERpcmVjdGlvbixcbiAgICBwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggPSBmYWxzZSxcbiAgICBpc0NpcmN1bXN0YW50aWFsSW52ZXJ0ID0gZmFsc2UsXG4gICAgdGFyZ2V0TW92ZURpc3RhbmNlLFxuICAgIC8vIEZvciBwb3NpdGlvbmluZyBnaG9zdCBhYnNvbHV0ZWx5XG5naG9zdFJlbGF0aXZlUGFyZW50LFxuICAgIGdob3N0UmVsYXRpdmVQYXJlbnRJbml0aWFsU2Nyb2xsID0gW10sXG4gICAgLy8gKGxlZnQsIHRvcClcbl9zaWxlbnQgPSBmYWxzZSxcbiAgICBzYXZlZElucHV0Q2hlY2tlZCA9IFtdO1xuLyoqIEBjb25zdCAqL1xuXG52YXIgUG9zaXRpb25HaG9zdEFic29sdXRlbHkgPSBJT1MsXG4gICAgQ1NTRmxvYXRQcm9wZXJ0eSA9IEVkZ2UgfHwgSUUxMU9yTGVzcyA/ICdjc3NGbG9hdCcgOiAnZmxvYXQnLFxuICAgIC8vIFRoaXMgd2lsbCBub3QgcGFzcyBmb3IgSUU5LCBiZWNhdXNlIElFOSBEbkQgb25seSB3b3JrcyBvbiBhbmNob3JzXG5zdXBwb3J0RHJhZ2dhYmxlID0gIUNocm9tZUZvckFuZHJvaWQgJiYgIUlPUyAmJiAnZHJhZ2dhYmxlJyBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICBzdXBwb3J0Q3NzUG9pbnRlckV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gZmFsc2Ugd2hlbiA8PSBJRTExXG4gIGlmIChJRTExT3JMZXNzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgneCcpO1xuICBlbC5zdHlsZS5jc3NUZXh0ID0gJ3BvaW50ZXItZXZlbnRzOmF1dG8nO1xuICByZXR1cm4gZWwuc3R5bGUucG9pbnRlckV2ZW50cyA9PT0gJ2F1dG8nO1xufSgpLFxuICAgIF9kZXRlY3REaXJlY3Rpb24gPSBmdW5jdGlvbiBfZGV0ZWN0RGlyZWN0aW9uKGVsLCBvcHRpb25zKSB7XG4gIHZhciBlbENTUyA9IGNzcyhlbCksXG4gICAgICBlbFdpZHRoID0gcGFyc2VJbnQoZWxDU1Mud2lkdGgpIC0gcGFyc2VJbnQoZWxDU1MucGFkZGluZ0xlZnQpIC0gcGFyc2VJbnQoZWxDU1MucGFkZGluZ1JpZ2h0KSAtIHBhcnNlSW50KGVsQ1NTLmJvcmRlckxlZnRXaWR0aCkgLSBwYXJzZUludChlbENTUy5ib3JkZXJSaWdodFdpZHRoKSxcbiAgICAgIGNoaWxkMSA9IGdldENoaWxkKGVsLCAwLCBvcHRpb25zKSxcbiAgICAgIGNoaWxkMiA9IGdldENoaWxkKGVsLCAxLCBvcHRpb25zKSxcbiAgICAgIGZpcnN0Q2hpbGRDU1MgPSBjaGlsZDEgJiYgY3NzKGNoaWxkMSksXG4gICAgICBzZWNvbmRDaGlsZENTUyA9IGNoaWxkMiAmJiBjc3MoY2hpbGQyKSxcbiAgICAgIGZpcnN0Q2hpbGRXaWR0aCA9IGZpcnN0Q2hpbGRDU1MgJiYgcGFyc2VJbnQoZmlyc3RDaGlsZENTUy5tYXJnaW5MZWZ0KSArIHBhcnNlSW50KGZpcnN0Q2hpbGRDU1MubWFyZ2luUmlnaHQpICsgZ2V0UmVjdChjaGlsZDEpLndpZHRoLFxuICAgICAgc2Vjb25kQ2hpbGRXaWR0aCA9IHNlY29uZENoaWxkQ1NTICYmIHBhcnNlSW50KHNlY29uZENoaWxkQ1NTLm1hcmdpbkxlZnQpICsgcGFyc2VJbnQoc2Vjb25kQ2hpbGRDU1MubWFyZ2luUmlnaHQpICsgZ2V0UmVjdChjaGlsZDIpLndpZHRoO1xuXG4gIGlmIChlbENTUy5kaXNwbGF5ID09PSAnZmxleCcpIHtcbiAgICByZXR1cm4gZWxDU1MuZmxleERpcmVjdGlvbiA9PT0gJ2NvbHVtbicgfHwgZWxDU1MuZmxleERpcmVjdGlvbiA9PT0gJ2NvbHVtbi1yZXZlcnNlJyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gIH1cblxuICBpZiAoZWxDU1MuZGlzcGxheSA9PT0gJ2dyaWQnKSB7XG4gICAgcmV0dXJuIGVsQ1NTLmdyaWRUZW1wbGF0ZUNvbHVtbnMuc3BsaXQoJyAnKS5sZW5ndGggPD0gMSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gIH1cblxuICBpZiAoY2hpbGQxICYmIGZpcnN0Q2hpbGRDU1NbXCJmbG9hdFwiXSAhPT0gJ25vbmUnKSB7XG4gICAgdmFyIHRvdWNoaW5nU2lkZUNoaWxkMiA9IGZpcnN0Q2hpbGRDU1NbXCJmbG9hdFwiXSA9PT0gJ2xlZnQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICByZXR1cm4gY2hpbGQyICYmIChzZWNvbmRDaGlsZENTUy5jbGVhciA9PT0gJ2JvdGgnIHx8IHNlY29uZENoaWxkQ1NTLmNsZWFyID09PSB0b3VjaGluZ1NpZGVDaGlsZDIpID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgfVxuXG4gIHJldHVybiBjaGlsZDEgJiYgKGZpcnN0Q2hpbGRDU1MuZGlzcGxheSA9PT0gJ2Jsb2NrJyB8fCBmaXJzdENoaWxkQ1NTLmRpc3BsYXkgPT09ICdmbGV4JyB8fCBmaXJzdENoaWxkQ1NTLmRpc3BsYXkgPT09ICd0YWJsZScgfHwgZmlyc3RDaGlsZENTUy5kaXNwbGF5ID09PSAnZ3JpZCcgfHwgZmlyc3RDaGlsZFdpZHRoID49IGVsV2lkdGggJiYgZWxDU1NbQ1NTRmxvYXRQcm9wZXJ0eV0gPT09ICdub25lJyB8fCBjaGlsZDIgJiYgZWxDU1NbQ1NTRmxvYXRQcm9wZXJ0eV0gPT09ICdub25lJyAmJiBmaXJzdENoaWxkV2lkdGggKyBzZWNvbmRDaGlsZFdpZHRoID4gZWxXaWR0aCkgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xufSxcbiAgICBfZHJhZ0VsSW5Sb3dDb2x1bW4gPSBmdW5jdGlvbiBfZHJhZ0VsSW5Sb3dDb2x1bW4oZHJhZ1JlY3QsIHRhcmdldFJlY3QsIHZlcnRpY2FsKSB7XG4gIHZhciBkcmFnRWxTMU9wcCA9IHZlcnRpY2FsID8gZHJhZ1JlY3QubGVmdCA6IGRyYWdSZWN0LnRvcCxcbiAgICAgIGRyYWdFbFMyT3BwID0gdmVydGljYWwgPyBkcmFnUmVjdC5yaWdodCA6IGRyYWdSZWN0LmJvdHRvbSxcbiAgICAgIGRyYWdFbE9wcExlbmd0aCA9IHZlcnRpY2FsID8gZHJhZ1JlY3Qud2lkdGggOiBkcmFnUmVjdC5oZWlnaHQsXG4gICAgICB0YXJnZXRTMU9wcCA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC5sZWZ0IDogdGFyZ2V0UmVjdC50b3AsXG4gICAgICB0YXJnZXRTMk9wcCA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC5yaWdodCA6IHRhcmdldFJlY3QuYm90dG9tLFxuICAgICAgdGFyZ2V0T3BwTGVuZ3RoID0gdmVydGljYWwgPyB0YXJnZXRSZWN0LndpZHRoIDogdGFyZ2V0UmVjdC5oZWlnaHQ7XG4gIHJldHVybiBkcmFnRWxTMU9wcCA9PT0gdGFyZ2V0UzFPcHAgfHwgZHJhZ0VsUzJPcHAgPT09IHRhcmdldFMyT3BwIHx8IGRyYWdFbFMxT3BwICsgZHJhZ0VsT3BwTGVuZ3RoIC8gMiA9PT0gdGFyZ2V0UzFPcHAgKyB0YXJnZXRPcHBMZW5ndGggLyAyO1xufSxcblxuLyoqXG4gKiBEZXRlY3RzIGZpcnN0IG5lYXJlc3QgZW1wdHkgc29ydGFibGUgdG8gWCBhbmQgWSBwb3NpdGlvbiB1c2luZyBlbXB0eUluc2VydFRocmVzaG9sZC5cbiAqIEBwYXJhbSAge051bWJlcn0geCAgICAgIFggcG9zaXRpb25cbiAqIEBwYXJhbSAge051bWJlcn0geSAgICAgIFkgcG9zaXRpb25cbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAgIEVsZW1lbnQgb2YgdGhlIGZpcnN0IGZvdW5kIG5lYXJlc3QgU29ydGFibGVcbiAqL1xuX2RldGVjdE5lYXJlc3RFbXB0eVNvcnRhYmxlID0gZnVuY3Rpb24gX2RldGVjdE5lYXJlc3RFbXB0eVNvcnRhYmxlKHgsIHkpIHtcbiAgdmFyIHJldDtcbiAgc29ydGFibGVzLnNvbWUoZnVuY3Rpb24gKHNvcnRhYmxlKSB7XG4gICAgaWYgKGxhc3RDaGlsZChzb3J0YWJsZSkpIHJldHVybjtcbiAgICB2YXIgcmVjdCA9IGdldFJlY3Qoc29ydGFibGUpLFxuICAgICAgICB0aHJlc2hvbGQgPSBzb3J0YWJsZVtleHBhbmRvXS5vcHRpb25zLmVtcHR5SW5zZXJ0VGhyZXNob2xkLFxuICAgICAgICBpbnNpZGVIb3Jpem9udGFsbHkgPSB4ID49IHJlY3QubGVmdCAtIHRocmVzaG9sZCAmJiB4IDw9IHJlY3QucmlnaHQgKyB0aHJlc2hvbGQsXG4gICAgICAgIGluc2lkZVZlcnRpY2FsbHkgPSB5ID49IHJlY3QudG9wIC0gdGhyZXNob2xkICYmIHkgPD0gcmVjdC5ib3R0b20gKyB0aHJlc2hvbGQ7XG5cbiAgICBpZiAodGhyZXNob2xkICYmIGluc2lkZUhvcml6b250YWxseSAmJiBpbnNpZGVWZXJ0aWNhbGx5KSB7XG4gICAgICByZXR1cm4gcmV0ID0gc29ydGFibGU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJldDtcbn0sXG4gICAgX3ByZXBhcmVHcm91cCA9IGZ1bmN0aW9uIF9wcmVwYXJlR3JvdXAob3B0aW9ucykge1xuICBmdW5jdGlvbiB0b0ZuKHZhbHVlLCBwdWxsKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0bywgZnJvbSwgZHJhZ0VsLCBldnQpIHtcbiAgICAgIHZhciBzYW1lR3JvdXAgPSB0by5vcHRpb25zLmdyb3VwLm5hbWUgJiYgZnJvbS5vcHRpb25zLmdyb3VwLm5hbWUgJiYgdG8ub3B0aW9ucy5ncm91cC5uYW1lID09PSBmcm9tLm9wdGlvbnMuZ3JvdXAubmFtZTtcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwgJiYgKHB1bGwgfHwgc2FtZUdyb3VwKSkge1xuICAgICAgICAvLyBEZWZhdWx0IHB1bGwgdmFsdWVcbiAgICAgICAgLy8gRGVmYXVsdCBwdWxsIGFuZCBwdXQgdmFsdWUgaWYgc2FtZSBncm91cFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIGlmIChwdWxsICYmIHZhbHVlID09PSAnY2xvbmUnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB0b0ZuKHZhbHVlKHRvLCBmcm9tLCBkcmFnRWwsIGV2dCksIHB1bGwpKHRvLCBmcm9tLCBkcmFnRWwsIGV2dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgb3RoZXJHcm91cCA9IChwdWxsID8gdG8gOiBmcm9tKS5vcHRpb25zLmdyb3VwLm5hbWU7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlID09PSBvdGhlckdyb3VwIHx8IHZhbHVlLmpvaW4gJiYgdmFsdWUuaW5kZXhPZihvdGhlckdyb3VwKSA+IC0xO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB2YXIgZ3JvdXAgPSB7fTtcbiAgdmFyIG9yaWdpbmFsR3JvdXAgPSBvcHRpb25zLmdyb3VwO1xuXG4gIGlmICghb3JpZ2luYWxHcm91cCB8fCBfdHlwZW9mKG9yaWdpbmFsR3JvdXApICE9ICdvYmplY3QnKSB7XG4gICAgb3JpZ2luYWxHcm91cCA9IHtcbiAgICAgIG5hbWU6IG9yaWdpbmFsR3JvdXBcbiAgICB9O1xuICB9XG5cbiAgZ3JvdXAubmFtZSA9IG9yaWdpbmFsR3JvdXAubmFtZTtcbiAgZ3JvdXAuY2hlY2tQdWxsID0gdG9GbihvcmlnaW5hbEdyb3VwLnB1bGwsIHRydWUpO1xuICBncm91cC5jaGVja1B1dCA9IHRvRm4ob3JpZ2luYWxHcm91cC5wdXQpO1xuICBncm91cC5yZXZlcnRDbG9uZSA9IG9yaWdpbmFsR3JvdXAucmV2ZXJ0Q2xvbmU7XG4gIG9wdGlvbnMuZ3JvdXAgPSBncm91cDtcbn0sXG4gICAgX2hpZGVHaG9zdEZvclRhcmdldCA9IGZ1bmN0aW9uIF9oaWRlR2hvc3RGb3JUYXJnZXQoKSB7XG4gIGlmICghc3VwcG9ydENzc1BvaW50ZXJFdmVudHMgJiYgZ2hvc3RFbCkge1xuICAgIGNzcyhnaG9zdEVsLCAnZGlzcGxheScsICdub25lJyk7XG4gIH1cbn0sXG4gICAgX3VuaGlkZUdob3N0Rm9yVGFyZ2V0ID0gZnVuY3Rpb24gX3VuaGlkZUdob3N0Rm9yVGFyZ2V0KCkge1xuICBpZiAoIXN1cHBvcnRDc3NQb2ludGVyRXZlbnRzICYmIGdob3N0RWwpIHtcbiAgICBjc3MoZ2hvc3RFbCwgJ2Rpc3BsYXknLCAnJyk7XG4gIH1cbn07IC8vICMxMTg0IGZpeCAtIFByZXZlbnQgY2xpY2sgZXZlbnQgb24gZmFsbGJhY2sgaWYgZHJhZ2dlZCBidXQgaXRlbSBub3QgY2hhbmdlZCBwb3NpdGlvblxuXG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2dCkge1xuICBpZiAoaWdub3JlTmV4dENsaWNrKSB7XG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZ0LnN0b3BQcm9wYWdhdGlvbiAmJiBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZXZ0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiAmJiBldnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgaWdub3JlTmV4dENsaWNrID0gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59LCB0cnVlKTtcblxudmFyIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50ID0gZnVuY3Rpb24gbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQoZXZ0KSB7XG4gIGlmIChkcmFnRWwpIHtcbiAgICBldnQgPSBldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0O1xuXG4gICAgdmFyIG5lYXJlc3QgPSBfZGV0ZWN0TmVhcmVzdEVtcHR5U29ydGFibGUoZXZ0LmNsaWVudFgsIGV2dC5jbGllbnRZKTtcblxuICAgIGlmIChuZWFyZXN0KSB7XG4gICAgICAvLyBDcmVhdGUgaW1pdGF0aW9uIGV2ZW50XG4gICAgICB2YXIgZXZlbnQgPSB7fTtcblxuICAgICAgZm9yICh2YXIgaSBpbiBldnQpIHtcbiAgICAgICAgaWYgKGV2dC5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgIGV2ZW50W2ldID0gZXZ0W2ldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnRhcmdldCA9IGV2ZW50LnJvb3RFbCA9IG5lYXJlc3Q7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCA9IHZvaWQgMDtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IHZvaWQgMDtcblxuICAgICAgbmVhcmVzdFtleHBhbmRvXS5fb25EcmFnT3ZlcihldmVudCk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgX2NoZWNrT3V0c2lkZVRhcmdldEVsID0gZnVuY3Rpb24gX2NoZWNrT3V0c2lkZVRhcmdldEVsKGV2dCkge1xuICBpZiAoZHJhZ0VsKSB7XG4gICAgZHJhZ0VsLnBhcmVudE5vZGVbZXhwYW5kb10uX2lzT3V0c2lkZVRoaXNFbChldnQudGFyZ2V0KTtcbiAgfVxufTtcbi8qKlxuICogQGNsYXNzICBTb3J0YWJsZVxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICBlbFxuICogQHBhcmFtICB7T2JqZWN0fSAgICAgICBbb3B0aW9uc11cbiAqL1xuXG5cbmZ1bmN0aW9uIFNvcnRhYmxlKGVsLCBvcHRpb25zKSB7XG4gIGlmICghKGVsICYmIGVsLm5vZGVUeXBlICYmIGVsLm5vZGVUeXBlID09PSAxKSkge1xuICAgIHRocm93IFwiU29ydGFibGU6IGBlbGAgbXVzdCBiZSBhbiBIVE1MRWxlbWVudCwgbm90IFwiLmNvbmNhdCh7fS50b1N0cmluZy5jYWxsKGVsKSk7XG4gIH1cblxuICB0aGlzLmVsID0gZWw7IC8vIHJvb3QgZWxlbWVudFxuXG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucyk7IC8vIEV4cG9ydCBpbnN0YW5jZVxuXG4gIGVsW2V4cGFuZG9dID0gdGhpcztcbiAgdmFyIGRlZmF1bHRzID0ge1xuICAgIGdyb3VwOiBudWxsLFxuICAgIHNvcnQ6IHRydWUsXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIHN0b3JlOiBudWxsLFxuICAgIGhhbmRsZTogbnVsbCxcbiAgICBkcmFnZ2FibGU6IC9eW3VvXWwkL2kudGVzdChlbC5ub2RlTmFtZSkgPyAnPmxpJyA6ICc+KicsXG4gICAgc3dhcFRocmVzaG9sZDogMSxcbiAgICAvLyBwZXJjZW50YWdlOyAwIDw9IHggPD0gMVxuICAgIGludmVydFN3YXA6IGZhbHNlLFxuICAgIC8vIGludmVydCBhbHdheXNcbiAgICBpbnZlcnRlZFN3YXBUaHJlc2hvbGQ6IG51bGwsXG4gICAgLy8gd2lsbCBiZSBzZXQgdG8gc2FtZSBhcyBzd2FwVGhyZXNob2xkIGlmIGRlZmF1bHRcbiAgICByZW1vdmVDbG9uZU9uSGlkZTogdHJ1ZSxcbiAgICBkaXJlY3Rpb246IGZ1bmN0aW9uIGRpcmVjdGlvbigpIHtcbiAgICAgIHJldHVybiBfZGV0ZWN0RGlyZWN0aW9uKGVsLCB0aGlzLm9wdGlvbnMpO1xuICAgIH0sXG4gICAgZ2hvc3RDbGFzczogJ3NvcnRhYmxlLWdob3N0JyxcbiAgICBjaG9zZW5DbGFzczogJ3NvcnRhYmxlLWNob3NlbicsXG4gICAgZHJhZ0NsYXNzOiAnc29ydGFibGUtZHJhZycsXG4gICAgaWdub3JlOiAnYSwgaW1nJyxcbiAgICBmaWx0ZXI6IG51bGwsXG4gICAgcHJldmVudE9uRmlsdGVyOiB0cnVlLFxuICAgIGFuaW1hdGlvbjogMCxcbiAgICBlYXNpbmc6IG51bGwsXG4gICAgc2V0RGF0YTogZnVuY3Rpb24gc2V0RGF0YShkYXRhVHJhbnNmZXIsIGRyYWdFbCkge1xuICAgICAgZGF0YVRyYW5zZmVyLnNldERhdGEoJ1RleHQnLCBkcmFnRWwudGV4dENvbnRlbnQpO1xuICAgIH0sXG4gICAgZHJvcEJ1YmJsZTogZmFsc2UsXG4gICAgZHJhZ292ZXJCdWJibGU6IGZhbHNlLFxuICAgIGRhdGFJZEF0dHI6ICdkYXRhLWlkJyxcbiAgICBkZWxheTogMCxcbiAgICBkZWxheU9uVG91Y2hPbmx5OiBmYWxzZSxcbiAgICB0b3VjaFN0YXJ0VGhyZXNob2xkOiAoTnVtYmVyLnBhcnNlSW50ID8gTnVtYmVyIDogd2luZG93KS5wYXJzZUludCh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbywgMTApIHx8IDEsXG4gICAgZm9yY2VGYWxsYmFjazogZmFsc2UsXG4gICAgZmFsbGJhY2tDbGFzczogJ3NvcnRhYmxlLWZhbGxiYWNrJyxcbiAgICBmYWxsYmFja09uQm9keTogZmFsc2UsXG4gICAgZmFsbGJhY2tUb2xlcmFuY2U6IDAsXG4gICAgZmFsbGJhY2tPZmZzZXQ6IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfSxcbiAgICBzdXBwb3J0UG9pbnRlcjogU29ydGFibGUuc3VwcG9ydFBvaW50ZXIgIT09IGZhbHNlICYmICdQb2ludGVyRXZlbnQnIGluIHdpbmRvdyxcbiAgICBlbXB0eUluc2VydFRocmVzaG9sZDogNVxuICB9O1xuICBQbHVnaW5NYW5hZ2VyLmluaXRpYWxpemVQbHVnaW5zKHRoaXMsIGVsLCBkZWZhdWx0cyk7IC8vIFNldCBkZWZhdWx0IG9wdGlvbnNcblxuICBmb3IgKHZhciBuYW1lIGluIGRlZmF1bHRzKSB7XG4gICAgIShuYW1lIGluIG9wdGlvbnMpICYmIChvcHRpb25zW25hbWVdID0gZGVmYXVsdHNbbmFtZV0pO1xuICB9XG5cbiAgX3ByZXBhcmVHcm91cChvcHRpb25zKTsgLy8gQmluZCBhbGwgcHJpdmF0ZSBtZXRob2RzXG5cblxuICBmb3IgKHZhciBmbiBpbiB0aGlzKSB7XG4gICAgaWYgKGZuLmNoYXJBdCgwKSA9PT0gJ18nICYmIHR5cGVvZiB0aGlzW2ZuXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tmbl0gPSB0aGlzW2ZuXS5iaW5kKHRoaXMpO1xuICAgIH1cbiAgfSAvLyBTZXR1cCBkcmFnIG1vZGVcblxuXG4gIHRoaXMubmF0aXZlRHJhZ2dhYmxlID0gb3B0aW9ucy5mb3JjZUZhbGxiYWNrID8gZmFsc2UgOiBzdXBwb3J0RHJhZ2dhYmxlO1xuXG4gIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgIC8vIFRvdWNoIHN0YXJ0IHRocmVzaG9sZCBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBuYXRpdmUgZHJhZ3N0YXJ0IHRocmVzaG9sZFxuICAgIHRoaXMub3B0aW9ucy50b3VjaFN0YXJ0VGhyZXNob2xkID0gMTtcbiAgfSAvLyBCaW5kIGV2ZW50c1xuXG5cbiAgaWYgKG9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICBvbihlbCwgJ3BvaW50ZXJkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG4gIH0gZWxzZSB7XG4gICAgb24oZWwsICdtb3VzZWRvd24nLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgICBvbihlbCwgJ3RvdWNoc3RhcnQnLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgfVxuXG4gIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgIG9uKGVsLCAnZHJhZ292ZXInLCB0aGlzKTtcbiAgICBvbihlbCwgJ2RyYWdlbnRlcicsIHRoaXMpO1xuICB9XG5cbiAgc29ydGFibGVzLnB1c2godGhpcy5lbCk7IC8vIFJlc3RvcmUgc29ydGluZ1xuXG4gIG9wdGlvbnMuc3RvcmUgJiYgb3B0aW9ucy5zdG9yZS5nZXQgJiYgdGhpcy5zb3J0KG9wdGlvbnMuc3RvcmUuZ2V0KHRoaXMpIHx8IFtdKTsgLy8gQWRkIGFuaW1hdGlvbiBzdGF0ZSBtYW5hZ2VyXG5cbiAgX2V4dGVuZHModGhpcywgQW5pbWF0aW9uU3RhdGVNYW5hZ2VyKCkpO1xufVxuXG5Tb3J0YWJsZS5wcm90b3R5cGUgPVxuLyoqIEBsZW5kcyBTb3J0YWJsZS5wcm90b3R5cGUgKi9cbntcbiAgY29uc3RydWN0b3I6IFNvcnRhYmxlLFxuICBfaXNPdXRzaWRlVGhpc0VsOiBmdW5jdGlvbiBfaXNPdXRzaWRlVGhpc0VsKHRhcmdldCkge1xuICAgIGlmICghdGhpcy5lbC5jb250YWlucyh0YXJnZXQpICYmIHRhcmdldCAhPT0gdGhpcy5lbCkge1xuICAgICAgbGFzdFRhcmdldCA9IG51bGw7XG4gICAgfVxuICB9LFxuICBfZ2V0RGlyZWN0aW9uOiBmdW5jdGlvbiBfZ2V0RGlyZWN0aW9uKGV2dCwgdGFyZ2V0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSAnZnVuY3Rpb24nID8gdGhpcy5vcHRpb25zLmRpcmVjdGlvbi5jYWxsKHRoaXMsIGV2dCwgdGFyZ2V0LCBkcmFnRWwpIDogdGhpcy5vcHRpb25zLmRpcmVjdGlvbjtcbiAgfSxcbiAgX29uVGFwU3RhcnQ6IGZ1bmN0aW9uIF9vblRhcFN0YXJ0KFxuICAvKiogRXZlbnR8VG91Y2hFdmVudCAqL1xuICBldnQpIHtcbiAgICBpZiAoIWV2dC5jYW5jZWxhYmxlKSByZXR1cm47XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBlbCA9IHRoaXMuZWwsXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIHByZXZlbnRPbkZpbHRlciA9IG9wdGlvbnMucHJldmVudE9uRmlsdGVyLFxuICAgICAgICB0eXBlID0gZXZ0LnR5cGUsXG4gICAgICAgIHRvdWNoID0gZXZ0LnRvdWNoZXMgJiYgZXZ0LnRvdWNoZXNbMF0sXG4gICAgICAgIHRhcmdldCA9ICh0b3VjaCB8fCBldnQpLnRhcmdldCxcbiAgICAgICAgb3JpZ2luYWxUYXJnZXQgPSBldnQudGFyZ2V0LnNoYWRvd1Jvb3QgJiYgKGV2dC5wYXRoICYmIGV2dC5wYXRoWzBdIHx8IGV2dC5jb21wb3NlZFBhdGggJiYgZXZ0LmNvbXBvc2VkUGF0aCgpWzBdKSB8fCB0YXJnZXQsXG4gICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuXG4gICAgX3NhdmVJbnB1dENoZWNrZWRTdGF0ZShlbCk7IC8vIERvbid0IHRyaWdnZXIgc3RhcnQgZXZlbnQgd2hlbiBhbiBlbGVtZW50IGlzIGJlZW4gZHJhZ2dlZCwgb3RoZXJ3aXNlIHRoZSBldnQub2xkaW5kZXggYWx3YXlzIHdyb25nIHdoZW4gc2V0IG9wdGlvbi5ncm91cC5cblxuXG4gICAgaWYgKGRyYWdFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICgvbW91c2Vkb3dufHBvaW50ZXJkb3duLy50ZXN0KHR5cGUpICYmIGV2dC5idXR0b24gIT09IDAgfHwgb3B0aW9ucy5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuOyAvLyBvbmx5IGxlZnQgYnV0dG9uIGFuZCBlbmFibGVkXG4gICAgfSAvLyBjYW5jZWwgZG5kIGlmIG9yaWdpbmFsIHRhcmdldCBpcyBjb250ZW50IGVkaXRhYmxlXG5cblxuICAgIGlmIChvcmlnaW5hbFRhcmdldC5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRhcmdldCA9IGNsb3Nlc3QodGFyZ2V0LCBvcHRpb25zLmRyYWdnYWJsZSwgZWwsIGZhbHNlKTtcblxuICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0LmFuaW1hdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGxhc3REb3duRWwgPT09IHRhcmdldCkge1xuICAgICAgLy8gSWdub3JpbmcgZHVwbGljYXRlIGBkb3duYFxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gR2V0IHRoZSBpbmRleCBvZiB0aGUgZHJhZ2dlZCBlbGVtZW50IHdpdGhpbiBpdHMgcGFyZW50XG5cblxuICAgIG9sZEluZGV4ID0gaW5kZXgodGFyZ2V0KTtcbiAgICBvbGREcmFnZ2FibGVJbmRleCA9IGluZGV4KHRhcmdldCwgb3B0aW9ucy5kcmFnZ2FibGUpOyAvLyBDaGVjayBmaWx0ZXJcblxuICAgIGlmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZmlsdGVyLmNhbGwodGhpcywgZXZ0LCB0YXJnZXQsIHRoaXMpKSB7XG4gICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICBzb3J0YWJsZTogX3RoaXMsXG4gICAgICAgICAgcm9vdEVsOiBvcmlnaW5hbFRhcmdldCxcbiAgICAgICAgICBuYW1lOiAnZmlsdGVyJyxcbiAgICAgICAgICB0YXJnZXRFbDogdGFyZ2V0LFxuICAgICAgICAgIHRvRWw6IGVsLFxuICAgICAgICAgIGZyb21FbDogZWxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcGx1Z2luRXZlbnQoJ2ZpbHRlcicsIF90aGlzLCB7XG4gICAgICAgICAgZXZ0OiBldnRcbiAgICAgICAgfSk7XG4gICAgICAgIHByZXZlbnRPbkZpbHRlciAmJiBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuOyAvLyBjYW5jZWwgZG5kXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IGZpbHRlci5zcGxpdCgnLCcpLnNvbWUoZnVuY3Rpb24gKGNyaXRlcmlhKSB7XG4gICAgICAgIGNyaXRlcmlhID0gY2xvc2VzdChvcmlnaW5hbFRhcmdldCwgY3JpdGVyaWEudHJpbSgpLCBlbCwgZmFsc2UpO1xuXG4gICAgICAgIGlmIChjcml0ZXJpYSkge1xuICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgICAgIHJvb3RFbDogY3JpdGVyaWEsXG4gICAgICAgICAgICBuYW1lOiAnZmlsdGVyJyxcbiAgICAgICAgICAgIHRhcmdldEVsOiB0YXJnZXQsXG4gICAgICAgICAgICBmcm9tRWw6IGVsLFxuICAgICAgICAgICAgdG9FbDogZWxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHBsdWdpbkV2ZW50KCdmaWx0ZXInLCBfdGhpcywge1xuICAgICAgICAgICAgZXZ0OiBldnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChmaWx0ZXIpIHtcbiAgICAgICAgcHJldmVudE9uRmlsdGVyICYmIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47IC8vIGNhbmNlbCBkbmRcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5oYW5kbGUgJiYgIWNsb3Nlc3Qob3JpZ2luYWxUYXJnZXQsIG9wdGlvbnMuaGFuZGxlLCBlbCwgZmFsc2UpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBQcmVwYXJlIGBkcmFnc3RhcnRgXG5cblxuICAgIHRoaXMuX3ByZXBhcmVEcmFnU3RhcnQoZXZ0LCB0b3VjaCwgdGFyZ2V0KTtcbiAgfSxcbiAgX3ByZXBhcmVEcmFnU3RhcnQ6IGZ1bmN0aW9uIF9wcmVwYXJlRHJhZ1N0YXJ0KFxuICAvKiogRXZlbnQgKi9cbiAgZXZ0LFxuICAvKiogVG91Y2ggKi9cbiAgdG91Y2gsXG4gIC8qKiBIVE1MRWxlbWVudCAqL1xuICB0YXJnZXQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBlbCA9IF90aGlzLmVsLFxuICAgICAgICBvcHRpb25zID0gX3RoaXMub3B0aW9ucyxcbiAgICAgICAgb3duZXJEb2N1bWVudCA9IGVsLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIGRyYWdTdGFydEZuO1xuXG4gICAgaWYgKHRhcmdldCAmJiAhZHJhZ0VsICYmIHRhcmdldC5wYXJlbnROb2RlID09PSBlbCkge1xuICAgICAgcm9vdEVsID0gZWw7XG4gICAgICBkcmFnRWwgPSB0YXJnZXQ7XG4gICAgICBwYXJlbnRFbCA9IGRyYWdFbC5wYXJlbnROb2RlO1xuICAgICAgbmV4dEVsID0gZHJhZ0VsLm5leHRTaWJsaW5nO1xuICAgICAgbGFzdERvd25FbCA9IHRhcmdldDtcbiAgICAgIGFjdGl2ZUdyb3VwID0gb3B0aW9ucy5ncm91cDtcbiAgICAgIFNvcnRhYmxlLmRyYWdnZWQgPSBkcmFnRWw7XG4gICAgICB0YXBFdnQgPSB7XG4gICAgICAgIHRhcmdldDogZHJhZ0VsLFxuICAgICAgICBjbGllbnRYOiAodG91Y2ggfHwgZXZ0KS5jbGllbnRYLFxuICAgICAgICBjbGllbnRZOiAodG91Y2ggfHwgZXZ0KS5jbGllbnRZXG4gICAgICB9O1xuICAgICAgdGhpcy5fbGFzdFggPSAodG91Y2ggfHwgZXZ0KS5jbGllbnRYO1xuICAgICAgdGhpcy5fbGFzdFkgPSAodG91Y2ggfHwgZXZ0KS5jbGllbnRZO1xuICAgICAgZHJhZ0VsLnN0eWxlWyd3aWxsLWNoYW5nZSddID0gJ2FsbCc7XG5cbiAgICAgIGRyYWdTdGFydEZuID0gZnVuY3Rpb24gZHJhZ1N0YXJ0Rm4oKSB7XG4gICAgICAgIHBsdWdpbkV2ZW50KCdkZWxheUVuZGVkJywgX3RoaXMsIHtcbiAgICAgICAgICBldnQ6IGV2dFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgICAgIF90aGlzLl9vbkRyb3AoKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBEZWxheWVkIGRyYWcgaGFzIGJlZW4gdHJpZ2dlcmVkXG4gICAgICAgIC8vIHdlIGNhbiByZS1lbmFibGUgdGhlIGV2ZW50czogdG91Y2htb3ZlL21vdXNlbW92ZVxuXG5cbiAgICAgICAgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpO1xuXG4gICAgICAgIGlmICghRmlyZUZveCAmJiBfdGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgICBkcmFnRWwuZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgICAgICAgfSAvLyBCaW5kIHRoZSBldmVudHM6IGRyYWdzdGFydC9kcmFnZW5kXG5cblxuICAgICAgICBfdGhpcy5fdHJpZ2dlckRyYWdTdGFydChldnQsIHRvdWNoKTsgLy8gRHJhZyBzdGFydCBldmVudFxuXG5cbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgICBuYW1lOiAnY2hvb3NlJyxcbiAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgfSk7IC8vIENob3NlbiBpdGVtXG5cblxuICAgICAgICB0b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuY2hvc2VuQ2xhc3MsIHRydWUpO1xuICAgICAgfTsgLy8gRGlzYWJsZSBcImRyYWdnYWJsZVwiXG5cblxuICAgICAgb3B0aW9ucy5pZ25vcmUuc3BsaXQoJywnKS5mb3JFYWNoKGZ1bmN0aW9uIChjcml0ZXJpYSkge1xuICAgICAgICBmaW5kKGRyYWdFbCwgY3JpdGVyaWEudHJpbSgpLCBfZGlzYWJsZURyYWdnYWJsZSk7XG4gICAgICB9KTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdkcmFnb3ZlcicsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdtb3VzZW1vdmUnLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2htb3ZlJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICAgICAgb24ob3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCBfdGhpcy5fb25Ecm9wKTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaGVuZCcsIF90aGlzLl9vbkRyb3ApO1xuICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgX3RoaXMuX29uRHJvcCk7IC8vIE1ha2UgZHJhZ0VsIGRyYWdnYWJsZSAobXVzdCBiZSBiZWZvcmUgZGVsYXkgZm9yIEZpcmVGb3gpXG5cbiAgICAgIGlmIChGaXJlRm94ICYmIHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy50b3VjaFN0YXJ0VGhyZXNob2xkID0gNDtcbiAgICAgICAgZHJhZ0VsLmRyYWdnYWJsZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHBsdWdpbkV2ZW50KCdkZWxheVN0YXJ0JywgdGhpcywge1xuICAgICAgICBldnQ6IGV2dFxuICAgICAgfSk7IC8vIERlbGF5IGlzIGltcG9zc2libGUgZm9yIG5hdGl2ZSBEbkQgaW4gRWRnZSBvciBJRVxuXG4gICAgICBpZiAob3B0aW9ucy5kZWxheSAmJiAoIW9wdGlvbnMuZGVsYXlPblRvdWNoT25seSB8fCB0b3VjaCkgJiYgKCF0aGlzLm5hdGl2ZURyYWdnYWJsZSB8fCAhKEVkZ2UgfHwgSUUxMU9yTGVzcykpKSB7XG4gICAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICAgICAgdGhpcy5fb25Ecm9wKCk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gSWYgdGhlIHVzZXIgbW92ZXMgdGhlIHBvaW50ZXIgb3IgbGV0IGdvIHRoZSBjbGljayBvciB0b3VjaFxuICAgICAgICAvLyBiZWZvcmUgdGhlIGRlbGF5IGhhcyBiZWVuIHJlYWNoZWQ6XG4gICAgICAgIC8vIGRpc2FibGUgdGhlIGRlbGF5ZWQgZHJhZ1xuXG5cbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCBfdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNoZW5kJywgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgICAgICBvbihvd25lckRvY3VtZW50LCAnbW91c2Vtb3ZlJywgX3RoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaG1vdmUnLCBfdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICAgICAgb3B0aW9ucy5zdXBwb3J0UG9pbnRlciAmJiBvbihvd25lckRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCBfdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICAgICAgX3RoaXMuX2RyYWdTdGFydFRpbWVyID0gc2V0VGltZW91dChkcmFnU3RhcnRGbiwgb3B0aW9ucy5kZWxheSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcmFnU3RhcnRGbigpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcjogZnVuY3Rpb24gX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcihcbiAgLyoqIFRvdWNoRXZlbnR8UG9pbnRlckV2ZW50ICoqL1xuICBlKSB7XG4gICAgdmFyIHRvdWNoID0gZS50b3VjaGVzID8gZS50b3VjaGVzWzBdIDogZTtcblxuICAgIGlmIChNYXRoLm1heChNYXRoLmFicyh0b3VjaC5jbGllbnRYIC0gdGhpcy5fbGFzdFgpLCBNYXRoLmFicyh0b3VjaC5jbGllbnRZIC0gdGhpcy5fbGFzdFkpKSA+PSBNYXRoLmZsb29yKHRoaXMub3B0aW9ucy50b3VjaFN0YXJ0VGhyZXNob2xkIC8gKHRoaXMubmF0aXZlRHJhZ2dhYmxlICYmIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpKSkge1xuICAgICAgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKCk7XG4gICAgfVxuICB9LFxuICBfZGlzYWJsZURlbGF5ZWREcmFnOiBmdW5jdGlvbiBfZGlzYWJsZURlbGF5ZWREcmFnKCkge1xuICAgIGRyYWdFbCAmJiBfZGlzYWJsZURyYWdnYWJsZShkcmFnRWwpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl9kcmFnU3RhcnRUaW1lcik7XG5cbiAgICB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWdFdmVudHMoKTtcbiAgfSxcbiAgX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50czogZnVuY3Rpb24gX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IHRoaXMuZWwub3duZXJEb2N1bWVudDtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gIH0sXG4gIF90cmlnZ2VyRHJhZ1N0YXJ0OiBmdW5jdGlvbiBfdHJpZ2dlckRyYWdTdGFydChcbiAgLyoqIEV2ZW50ICovXG4gIGV2dCxcbiAgLyoqIFRvdWNoICovXG4gIHRvdWNoKSB7XG4gICAgdG91Y2ggPSB0b3VjaCB8fCBldnQucG9pbnRlclR5cGUgPT0gJ3RvdWNoJyAmJiBldnQ7XG5cbiAgICBpZiAoIXRoaXMubmF0aXZlRHJhZ2dhYmxlIHx8IHRvdWNoKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnN1cHBvcnRQb2ludGVyKSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgICB9IGVsc2UgaWYgKHRvdWNoKSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uKGRyYWdFbCwgJ2RyYWdlbmQnLCB0aGlzKTtcbiAgICAgIG9uKHJvb3RFbCwgJ2RyYWdzdGFydCcsIHRoaXMuX29uRHJhZ1N0YXJ0KTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaWYgKGRvY3VtZW50LnNlbGVjdGlvbikge1xuICAgICAgICAvLyBUaW1lb3V0IG5lY2Nlc3NhcnkgZm9yIElFOVxuICAgICAgICBfbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRvY3VtZW50LnNlbGVjdGlvbi5lbXB0eSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHt9XG4gIH0sXG4gIF9kcmFnU3RhcnRlZDogZnVuY3Rpb24gX2RyYWdTdGFydGVkKGZhbGxiYWNrLCBldnQpIHtcblxuICAgIGF3YWl0aW5nRHJhZ1N0YXJ0ZWQgPSBmYWxzZTtcblxuICAgIGlmIChyb290RWwgJiYgZHJhZ0VsKSB7XG4gICAgICBwbHVnaW5FdmVudCgnZHJhZ1N0YXJ0ZWQnLCB0aGlzLCB7XG4gICAgICAgIGV2dDogZXZ0XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAnZHJhZ292ZXInLCBfY2hlY2tPdXRzaWRlVGFyZ2V0RWwpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsgLy8gQXBwbHkgZWZmZWN0XG5cbiAgICAgICFmYWxsYmFjayAmJiB0b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuZHJhZ0NsYXNzLCBmYWxzZSk7XG4gICAgICB0b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuZ2hvc3RDbGFzcywgdHJ1ZSk7XG4gICAgICBTb3J0YWJsZS5hY3RpdmUgPSB0aGlzO1xuICAgICAgZmFsbGJhY2sgJiYgdGhpcy5fYXBwZW5kR2hvc3QoKTsgLy8gRHJhZyBzdGFydCBldmVudFxuXG4gICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICBuYW1lOiAnc3RhcnQnLFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9udWxsaW5nKCk7XG4gICAgfVxuICB9LFxuICBfZW11bGF0ZURyYWdPdmVyOiBmdW5jdGlvbiBfZW11bGF0ZURyYWdPdmVyKCkge1xuICAgIGlmICh0b3VjaEV2dCkge1xuICAgICAgdGhpcy5fbGFzdFggPSB0b3VjaEV2dC5jbGllbnRYO1xuICAgICAgdGhpcy5fbGFzdFkgPSB0b3VjaEV2dC5jbGllbnRZO1xuXG4gICAgICBfaGlkZUdob3N0Rm9yVGFyZ2V0KCk7XG5cbiAgICAgIHZhciB0YXJnZXQgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHRvdWNoRXZ0LmNsaWVudFgsIHRvdWNoRXZ0LmNsaWVudFkpO1xuICAgICAgdmFyIHBhcmVudCA9IHRhcmdldDtcblxuICAgICAgd2hpbGUgKHRhcmdldCAmJiB0YXJnZXQuc2hhZG93Um9vdCkge1xuICAgICAgICB0YXJnZXQgPSB0YXJnZXQuc2hhZG93Um9vdC5lbGVtZW50RnJvbVBvaW50KHRvdWNoRXZ0LmNsaWVudFgsIHRvdWNoRXZ0LmNsaWVudFkpO1xuICAgICAgICBpZiAodGFyZ2V0ID09PSBwYXJlbnQpIGJyZWFrO1xuICAgICAgICBwYXJlbnQgPSB0YXJnZXQ7XG4gICAgICB9XG5cbiAgICAgIGRyYWdFbC5wYXJlbnROb2RlW2V4cGFuZG9dLl9pc091dHNpZGVUaGlzRWwodGFyZ2V0KTtcblxuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKHBhcmVudFtleHBhbmRvXSkge1xuICAgICAgICAgICAgdmFyIGluc2VydGVkID0gdm9pZCAwO1xuICAgICAgICAgICAgaW5zZXJ0ZWQgPSBwYXJlbnRbZXhwYW5kb10uX29uRHJhZ092ZXIoe1xuICAgICAgICAgICAgICBjbGllbnRYOiB0b3VjaEV2dC5jbGllbnRYLFxuICAgICAgICAgICAgICBjbGllbnRZOiB0b3VjaEV2dC5jbGllbnRZLFxuICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgICAgICAgcm9vdEVsOiBwYXJlbnRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoaW5zZXJ0ZWQgJiYgIXRoaXMub3B0aW9ucy5kcmFnb3ZlckJ1YmJsZSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0YXJnZXQgPSBwYXJlbnQ7IC8vIHN0b3JlIGxhc3QgZWxlbWVudFxuICAgICAgICB9XG4gICAgICAgIC8qIGpzaGludCBib3NzOnRydWUgKi9cbiAgICAgICAgd2hpbGUgKHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlKTtcbiAgICAgIH1cblxuICAgICAgX3VuaGlkZUdob3N0Rm9yVGFyZ2V0KCk7XG4gICAgfVxuICB9LFxuICBfb25Ub3VjaE1vdmU6IGZ1bmN0aW9uIF9vblRvdWNoTW92ZShcbiAgLyoqVG91Y2hFdmVudCovXG4gIGV2dCkge1xuICAgIGlmICh0YXBFdnQpIHtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIGZhbGxiYWNrVG9sZXJhbmNlID0gb3B0aW9ucy5mYWxsYmFja1RvbGVyYW5jZSxcbiAgICAgICAgICBmYWxsYmFja09mZnNldCA9IG9wdGlvbnMuZmFsbGJhY2tPZmZzZXQsXG4gICAgICAgICAgdG91Y2ggPSBldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0LFxuICAgICAgICAgIGdob3N0TWF0cml4ID0gZ2hvc3RFbCAmJiBtYXRyaXgoZ2hvc3RFbCksXG4gICAgICAgICAgc2NhbGVYID0gZ2hvc3RFbCAmJiBnaG9zdE1hdHJpeCAmJiBnaG9zdE1hdHJpeC5hLFxuICAgICAgICAgIHNjYWxlWSA9IGdob3N0RWwgJiYgZ2hvc3RNYXRyaXggJiYgZ2hvc3RNYXRyaXguZCxcbiAgICAgICAgICByZWxhdGl2ZVNjcm9sbE9mZnNldCA9IFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5ICYmIGdob3N0UmVsYXRpdmVQYXJlbnQgJiYgZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQoZ2hvc3RSZWxhdGl2ZVBhcmVudCksXG4gICAgICAgICAgZHggPSAodG91Y2guY2xpZW50WCAtIHRhcEV2dC5jbGllbnRYICsgZmFsbGJhY2tPZmZzZXQueCkgLyAoc2NhbGVYIHx8IDEpICsgKHJlbGF0aXZlU2Nyb2xsT2Zmc2V0ID8gcmVsYXRpdmVTY3JvbGxPZmZzZXRbMF0gLSBnaG9zdFJlbGF0aXZlUGFyZW50SW5pdGlhbFNjcm9sbFswXSA6IDApIC8gKHNjYWxlWCB8fCAxKSxcbiAgICAgICAgICBkeSA9ICh0b3VjaC5jbGllbnRZIC0gdGFwRXZ0LmNsaWVudFkgKyBmYWxsYmFja09mZnNldC55KSAvIChzY2FsZVkgfHwgMSkgKyAocmVsYXRpdmVTY3JvbGxPZmZzZXQgPyByZWxhdGl2ZVNjcm9sbE9mZnNldFsxXSAtIGdob3N0UmVsYXRpdmVQYXJlbnRJbml0aWFsU2Nyb2xsWzFdIDogMCkgLyAoc2NhbGVZIHx8IDEpLFxuICAgICAgICAgIHRyYW5zbGF0ZTNkID0gZXZ0LnRvdWNoZXMgPyAndHJhbnNsYXRlM2QoJyArIGR4ICsgJ3B4LCcgKyBkeSArICdweCwwKScgOiAndHJhbnNsYXRlKCcgKyBkeCArICdweCwnICsgZHkgKyAncHgpJzsgLy8gb25seSBzZXQgdGhlIHN0YXR1cyB0byBkcmFnZ2luZywgd2hlbiB3ZSBhcmUgYWN0dWFsbHkgZHJhZ2dpbmdcblxuICAgICAgaWYgKCFTb3J0YWJsZS5hY3RpdmUgJiYgIWF3YWl0aW5nRHJhZ1N0YXJ0ZWQpIHtcbiAgICAgICAgaWYgKGZhbGxiYWNrVG9sZXJhbmNlICYmIE1hdGgubWF4KE1hdGguYWJzKHRvdWNoLmNsaWVudFggLSB0aGlzLl9sYXN0WCksIE1hdGguYWJzKHRvdWNoLmNsaWVudFkgLSB0aGlzLl9sYXN0WSkpIDwgZmFsbGJhY2tUb2xlcmFuY2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9vbkRyYWdTdGFydChldnQsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICB0b3VjaEV2dCA9IHRvdWNoO1xuICAgICAgY3NzKGdob3N0RWwsICd3ZWJraXRUcmFuc2Zvcm0nLCB0cmFuc2xhdGUzZCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ21velRyYW5zZm9ybScsIHRyYW5zbGF0ZTNkKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnbXNUcmFuc2Zvcm0nLCB0cmFuc2xhdGUzZCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3RyYW5zZm9ybScsIHRyYW5zbGF0ZTNkKTtcbiAgICAgIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSxcbiAgX2FwcGVuZEdob3N0OiBmdW5jdGlvbiBfYXBwZW5kR2hvc3QoKSB7XG4gICAgLy8gQnVnIGlmIHVzaW5nIHNjYWxlKCk6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI2MzcwNThcbiAgICAvLyBOb3QgYmVpbmcgYWRqdXN0ZWQgZm9yXG4gICAgaWYgKCFnaG9zdEVsKSB7XG4gICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5vcHRpb25zLmZhbGxiYWNrT25Cb2R5ID8gZG9jdW1lbnQuYm9keSA6IHJvb3RFbCxcbiAgICAgICAgICByZWN0ID0gZ2V0UmVjdChkcmFnRWwsIHRydWUsIFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5LCB0cnVlLCBjb250YWluZXIpLFxuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7IC8vIFBvc2l0aW9uIGFic29sdXRlbHlcblxuICAgICAgaWYgKFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5KSB7XG4gICAgICAgIC8vIEdldCByZWxhdGl2ZWx5IHBvc2l0aW9uZWQgcGFyZW50XG4gICAgICAgIGdob3N0UmVsYXRpdmVQYXJlbnQgPSBjb250YWluZXI7XG5cbiAgICAgICAgd2hpbGUgKGNzcyhnaG9zdFJlbGF0aXZlUGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycgJiYgY3NzKGdob3N0UmVsYXRpdmVQYXJlbnQsICd0cmFuc2Zvcm0nKSA9PT0gJ25vbmUnICYmIGdob3N0UmVsYXRpdmVQYXJlbnQgIT09IGRvY3VtZW50KSB7XG4gICAgICAgICAgZ2hvc3RSZWxhdGl2ZVBhcmVudCA9IGdob3N0UmVsYXRpdmVQYXJlbnQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnaG9zdFJlbGF0aXZlUGFyZW50ICE9PSBkb2N1bWVudC5ib2R5ICYmIGdob3N0UmVsYXRpdmVQYXJlbnQgIT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgIGlmIChnaG9zdFJlbGF0aXZlUGFyZW50ID09PSBkb2N1bWVudCkgZ2hvc3RSZWxhdGl2ZVBhcmVudCA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgICAgICAgICByZWN0LnRvcCArPSBnaG9zdFJlbGF0aXZlUGFyZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICByZWN0LmxlZnQgKz0gZ2hvc3RSZWxhdGl2ZVBhcmVudC5zY3JvbGxMZWZ0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdob3N0UmVsYXRpdmVQYXJlbnQgPSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCk7XG4gICAgICAgIH1cblxuICAgICAgICBnaG9zdFJlbGF0aXZlUGFyZW50SW5pdGlhbFNjcm9sbCA9IGdldFJlbGF0aXZlU2Nyb2xsT2Zmc2V0KGdob3N0UmVsYXRpdmVQYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICBnaG9zdEVsID0gZHJhZ0VsLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGdob3N0RWwsIG9wdGlvbnMuZ2hvc3RDbGFzcywgZmFsc2UpO1xuICAgICAgdG9nZ2xlQ2xhc3MoZ2hvc3RFbCwgb3B0aW9ucy5mYWxsYmFja0NsYXNzLCB0cnVlKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGdob3N0RWwsIG9wdGlvbnMuZHJhZ0NsYXNzLCB0cnVlKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNpdGlvbicsICcnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNmb3JtJywgJycpO1xuICAgICAgY3NzKGdob3N0RWwsICdib3gtc2l6aW5nJywgJ2JvcmRlci1ib3gnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnbWFyZ2luJywgMCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3RvcCcsIHJlY3QudG9wKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnbGVmdCcsIHJlY3QubGVmdCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3dpZHRoJywgcmVjdC53aWR0aCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ2hlaWdodCcsIHJlY3QuaGVpZ2h0KTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnb3BhY2l0eScsICcwLjgnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAncG9zaXRpb24nLCBQb3NpdGlvbkdob3N0QWJzb2x1dGVseSA/ICdhYnNvbHV0ZScgOiAnZml4ZWQnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnekluZGV4JywgJzEwMDAwMCcpO1xuICAgICAgY3NzKGdob3N0RWwsICdwb2ludGVyRXZlbnRzJywgJ25vbmUnKTtcbiAgICAgIFNvcnRhYmxlLmdob3N0ID0gZ2hvc3RFbDtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChnaG9zdEVsKTtcbiAgICB9XG4gIH0sXG4gIF9vbkRyYWdTdGFydDogZnVuY3Rpb24gX29uRHJhZ1N0YXJ0KFxuICAvKipFdmVudCovXG4gIGV2dCxcbiAgLyoqYm9vbGVhbiovXG4gIGZhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBkYXRhVHJhbnNmZXIgPSBldnQuZGF0YVRyYW5zZmVyO1xuICAgIHZhciBvcHRpb25zID0gX3RoaXMub3B0aW9ucztcbiAgICBwbHVnaW5FdmVudCgnZHJhZ1N0YXJ0JywgdGhpcywge1xuICAgICAgZXZ0OiBldnRcbiAgICB9KTtcblxuICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICB0aGlzLl9vbkRyb3AoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBsdWdpbkV2ZW50KCdzZXR1cENsb25lJywgdGhpcyk7XG5cbiAgICBpZiAoIVNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgIGNsb25lRWwgPSBjbG9uZShkcmFnRWwpO1xuICAgICAgY2xvbmVFbC5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgICAgIGNsb25lRWwuc3R5bGVbJ3dpbGwtY2hhbmdlJ10gPSAnJztcblxuICAgICAgdGhpcy5faGlkZUNsb25lKCk7XG5cbiAgICAgIHRvZ2dsZUNsYXNzKGNsb25lRWwsIHRoaXMub3B0aW9ucy5jaG9zZW5DbGFzcywgZmFsc2UpO1xuICAgICAgU29ydGFibGUuY2xvbmUgPSBjbG9uZUVsO1xuICAgIH0gLy8gIzExNDM6IElGcmFtZSBzdXBwb3J0IHdvcmthcm91bmRcblxuXG4gICAgX3RoaXMuY2xvbmVJZCA9IF9uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBwbHVnaW5FdmVudCgnY2xvbmUnLCBfdGhpcyk7XG4gICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuO1xuXG4gICAgICBpZiAoIV90aGlzLm9wdGlvbnMucmVtb3ZlQ2xvbmVPbkhpZGUpIHtcbiAgICAgICAgcm9vdEVsLmluc2VydEJlZm9yZShjbG9uZUVsLCBkcmFnRWwpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5faGlkZUNsb25lKCk7XG5cbiAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgc29ydGFibGU6IF90aGlzLFxuICAgICAgICBuYW1lOiAnY2xvbmUnXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICAhZmFsbGJhY2sgJiYgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmRyYWdDbGFzcywgdHJ1ZSk7IC8vIFNldCBwcm9wZXIgZHJvcCBldmVudHNcblxuICAgIGlmIChmYWxsYmFjaykge1xuICAgICAgaWdub3JlTmV4dENsaWNrID0gdHJ1ZTtcbiAgICAgIF90aGlzLl9sb29wSWQgPSBzZXRJbnRlcnZhbChfdGhpcy5fZW11bGF0ZURyYWdPdmVyLCA1MCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVuZG8gd2hhdCB3YXMgc2V0IGluIF9wcmVwYXJlRHJhZ1N0YXJ0IGJlZm9yZSBkcmFnIHN0YXJ0ZWRcbiAgICAgIG9mZihkb2N1bWVudCwgJ21vdXNldXAnLCBfdGhpcy5fb25Ecm9wKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ3RvdWNoZW5kJywgX3RoaXMuX29uRHJvcCk7XG4gICAgICBvZmYoZG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIF90aGlzLl9vbkRyb3ApO1xuXG4gICAgICBpZiAoZGF0YVRyYW5zZmVyKSB7XG4gICAgICAgIGRhdGFUcmFuc2Zlci5lZmZlY3RBbGxvd2VkID0gJ21vdmUnO1xuICAgICAgICBvcHRpb25zLnNldERhdGEgJiYgb3B0aW9ucy5zZXREYXRhLmNhbGwoX3RoaXMsIGRhdGFUcmFuc2ZlciwgZHJhZ0VsKTtcbiAgICAgIH1cblxuICAgICAgb24oZG9jdW1lbnQsICdkcm9wJywgX3RoaXMpOyAvLyAjMTI3NiBmaXg6XG5cbiAgICAgIGNzcyhkcmFnRWwsICd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlWigwKScpO1xuICAgIH1cblxuICAgIGF3YWl0aW5nRHJhZ1N0YXJ0ZWQgPSB0cnVlO1xuICAgIF90aGlzLl9kcmFnU3RhcnRJZCA9IF9uZXh0VGljayhfdGhpcy5fZHJhZ1N0YXJ0ZWQuYmluZChfdGhpcywgZmFsbGJhY2ssIGV2dCkpO1xuICAgIG9uKGRvY3VtZW50LCAnc2VsZWN0c3RhcnQnLCBfdGhpcyk7XG4gICAgbW92ZWQgPSB0cnVlO1xuXG4gICAgaWYgKFNhZmFyaSkge1xuICAgICAgY3NzKGRvY3VtZW50LmJvZHksICd1c2VyLXNlbGVjdCcsICdub25lJyk7XG4gICAgfVxuICB9LFxuICAvLyBSZXR1cm5zIHRydWUgLSBpZiBubyBmdXJ0aGVyIGFjdGlvbiBpcyBuZWVkZWQgKGVpdGhlciBpbnNlcnRlZCBvciBhbm90aGVyIGNvbmRpdGlvbilcbiAgX29uRHJhZ092ZXI6IGZ1bmN0aW9uIF9vbkRyYWdPdmVyKFxuICAvKipFdmVudCovXG4gIGV2dCkge1xuICAgIHZhciBlbCA9IHRoaXMuZWwsXG4gICAgICAgIHRhcmdldCA9IGV2dC50YXJnZXQsXG4gICAgICAgIGRyYWdSZWN0LFxuICAgICAgICB0YXJnZXRSZWN0LFxuICAgICAgICByZXZlcnQsXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIGdyb3VwID0gb3B0aW9ucy5ncm91cCxcbiAgICAgICAgYWN0aXZlU29ydGFibGUgPSBTb3J0YWJsZS5hY3RpdmUsXG4gICAgICAgIGlzT3duZXIgPSBhY3RpdmVHcm91cCA9PT0gZ3JvdXAsXG4gICAgICAgIGNhblNvcnQgPSBvcHRpb25zLnNvcnQsXG4gICAgICAgIGZyb21Tb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IGFjdGl2ZVNvcnRhYmxlLFxuICAgICAgICB2ZXJ0aWNhbCxcbiAgICAgICAgX3RoaXMgPSB0aGlzLFxuICAgICAgICBjb21wbGV0ZWRGaXJlZCA9IGZhbHNlO1xuXG4gICAgaWYgKF9zaWxlbnQpIHJldHVybjtcblxuICAgIGZ1bmN0aW9uIGRyYWdPdmVyRXZlbnQobmFtZSwgZXh0cmEpIHtcbiAgICAgIHBsdWdpbkV2ZW50KG5hbWUsIF90aGlzLCBfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgZXZ0OiBldnQsXG4gICAgICAgIGlzT3duZXI6IGlzT3duZXIsXG4gICAgICAgIGF4aXM6IHZlcnRpY2FsID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJyxcbiAgICAgICAgcmV2ZXJ0OiByZXZlcnQsXG4gICAgICAgIGRyYWdSZWN0OiBkcmFnUmVjdCxcbiAgICAgICAgdGFyZ2V0UmVjdDogdGFyZ2V0UmVjdCxcbiAgICAgICAgY2FuU29ydDogY2FuU29ydCxcbiAgICAgICAgZnJvbVNvcnRhYmxlOiBmcm9tU29ydGFibGUsXG4gICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICBjb21wbGV0ZWQ6IGNvbXBsZXRlZCxcbiAgICAgICAgb25Nb3ZlOiBmdW5jdGlvbiBvbk1vdmUodGFyZ2V0LCBhZnRlcikge1xuICAgICAgICAgIHJldHVybiBfb25Nb3ZlKHJvb3RFbCwgZWwsIGRyYWdFbCwgZHJhZ1JlY3QsIHRhcmdldCwgZ2V0UmVjdCh0YXJnZXQpLCBldnQsIGFmdGVyKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2hhbmdlZDogY2hhbmdlZFxuICAgICAgfSwgZXh0cmEpKTtcbiAgICB9IC8vIENhcHR1cmUgYW5pbWF0aW9uIHN0YXRlXG5cblxuICAgIGZ1bmN0aW9uIGNhcHR1cmUoKSB7XG4gICAgICBkcmFnT3ZlckV2ZW50KCdkcmFnT3ZlckFuaW1hdGlvbkNhcHR1cmUnKTtcblxuICAgICAgX3RoaXMuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG5cbiAgICAgIGlmIChfdGhpcyAhPT0gZnJvbVNvcnRhYmxlKSB7XG4gICAgICAgIGZyb21Tb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICAgIH1cbiAgICB9IC8vIFJldHVybiBpbnZvY2F0aW9uIHdoZW4gZHJhZ0VsIGlzIGluc2VydGVkIChvciBjb21wbGV0ZWQpXG5cblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlZChpbnNlcnRpb24pIHtcbiAgICAgIGRyYWdPdmVyRXZlbnQoJ2RyYWdPdmVyQ29tcGxldGVkJywge1xuICAgICAgICBpbnNlcnRpb246IGluc2VydGlvblxuICAgICAgfSk7XG5cbiAgICAgIGlmIChpbnNlcnRpb24pIHtcbiAgICAgICAgLy8gQ2xvbmVzIG11c3QgYmUgaGlkZGVuIGJlZm9yZSBmb2xkaW5nIGFuaW1hdGlvbiB0byBjYXB0dXJlIGRyYWdSZWN0QWJzb2x1dGUgcHJvcGVybHlcbiAgICAgICAgaWYgKGlzT3duZXIpIHtcbiAgICAgICAgICBhY3RpdmVTb3J0YWJsZS5faGlkZUNsb25lKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWN0aXZlU29ydGFibGUuX3Nob3dDbG9uZShfdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3RoaXMgIT09IGZyb21Tb3J0YWJsZSkge1xuICAgICAgICAgIC8vIFNldCBnaG9zdCBjbGFzcyB0byBuZXcgc29ydGFibGUncyBnaG9zdCBjbGFzc1xuICAgICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgcHV0U29ydGFibGUgPyBwdXRTb3J0YWJsZS5vcHRpb25zLmdob3N0Q2xhc3MgOiBhY3RpdmVTb3J0YWJsZS5vcHRpb25zLmdob3N0Q2xhc3MsIGZhbHNlKTtcbiAgICAgICAgICB0b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuZ2hvc3RDbGFzcywgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHV0U29ydGFibGUgIT09IF90aGlzICYmIF90aGlzICE9PSBTb3J0YWJsZS5hY3RpdmUpIHtcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IF90aGlzO1xuICAgICAgICB9IGVsc2UgaWYgKF90aGlzID09PSBTb3J0YWJsZS5hY3RpdmUgJiYgcHV0U29ydGFibGUpIHtcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IG51bGw7XG4gICAgICAgIH0gLy8gQW5pbWF0aW9uXG5cblxuICAgICAgICBpZiAoZnJvbVNvcnRhYmxlID09PSBfdGhpcykge1xuICAgICAgICAgIF90aGlzLl9pZ25vcmVXaGlsZUFuaW1hdGluZyA9IHRhcmdldDtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLmFuaW1hdGVBbGwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRyYWdPdmVyRXZlbnQoJ2RyYWdPdmVyQW5pbWF0aW9uQ29tcGxldGUnKTtcbiAgICAgICAgICBfdGhpcy5faWdub3JlV2hpbGVBbmltYXRpbmcgPSBudWxsO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoX3RoaXMgIT09IGZyb21Tb3J0YWJsZSkge1xuICAgICAgICAgIGZyb21Tb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gICAgICAgICAgZnJvbVNvcnRhYmxlLl9pZ25vcmVXaGlsZUFuaW1hdGluZyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gTnVsbCBsYXN0VGFyZ2V0IGlmIGl0IGlzIG5vdCBpbnNpZGUgYSBwcmV2aW91c2x5IHN3YXBwZWQgZWxlbWVudFxuXG5cbiAgICAgIGlmICh0YXJnZXQgPT09IGRyYWdFbCAmJiAhZHJhZ0VsLmFuaW1hdGVkIHx8IHRhcmdldCA9PT0gZWwgJiYgIXRhcmdldC5hbmltYXRlZCkge1xuICAgICAgICBsYXN0VGFyZ2V0ID0gbnVsbDtcbiAgICAgIH0gLy8gbm8gYnViYmxpbmcgYW5kIG5vdCBmYWxsYmFja1xuXG5cbiAgICAgIGlmICghb3B0aW9ucy5kcmFnb3ZlckJ1YmJsZSAmJiAhZXZ0LnJvb3RFbCAmJiB0YXJnZXQgIT09IGRvY3VtZW50KSB7XG4gICAgICAgIGRyYWdFbC5wYXJlbnROb2RlW2V4cGFuZG9dLl9pc091dHNpZGVUaGlzRWwoZXZ0LnRhcmdldCk7IC8vIERvIG5vdCBkZXRlY3QgZm9yIGVtcHR5IGluc2VydCBpZiBhbHJlYWR5IGluc2VydGVkXG5cblxuICAgICAgICAhaW5zZXJ0aW9uICYmIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KGV2dCk7XG4gICAgICB9XG5cbiAgICAgICFvcHRpb25zLmRyYWdvdmVyQnViYmxlICYmIGV2dC5zdG9wUHJvcGFnYXRpb24gJiYgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuIGNvbXBsZXRlZEZpcmVkID0gdHJ1ZTtcbiAgICB9IC8vIENhbGwgd2hlbiBkcmFnRWwgaGFzIGJlZW4gaW5zZXJ0ZWRcblxuXG4gICAgZnVuY3Rpb24gY2hhbmdlZCgpIHtcbiAgICAgIG5ld0luZGV4ID0gaW5kZXgoZHJhZ0VsKTtcbiAgICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gaW5kZXgoZHJhZ0VsLCBvcHRpb25zLmRyYWdnYWJsZSk7XG5cbiAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgc29ydGFibGU6IF90aGlzLFxuICAgICAgICBuYW1lOiAnY2hhbmdlJyxcbiAgICAgICAgdG9FbDogZWwsXG4gICAgICAgIG5ld0luZGV4OiBuZXdJbmRleCxcbiAgICAgICAgbmV3RHJhZ2dhYmxlSW5kZXg6IG5ld0RyYWdnYWJsZUluZGV4LFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChldnQucHJldmVudERlZmF1bHQgIT09IHZvaWQgMCkge1xuICAgICAgZXZ0LmNhbmNlbGFibGUgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgdGFyZ2V0ID0gY2xvc2VzdCh0YXJnZXQsIG9wdGlvbnMuZHJhZ2dhYmxlLCBlbCwgdHJ1ZSk7XG4gICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXInKTtcbiAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuIGNvbXBsZXRlZEZpcmVkO1xuXG4gICAgaWYgKGRyYWdFbC5jb250YWlucyhldnQudGFyZ2V0KSB8fCB0YXJnZXQuYW5pbWF0ZWQgJiYgdGFyZ2V0LmFuaW1hdGluZ1ggJiYgdGFyZ2V0LmFuaW1hdGluZ1kgfHwgX3RoaXMuX2lnbm9yZVdoaWxlQW5pbWF0aW5nID09PSB0YXJnZXQpIHtcbiAgICAgIHJldHVybiBjb21wbGV0ZWQoZmFsc2UpO1xuICAgIH1cblxuICAgIGlnbm9yZU5leHRDbGljayA9IGZhbHNlO1xuXG4gICAgaWYgKGFjdGl2ZVNvcnRhYmxlICYmICFvcHRpb25zLmRpc2FibGVkICYmIChpc093bmVyID8gY2FuU29ydCB8fCAocmV2ZXJ0ID0gIXJvb3RFbC5jb250YWlucyhkcmFnRWwpKSAvLyBSZXZlcnRpbmcgaXRlbSBpbnRvIHRoZSBvcmlnaW5hbCBsaXN0XG4gICAgOiBwdXRTb3J0YWJsZSA9PT0gdGhpcyB8fCAodGhpcy5sYXN0UHV0TW9kZSA9IGFjdGl2ZUdyb3VwLmNoZWNrUHVsbCh0aGlzLCBhY3RpdmVTb3J0YWJsZSwgZHJhZ0VsLCBldnQpKSAmJiBncm91cC5jaGVja1B1dCh0aGlzLCBhY3RpdmVTb3J0YWJsZSwgZHJhZ0VsLCBldnQpKSkge1xuICAgICAgdmVydGljYWwgPSB0aGlzLl9nZXREaXJlY3Rpb24oZXZ0LCB0YXJnZXQpID09PSAndmVydGljYWwnO1xuICAgICAgZHJhZ1JlY3QgPSBnZXRSZWN0KGRyYWdFbCk7XG4gICAgICBkcmFnT3ZlckV2ZW50KCdkcmFnT3ZlclZhbGlkJyk7XG4gICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuIGNvbXBsZXRlZEZpcmVkO1xuXG4gICAgICBpZiAocmV2ZXJ0KSB7XG4gICAgICAgIHBhcmVudEVsID0gcm9vdEVsOyAvLyBhY3R1YWxpemF0aW9uXG5cbiAgICAgICAgY2FwdHVyZSgpO1xuXG4gICAgICAgIHRoaXMuX2hpZGVDbG9uZSgpO1xuXG4gICAgICAgIGRyYWdPdmVyRXZlbnQoJ3JldmVydCcpO1xuXG4gICAgICAgIGlmICghU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgICAgIGlmIChuZXh0RWwpIHtcbiAgICAgICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoZHJhZ0VsLCBuZXh0RWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByb290RWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29tcGxldGVkKHRydWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxMYXN0Q2hpbGQgPSBsYXN0Q2hpbGQoZWwsIG9wdGlvbnMuZHJhZ2dhYmxlKTtcblxuICAgICAgaWYgKCFlbExhc3RDaGlsZCB8fCBfZ2hvc3RJc0xhc3QoZXZ0LCB2ZXJ0aWNhbCwgdGhpcykgJiYgIWVsTGFzdENoaWxkLmFuaW1hdGVkKSB7XG4gICAgICAgIC8vIElmIGFscmVhZHkgYXQgZW5kIG9mIGxpc3Q6IERvIG5vdCBpbnNlcnRcbiAgICAgICAgaWYgKGVsTGFzdENoaWxkID09PSBkcmFnRWwpIHtcbiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICAgICAgfSAvLyBhc3NpZ24gdGFyZ2V0IG9ubHkgaWYgY29uZGl0aW9uIGlzIHRydWVcblxuXG4gICAgICAgIGlmIChlbExhc3RDaGlsZCAmJiBlbCA9PT0gZXZ0LnRhcmdldCkge1xuICAgICAgICAgIHRhcmdldCA9IGVsTGFzdENoaWxkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgIHRhcmdldFJlY3QgPSBnZXRSZWN0KHRhcmdldCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX29uTW92ZShyb290RWwsIGVsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXQsIHRhcmdldFJlY3QsIGV2dCwgISF0YXJnZXQpICE9PSBmYWxzZSkge1xuICAgICAgICAgIGNhcHR1cmUoKTtcbiAgICAgICAgICBlbC5hcHBlbmRDaGlsZChkcmFnRWwpO1xuICAgICAgICAgIHBhcmVudEVsID0gZWw7IC8vIGFjdHVhbGl6YXRpb25cblxuICAgICAgICAgIGNoYW5nZWQoKTtcbiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldC5wYXJlbnROb2RlID09PSBlbCkge1xuICAgICAgICB0YXJnZXRSZWN0ID0gZ2V0UmVjdCh0YXJnZXQpO1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gMCxcbiAgICAgICAgICAgIHRhcmdldEJlZm9yZUZpcnN0U3dhcCxcbiAgICAgICAgICAgIGRpZmZlcmVudExldmVsID0gZHJhZ0VsLnBhcmVudE5vZGUgIT09IGVsLFxuICAgICAgICAgICAgZGlmZmVyZW50Um93Q29sID0gIV9kcmFnRWxJblJvd0NvbHVtbihkcmFnRWwuYW5pbWF0ZWQgJiYgZHJhZ0VsLnRvUmVjdCB8fCBkcmFnUmVjdCwgdGFyZ2V0LmFuaW1hdGVkICYmIHRhcmdldC50b1JlY3QgfHwgdGFyZ2V0UmVjdCwgdmVydGljYWwpLFxuICAgICAgICAgICAgc2lkZTEgPSB2ZXJ0aWNhbCA/ICd0b3AnIDogJ2xlZnQnLFxuICAgICAgICAgICAgc2Nyb2xsZWRQYXN0VG9wID0gaXNTY3JvbGxlZFBhc3QodGFyZ2V0LCBudWxsLCAndG9wJywgJ3RvcCcpIHx8IGlzU2Nyb2xsZWRQYXN0KGRyYWdFbCwgbnVsbCwgJ3RvcCcsICd0b3AnKSxcbiAgICAgICAgICAgIHNjcm9sbEJlZm9yZSA9IHNjcm9sbGVkUGFzdFRvcCA/IHNjcm9sbGVkUGFzdFRvcC5zY3JvbGxUb3AgOiB2b2lkIDA7XG5cbiAgICAgICAgaWYgKGxhc3RUYXJnZXQgIT09IHRhcmdldCkge1xuICAgICAgICAgIHRhcmdldEJlZm9yZUZpcnN0U3dhcCA9IHRhcmdldFJlY3Rbc2lkZTFdO1xuICAgICAgICAgIHBhc3RGaXJzdEludmVydFRocmVzaCA9IGZhbHNlO1xuICAgICAgICAgIGlzQ2lyY3Vtc3RhbnRpYWxJbnZlcnQgPSAhZGlmZmVyZW50Um93Q29sICYmIG9wdGlvbnMuaW52ZXJ0U3dhcCB8fCBkaWZmZXJlbnRMZXZlbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGRpcmVjdGlvbiA9IF9nZXRTd2FwRGlyZWN0aW9uKGV2dCwgdGFyZ2V0LCB0YXJnZXRSZWN0LCB2ZXJ0aWNhbCwgZGlmZmVyZW50Um93Q29sID8gMSA6IG9wdGlvbnMuc3dhcFRocmVzaG9sZCwgb3B0aW9ucy5pbnZlcnRlZFN3YXBUaHJlc2hvbGQgPT0gbnVsbCA/IG9wdGlvbnMuc3dhcFRocmVzaG9sZCA6IG9wdGlvbnMuaW52ZXJ0ZWRTd2FwVGhyZXNob2xkLCBpc0NpcmN1bXN0YW50aWFsSW52ZXJ0LCBsYXN0VGFyZ2V0ID09PSB0YXJnZXQpO1xuICAgICAgICB2YXIgc2libGluZztcblxuICAgICAgICBpZiAoZGlyZWN0aW9uICE9PSAwKSB7XG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdGFyZ2V0IGlzIGJlc2lkZSBkcmFnRWwgaW4gcmVzcGVjdGl2ZSBkaXJlY3Rpb24gKGlnbm9yaW5nIGhpZGRlbiBlbGVtZW50cylcbiAgICAgICAgICB2YXIgZHJhZ0luZGV4ID0gaW5kZXgoZHJhZ0VsKTtcblxuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIGRyYWdJbmRleCAtPSBkaXJlY3Rpb247XG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50RWwuY2hpbGRyZW5bZHJhZ0luZGV4XTtcbiAgICAgICAgICB9IHdoaWxlIChzaWJsaW5nICYmIChjc3Moc2libGluZywgJ2Rpc3BsYXknKSA9PT0gJ25vbmUnIHx8IHNpYmxpbmcgPT09IGdob3N0RWwpKTtcbiAgICAgICAgfSAvLyBJZiBkcmFnRWwgaXMgYWxyZWFkeSBiZXNpZGUgdGFyZ2V0OiBEbyBub3QgaW5zZXJ0XG5cblxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAwIHx8IHNpYmxpbmcgPT09IHRhcmdldCkge1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdFRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgbGFzdERpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICAgICAgdmFyIG5leHRTaWJsaW5nID0gdGFyZ2V0Lm5leHRFbGVtZW50U2libGluZyxcbiAgICAgICAgICAgIGFmdGVyID0gZmFsc2U7XG4gICAgICAgIGFmdGVyID0gZGlyZWN0aW9uID09PSAxO1xuXG4gICAgICAgIHZhciBtb3ZlVmVjdG9yID0gX29uTW92ZShyb290RWwsIGVsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXQsIHRhcmdldFJlY3QsIGV2dCwgYWZ0ZXIpO1xuXG4gICAgICAgIGlmIChtb3ZlVmVjdG9yICE9PSBmYWxzZSkge1xuICAgICAgICAgIGlmIChtb3ZlVmVjdG9yID09PSAxIHx8IG1vdmVWZWN0b3IgPT09IC0xKSB7XG4gICAgICAgICAgICBhZnRlciA9IG1vdmVWZWN0b3IgPT09IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3NpbGVudCA9IHRydWU7XG4gICAgICAgICAgc2V0VGltZW91dChfdW5zaWxlbnQsIDMwKTtcbiAgICAgICAgICBjYXB0dXJlKCk7XG5cbiAgICAgICAgICBpZiAoYWZ0ZXIgJiYgIW5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChkcmFnRWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZHJhZ0VsLCBhZnRlciA/IG5leHRTaWJsaW5nIDogdGFyZ2V0KTtcbiAgICAgICAgICB9IC8vIFVuZG8gY2hyb21lJ3Mgc2Nyb2xsIGFkanVzdG1lbnQgKGhhcyBubyBlZmZlY3Qgb24gb3RoZXIgYnJvd3NlcnMpXG5cblxuICAgICAgICAgIGlmIChzY3JvbGxlZFBhc3RUb3ApIHtcbiAgICAgICAgICAgIHNjcm9sbEJ5KHNjcm9sbGVkUGFzdFRvcCwgMCwgc2Nyb2xsQmVmb3JlIC0gc2Nyb2xsZWRQYXN0VG9wLnNjcm9sbFRvcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGFyZW50RWwgPSBkcmFnRWwucGFyZW50Tm9kZTsgLy8gYWN0dWFsaXphdGlvblxuICAgICAgICAgIC8vIG11c3QgYmUgZG9uZSBiZWZvcmUgYW5pbWF0aW9uXG5cbiAgICAgICAgICBpZiAodGFyZ2V0QmVmb3JlRmlyc3RTd2FwICE9PSB1bmRlZmluZWQgJiYgIWlzQ2lyY3Vtc3RhbnRpYWxJbnZlcnQpIHtcbiAgICAgICAgICAgIHRhcmdldE1vdmVEaXN0YW5jZSA9IE1hdGguYWJzKHRhcmdldEJlZm9yZUZpcnN0U3dhcCAtIGdldFJlY3QodGFyZ2V0KVtzaWRlMV0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWQoKTtcbiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlbC5jb250YWlucyhkcmFnRWwpKSB7XG4gICAgICAgIHJldHVybiBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgX2lnbm9yZVdoaWxlQW5pbWF0aW5nOiBudWxsLFxuICBfb2ZmTW92ZUV2ZW50czogZnVuY3Rpb24gX29mZk1vdmVFdmVudHMoKSB7XG4gICAgb2ZmKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpO1xuICAgIG9mZihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICBvZmYoZG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICBvZmYoZG9jdW1lbnQsICdkcmFnb3ZlcicsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgICBvZmYoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gICAgb2ZmKGRvY3VtZW50LCAndG91Y2htb3ZlJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICB9LFxuICBfb2ZmVXBFdmVudHM6IGZ1bmN0aW9uIF9vZmZVcEV2ZW50cygpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IHRoaXMuZWwub3duZXJEb2N1bWVudDtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9vbkRyb3ApO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9vbkRyb3ApO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAncG9pbnRlcnVwJywgdGhpcy5fb25Ecm9wKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgdGhpcy5fb25Ecm9wKTtcbiAgICBvZmYoZG9jdW1lbnQsICdzZWxlY3RzdGFydCcsIHRoaXMpO1xuICB9LFxuICBfb25Ecm9wOiBmdW5jdGlvbiBfb25Ecm9wKFxuICAvKipFdmVudCovXG4gIGV2dCkge1xuICAgIHZhciBlbCA9IHRoaXMuZWwsXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7IC8vIEdldCB0aGUgaW5kZXggb2YgdGhlIGRyYWdnZWQgZWxlbWVudCB3aXRoaW4gaXRzIHBhcmVudFxuXG4gICAgbmV3SW5kZXggPSBpbmRleChkcmFnRWwpO1xuICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gaW5kZXgoZHJhZ0VsLCBvcHRpb25zLmRyYWdnYWJsZSk7XG4gICAgcGx1Z2luRXZlbnQoJ2Ryb3AnLCB0aGlzLCB7XG4gICAgICBldnQ6IGV2dFxuICAgIH0pOyAvLyBHZXQgYWdhaW4gYWZ0ZXIgcGx1Z2luIGV2ZW50XG5cbiAgICBuZXdJbmRleCA9IGluZGV4KGRyYWdFbCk7XG4gICAgbmV3RHJhZ2dhYmxlSW5kZXggPSBpbmRleChkcmFnRWwsIG9wdGlvbnMuZHJhZ2dhYmxlKTtcblxuICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICB0aGlzLl9udWxsaW5nKCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhd2FpdGluZ0RyYWdTdGFydGVkID0gZmFsc2U7XG4gICAgaXNDaXJjdW1zdGFudGlhbEludmVydCA9IGZhbHNlO1xuICAgIHBhc3RGaXJzdEludmVydFRocmVzaCA9IGZhbHNlO1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fbG9vcElkKTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5fZHJhZ1N0YXJ0VGltZXIpO1xuXG4gICAgX2NhbmNlbE5leHRUaWNrKHRoaXMuY2xvbmVJZCk7XG5cbiAgICBfY2FuY2VsTmV4dFRpY2sodGhpcy5fZHJhZ1N0YXJ0SWQpOyAvLyBVbmJpbmQgZXZlbnRzXG5cblxuICAgIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgb2ZmKGRvY3VtZW50LCAnZHJvcCcsIHRoaXMpO1xuICAgICAgb2ZmKGVsLCAnZHJhZ3N0YXJ0JywgdGhpcy5fb25EcmFnU3RhcnQpO1xuICAgIH1cblxuICAgIHRoaXMuX29mZk1vdmVFdmVudHMoKTtcblxuICAgIHRoaXMuX29mZlVwRXZlbnRzKCk7XG5cbiAgICBpZiAoU2FmYXJpKSB7XG4gICAgICBjc3MoZG9jdW1lbnQuYm9keSwgJ3VzZXItc2VsZWN0JywgJycpO1xuICAgIH1cblxuICAgIGlmIChldnQpIHtcbiAgICAgIGlmIChtb3ZlZCkge1xuICAgICAgICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgIW9wdGlvbnMuZHJvcEJ1YmJsZSAmJiBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIGdob3N0RWwgJiYgZ2hvc3RFbC5wYXJlbnROb2RlICYmIGdob3N0RWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnaG9zdEVsKTtcblxuICAgICAgaWYgKHJvb3RFbCA9PT0gcGFyZW50RWwgfHwgcHV0U29ydGFibGUgJiYgcHV0U29ydGFibGUubGFzdFB1dE1vZGUgIT09ICdjbG9uZScpIHtcbiAgICAgICAgLy8gUmVtb3ZlIGNsb25lKHMpXG4gICAgICAgIGNsb25lRWwgJiYgY2xvbmVFbC5wYXJlbnROb2RlICYmIGNsb25lRWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjbG9uZUVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRyYWdFbCkge1xuICAgICAgICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgICBvZmYoZHJhZ0VsLCAnZHJhZ2VuZCcsIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgX2Rpc2FibGVEcmFnZ2FibGUoZHJhZ0VsKTtcblxuICAgICAgICBkcmFnRWwuc3R5bGVbJ3dpbGwtY2hhbmdlJ10gPSAnJzsgLy8gUmVtb3ZlIGNsYXNzZXNcbiAgICAgICAgLy8gZ2hvc3RDbGFzcyBpcyBhZGRlZCBpbiBkcmFnU3RhcnRlZFxuXG4gICAgICAgIGlmIChtb3ZlZCAmJiAhYXdhaXRpbmdEcmFnU3RhcnRlZCkge1xuICAgICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgcHV0U29ydGFibGUgPyBwdXRTb3J0YWJsZS5vcHRpb25zLmdob3N0Q2xhc3MgOiB0aGlzLm9wdGlvbnMuZ2hvc3RDbGFzcywgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCB0aGlzLm9wdGlvbnMuY2hvc2VuQ2xhc3MsIGZhbHNlKTsgLy8gRHJhZyBzdG9wIGV2ZW50XG5cbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgIG5hbWU6ICd1bmNob29zZScsXG4gICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgbmV3SW5kZXg6IG51bGwsXG4gICAgICAgICAgbmV3RHJhZ2dhYmxlSW5kZXg6IG51bGwsXG4gICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChyb290RWwgIT09IHBhcmVudEVsKSB7XG4gICAgICAgICAgaWYgKG5ld0luZGV4ID49IDApIHtcbiAgICAgICAgICAgIC8vIEFkZCBldmVudFxuICAgICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICByb290RWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICBuYW1lOiAnYWRkJyxcbiAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIGZyb21FbDogcm9vdEVsLFxuICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgIH0pOyAvLyBSZW1vdmUgZXZlbnRcblxuXG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICBuYW1lOiAncmVtb3ZlJyxcbiAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgfSk7IC8vIGRyYWcgZnJvbSBvbmUgbGlzdCBhbmQgZHJvcCBpbnRvIGFub3RoZXJcblxuXG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHJvb3RFbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIG5hbWU6ICdzb3J0JyxcbiAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIGZyb21FbDogcm9vdEVsLFxuICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICBuYW1lOiAnc29ydCcsXG4gICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHB1dFNvcnRhYmxlICYmIHB1dFNvcnRhYmxlLnNhdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobmV3SW5kZXggIT09IG9sZEluZGV4KSB7XG4gICAgICAgICAgICBpZiAobmV3SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAvLyBkcmFnICYgZHJvcCB3aXRoaW4gdGhlIHNhbWUgbGlzdFxuICAgICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3VwZGF0ZScsXG4gICAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgICBzb3J0YWJsZTogdGhpcyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnc29ydCcsXG4gICAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChTb3J0YWJsZS5hY3RpdmUpIHtcbiAgICAgICAgICAvKiBqc2hpbnQgZXFudWxsOnRydWUgKi9cbiAgICAgICAgICBpZiAobmV3SW5kZXggPT0gbnVsbCB8fCBuZXdJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIG5ld0luZGV4ID0gb2xkSW5kZXg7XG4gICAgICAgICAgICBuZXdEcmFnZ2FibGVJbmRleCA9IG9sZERyYWdnYWJsZUluZGV4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgbmFtZTogJ2VuZCcsXG4gICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgIH0pOyAvLyBTYXZlIHNvcnRpbmdcblxuXG4gICAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9udWxsaW5nKCk7XG4gIH0sXG4gIF9udWxsaW5nOiBmdW5jdGlvbiBfbnVsbGluZygpIHtcbiAgICBwbHVnaW5FdmVudCgnbnVsbGluZycsIHRoaXMpO1xuICAgIHJvb3RFbCA9IGRyYWdFbCA9IHBhcmVudEVsID0gZ2hvc3RFbCA9IG5leHRFbCA9IGNsb25lRWwgPSBsYXN0RG93bkVsID0gY2xvbmVIaWRkZW4gPSB0YXBFdnQgPSB0b3VjaEV2dCA9IG1vdmVkID0gbmV3SW5kZXggPSBuZXdEcmFnZ2FibGVJbmRleCA9IG9sZEluZGV4ID0gb2xkRHJhZ2dhYmxlSW5kZXggPSBsYXN0VGFyZ2V0ID0gbGFzdERpcmVjdGlvbiA9IHB1dFNvcnRhYmxlID0gYWN0aXZlR3JvdXAgPSBTb3J0YWJsZS5kcmFnZ2VkID0gU29ydGFibGUuZ2hvc3QgPSBTb3J0YWJsZS5jbG9uZSA9IFNvcnRhYmxlLmFjdGl2ZSA9IG51bGw7XG4gICAgc2F2ZWRJbnB1dENoZWNrZWQuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgIGVsLmNoZWNrZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIHNhdmVkSW5wdXRDaGVja2VkLmxlbmd0aCA9IDA7XG4gIH0sXG4gIGhhbmRsZUV2ZW50OiBmdW5jdGlvbiBoYW5kbGVFdmVudChcbiAgLyoqRXZlbnQqL1xuICBldnQpIHtcbiAgICBzd2l0Y2ggKGV2dC50eXBlKSB7XG4gICAgICBjYXNlICdkcm9wJzpcbiAgICAgIGNhc2UgJ2RyYWdlbmQnOlxuICAgICAgICB0aGlzLl9vbkRyb3AoZXZ0KTtcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZHJhZ2VudGVyJzpcbiAgICAgIGNhc2UgJ2RyYWdvdmVyJzpcbiAgICAgICAgaWYgKGRyYWdFbCkge1xuICAgICAgICAgIHRoaXMuX29uRHJhZ092ZXIoZXZ0KTtcblxuICAgICAgICAgIF9nbG9iYWxEcmFnT3ZlcihldnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3NlbGVjdHN0YXJ0JzpcbiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogU2VyaWFsaXplcyB0aGUgaXRlbSBpbnRvIGFuIGFycmF5IG9mIHN0cmluZy5cbiAgICogQHJldHVybnMge1N0cmluZ1tdfVxuICAgKi9cbiAgdG9BcnJheTogZnVuY3Rpb24gdG9BcnJheSgpIHtcbiAgICB2YXIgb3JkZXIgPSBbXSxcbiAgICAgICAgZWwsXG4gICAgICAgIGNoaWxkcmVuID0gdGhpcy5lbC5jaGlsZHJlbixcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIG4gPSBjaGlsZHJlbi5sZW5ndGgsXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBmb3IgKDsgaSA8IG47IGkrKykge1xuICAgICAgZWwgPSBjaGlsZHJlbltpXTtcblxuICAgICAgaWYgKGNsb3Nlc3QoZWwsIG9wdGlvbnMuZHJhZ2dhYmxlLCB0aGlzLmVsLCBmYWxzZSkpIHtcbiAgICAgICAgb3JkZXIucHVzaChlbC5nZXRBdHRyaWJ1dGUob3B0aW9ucy5kYXRhSWRBdHRyKSB8fCBfZ2VuZXJhdGVJZChlbCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvcmRlcjtcbiAgfSxcblxuICAvKipcbiAgICogU29ydHMgdGhlIGVsZW1lbnRzIGFjY29yZGluZyB0byB0aGUgYXJyYXkuXG4gICAqIEBwYXJhbSAge1N0cmluZ1tdfSAgb3JkZXIgIG9yZGVyIG9mIHRoZSBpdGVtc1xuICAgKi9cbiAgc29ydDogZnVuY3Rpb24gc29ydChvcmRlcikge1xuICAgIHZhciBpdGVtcyA9IHt9LFxuICAgICAgICByb290RWwgPSB0aGlzLmVsO1xuICAgIHRoaXMudG9BcnJheSgpLmZvckVhY2goZnVuY3Rpb24gKGlkLCBpKSB7XG4gICAgICB2YXIgZWwgPSByb290RWwuY2hpbGRyZW5baV07XG5cbiAgICAgIGlmIChjbG9zZXN0KGVsLCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlLCByb290RWwsIGZhbHNlKSkge1xuICAgICAgICBpdGVtc1tpZF0gPSBlbDtcbiAgICAgIH1cbiAgICB9LCB0aGlzKTtcbiAgICBvcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgICAgaWYgKGl0ZW1zW2lkXSkge1xuICAgICAgICByb290RWwucmVtb3ZlQ2hpbGQoaXRlbXNbaWRdKTtcbiAgICAgICAgcm9vdEVsLmFwcGVuZENoaWxkKGl0ZW1zW2lkXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNhdmUgdGhlIGN1cnJlbnQgc29ydGluZ1xuICAgKi9cbiAgc2F2ZTogZnVuY3Rpb24gc2F2ZSgpIHtcbiAgICB2YXIgc3RvcmUgPSB0aGlzLm9wdGlvbnMuc3RvcmU7XG4gICAgc3RvcmUgJiYgc3RvcmUuc2V0ICYmIHN0b3JlLnNldCh0aGlzKTtcbiAgfSxcblxuICAvKipcbiAgICogRm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0LCBnZXQgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBtYXRjaGVzIHRoZSBzZWxlY3RvciBieSB0ZXN0aW5nIHRoZSBlbGVtZW50IGl0c2VsZiBhbmQgdHJhdmVyc2luZyB1cCB0aHJvdWdoIGl0cyBhbmNlc3RvcnMgaW4gdGhlIERPTSB0cmVlLlxuICAgKiBAcGFyYW0gICB7SFRNTEVsZW1lbnR9ICBlbFxuICAgKiBAcGFyYW0gICB7U3RyaW5nfSAgICAgICBbc2VsZWN0b3JdICBkZWZhdWx0OiBgb3B0aW9ucy5kcmFnZ2FibGVgXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudHxudWxsfVxuICAgKi9cbiAgY2xvc2VzdDogZnVuY3Rpb24gY2xvc2VzdCQxKGVsLCBzZWxlY3Rvcikge1xuICAgIHJldHVybiBjbG9zZXN0KGVsLCBzZWxlY3RvciB8fCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlLCB0aGlzLmVsLCBmYWxzZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldC9nZXQgb3B0aW9uXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtICAgeyp9ICAgICAgW3ZhbHVlXVxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIG9wdGlvbjogZnVuY3Rpb24gb3B0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIG9wdGlvbnNbbmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtb2RpZmllZFZhbHVlID0gUGx1Z2luTWFuYWdlci5tb2RpZnlPcHRpb24odGhpcywgbmFtZSwgdmFsdWUpO1xuXG4gICAgICBpZiAodHlwZW9mIG1vZGlmaWVkVmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG9wdGlvbnNbbmFtZV0gPSBtb2RpZmllZFZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9uc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobmFtZSA9PT0gJ2dyb3VwJykge1xuICAgICAgICBfcHJlcGFyZUdyb3VwKG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRGVzdHJveVxuICAgKi9cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBwbHVnaW5FdmVudCgnZGVzdHJveScsIHRoaXMpO1xuICAgIHZhciBlbCA9IHRoaXMuZWw7XG4gICAgZWxbZXhwYW5kb10gPSBudWxsO1xuICAgIG9mZihlbCwgJ21vdXNlZG93bicsIHRoaXMuX29uVGFwU3RhcnQpO1xuICAgIG9mZihlbCwgJ3RvdWNoc3RhcnQnLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgICBvZmYoZWwsICdwb2ludGVyZG93bicsIHRoaXMuX29uVGFwU3RhcnQpO1xuXG4gICAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICBvZmYoZWwsICdkcmFnb3ZlcicsIHRoaXMpO1xuICAgICAgb2ZmKGVsLCAnZHJhZ2VudGVyJywgdGhpcyk7XG4gICAgfSAvLyBSZW1vdmUgZHJhZ2dhYmxlIGF0dHJpYnV0ZXNcblxuXG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlbC5xdWVyeVNlbGVjdG9yQWxsKCdbZHJhZ2dhYmxlXScpLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnZHJhZ2dhYmxlJyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9vbkRyb3AoKTtcblxuICAgIHNvcnRhYmxlcy5zcGxpY2Uoc29ydGFibGVzLmluZGV4T2YodGhpcy5lbCksIDEpO1xuICAgIHRoaXMuZWwgPSBlbCA9IG51bGw7XG4gIH0sXG4gIF9oaWRlQ2xvbmU6IGZ1bmN0aW9uIF9oaWRlQ2xvbmUoKSB7XG4gICAgaWYgKCFjbG9uZUhpZGRlbikge1xuICAgICAgcGx1Z2luRXZlbnQoJ2hpZGVDbG9uZScsIHRoaXMpO1xuICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybjtcbiAgICAgIGNzcyhjbG9uZUVsLCAnZGlzcGxheScsICdub25lJyk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlQ2xvbmVPbkhpZGUgJiYgY2xvbmVFbC5wYXJlbnROb2RlKSB7XG4gICAgICAgIGNsb25lRWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjbG9uZUVsKTtcbiAgICAgIH1cblxuICAgICAgY2xvbmVIaWRkZW4gPSB0cnVlO1xuICAgIH1cbiAgfSxcbiAgX3Nob3dDbG9uZTogZnVuY3Rpb24gX3Nob3dDbG9uZShwdXRTb3J0YWJsZSkge1xuICAgIGlmIChwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSAhPT0gJ2Nsb25lJykge1xuICAgICAgdGhpcy5faGlkZUNsb25lKCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY2xvbmVIaWRkZW4pIHtcbiAgICAgIHBsdWdpbkV2ZW50KCdzaG93Q2xvbmUnLCB0aGlzKTtcbiAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSByZXR1cm47IC8vIHNob3cgY2xvbmUgYXQgZHJhZ0VsIG9yIG9yaWdpbmFsIHBvc2l0aW9uXG5cbiAgICAgIGlmIChyb290RWwuY29udGFpbnMoZHJhZ0VsKSAmJiAhdGhpcy5vcHRpb25zLmdyb3VwLnJldmVydENsb25lKSB7XG4gICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgZHJhZ0VsKTtcbiAgICAgIH0gZWxzZSBpZiAobmV4dEVsKSB7XG4gICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgbmV4dEVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChjbG9uZUVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ncm91cC5yZXZlcnRDbG9uZSkge1xuICAgICAgICB0aGlzLl9hbmltYXRlKGRyYWdFbCwgY2xvbmVFbCk7XG4gICAgICB9XG5cbiAgICAgIGNzcyhjbG9uZUVsLCAnZGlzcGxheScsICcnKTtcbiAgICAgIGNsb25lSGlkZGVuID0gZmFsc2U7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBfZ2xvYmFsRHJhZ092ZXIoXG4vKipFdmVudCovXG5ldnQpIHtcbiAgaWYgKGV2dC5kYXRhVHJhbnNmZXIpIHtcbiAgICBldnQuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnbW92ZSc7XG4gIH1cblxuICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbn1cblxuZnVuY3Rpb24gX29uTW92ZShmcm9tRWwsIHRvRWwsIGRyYWdFbCwgZHJhZ1JlY3QsIHRhcmdldEVsLCB0YXJnZXRSZWN0LCBvcmlnaW5hbEV2ZW50LCB3aWxsSW5zZXJ0QWZ0ZXIpIHtcbiAgdmFyIGV2dCxcbiAgICAgIHNvcnRhYmxlID0gZnJvbUVsW2V4cGFuZG9dLFxuICAgICAgb25Nb3ZlRm4gPSBzb3J0YWJsZS5vcHRpb25zLm9uTW92ZSxcbiAgICAgIHJldFZhbDsgLy8gU3VwcG9ydCBmb3IgbmV3IEN1c3RvbUV2ZW50IGZlYXR1cmVcblxuICBpZiAod2luZG93LkN1c3RvbUV2ZW50ICYmICFJRTExT3JMZXNzICYmICFFZGdlKSB7XG4gICAgZXZ0ID0gbmV3IEN1c3RvbUV2ZW50KCdtb3ZlJywge1xuICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldnQuaW5pdEV2ZW50KCdtb3ZlJywgdHJ1ZSwgdHJ1ZSk7XG4gIH1cblxuICBldnQudG8gPSB0b0VsO1xuICBldnQuZnJvbSA9IGZyb21FbDtcbiAgZXZ0LmRyYWdnZWQgPSBkcmFnRWw7XG4gIGV2dC5kcmFnZ2VkUmVjdCA9IGRyYWdSZWN0O1xuICBldnQucmVsYXRlZCA9IHRhcmdldEVsIHx8IHRvRWw7XG4gIGV2dC5yZWxhdGVkUmVjdCA9IHRhcmdldFJlY3QgfHwgZ2V0UmVjdCh0b0VsKTtcbiAgZXZ0LndpbGxJbnNlcnRBZnRlciA9IHdpbGxJbnNlcnRBZnRlcjtcbiAgZXZ0Lm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICBmcm9tRWwuZGlzcGF0Y2hFdmVudChldnQpO1xuXG4gIGlmIChvbk1vdmVGbikge1xuICAgIHJldFZhbCA9IG9uTW92ZUZuLmNhbGwoc29ydGFibGUsIGV2dCwgb3JpZ2luYWxFdmVudCk7XG4gIH1cblxuICByZXR1cm4gcmV0VmFsO1xufVxuXG5mdW5jdGlvbiBfZGlzYWJsZURyYWdnYWJsZShlbCkge1xuICBlbC5kcmFnZ2FibGUgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gX3Vuc2lsZW50KCkge1xuICBfc2lsZW50ID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIF9naG9zdElzTGFzdChldnQsIHZlcnRpY2FsLCBzb3J0YWJsZSkge1xuICB2YXIgcmVjdCA9IGdldFJlY3QobGFzdENoaWxkKHNvcnRhYmxlLmVsLCBzb3J0YWJsZS5vcHRpb25zLmRyYWdnYWJsZSkpO1xuICB2YXIgc3BhY2VyID0gMTA7XG4gIHJldHVybiB2ZXJ0aWNhbCA/IGV2dC5jbGllbnRYID4gcmVjdC5yaWdodCArIHNwYWNlciB8fCBldnQuY2xpZW50WCA8PSByZWN0LnJpZ2h0ICYmIGV2dC5jbGllbnRZID4gcmVjdC5ib3R0b20gJiYgZXZ0LmNsaWVudFggPj0gcmVjdC5sZWZ0IDogZXZ0LmNsaWVudFggPiByZWN0LnJpZ2h0ICYmIGV2dC5jbGllbnRZID4gcmVjdC50b3AgfHwgZXZ0LmNsaWVudFggPD0gcmVjdC5yaWdodCAmJiBldnQuY2xpZW50WSA+IHJlY3QuYm90dG9tICsgc3BhY2VyO1xufVxuXG5mdW5jdGlvbiBfZ2V0U3dhcERpcmVjdGlvbihldnQsIHRhcmdldCwgdGFyZ2V0UmVjdCwgdmVydGljYWwsIHN3YXBUaHJlc2hvbGQsIGludmVydGVkU3dhcFRocmVzaG9sZCwgaW52ZXJ0U3dhcCwgaXNMYXN0VGFyZ2V0KSB7XG4gIHZhciBtb3VzZU9uQXhpcyA9IHZlcnRpY2FsID8gZXZ0LmNsaWVudFkgOiBldnQuY2xpZW50WCxcbiAgICAgIHRhcmdldExlbmd0aCA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC5oZWlnaHQgOiB0YXJnZXRSZWN0LndpZHRoLFxuICAgICAgdGFyZ2V0UzEgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QudG9wIDogdGFyZ2V0UmVjdC5sZWZ0LFxuICAgICAgdGFyZ2V0UzIgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QuYm90dG9tIDogdGFyZ2V0UmVjdC5yaWdodCxcbiAgICAgIGludmVydCA9IGZhbHNlO1xuXG4gIGlmICghaW52ZXJ0U3dhcCkge1xuICAgIC8vIE5ldmVyIGludmVydCBvciBjcmVhdGUgZHJhZ0VsIHNoYWRvdyB3aGVuIHRhcmdldCBtb3ZlbWVuZXQgY2F1c2VzIG1vdXNlIHRvIG1vdmUgcGFzdCB0aGUgZW5kIG9mIHJlZ3VsYXIgc3dhcFRocmVzaG9sZFxuICAgIGlmIChpc0xhc3RUYXJnZXQgJiYgdGFyZ2V0TW92ZURpc3RhbmNlIDwgdGFyZ2V0TGVuZ3RoICogc3dhcFRocmVzaG9sZCkge1xuICAgICAgLy8gbXVsdGlwbGllZCBvbmx5IGJ5IHN3YXBUaHJlc2hvbGQgYmVjYXVzZSBtb3VzZSB3aWxsIGFscmVhZHkgYmUgaW5zaWRlIHRhcmdldCBieSAoMSAtIHRocmVzaG9sZCkgKiB0YXJnZXRMZW5ndGggLyAyXG4gICAgICAvLyBjaGVjayBpZiBwYXN0IGZpcnN0IGludmVydCB0aHJlc2hvbGQgb24gc2lkZSBvcHBvc2l0ZSBvZiBsYXN0RGlyZWN0aW9uXG4gICAgICBpZiAoIXBhc3RGaXJzdEludmVydFRocmVzaCAmJiAobGFzdERpcmVjdGlvbiA9PT0gMSA/IG1vdXNlT25BeGlzID4gdGFyZ2V0UzEgKyB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyIDogbW91c2VPbkF4aXMgPCB0YXJnZXRTMiAtIHRhcmdldExlbmd0aCAqIGludmVydGVkU3dhcFRocmVzaG9sZCAvIDIpKSB7XG4gICAgICAgIC8vIHBhc3QgZmlyc3QgaW52ZXJ0IHRocmVzaG9sZCwgZG8gbm90IHJlc3RyaWN0IGludmVydGVkIHRocmVzaG9sZCB0byBkcmFnRWwgc2hhZG93XG4gICAgICAgIHBhc3RGaXJzdEludmVydFRocmVzaCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghcGFzdEZpcnN0SW52ZXJ0VGhyZXNoKSB7XG4gICAgICAgIC8vIGRyYWdFbCBzaGFkb3cgKHRhcmdldCBtb3ZlIGRpc3RhbmNlIHNoYWRvdylcbiAgICAgICAgaWYgKGxhc3REaXJlY3Rpb24gPT09IDEgPyBtb3VzZU9uQXhpcyA8IHRhcmdldFMxICsgdGFyZ2V0TW92ZURpc3RhbmNlIC8vIG92ZXIgZHJhZ0VsIHNoYWRvd1xuICAgICAgICA6IG1vdXNlT25BeGlzID4gdGFyZ2V0UzIgLSB0YXJnZXRNb3ZlRGlzdGFuY2UpIHtcbiAgICAgICAgICByZXR1cm4gLWxhc3REaXJlY3Rpb247XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludmVydCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlZ3VsYXJcbiAgICAgIGlmIChtb3VzZU9uQXhpcyA+IHRhcmdldFMxICsgdGFyZ2V0TGVuZ3RoICogKDEgLSBzd2FwVGhyZXNob2xkKSAvIDIgJiYgbW91c2VPbkF4aXMgPCB0YXJnZXRTMiAtIHRhcmdldExlbmd0aCAqICgxIC0gc3dhcFRocmVzaG9sZCkgLyAyKSB7XG4gICAgICAgIHJldHVybiBfZ2V0SW5zZXJ0RGlyZWN0aW9uKHRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaW52ZXJ0ID0gaW52ZXJ0IHx8IGludmVydFN3YXA7XG5cbiAgaWYgKGludmVydCkge1xuICAgIC8vIEludmVydCBvZiByZWd1bGFyXG4gICAgaWYgKG1vdXNlT25BeGlzIDwgdGFyZ2V0UzEgKyB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyIHx8IG1vdXNlT25BeGlzID4gdGFyZ2V0UzIgLSB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyKSB7XG4gICAgICByZXR1cm4gbW91c2VPbkF4aXMgPiB0YXJnZXRTMSArIHRhcmdldExlbmd0aCAvIDIgPyAxIDogLTE7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG4vKipcbiAqIEdldHMgdGhlIGRpcmVjdGlvbiBkcmFnRWwgbXVzdCBiZSBzd2FwcGVkIHJlbGF0aXZlIHRvIHRhcmdldCBpbiBvcmRlciB0byBtYWtlIGl0XG4gKiBzZWVtIHRoYXQgZHJhZ0VsIGhhcyBiZWVuIFwiaW5zZXJ0ZWRcIiBpbnRvIHRoYXQgZWxlbWVudCdzIHBvc2l0aW9uXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gdGFyZ2V0ICAgICAgIFRoZSB0YXJnZXQgd2hvc2UgcG9zaXRpb24gZHJhZ0VsIGlzIGJlaW5nIGluc2VydGVkIGF0XG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgIERpcmVjdGlvbiBkcmFnRWwgbXVzdCBiZSBzd2FwcGVkXG4gKi9cblxuXG5mdW5jdGlvbiBfZ2V0SW5zZXJ0RGlyZWN0aW9uKHRhcmdldCkge1xuICBpZiAoaW5kZXgoZHJhZ0VsKSA8IGluZGV4KHRhcmdldCkpIHtcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn1cbi8qKlxuICogR2VuZXJhdGUgaWRcbiAqIEBwYXJhbSAgIHtIVE1MRWxlbWVudH0gZWxcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gX2dlbmVyYXRlSWQoZWwpIHtcbiAgdmFyIHN0ciA9IGVsLnRhZ05hbWUgKyBlbC5jbGFzc05hbWUgKyBlbC5zcmMgKyBlbC5ocmVmICsgZWwudGV4dENvbnRlbnQsXG4gICAgICBpID0gc3RyLmxlbmd0aCxcbiAgICAgIHN1bSA9IDA7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHN1bSArPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgfVxuXG4gIHJldHVybiBzdW0udG9TdHJpbmcoMzYpO1xufVxuXG5mdW5jdGlvbiBfc2F2ZUlucHV0Q2hlY2tlZFN0YXRlKHJvb3QpIHtcbiAgc2F2ZWRJbnB1dENoZWNrZWQubGVuZ3RoID0gMDtcbiAgdmFyIGlucHV0cyA9IHJvb3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lucHV0Jyk7XG4gIHZhciBpZHggPSBpbnB1dHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpZHgtLSkge1xuICAgIHZhciBfZWwgPSBpbnB1dHNbaWR4XTtcbiAgICBfZWwuY2hlY2tlZCAmJiBzYXZlZElucHV0Q2hlY2tlZC5wdXNoKF9lbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX25leHRUaWNrKGZuKSB7XG4gIHJldHVybiBzZXRUaW1lb3V0KGZuLCAwKTtcbn1cblxuZnVuY3Rpb24gX2NhbmNlbE5leHRUaWNrKGlkKSB7XG4gIHJldHVybiBjbGVhclRpbWVvdXQoaWQpO1xufSAvLyBGaXhlZCAjOTczOlxuXG5cbm9uKGRvY3VtZW50LCAndG91Y2htb3ZlJywgZnVuY3Rpb24gKGV2dCkge1xuICBpZiAoKFNvcnRhYmxlLmFjdGl2ZSB8fCBhd2FpdGluZ0RyYWdTdGFydGVkKSAmJiBldnQuY2FuY2VsYWJsZSkge1xuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG59KTsgLy8gRXhwb3J0IHV0aWxzXG5cblNvcnRhYmxlLnV0aWxzID0ge1xuICBvbjogb24sXG4gIG9mZjogb2ZmLFxuICBjc3M6IGNzcyxcbiAgZmluZDogZmluZCxcbiAgaXM6IGZ1bmN0aW9uIGlzKGVsLCBzZWxlY3Rvcikge1xuICAgIHJldHVybiAhIWNsb3Nlc3QoZWwsIHNlbGVjdG9yLCBlbCwgZmFsc2UpO1xuICB9LFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdGhyb3R0bGU6IHRocm90dGxlLFxuICBjbG9zZXN0OiBjbG9zZXN0LFxuICB0b2dnbGVDbGFzczogdG9nZ2xlQ2xhc3MsXG4gIGNsb25lOiBjbG9uZSxcbiAgaW5kZXg6IGluZGV4LFxuICBuZXh0VGljazogX25leHRUaWNrLFxuICBjYW5jZWxOZXh0VGljazogX2NhbmNlbE5leHRUaWNrLFxuICBkZXRlY3REaXJlY3Rpb246IF9kZXRlY3REaXJlY3Rpb24sXG4gIGdldENoaWxkOiBnZXRDaGlsZFxufTtcbi8qKlxuICogTW91bnQgYSBwbHVnaW4gdG8gU29ydGFibGVcbiAqIEBwYXJhbSAgey4uLlNvcnRhYmxlUGx1Z2lufFNvcnRhYmxlUGx1Z2luW119IHBsdWdpbnMgICAgICAgUGx1Z2lucyBiZWluZyBtb3VudGVkXG4gKi9cblxuU29ydGFibGUubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwbHVnaW5zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHBsdWdpbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAocGx1Z2luc1swXS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHBsdWdpbnMgPSBwbHVnaW5zWzBdO1xuICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIGlmICghcGx1Z2luLnByb3RvdHlwZSB8fCAhcGx1Z2luLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcikge1xuICAgICAgdGhyb3cgXCJTb3J0YWJsZTogTW91bnRlZCBwbHVnaW4gbXVzdCBiZSBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLCBub3QgXCIuY29uY2F0KHt9LnRvU3RyaW5nLmNhbGwoZWwpKTtcbiAgICB9XG5cbiAgICBpZiAocGx1Z2luLnV0aWxzKSBTb3J0YWJsZS51dGlscyA9IF9vYmplY3RTcHJlYWQoe30sIFNvcnRhYmxlLnV0aWxzLCBwbHVnaW4udXRpbHMpO1xuICAgIFBsdWdpbk1hbmFnZXIubW91bnQocGx1Z2luKTtcbiAgfSk7XG59O1xuLyoqXG4gKiBDcmVhdGUgc29ydGFibGUgaW5zdGFuY2VcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9ICBlbFxuICogQHBhcmFtIHtPYmplY3R9ICAgICAgW29wdGlvbnNdXG4gKi9cblxuXG5Tb3J0YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoZWwsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBTb3J0YWJsZShlbCwgb3B0aW9ucyk7XG59OyAvLyBFeHBvcnRcblxuXG5Tb3J0YWJsZS52ZXJzaW9uID0gdmVyc2lvbjtcblxudmFyIGF1dG9TY3JvbGxzID0gW10sXG4gICAgc2Nyb2xsRWwsXG4gICAgc2Nyb2xsUm9vdEVsLFxuICAgIHNjcm9sbGluZyA9IGZhbHNlLFxuICAgIGxhc3RBdXRvU2Nyb2xsWCxcbiAgICBsYXN0QXV0b1Njcm9sbFksXG4gICAgdG91Y2hFdnQkMSxcbiAgICBwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbDtcblxuZnVuY3Rpb24gQXV0b1Njcm9sbFBsdWdpbigpIHtcbiAgZnVuY3Rpb24gQXV0b1Njcm9sbCgpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBzY3JvbGw6IHRydWUsXG4gICAgICBzY3JvbGxTZW5zaXRpdml0eTogMzAsXG4gICAgICBzY3JvbGxTcGVlZDogMTAsXG4gICAgICBidWJibGVTY3JvbGw6IHRydWVcbiAgICB9OyAvLyBCaW5kIGFsbCBwcml2YXRlIG1ldGhvZHNcblxuICAgIGZvciAodmFyIGZuIGluIHRoaXMpIHtcbiAgICAgIGlmIChmbi5jaGFyQXQoMCkgPT09ICdfJyAmJiB0eXBlb2YgdGhpc1tmbl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpc1tmbl0gPSB0aGlzW2ZuXS5iaW5kKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEF1dG9TY3JvbGwucHJvdG90eXBlID0ge1xuICAgIGRyYWdTdGFydGVkOiBmdW5jdGlvbiBkcmFnU3RhcnRlZChfcmVmKSB7XG4gICAgICB2YXIgb3JpZ2luYWxFdmVudCA9IF9yZWYub3JpZ2luYWxFdmVudDtcblxuICAgICAgaWYgKHRoaXMuc29ydGFibGUubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAnZHJhZ292ZXInLCB0aGlzLl9oYW5kbGVBdXRvU2Nyb2xsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLnNvcnRhYmxlLm9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICAgICAgICBvbihkb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgfSBlbHNlIGlmIChvcmlnaW5hbEV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgICBvbihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb24oZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkcmFnT3ZlckNvbXBsZXRlZDogZnVuY3Rpb24gZHJhZ092ZXJDb21wbGV0ZWQoX3JlZjIpIHtcbiAgICAgIHZhciBvcmlnaW5hbEV2ZW50ID0gX3JlZjIub3JpZ2luYWxFdmVudDtcblxuICAgICAgLy8gRm9yIHdoZW4gYnViYmxpbmcgaXMgY2FuY2VsZWQgYW5kIHVzaW5nIGZhbGxiYWNrIChmYWxsYmFjayAndG91Y2htb3ZlJyBhbHdheXMgcmVhY2hlZClcbiAgICAgIGlmICghdGhpcy5zb3J0YWJsZS5vcHRpb25zLmRyYWdPdmVyQnViYmxlICYmICFvcmlnaW5hbEV2ZW50LnJvb3RFbCkge1xuICAgICAgICB0aGlzLl9oYW5kbGVBdXRvU2Nyb2xsKG9yaWdpbmFsRXZlbnQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZHJvcDogZnVuY3Rpb24gZHJvcCgpIHtcbiAgICAgIGlmICh0aGlzLnNvcnRhYmxlLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICBvZmYoZG9jdW1lbnQsICdkcmFnb3ZlcicsIHRoaXMuX2hhbmRsZUF1dG9TY3JvbGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2ZmKGRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgICBvZmYoZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgICBvZmYoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgfVxuXG4gICAgICBjbGVhclBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsKCk7XG4gICAgICBjbGVhckF1dG9TY3JvbGxzKCk7XG4gICAgICBjYW5jZWxUaHJvdHRsZSgpO1xuICAgIH0sXG4gICAgbnVsbGluZzogZnVuY3Rpb24gbnVsbGluZygpIHtcbiAgICAgIHRvdWNoRXZ0JDEgPSBzY3JvbGxSb290RWwgPSBzY3JvbGxFbCA9IHNjcm9sbGluZyA9IHBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsID0gbGFzdEF1dG9TY3JvbGxYID0gbGFzdEF1dG9TY3JvbGxZID0gbnVsbDtcbiAgICAgIGF1dG9TY3JvbGxzLmxlbmd0aCA9IDA7XG4gICAgfSxcbiAgICBfaGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsOiBmdW5jdGlvbiBfaGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKGV2dCkge1xuICAgICAgdGhpcy5faGFuZGxlQXV0b1Njcm9sbChldnQsIHRydWUpO1xuICAgIH0sXG4gICAgX2hhbmRsZUF1dG9TY3JvbGw6IGZ1bmN0aW9uIF9oYW5kbGVBdXRvU2Nyb2xsKGV2dCwgZmFsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciB4ID0gZXZ0LmNsaWVudFgsXG4gICAgICAgICAgeSA9IGV2dC5jbGllbnRZLFxuICAgICAgICAgIGVsZW0gPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHgsIHkpO1xuICAgICAgdG91Y2hFdnQkMSA9IGV2dDsgLy8gSUUgZG9lcyBub3Qgc2VlbSB0byBoYXZlIG5hdGl2ZSBhdXRvc2Nyb2xsLFxuICAgICAgLy8gRWRnZSdzIGF1dG9zY3JvbGwgc2VlbXMgdG9vIGNvbmRpdGlvbmFsLFxuICAgICAgLy8gTUFDT1MgU2FmYXJpIGRvZXMgbm90IGhhdmUgYXV0b3Njcm9sbCxcbiAgICAgIC8vIEZpcmVmb3ggYW5kIENocm9tZSBhcmUgZ29vZFxuXG4gICAgICBpZiAoZmFsbGJhY2sgfHwgRWRnZSB8fCBJRTExT3JMZXNzIHx8IFNhZmFyaSkge1xuICAgICAgICBhdXRvU2Nyb2xsKGV2dCwgdGhpcy5vcHRpb25zLCBlbGVtLCBmYWxsYmFjayk7IC8vIExpc3RlbmVyIGZvciBwb2ludGVyIGVsZW1lbnQgY2hhbmdlXG5cbiAgICAgICAgdmFyIG9nRWxlbVNjcm9sbGVyID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWxlbSwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKHNjcm9sbGluZyAmJiAoIXBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsIHx8IHggIT09IGxhc3RBdXRvU2Nyb2xsWCB8fCB5ICE9PSBsYXN0QXV0b1Njcm9sbFkpKSB7XG4gICAgICAgICAgcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgJiYgY2xlYXJQb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCgpOyAvLyBEZXRlY3QgZm9yIHBvaW50ZXIgZWxlbSBjaGFuZ2UsIGVtdWxhdGluZyBuYXRpdmUgRG5EIGJlaGF2aW91clxuXG4gICAgICAgICAgcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbmV3RWxlbSA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSksIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAobmV3RWxlbSAhPT0gb2dFbGVtU2Nyb2xsZXIpIHtcbiAgICAgICAgICAgICAgb2dFbGVtU2Nyb2xsZXIgPSBuZXdFbGVtO1xuICAgICAgICAgICAgICBjbGVhckF1dG9TY3JvbGxzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF1dG9TY3JvbGwoZXZ0LCBfdGhpcy5vcHRpb25zLCBuZXdFbGVtLCBmYWxsYmFjayk7XG4gICAgICAgICAgfSwgMTApO1xuICAgICAgICAgIGxhc3RBdXRvU2Nyb2xsWCA9IHg7XG4gICAgICAgICAgbGFzdEF1dG9TY3JvbGxZID0geTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaWYgRG5EIGlzIGVuYWJsZWQgKGFuZCBicm93c2VyIGhhcyBnb29kIGF1dG9zY3JvbGxpbmcpLCBmaXJzdCBhdXRvc2Nyb2xsIHdpbGwgYWxyZWFkeSBzY3JvbGwsIHNvIGdldCBwYXJlbnQgYXV0b3Njcm9sbCBvZiBmaXJzdCBhdXRvc2Nyb2xsXG4gICAgICAgIGlmICghdGhpcy5zb3J0YWJsZS5vcHRpb25zLmJ1YmJsZVNjcm9sbCB8fCBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbGVtLCB0cnVlKSA9PT0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpKSB7XG4gICAgICAgICAgY2xlYXJBdXRvU2Nyb2xscygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGF1dG9TY3JvbGwoZXZ0LCB0aGlzLm9wdGlvbnMsIGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGVsZW0sIGZhbHNlKSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzKEF1dG9TY3JvbGwsIHtcbiAgICBwbHVnaW5OYW1lOiAnc2Nyb2xsJyxcbiAgICBpbml0aWFsaXplQnlEZWZhdWx0OiB0cnVlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjbGVhckF1dG9TY3JvbGxzKCkge1xuICBhdXRvU2Nyb2xscy5mb3JFYWNoKGZ1bmN0aW9uIChhdXRvU2Nyb2xsKSB7XG4gICAgY2xlYXJJbnRlcnZhbChhdXRvU2Nyb2xsLnBpZCk7XG4gIH0pO1xuICBhdXRvU2Nyb2xscyA9IFtdO1xufVxuXG5mdW5jdGlvbiBjbGVhclBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsKCkge1xuICBjbGVhckludGVydmFsKHBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsKTtcbn1cblxudmFyIGF1dG9TY3JvbGwgPSB0aHJvdHRsZShmdW5jdGlvbiAoZXZ0LCBvcHRpb25zLCByb290RWwsIGlzRmFsbGJhY2spIHtcbiAgLy8gQnVnOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01MDU1MjFcbiAgaWYgKCFvcHRpb25zLnNjcm9sbCkgcmV0dXJuO1xuICB2YXIgc2VucyA9IG9wdGlvbnMuc2Nyb2xsU2Vuc2l0aXZpdHksXG4gICAgICBzcGVlZCA9IG9wdGlvbnMuc2Nyb2xsU3BlZWQsXG4gICAgICB3aW5TY3JvbGxlciA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgdmFyIHNjcm9sbFRoaXNJbnN0YW5jZSA9IGZhbHNlLFxuICAgICAgc2Nyb2xsQ3VzdG9tRm47IC8vIE5ldyBzY3JvbGwgcm9vdCwgc2V0IHNjcm9sbEVsXG5cbiAgaWYgKHNjcm9sbFJvb3RFbCAhPT0gcm9vdEVsKSB7XG4gICAgc2Nyb2xsUm9vdEVsID0gcm9vdEVsO1xuICAgIGNsZWFyQXV0b1Njcm9sbHMoKTtcbiAgICBzY3JvbGxFbCA9IG9wdGlvbnMuc2Nyb2xsO1xuICAgIHNjcm9sbEN1c3RvbUZuID0gb3B0aW9ucy5zY3JvbGxGbjtcblxuICAgIGlmIChzY3JvbGxFbCA9PT0gdHJ1ZSkge1xuICAgICAgc2Nyb2xsRWwgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChyb290RWwsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsYXllcnNPdXQgPSAwO1xuICB2YXIgY3VycmVudFBhcmVudCA9IHNjcm9sbEVsO1xuXG4gIGRvIHtcbiAgICB2YXIgZWwgPSBjdXJyZW50UGFyZW50LFxuICAgICAgICByZWN0ID0gZ2V0UmVjdChlbCksXG4gICAgICAgIHRvcCA9IHJlY3QudG9wLFxuICAgICAgICBib3R0b20gPSByZWN0LmJvdHRvbSxcbiAgICAgICAgbGVmdCA9IHJlY3QubGVmdCxcbiAgICAgICAgcmlnaHQgPSByZWN0LnJpZ2h0LFxuICAgICAgICB3aWR0aCA9IHJlY3Qud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IHJlY3QuaGVpZ2h0LFxuICAgICAgICBjYW5TY3JvbGxYID0gdm9pZCAwLFxuICAgICAgICBjYW5TY3JvbGxZID0gdm9pZCAwLFxuICAgICAgICBzY3JvbGxXaWR0aCA9IGVsLnNjcm9sbFdpZHRoLFxuICAgICAgICBzY3JvbGxIZWlnaHQgPSBlbC5zY3JvbGxIZWlnaHQsXG4gICAgICAgIGVsQ1NTID0gY3NzKGVsKSxcbiAgICAgICAgc2Nyb2xsUG9zWCA9IGVsLnNjcm9sbExlZnQsXG4gICAgICAgIHNjcm9sbFBvc1kgPSBlbC5zY3JvbGxUb3A7XG5cbiAgICBpZiAoZWwgPT09IHdpblNjcm9sbGVyKSB7XG4gICAgICBjYW5TY3JvbGxYID0gd2lkdGggPCBzY3JvbGxXaWR0aCAmJiAoZWxDU1Mub3ZlcmZsb3dYID09PSAnYXV0bycgfHwgZWxDU1Mub3ZlcmZsb3dYID09PSAnc2Nyb2xsJyB8fCBlbENTUy5vdmVyZmxvd1ggPT09ICd2aXNpYmxlJyk7XG4gICAgICBjYW5TY3JvbGxZID0gaGVpZ2h0IDwgc2Nyb2xsSGVpZ2h0ICYmIChlbENTUy5vdmVyZmxvd1kgPT09ICdhdXRvJyB8fCBlbENTUy5vdmVyZmxvd1kgPT09ICdzY3JvbGwnIHx8IGVsQ1NTLm92ZXJmbG93WSA9PT0gJ3Zpc2libGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FuU2Nyb2xsWCA9IHdpZHRoIDwgc2Nyb2xsV2lkdGggJiYgKGVsQ1NTLm92ZXJmbG93WCA9PT0gJ2F1dG8nIHx8IGVsQ1NTLm92ZXJmbG93WCA9PT0gJ3Njcm9sbCcpO1xuICAgICAgY2FuU2Nyb2xsWSA9IGhlaWdodCA8IHNjcm9sbEhlaWdodCAmJiAoZWxDU1Mub3ZlcmZsb3dZID09PSAnYXV0bycgfHwgZWxDU1Mub3ZlcmZsb3dZID09PSAnc2Nyb2xsJyk7XG4gICAgfVxuXG4gICAgdmFyIHZ4ID0gY2FuU2Nyb2xsWCAmJiAoTWF0aC5hYnMocmlnaHQgLSBldnQuY2xpZW50WCkgPD0gc2VucyAmJiBzY3JvbGxQb3NYICsgd2lkdGggPCBzY3JvbGxXaWR0aCkgLSAoTWF0aC5hYnMobGVmdCAtIGV2dC5jbGllbnRYKSA8PSBzZW5zICYmICEhc2Nyb2xsUG9zWCk7XG4gICAgdmFyIHZ5ID0gY2FuU2Nyb2xsWSAmJiAoTWF0aC5hYnMoYm90dG9tIC0gZXZ0LmNsaWVudFkpIDw9IHNlbnMgJiYgc2Nyb2xsUG9zWSArIGhlaWdodCA8IHNjcm9sbEhlaWdodCkgLSAoTWF0aC5hYnModG9wIC0gZXZ0LmNsaWVudFkpIDw9IHNlbnMgJiYgISFzY3JvbGxQb3NZKTtcblxuICAgIGlmICghYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gbGF5ZXJzT3V0OyBpKyspIHtcbiAgICAgICAgaWYgKCFhdXRvU2Nyb2xsc1tpXSkge1xuICAgICAgICAgIGF1dG9TY3JvbGxzW2ldID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS52eCAhPSB2eCB8fCBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnZ5ICE9IHZ5IHx8IGF1dG9TY3JvbGxzW2xheWVyc091dF0uZWwgIT09IGVsKSB7XG4gICAgICBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLmVsID0gZWw7XG4gICAgICBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnZ4ID0gdng7XG4gICAgICBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnZ5ID0gdnk7XG4gICAgICBjbGVhckludGVydmFsKGF1dG9TY3JvbGxzW2xheWVyc091dF0ucGlkKTtcblxuICAgICAgaWYgKHZ4ICE9IDAgfHwgdnkgIT0gMCkge1xuICAgICAgICBzY3JvbGxUaGlzSW5zdGFuY2UgPSB0cnVlO1xuICAgICAgICAvKiBqc2hpbnQgbG9vcGZ1bmM6dHJ1ZSAqL1xuXG4gICAgICAgIGF1dG9TY3JvbGxzW2xheWVyc091dF0ucGlkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIGVtdWxhdGUgZHJhZyBvdmVyIGR1cmluZyBhdXRvc2Nyb2xsIChmYWxsYmFjayksIGVtdWxhdGluZyBuYXRpdmUgRG5EIGJlaGF2aW91clxuICAgICAgICAgIGlmIChpc0ZhbGxiYWNrICYmIHRoaXMubGF5ZXIgPT09IDApIHtcbiAgICAgICAgICAgIFNvcnRhYmxlLmFjdGl2ZS5fb25Ub3VjaE1vdmUodG91Y2hFdnQkMSk7IC8vIFRvIG1vdmUgZ2hvc3QgaWYgaXQgaXMgcG9zaXRpb25lZCBhYnNvbHV0ZWx5XG5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc2Nyb2xsT2Zmc2V0WSA9IGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLnZ5ID8gYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0udnkgKiBzcGVlZCA6IDA7XG4gICAgICAgICAgdmFyIHNjcm9sbE9mZnNldFggPSBhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS52eCA/IGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLnZ4ICogc3BlZWQgOiAwO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBzY3JvbGxDdXN0b21GbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgaWYgKHNjcm9sbEN1c3RvbUZuLmNhbGwoU29ydGFibGUuZHJhZ2dlZC5wYXJlbnROb2RlW2V4cGFuZG9dLCBzY3JvbGxPZmZzZXRYLCBzY3JvbGxPZmZzZXRZLCBldnQsIHRvdWNoRXZ0JDEsIGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLmVsKSAhPT0gJ2NvbnRpbnVlJykge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2Nyb2xsQnkoYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0uZWwsIHNjcm9sbE9mZnNldFgsIHNjcm9sbE9mZnNldFkpO1xuICAgICAgICB9LmJpbmQoe1xuICAgICAgICAgIGxheWVyOiBsYXllcnNPdXRcbiAgICAgICAgfSksIDI0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXllcnNPdXQrKztcbiAgfSB3aGlsZSAob3B0aW9ucy5idWJibGVTY3JvbGwgJiYgY3VycmVudFBhcmVudCAhPT0gd2luU2Nyb2xsZXIgJiYgKGN1cnJlbnRQYXJlbnQgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChjdXJyZW50UGFyZW50LCBmYWxzZSkpKTtcblxuICBzY3JvbGxpbmcgPSBzY3JvbGxUaGlzSW5zdGFuY2U7IC8vIGluIGNhc2UgYW5vdGhlciBmdW5jdGlvbiBjYXRjaGVzIHNjcm9sbGluZyBhcyBmYWxzZSBpbiBiZXR3ZWVuIHdoZW4gaXQgaXMgbm90XG59LCAzMCk7XG5cbnZhciBkcm9wID0gZnVuY3Rpb24gZHJvcChfcmVmKSB7XG4gIHZhciBvcmlnaW5hbEV2ZW50ID0gX3JlZi5vcmlnaW5hbEV2ZW50LFxuICAgICAgcHV0U29ydGFibGUgPSBfcmVmLnB1dFNvcnRhYmxlLFxuICAgICAgZHJhZ0VsID0gX3JlZi5kcmFnRWwsXG4gICAgICBhY3RpdmVTb3J0YWJsZSA9IF9yZWYuYWN0aXZlU29ydGFibGUsXG4gICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQgPSBfcmVmLmRpc3BhdGNoU29ydGFibGVFdmVudCxcbiAgICAgIGhpZGVHaG9zdEZvclRhcmdldCA9IF9yZWYuaGlkZUdob3N0Rm9yVGFyZ2V0LFxuICAgICAgdW5oaWRlR2hvc3RGb3JUYXJnZXQgPSBfcmVmLnVuaGlkZUdob3N0Rm9yVGFyZ2V0O1xuICB2YXIgdG9Tb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IGFjdGl2ZVNvcnRhYmxlO1xuICBoaWRlR2hvc3RGb3JUYXJnZXQoKTtcbiAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQob3JpZ2luYWxFdmVudC5jbGllbnRYLCBvcmlnaW5hbEV2ZW50LmNsaWVudFkpO1xuICB1bmhpZGVHaG9zdEZvclRhcmdldCgpO1xuXG4gIGlmICh0b1NvcnRhYmxlICYmICF0b1NvcnRhYmxlLmVsLmNvbnRhaW5zKHRhcmdldCkpIHtcbiAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQoJ3NwaWxsJyk7XG4gICAgdGhpcy5vblNwaWxsKGRyYWdFbCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFJldmVydCgpIHt9XG5cblJldmVydC5wcm90b3R5cGUgPSB7XG4gIHN0YXJ0SW5kZXg6IG51bGwsXG4gIGRyYWdTdGFydDogZnVuY3Rpb24gZHJhZ1N0YXJ0KF9yZWYyKSB7XG4gICAgdmFyIG9sZERyYWdnYWJsZUluZGV4ID0gX3JlZjIub2xkRHJhZ2dhYmxlSW5kZXg7XG4gICAgdGhpcy5zdGFydEluZGV4ID0gb2xkRHJhZ2dhYmxlSW5kZXg7XG4gIH0sXG4gIG9uU3BpbGw6IGZ1bmN0aW9uIG9uU3BpbGwoZHJhZ0VsKSB7XG4gICAgdGhpcy5zb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICB2YXIgbmV4dFNpYmxpbmcgPSBnZXRDaGlsZCh0aGlzLnNvcnRhYmxlLmVsLCB0aGlzLnN0YXJ0SW5kZXgsIHRoaXMuc29ydGFibGUub3B0aW9ucyk7XG5cbiAgICBpZiAobmV4dFNpYmxpbmcpIHtcbiAgICAgIHRoaXMuc29ydGFibGUuZWwuaW5zZXJ0QmVmb3JlKGRyYWdFbCwgbmV4dFNpYmxpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNvcnRhYmxlLmVsLmFwcGVuZENoaWxkKGRyYWdFbCk7XG4gICAgfVxuXG4gICAgdGhpcy5zb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gIH0sXG4gIGRyb3A6IGRyb3Bcbn07XG5cbl9leHRlbmRzKFJldmVydCwge1xuICBwbHVnaW5OYW1lOiAncmV2ZXJ0T25TcGlsbCdcbn0pO1xuXG5mdW5jdGlvbiBSZW1vdmUoKSB7fVxuXG5SZW1vdmUucHJvdG90eXBlID0ge1xuICBvblNwaWxsOiBmdW5jdGlvbiBvblNwaWxsKGRyYWdFbCkge1xuICAgIHRoaXMuc29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG4gICAgZHJhZ0VsLnBhcmVudE5vZGUgJiYgZHJhZ0VsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZHJhZ0VsKTtcbiAgICB0aGlzLnNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgfSxcbiAgZHJvcDogZHJvcFxufTtcblxuX2V4dGVuZHMoUmVtb3ZlLCB7XG4gIHBsdWdpbk5hbWU6ICdyZW1vdmVPblNwaWxsJ1xufSk7XG5cbnZhciBsYXN0U3dhcEVsO1xuXG5mdW5jdGlvbiBTd2FwUGx1Z2luKCkge1xuICBmdW5jdGlvbiBTd2FwKCkge1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIHN3YXBDbGFzczogJ3NvcnRhYmxlLXN3YXAtaGlnaGxpZ2h0J1xuICAgIH07XG4gIH1cblxuICBTd2FwLnByb3RvdHlwZSA9IHtcbiAgICBkcmFnU3RhcnQ6IGZ1bmN0aW9uIGRyYWdTdGFydChfcmVmKSB7XG4gICAgICB2YXIgZHJhZ0VsID0gX3JlZi5kcmFnRWw7XG4gICAgICBsYXN0U3dhcEVsID0gZHJhZ0VsO1xuICAgIH0sXG4gICAgZHJhZ092ZXJWYWxpZDogZnVuY3Rpb24gZHJhZ092ZXJWYWxpZChfcmVmMikge1xuICAgICAgdmFyIGNvbXBsZXRlZCA9IF9yZWYyLmNvbXBsZXRlZCxcbiAgICAgICAgICB0YXJnZXQgPSBfcmVmMi50YXJnZXQsXG4gICAgICAgICAgb25Nb3ZlID0gX3JlZjIub25Nb3ZlLFxuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlID0gX3JlZjIuYWN0aXZlU29ydGFibGUsXG4gICAgICAgICAgY2hhbmdlZCA9IF9yZWYyLmNoYW5nZWQ7XG4gICAgICBpZiAoIWFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuc3dhcCkgcmV0dXJuO1xuICAgICAgdmFyIGVsID0gdGhpcy5zb3J0YWJsZS5lbCxcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy5zb3J0YWJsZS5vcHRpb25zO1xuXG4gICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgdmFyIHByZXZTd2FwRWwgPSBsYXN0U3dhcEVsO1xuXG4gICAgICAgIGlmIChvbk1vdmUodGFyZ2V0KSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICB0b2dnbGVDbGFzcyh0YXJnZXQsIG9wdGlvbnMuc3dhcENsYXNzLCB0cnVlKTtcbiAgICAgICAgICBsYXN0U3dhcEVsID0gdGFyZ2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3RTd2FwRWwgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXZTd2FwRWwgJiYgcHJldlN3YXBFbCAhPT0gbGFzdFN3YXBFbCkge1xuICAgICAgICAgIHRvZ2dsZUNsYXNzKHByZXZTd2FwRWwsIG9wdGlvbnMuc3dhcENsYXNzLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hhbmdlZCgpO1xuICAgICAgcmV0dXJuIGNvbXBsZXRlZCh0cnVlKTtcbiAgICB9LFxuICAgIGRyb3A6IGZ1bmN0aW9uIGRyb3AoX3JlZjMpIHtcbiAgICAgIHZhciBhY3RpdmVTb3J0YWJsZSA9IF9yZWYzLmFjdGl2ZVNvcnRhYmxlLFxuICAgICAgICAgIHB1dFNvcnRhYmxlID0gX3JlZjMucHV0U29ydGFibGUsXG4gICAgICAgICAgZHJhZ0VsID0gX3JlZjMuZHJhZ0VsO1xuICAgICAgdmFyIHRvU29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCB0aGlzLnNvcnRhYmxlO1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLnNvcnRhYmxlLm9wdGlvbnM7XG4gICAgICBsYXN0U3dhcEVsICYmIHRvZ2dsZUNsYXNzKGxhc3RTd2FwRWwsIG9wdGlvbnMuc3dhcENsYXNzLCBmYWxzZSk7XG5cbiAgICAgIGlmIChsYXN0U3dhcEVsICYmIChvcHRpb25zLnN3YXAgfHwgcHV0U29ydGFibGUgJiYgcHV0U29ydGFibGUub3B0aW9ucy5zd2FwKSkge1xuICAgICAgICBpZiAoZHJhZ0VsICE9PSBsYXN0U3dhcEVsKSB7XG4gICAgICAgICAgdG9Tb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICAgICAgICBpZiAodG9Tb3J0YWJsZSAhPT0gYWN0aXZlU29ydGFibGUpIGFjdGl2ZVNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgICAgICAgIHN3YXBOb2RlcyhkcmFnRWwsIGxhc3RTd2FwRWwpO1xuICAgICAgICAgIHRvU29ydGFibGUuYW5pbWF0ZUFsbCgpO1xuICAgICAgICAgIGlmICh0b1NvcnRhYmxlICE9PSBhY3RpdmVTb3J0YWJsZSkgYWN0aXZlU29ydGFibGUuYW5pbWF0ZUFsbCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBudWxsaW5nOiBmdW5jdGlvbiBudWxsaW5nKCkge1xuICAgICAgbGFzdFN3YXBFbCA9IG51bGw7XG4gICAgfVxuICB9O1xuICByZXR1cm4gX2V4dGVuZHMoU3dhcCwge1xuICAgIHBsdWdpbk5hbWU6ICdzd2FwJyxcbiAgICBldmVudE9wdGlvbnM6IGZ1bmN0aW9uIGV2ZW50T3B0aW9ucygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN3YXBJdGVtOiBsYXN0U3dhcEVsXG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN3YXBOb2RlcyhuMSwgbjIpIHtcbiAgdmFyIHAxID0gbjEucGFyZW50Tm9kZSxcbiAgICAgIHAyID0gbjIucGFyZW50Tm9kZSxcbiAgICAgIGkxLFxuICAgICAgaTI7XG4gIGlmICghcDEgfHwgIXAyIHx8IHAxLmlzRXF1YWxOb2RlKG4yKSB8fCBwMi5pc0VxdWFsTm9kZShuMSkpIHJldHVybjtcbiAgaTEgPSBpbmRleChuMSk7XG4gIGkyID0gaW5kZXgobjIpO1xuXG4gIGlmIChwMS5pc0VxdWFsTm9kZShwMikgJiYgaTEgPCBpMikge1xuICAgIGkyKys7XG4gIH1cblxuICBwMS5pbnNlcnRCZWZvcmUobjIsIHAxLmNoaWxkcmVuW2kxXSk7XG4gIHAyLmluc2VydEJlZm9yZShuMSwgcDIuY2hpbGRyZW5baTJdKTtcbn1cblxudmFyIG11bHRpRHJhZ0VsZW1lbnRzID0gW10sXG4gICAgbXVsdGlEcmFnQ2xvbmVzID0gW10sXG4gICAgbGFzdE11bHRpRHJhZ1NlbGVjdCxcbiAgICAvLyBmb3Igc2VsZWN0aW9uIHdpdGggbW9kaWZpZXIga2V5IGRvd24gKFNISUZUKVxubXVsdGlEcmFnU29ydGFibGUsXG4gICAgaW5pdGlhbEZvbGRpbmcgPSBmYWxzZSxcbiAgICAvLyBJbml0aWFsIG11bHRpLWRyYWcgZm9sZCB3aGVuIGRyYWcgc3RhcnRlZFxuZm9sZGluZyA9IGZhbHNlLFxuICAgIC8vIEZvbGRpbmcgYW55IG90aGVyIHRpbWVcbmRyYWdTdGFydGVkID0gZmFsc2UsXG4gICAgZHJhZ0VsJDEsXG4gICAgY2xvbmVzRnJvbVJlY3QsXG4gICAgY2xvbmVzSGlkZGVuO1xuXG5mdW5jdGlvbiBNdWx0aURyYWdQbHVnaW4oKSB7XG4gIGZ1bmN0aW9uIE11bHRpRHJhZyhzb3J0YWJsZSkge1xuICAgIC8vIEJpbmQgYWxsIHByaXZhdGUgbWV0aG9kc1xuICAgIGZvciAodmFyIGZuIGluIHRoaXMpIHtcbiAgICAgIGlmIChmbi5jaGFyQXQoMCkgPT09ICdfJyAmJiB0eXBlb2YgdGhpc1tmbl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpc1tmbl0gPSB0aGlzW2ZuXS5iaW5kKHRoaXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzb3J0YWJsZS5vcHRpb25zLnN1cHBvcnRQb2ludGVyKSB7XG4gICAgICBvbihkb2N1bWVudCwgJ3BvaW50ZXJ1cCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb24oZG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgICAgb24oZG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTtcbiAgICB9XG5cbiAgICBvbihkb2N1bWVudCwgJ2tleWRvd24nLCB0aGlzLl9jaGVja0tleURvd24pO1xuICAgIG9uKGRvY3VtZW50LCAna2V5dXAnLCB0aGlzLl9jaGVja0tleVVwKTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBzZWxlY3RlZENsYXNzOiAnc29ydGFibGUtc2VsZWN0ZWQnLFxuICAgICAgbXVsdGlEcmFnS2V5OiBudWxsLFxuICAgICAgc2V0RGF0YTogZnVuY3Rpb24gc2V0RGF0YShkYXRhVHJhbnNmZXIsIGRyYWdFbCkge1xuICAgICAgICB2YXIgZGF0YSA9ICcnO1xuXG4gICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggJiYgbXVsdGlEcmFnU29ydGFibGUgPT09IHNvcnRhYmxlKSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCwgaSkge1xuICAgICAgICAgICAgZGF0YSArPSAoIWkgPyAnJyA6ICcsICcpICsgbXVsdGlEcmFnRWxlbWVudC50ZXh0Q29udGVudDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gZHJhZ0VsLnRleHRDb250ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVRyYW5zZmVyLnNldERhdGEoJ1RleHQnLCBkYXRhKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgTXVsdGlEcmFnLnByb3RvdHlwZSA9IHtcbiAgICBtdWx0aURyYWdLZXlEb3duOiBmYWxzZSxcbiAgICBpc011bHRpRHJhZzogZmFsc2UsXG4gICAgZGVsYXlTdGFydEdsb2JhbDogZnVuY3Rpb24gZGVsYXlTdGFydEdsb2JhbChfcmVmKSB7XG4gICAgICB2YXIgZHJhZ2dlZCA9IF9yZWYuZHJhZ0VsO1xuICAgICAgZHJhZ0VsJDEgPSBkcmFnZ2VkO1xuICAgIH0sXG4gICAgZGVsYXlFbmRlZDogZnVuY3Rpb24gZGVsYXlFbmRlZCgpIHtcbiAgICAgIHRoaXMuaXNNdWx0aURyYWcgPSB+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihkcmFnRWwkMSk7XG4gICAgfSxcbiAgICBzZXR1cENsb25lOiBmdW5jdGlvbiBzZXR1cENsb25lKF9yZWYyKSB7XG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmMi5zb3J0YWJsZTtcbiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZykgcmV0dXJuO1xuXG4gICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG11bHRpRHJhZ0Nsb25lcy5wdXNoKGNsb25lKG11bHRpRHJhZ0VsZW1lbnRzW19pXSkpO1xuICAgICAgICBtdWx0aURyYWdDbG9uZXNbX2ldLnNvcnRhYmxlSW5kZXggPSBtdWx0aURyYWdFbGVtZW50c1tfaV0uc29ydGFibGVJbmRleDtcbiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzW19pXS5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzW19pXS5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICcnO1xuICAgICAgICB0b2dnbGVDbGFzcyhtdWx0aURyYWdDbG9uZXNbX2ldLCBzb3J0YWJsZS5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHNbX2ldID09PSBkcmFnRWwkMSAmJiB0b2dnbGVDbGFzcyhtdWx0aURyYWdDbG9uZXNbX2ldLCBzb3J0YWJsZS5vcHRpb25zLmNob3NlbkNsYXNzLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIHNvcnRhYmxlLl9oaWRlQ2xvbmUoKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoX3JlZjMpIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWYzLnNvcnRhYmxlLFxuICAgICAgICAgIHJvb3RFbCA9IF9yZWYzLnJvb3RFbCxcbiAgICAgICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQgPSBfcmVmMy5kaXNwYXRjaFNvcnRhYmxlRXZlbnQ7XG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjtcblxuICAgICAgaWYgKCFzb3J0YWJsZS5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlKSB7XG4gICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggJiYgbXVsdGlEcmFnU29ydGFibGUgPT09IHNvcnRhYmxlKSB7XG4gICAgICAgICAgaW5zZXJ0TXVsdGlEcmFnQ2xvbmVzKHRydWUsIHJvb3RFbCk7XG4gICAgICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KCdjbG9uZScpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzaG93Q2xvbmU6IGZ1bmN0aW9uIHNob3dDbG9uZShfcmVmNCkge1xuICAgICAgdmFyIGNsb25lTm93U2hvd24gPSBfcmVmNC5jbG9uZU5vd1Nob3duLFxuICAgICAgICAgIHJvb3RFbCA9IF9yZWY0LnJvb3RFbDtcbiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZykgcmV0dXJuO1xuICAgICAgaW5zZXJ0TXVsdGlEcmFnQ2xvbmVzKGZhbHNlLCByb290RWwpO1xuICAgICAgbXVsdGlEcmFnQ2xvbmVzLmZvckVhY2goZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICAgIGNzcyhjbG9uZSwgJ2Rpc3BsYXknLCAnJyk7XG4gICAgICB9KTtcbiAgICAgIGNsb25lTm93U2hvd24oKTtcbiAgICAgIGNsb25lc0hpZGRlbiA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBoaWRlQ2xvbmU6IGZ1bmN0aW9uIGhpZGVDbG9uZShfcmVmNSkge1xuICAgICAgdmFyIHNvcnRhYmxlID0gX3JlZjUuc29ydGFibGUsXG4gICAgICAgICAgY2xvbmVOb3dIaWRkZW4gPSBfcmVmNS5jbG9uZU5vd0hpZGRlbjtcbiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZykgcmV0dXJuO1xuICAgICAgbXVsdGlEcmFnQ2xvbmVzLmZvckVhY2goZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICAgIGNzcyhjbG9uZSwgJ2Rpc3BsYXknLCAnbm9uZScpO1xuXG4gICAgICAgIGlmIChzb3J0YWJsZS5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlICYmIGNsb25lLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBjbG9uZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjbG9uZU5vd0hpZGRlbigpO1xuICAgICAgY2xvbmVzSGlkZGVuID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgZHJhZ1N0YXJ0R2xvYmFsOiBmdW5jdGlvbiBkcmFnU3RhcnRHbG9iYWwoX3JlZjYpIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWY2LnNvcnRhYmxlO1xuXG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcgJiYgbXVsdGlEcmFnU29ydGFibGUpIHtcbiAgICAgICAgbXVsdGlEcmFnU29ydGFibGUubXVsdGlEcmFnLl9kZXNlbGVjdE11bHRpRHJhZygpO1xuICAgICAgfVxuXG4gICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnQuc29ydGFibGVJbmRleCA9IGluZGV4KG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgfSk7IC8vIFNvcnQgbXVsdGktZHJhZyBlbGVtZW50c1xuXG4gICAgICBtdWx0aURyYWdFbGVtZW50cyA9IG11bHRpRHJhZ0VsZW1lbnRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEuc29ydGFibGVJbmRleCAtIGIuc29ydGFibGVJbmRleDtcbiAgICAgIH0pO1xuICAgICAgZHJhZ1N0YXJ0ZWQgPSB0cnVlO1xuICAgIH0sXG4gICAgZHJhZ1N0YXJ0ZWQ6IGZ1bmN0aW9uIGRyYWdTdGFydGVkKF9yZWY3KSB7XG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmNy5zb3J0YWJsZTtcbiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZykgcmV0dXJuO1xuXG4gICAgICBpZiAoc29ydGFibGUub3B0aW9ucy5zb3J0KSB7XG4gICAgICAgIC8vIENhcHR1cmUgcmVjdHMsXG4gICAgICAgIC8vIGhpZGUgbXVsdGkgZHJhZyBlbGVtZW50cyAoYnkgcG9zaXRpb25pbmcgdGhlbSBhYnNvbHV0ZSksXG4gICAgICAgIC8vIHNldCBtdWx0aSBkcmFnIGVsZW1lbnRzIHJlY3RzIHRvIGRyYWdSZWN0LFxuICAgICAgICAvLyBzaG93IG11bHRpIGRyYWcgZWxlbWVudHMsXG4gICAgICAgIC8vIGFuaW1hdGUgdG8gcmVjdHMsXG4gICAgICAgIC8vIHVuc2V0IHJlY3RzICYgcmVtb3ZlIGZyb20gRE9NXG4gICAgICAgIHNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuXG4gICAgICAgIGlmIChzb3J0YWJsZS5vcHRpb25zLmFuaW1hdGlvbikge1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50ID09PSBkcmFnRWwkMSkgcmV0dXJuO1xuICAgICAgICAgICAgY3NzKG11bHRpRHJhZ0VsZW1lbnQsICdwb3NpdGlvbicsICdhYnNvbHV0ZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBkcmFnUmVjdCA9IGdldFJlY3QoZHJhZ0VsJDEsIGZhbHNlLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCA9PT0gZHJhZ0VsJDEpIHJldHVybjtcbiAgICAgICAgICAgIHNldFJlY3QobXVsdGlEcmFnRWxlbWVudCwgZHJhZ1JlY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGZvbGRpbmcgPSB0cnVlO1xuICAgICAgICAgIGluaXRpYWxGb2xkaW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzb3J0YWJsZS5hbmltYXRlQWxsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9sZGluZyA9IGZhbHNlO1xuICAgICAgICBpbml0aWFsRm9sZGluZyA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChzb3J0YWJsZS5vcHRpb25zLmFuaW1hdGlvbikge1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHVuc2V0UmVjdChtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSAvLyBSZW1vdmUgYWxsIGF1eGlsaWFyeSBtdWx0aWRyYWcgaXRlbXMgZnJvbSBlbCwgaWYgc29ydGluZyBlbmFibGVkXG5cblxuICAgICAgICBpZiAoc29ydGFibGUub3B0aW9ucy5zb3J0KSB7XG4gICAgICAgICAgcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBkcmFnT3ZlcjogZnVuY3Rpb24gZHJhZ092ZXIoX3JlZjgpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBfcmVmOC50YXJnZXQsXG4gICAgICAgICAgY29tcGxldGVkID0gX3JlZjguY29tcGxldGVkO1xuXG4gICAgICBpZiAoZm9sZGluZyAmJiB+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZih0YXJnZXQpKSB7XG4gICAgICAgIHJldHVybiBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmV2ZXJ0OiBmdW5jdGlvbiByZXZlcnQoX3JlZjkpIHtcbiAgICAgIHZhciBmcm9tU29ydGFibGUgPSBfcmVmOS5mcm9tU29ydGFibGUsXG4gICAgICAgICAgcm9vdEVsID0gX3JlZjkucm9vdEVsLFxuICAgICAgICAgIHNvcnRhYmxlID0gX3JlZjkuc29ydGFibGUsXG4gICAgICAgICAgZHJhZ1JlY3QgPSBfcmVmOS5kcmFnUmVjdDtcblxuICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgLy8gU2V0dXAgdW5mb2xkIGFuaW1hdGlvblxuICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgc29ydGFibGUuYWRkQW5pbWF0aW9uU3RhdGUoe1xuICAgICAgICAgICAgdGFyZ2V0OiBtdWx0aURyYWdFbGVtZW50LFxuICAgICAgICAgICAgcmVjdDogZm9sZGluZyA/IGdldFJlY3QobXVsdGlEcmFnRWxlbWVudCkgOiBkcmFnUmVjdFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHVuc2V0UmVjdChtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50LmZyb21SZWN0ID0gZHJhZ1JlY3Q7XG4gICAgICAgICAgZnJvbVNvcnRhYmxlLnJlbW92ZUFuaW1hdGlvblN0YXRlKG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgZm9sZGluZyA9IGZhbHNlO1xuICAgICAgICBpbnNlcnRNdWx0aURyYWdFbGVtZW50cyghc29ydGFibGUub3B0aW9ucy5yZW1vdmVDbG9uZU9uSGlkZSwgcm9vdEVsKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyYWdPdmVyQ29tcGxldGVkOiBmdW5jdGlvbiBkcmFnT3ZlckNvbXBsZXRlZChfcmVmMTApIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWYxMC5zb3J0YWJsZSxcbiAgICAgICAgICBpc093bmVyID0gX3JlZjEwLmlzT3duZXIsXG4gICAgICAgICAgaW5zZXJ0aW9uID0gX3JlZjEwLmluc2VydGlvbixcbiAgICAgICAgICBhY3RpdmVTb3J0YWJsZSA9IF9yZWYxMC5hY3RpdmVTb3J0YWJsZSxcbiAgICAgICAgICBwYXJlbnRFbCA9IF9yZWYxMC5wYXJlbnRFbCxcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYxMC5wdXRTb3J0YWJsZTtcbiAgICAgIHZhciBvcHRpb25zID0gc29ydGFibGUub3B0aW9ucztcblxuICAgICAgaWYgKGluc2VydGlvbikge1xuICAgICAgICAvLyBDbG9uZXMgbXVzdCBiZSBoaWRkZW4gYmVmb3JlIGZvbGRpbmcgYW5pbWF0aW9uIHRvIGNhcHR1cmUgZHJhZ1JlY3RBYnNvbHV0ZSBwcm9wZXJseVxuICAgICAgICBpZiAoaXNPd25lcikge1xuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLl9oaWRlQ2xvbmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluaXRpYWxGb2xkaW5nID0gZmFsc2U7IC8vIElmIGxlYXZpbmcgc29ydDpmYWxzZSByb290LCBvciBhbHJlYWR5IGZvbGRpbmcgLSBGb2xkIHRvIG5ldyBsb2NhdGlvblxuXG4gICAgICAgIGlmIChvcHRpb25zLmFuaW1hdGlvbiAmJiBtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggPiAxICYmIChmb2xkaW5nIHx8ICFpc093bmVyICYmICFhY3RpdmVTb3J0YWJsZS5vcHRpb25zLnNvcnQgJiYgIXB1dFNvcnRhYmxlKSkge1xuICAgICAgICAgIC8vIEZvbGQ6IFNldCBhbGwgbXVsdGkgZHJhZyBlbGVtZW50cydzIHJlY3RzIHRvIGRyYWdFbCdzIHJlY3Qgd2hlbiBtdWx0aS1kcmFnIGVsZW1lbnRzIGFyZSBpbnZpc2libGVcbiAgICAgICAgICB2YXIgZHJhZ1JlY3RBYnNvbHV0ZSA9IGdldFJlY3QoZHJhZ0VsJDEsIGZhbHNlLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCA9PT0gZHJhZ0VsJDEpIHJldHVybjtcbiAgICAgICAgICAgIHNldFJlY3QobXVsdGlEcmFnRWxlbWVudCwgZHJhZ1JlY3RBYnNvbHV0ZSk7IC8vIE1vdmUgZWxlbWVudChzKSB0byBlbmQgb2YgcGFyZW50RWwgc28gdGhhdCBpdCBkb2VzIG5vdCBpbnRlcmZlcmUgd2l0aCBtdWx0aS1kcmFnIGNsb25lcyBpbnNlcnRpb24gaWYgdGhleSBhcmUgaW5zZXJ0ZWRcbiAgICAgICAgICAgIC8vIHdoaWxlIGZvbGRpbmcsIGFuZCBzbyB0aGF0IHdlIGNhbiBjYXB0dXJlIHRoZW0gYWdhaW4gYmVjYXVzZSBvbGQgc29ydGFibGUgd2lsbCBubyBsb25nZXIgYmUgZnJvbVNvcnRhYmxlXG5cbiAgICAgICAgICAgIHBhcmVudEVsLmFwcGVuZENoaWxkKG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGZvbGRpbmcgPSB0cnVlO1xuICAgICAgICB9IC8vIENsb25lcyBtdXN0IGJlIHNob3duIChhbmQgY2hlY2sgdG8gcmVtb3ZlIG11bHRpIGRyYWdzKSBhZnRlciBmb2xkaW5nIHdoZW4gaW50ZXJmZXJpbmcgbXVsdGlEcmFnRWxlbWVudHMgYXJlIG1vdmVkIG91dFxuXG5cbiAgICAgICAgaWYgKCFpc093bmVyKSB7XG4gICAgICAgICAgLy8gT25seSByZW1vdmUgaWYgbm90IGZvbGRpbmcgKGZvbGRpbmcgd2lsbCByZW1vdmUgdGhlbSBhbnl3YXlzKVxuICAgICAgICAgIGlmICghZm9sZGluZykge1xuICAgICAgICAgICAgcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdmFyIGNsb25lc0hpZGRlbkJlZm9yZSA9IGNsb25lc0hpZGRlbjtcblxuICAgICAgICAgICAgYWN0aXZlU29ydGFibGUuX3Nob3dDbG9uZShzb3J0YWJsZSk7IC8vIFVuZm9sZCBhbmltYXRpb24gZm9yIGNsb25lcyBpZiBzaG93aW5nIGZyb20gaGlkZGVuXG5cblxuICAgICAgICAgICAgaWYgKGFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuYW5pbWF0aW9uICYmICFjbG9uZXNIaWRkZW4gJiYgY2xvbmVzSGlkZGVuQmVmb3JlKSB7XG4gICAgICAgICAgICAgIG11bHRpRHJhZ0Nsb25lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLmFkZEFuaW1hdGlvblN0YXRlKHtcbiAgICAgICAgICAgICAgICAgIHRhcmdldDogY2xvbmUsXG4gICAgICAgICAgICAgICAgICByZWN0OiBjbG9uZXNGcm9tUmVjdFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNsb25lLmZyb21SZWN0ID0gY2xvbmVzRnJvbVJlY3Q7XG4gICAgICAgICAgICAgICAgY2xvbmUudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLl9zaG93Q2xvbmUoc29ydGFibGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZHJhZ092ZXJBbmltYXRpb25DYXB0dXJlOiBmdW5jdGlvbiBkcmFnT3ZlckFuaW1hdGlvbkNhcHR1cmUoX3JlZjExKSB7XG4gICAgICB2YXIgZHJhZ1JlY3QgPSBfcmVmMTEuZHJhZ1JlY3QsXG4gICAgICAgICAgaXNPd25lciA9IF9yZWYxMS5pc093bmVyLFxuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlID0gX3JlZjExLmFjdGl2ZVNvcnRhYmxlO1xuICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICBtdWx0aURyYWdFbGVtZW50LnRoaXNBbmltYXRpb25EdXJhdGlvbiA9IG51bGw7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuYW5pbWF0aW9uICYmICFpc093bmVyICYmIGFjdGl2ZVNvcnRhYmxlLm11bHRpRHJhZy5pc011bHRpRHJhZykge1xuICAgICAgICBjbG9uZXNGcm9tUmVjdCA9IF9leHRlbmRzKHt9LCBkcmFnUmVjdCk7XG4gICAgICAgIHZhciBkcmFnTWF0cml4ID0gbWF0cml4KGRyYWdFbCQxLCB0cnVlKTtcbiAgICAgICAgY2xvbmVzRnJvbVJlY3QudG9wIC09IGRyYWdNYXRyaXguZjtcbiAgICAgICAgY2xvbmVzRnJvbVJlY3QubGVmdCAtPSBkcmFnTWF0cml4LmU7XG4gICAgICB9XG4gICAgfSxcbiAgICBkcmFnT3ZlckFuaW1hdGlvbkNvbXBsZXRlOiBmdW5jdGlvbiBkcmFnT3ZlckFuaW1hdGlvbkNvbXBsZXRlKCkge1xuICAgICAgaWYgKGZvbGRpbmcpIHtcbiAgICAgICAgZm9sZGluZyA9IGZhbHNlO1xuICAgICAgICByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZHJvcDogZnVuY3Rpb24gZHJvcChfcmVmMTIpIHtcbiAgICAgIHZhciBldnQgPSBfcmVmMTIub3JpZ2luYWxFdmVudCxcbiAgICAgICAgICByb290RWwgPSBfcmVmMTIucm9vdEVsLFxuICAgICAgICAgIHBhcmVudEVsID0gX3JlZjEyLnBhcmVudEVsLFxuICAgICAgICAgIHNvcnRhYmxlID0gX3JlZjEyLnNvcnRhYmxlLFxuICAgICAgICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCA9IF9yZWYxMi5kaXNwYXRjaFNvcnRhYmxlRXZlbnQsXG4gICAgICAgICAgb2xkSW5kZXggPSBfcmVmMTIub2xkSW5kZXgsXG4gICAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmMTIucHV0U29ydGFibGU7XG4gICAgICB2YXIgdG9Tb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IHRoaXMuc29ydGFibGU7XG4gICAgICBpZiAoIWV2dCkgcmV0dXJuO1xuICAgICAgdmFyIG9wdGlvbnMgPSBzb3J0YWJsZS5vcHRpb25zLFxuICAgICAgICAgIGNoaWxkcmVuID0gcGFyZW50RWwuY2hpbGRyZW47IC8vIE11bHRpLWRyYWcgc2VsZWN0aW9uXG5cbiAgICAgIGlmICghZHJhZ1N0YXJ0ZWQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMubXVsdGlEcmFnS2V5ICYmICF0aGlzLm11bHRpRHJhZ0tleURvd24pIHtcbiAgICAgICAgICB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsJDEsIG9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgIX5tdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGRyYWdFbCQxKSk7XG5cbiAgICAgICAgaWYgKCF+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihkcmFnRWwkMSkpIHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5wdXNoKGRyYWdFbCQxKTtcbiAgICAgICAgICBkaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZSxcbiAgICAgICAgICAgIHJvb3RFbDogcm9vdEVsLFxuICAgICAgICAgICAgbmFtZTogJ3NlbGVjdCcsXG4gICAgICAgICAgICB0YXJnZXRFbDogZHJhZ0VsJDEsXG4gICAgICAgICAgICBvcmlnaW5hbEV2dDogZXZ0XG4gICAgICAgICAgfSk7IC8vIE1vZGlmaWVyIGFjdGl2YXRlZCwgc2VsZWN0IGZyb20gbGFzdCB0byBkcmFnRWxcblxuICAgICAgICAgIGlmICgoIW9wdGlvbnMubXVsdGlEcmFnS2V5IHx8IHRoaXMubXVsdGlEcmFnS2V5RG93bikgJiYgZXZ0LnNoaWZ0S2V5ICYmIGxhc3RNdWx0aURyYWdTZWxlY3QgJiYgc29ydGFibGUuZWwuY29udGFpbnMobGFzdE11bHRpRHJhZ1NlbGVjdCkpIHtcbiAgICAgICAgICAgIHZhciBsYXN0SW5kZXggPSBpbmRleChsYXN0TXVsdGlEcmFnU2VsZWN0KSxcbiAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXggPSBpbmRleChkcmFnRWwkMSk7XG5cbiAgICAgICAgICAgIGlmICh+bGFzdEluZGV4ICYmIH5jdXJyZW50SW5kZXggJiYgbGFzdEluZGV4ICE9PSBjdXJyZW50SW5kZXgpIHtcbiAgICAgICAgICAgICAgLy8gTXVzdCBpbmNsdWRlIGxhc3RNdWx0aURyYWdTZWxlY3QgKHNlbGVjdCBpdCksIGluIGNhc2UgbW9kaWZpZWQgc2VsZWN0aW9uIGZyb20gbm8gc2VsZWN0aW9uXG4gICAgICAgICAgICAgIC8vIChidXQgcHJldmlvdXMgc2VsZWN0aW9uIGV4aXN0ZWQpXG4gICAgICAgICAgICAgIHZhciBuLCBfaTI7XG5cbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA+IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgIF9pMiA9IGxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICBuID0gY3VycmVudEluZGV4O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9pMiA9IGN1cnJlbnRJbmRleDtcbiAgICAgICAgICAgICAgICBuID0gbGFzdEluZGV4ICsgMTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZvciAoOyBfaTIgPCBuOyBfaTIrKykge1xuICAgICAgICAgICAgICAgIGlmICh+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihjaGlsZHJlbltfaTJdKSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoY2hpbGRyZW5bX2kyXSwgb3B0aW9ucy5zZWxlY3RlZENsYXNzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5wdXNoKGNoaWxkcmVuW19pMl0pO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgc29ydGFibGU6IHNvcnRhYmxlLFxuICAgICAgICAgICAgICAgICAgcm9vdEVsOiByb290RWwsXG4gICAgICAgICAgICAgICAgICBuYW1lOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICAgICAgIHRhcmdldEVsOiBjaGlsZHJlbltfaTJdLFxuICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFdnQ6IGV2dFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxhc3RNdWx0aURyYWdTZWxlY3QgPSBkcmFnRWwkMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHRvU29ydGFibGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuc3BsaWNlKG11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZHJhZ0VsJDEpLCAxKTtcbiAgICAgICAgICBsYXN0TXVsdGlEcmFnU2VsZWN0ID0gbnVsbDtcbiAgICAgICAgICBkaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZSxcbiAgICAgICAgICAgIHJvb3RFbDogcm9vdEVsLFxuICAgICAgICAgICAgbmFtZTogJ2Rlc2VsZWN0JyxcbiAgICAgICAgICAgIHRhcmdldEVsOiBkcmFnRWwkMSxcbiAgICAgICAgICAgIG9yaWdpbmFsRXZ0OiBldnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBNdWx0aS1kcmFnIGRyb3BcblxuXG4gICAgICBpZiAoZHJhZ1N0YXJ0ZWQgJiYgdGhpcy5pc011bHRpRHJhZykge1xuICAgICAgICAvLyBEbyBub3QgXCJ1bmZvbGRcIiBhZnRlciBhcm91bmQgZHJhZ0VsIGlmIHJldmVydGVkXG4gICAgICAgIGlmICgocGFyZW50RWxbZXhwYW5kb10ub3B0aW9ucy5zb3J0IHx8IHBhcmVudEVsICE9PSByb290RWwpICYmIG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICB2YXIgZHJhZ1JlY3QgPSBnZXRSZWN0KGRyYWdFbCQxKSxcbiAgICAgICAgICAgICAgbXVsdGlEcmFnSW5kZXggPSBpbmRleChkcmFnRWwkMSwgJzpub3QoLicgKyB0aGlzLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcyArICcpJyk7XG4gICAgICAgICAgaWYgKCFpbml0aWFsRm9sZGluZyAmJiBvcHRpb25zLmFuaW1hdGlvbikgZHJhZ0VsJDEudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gbnVsbDtcbiAgICAgICAgICB0b1NvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuXG4gICAgICAgICAgaWYgKCFpbml0aWFsRm9sZGluZykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgIGRyYWdFbCQxLmZyb21SZWN0ID0gZHJhZ1JlY3Q7XG4gICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50LnRoaXNBbmltYXRpb25EdXJhdGlvbiA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCAhPT0gZHJhZ0VsJDEpIHtcbiAgICAgICAgICAgICAgICAgIHZhciByZWN0ID0gZm9sZGluZyA/IGdldFJlY3QobXVsdGlEcmFnRWxlbWVudCkgOiBkcmFnUmVjdDtcbiAgICAgICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQuZnJvbVJlY3QgPSByZWN0OyAvLyBQcmVwYXJlIHVuZm9sZCBhbmltYXRpb25cblxuICAgICAgICAgICAgICAgICAgdG9Tb3J0YWJsZS5hZGRBbmltYXRpb25TdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogbXVsdGlEcmFnRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgcmVjdDogcmVjdFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gLy8gTXVsdGkgZHJhZyBlbGVtZW50cyBhcmUgbm90IG5lY2Vzc2FyaWx5IHJlbW92ZWQgZnJvbSB0aGUgRE9NIG9uIGRyb3AsIHNvIHRvIHJlaW5zZXJ0XG4gICAgICAgICAgICAvLyBwcm9wZXJseSB0aGV5IG11c3QgYWxsIGJlIHJlbW92ZWRcblxuXG4gICAgICAgICAgICByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpO1xuICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5bbXVsdGlEcmFnSW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50RWwuaW5zZXJ0QmVmb3JlKG11bHRpRHJhZ0VsZW1lbnQsIGNoaWxkcmVuW211bHRpRHJhZ0luZGV4XSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBtdWx0aURyYWdJbmRleCsrO1xuICAgICAgICAgICAgfSk7IC8vIElmIGluaXRpYWwgZm9sZGluZyBpcyBkb25lLCB0aGUgZWxlbWVudHMgbWF5IGhhdmUgY2hhbmdlZCBwb3NpdGlvbiBiZWNhdXNlIHRoZXkgYXJlIG5vd1xuICAgICAgICAgICAgLy8gdW5mb2xkaW5nIGFyb3VuZCBkcmFnRWwsIGV2ZW4gdGhvdWdoIGRyYWdFbCBtYXkgbm90IGhhdmUgaGlzIGluZGV4IGNoYW5nZWQsIHNvIHVwZGF0ZSBldmVudFxuICAgICAgICAgICAgLy8gbXVzdCBiZSBmaXJlZCBoZXJlIGFzIFNvcnRhYmxlIHdpbGwgbm90LlxuXG4gICAgICAgICAgICBpZiAob2xkSW5kZXggPT09IGluZGV4KGRyYWdFbCQxKSkge1xuICAgICAgICAgICAgICB2YXIgdXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudC5zb3J0YWJsZUluZGV4ICE9PSBpbmRleChtdWx0aURyYWdFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgdXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGlmICh1cGRhdGUpIHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQoJ3VwZGF0ZScpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyBNdXN0IGJlIGRvbmUgYWZ0ZXIgY2FwdHVyaW5nIGluZGl2aWR1YWwgcmVjdHMgKHNjcm9sbCBiYXIpXG5cblxuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHVuc2V0UmVjdChtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0b1NvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG11bHRpRHJhZ1NvcnRhYmxlID0gdG9Tb3J0YWJsZTtcbiAgICAgIH0gLy8gUmVtb3ZlIGNsb25lcyBpZiBuZWNlc3NhcnlcblxuXG4gICAgICBpZiAocm9vdEVsID09PSBwYXJlbnRFbCB8fCBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSAhPT0gJ2Nsb25lJykge1xuICAgICAgICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgICBjbG9uZS5wYXJlbnROb2RlICYmIGNsb25lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG51bGxpbmdHbG9iYWw6IGZ1bmN0aW9uIG51bGxpbmdHbG9iYWwoKSB7XG4gICAgICB0aGlzLmlzTXVsdGlEcmFnID0gZHJhZ1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIG11bHRpRHJhZ0Nsb25lcy5sZW5ndGggPSAwO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKCk7XG5cbiAgICAgIG9mZihkb2N1bWVudCwgJ3BvaW50ZXJ1cCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICBvZmYoZG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ2tleWRvd24nLCB0aGlzLl9jaGVja0tleURvd24pO1xuICAgICAgb2ZmKGRvY3VtZW50LCAna2V5dXAnLCB0aGlzLl9jaGVja0tleVVwKTtcbiAgICB9LFxuICAgIF9kZXNlbGVjdE11bHRpRHJhZzogZnVuY3Rpb24gX2Rlc2VsZWN0TXVsdGlEcmFnKGV2dCkge1xuICAgICAgaWYgKGRyYWdTdGFydGVkKSByZXR1cm47IC8vIE9ubHkgZGVzZWxlY3QgaWYgc2VsZWN0aW9uIGlzIGluIHRoaXMgc29ydGFibGVcblxuICAgICAgaWYgKG11bHRpRHJhZ1NvcnRhYmxlICE9PSB0aGlzLnNvcnRhYmxlKSByZXR1cm47IC8vIE9ubHkgZGVzZWxlY3QgaWYgdGFyZ2V0IGlzIG5vdCBpdGVtIGluIHRoaXMgc29ydGFibGVcblxuICAgICAgaWYgKGV2dCAmJiBjbG9zZXN0KGV2dC50YXJnZXQsIHRoaXMuc29ydGFibGUub3B0aW9ucy5kcmFnZ2FibGUsIHRoaXMuc29ydGFibGUuZWwsIGZhbHNlKSkgcmV0dXJuOyAvLyBPbmx5IGRlc2VsZWN0IGlmIGxlZnQgY2xpY2tcblxuICAgICAgaWYgKGV2dCAmJiBldnQuYnV0dG9uICE9PSAwKSByZXR1cm47XG5cbiAgICAgIHdoaWxlIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGVsID0gbXVsdGlEcmFnRWxlbWVudHNbMF07XG4gICAgICAgIHRvZ2dsZUNsYXNzKGVsLCB0aGlzLnNvcnRhYmxlLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgZmFsc2UpO1xuICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5zaGlmdCgpO1xuICAgICAgICBkaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICBzb3J0YWJsZTogdGhpcy5zb3J0YWJsZSxcbiAgICAgICAgICByb290RWw6IHRoaXMuc29ydGFibGUuZWwsXG4gICAgICAgICAgbmFtZTogJ2Rlc2VsZWN0JyxcbiAgICAgICAgICB0YXJnZXRFbDogZWwsXG4gICAgICAgICAgb3JpZ2luYWxFdnQ6IGV2dFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIF9jaGVja0tleURvd246IGZ1bmN0aW9uIF9jaGVja0tleURvd24oZXZ0KSB7XG4gICAgICBpZiAoZXZ0LmtleSA9PT0gdGhpcy5zb3J0YWJsZS5vcHRpb25zLm11bHRpRHJhZ0tleSkge1xuICAgICAgICB0aGlzLm11bHRpRHJhZ0tleURvd24gPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgX2NoZWNrS2V5VXA6IGZ1bmN0aW9uIF9jaGVja0tleVVwKGV2dCkge1xuICAgICAgaWYgKGV2dC5rZXkgPT09IHRoaXMuc29ydGFibGUub3B0aW9ucy5tdWx0aURyYWdLZXkpIHtcbiAgICAgICAgdGhpcy5tdWx0aURyYWdLZXlEb3duID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gX2V4dGVuZHMoTXVsdGlEcmFnLCB7XG4gICAgLy8gU3RhdGljIG1ldGhvZHMgJiBwcm9wZXJ0aWVzXG4gICAgcGx1Z2luTmFtZTogJ211bHRpRHJhZycsXG4gICAgdXRpbHM6IHtcbiAgICAgIC8qKlxyXG4gICAgICAgKiBTZWxlY3RzIHRoZSBwcm92aWRlZCBtdWx0aS1kcmFnIGl0ZW1cclxuICAgICAgICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgIFRoZSBlbGVtZW50IHRvIGJlIHNlbGVjdGVkXHJcbiAgICAgICAqL1xuICAgICAgc2VsZWN0OiBmdW5jdGlvbiBzZWxlY3QoZWwpIHtcbiAgICAgICAgdmFyIHNvcnRhYmxlID0gZWwucGFyZW50Tm9kZVtleHBhbmRvXTtcbiAgICAgICAgaWYgKCFzb3J0YWJsZSB8fCAhc29ydGFibGUub3B0aW9ucy5tdWx0aURyYWcgfHwgfm11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZWwpKSByZXR1cm47XG5cbiAgICAgICAgaWYgKG11bHRpRHJhZ1NvcnRhYmxlICYmIG11bHRpRHJhZ1NvcnRhYmxlICE9PSBzb3J0YWJsZSkge1xuICAgICAgICAgIG11bHRpRHJhZ1NvcnRhYmxlLm11bHRpRHJhZy5fZGVzZWxlY3RNdWx0aURyYWcoKTtcblxuICAgICAgICAgIG11bHRpRHJhZ1NvcnRhYmxlID0gc29ydGFibGU7XG4gICAgICAgIH1cblxuICAgICAgICB0b2dnbGVDbGFzcyhlbCwgc29ydGFibGUub3B0aW9ucy5zZWxlY3RlZENsYXNzLCB0cnVlKTtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMucHVzaChlbCk7XG4gICAgICB9LFxuXG4gICAgICAvKipcclxuICAgICAgICogRGVzZWxlY3RzIHRoZSBwcm92aWRlZCBtdWx0aS1kcmFnIGl0ZW1cclxuICAgICAgICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgIFRoZSBlbGVtZW50IHRvIGJlIGRlc2VsZWN0ZWRcclxuICAgICAgICovXG4gICAgICBkZXNlbGVjdDogZnVuY3Rpb24gZGVzZWxlY3QoZWwpIHtcbiAgICAgICAgdmFyIHNvcnRhYmxlID0gZWwucGFyZW50Tm9kZVtleHBhbmRvXSxcbiAgICAgICAgICAgIGluZGV4ID0gbXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihlbCk7XG4gICAgICAgIGlmICghc29ydGFibGUgfHwgIXNvcnRhYmxlLm9wdGlvbnMubXVsdGlEcmFnIHx8ICF+aW5kZXgpIHJldHVybjtcbiAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHNvcnRhYmxlLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgZmFsc2UpO1xuICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXZlbnRPcHRpb25zOiBmdW5jdGlvbiBldmVudE9wdGlvbnMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgb2xkSW5kaWNpZXMgPSBbXSxcbiAgICAgICAgICBuZXdJbmRpY2llcyA9IFtdO1xuICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICBvbGRJbmRpY2llcy5wdXNoKHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50OiBtdWx0aURyYWdFbGVtZW50LFxuICAgICAgICAgIGluZGV4OiBtdWx0aURyYWdFbGVtZW50LnNvcnRhYmxlSW5kZXhcbiAgICAgICAgfSk7IC8vIG11bHRpRHJhZ0VsZW1lbnRzIHdpbGwgYWxyZWFkeSBiZSBzb3J0ZWQgaWYgZm9sZGluZ1xuXG4gICAgICAgIHZhciBuZXdJbmRleDtcblxuICAgICAgICBpZiAoZm9sZGluZyAmJiBtdWx0aURyYWdFbGVtZW50ICE9PSBkcmFnRWwkMSkge1xuICAgICAgICAgIG5ld0luZGV4ID0gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9sZGluZykge1xuICAgICAgICAgIG5ld0luZGV4ID0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCwgJzpub3QoLicgKyBfdGhpcy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MgKyAnKScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0luZGV4ID0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdJbmRpY2llcy5wdXNoKHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50OiBtdWx0aURyYWdFbGVtZW50LFxuICAgICAgICAgIGluZGV4OiBuZXdJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXRlbXM6IF90b0NvbnN1bWFibGVBcnJheShtdWx0aURyYWdFbGVtZW50cyksXG4gICAgICAgIGNsb25lczogW10uY29uY2F0KG11bHRpRHJhZ0Nsb25lcyksXG4gICAgICAgIG9sZEluZGljaWVzOiBvbGRJbmRpY2llcyxcbiAgICAgICAgbmV3SW5kaWNpZXM6IG5ld0luZGljaWVzXG4gICAgICB9O1xuICAgIH0sXG4gICAgb3B0aW9uTGlzdGVuZXJzOiB7XG4gICAgICBtdWx0aURyYWdLZXk6IGZ1bmN0aW9uIG11bHRpRHJhZ0tleShrZXkpIHtcbiAgICAgICAga2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ2N0cmwnKSB7XG4gICAgICAgICAga2V5ID0gJ0NvbnRyb2wnO1xuICAgICAgICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAga2V5ID0ga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cigxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gaW5zZXJ0TXVsdGlEcmFnRWxlbWVudHMoY2xvbmVzSW5zZXJ0ZWQsIHJvb3RFbCkge1xuICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgdmFyIHRhcmdldCA9IHJvb3RFbC5jaGlsZHJlblttdWx0aURyYWdFbGVtZW50LnNvcnRhYmxlSW5kZXggKyAoY2xvbmVzSW5zZXJ0ZWQgPyBOdW1iZXIoaSkgOiAwKV07XG5cbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICByb290RWwuaW5zZXJ0QmVmb3JlKG11bHRpRHJhZ0VsZW1lbnQsIHRhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChtdWx0aURyYWdFbGVtZW50KTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXHJcbiAqIEluc2VydCBtdWx0aS1kcmFnIGNsb25lc1xyXG4gKiBAcGFyYW0gIHtbQm9vbGVhbl19IGVsZW1lbnRzSW5zZXJ0ZWQgIFdoZXRoZXIgdGhlIG11bHRpLWRyYWcgZWxlbWVudHMgYXJlIGluc2VydGVkXHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSByb290RWxcclxuICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0TXVsdGlEcmFnQ2xvbmVzKGVsZW1lbnRzSW5zZXJ0ZWQsIHJvb3RFbCkge1xuICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICB2YXIgdGFyZ2V0ID0gcm9vdEVsLmNoaWxkcmVuW2Nsb25lLnNvcnRhYmxlSW5kZXggKyAoZWxlbWVudHNJbnNlcnRlZCA/IE51bWJlcihpKSA6IDApXTtcblxuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKSB7XG4gIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICBpZiAobXVsdGlEcmFnRWxlbWVudCA9PT0gZHJhZ0VsJDEpIHJldHVybjtcbiAgICBtdWx0aURyYWdFbGVtZW50LnBhcmVudE5vZGUgJiYgbXVsdGlEcmFnRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG11bHRpRHJhZ0VsZW1lbnQpO1xuICB9KTtcbn1cblxuU29ydGFibGUubW91bnQobmV3IEF1dG9TY3JvbGxQbHVnaW4oKSk7XG5Tb3J0YWJsZS5tb3VudChSZW1vdmUsIFJldmVydCk7XG5cbmV4cG9ydCBkZWZhdWx0IFNvcnRhYmxlO1xuZXhwb3J0IHsgTXVsdGlEcmFnUGx1Z2luIGFzIE11bHRpRHJhZywgU29ydGFibGUsIFN3YXBQbHVnaW4gYXMgU3dhcCB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==